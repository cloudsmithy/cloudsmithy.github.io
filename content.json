{"posts":[{"title":"佛•教化•屠杀","text":"东鸡冠山迷了路，误闯了田间的坟地。 以至于到了日俄监狱，那份恐惧仍旧没有消失。高高厚厚的城墙，勾起了几年前途经伪皇宫的回忆，如果说高城壁垒是为了防止犯人逃窜，那么皇宫岂不是帝王将相的牢狱？这样想着，愿生生世世莫生于帝王之家倒是一种悲哀的绝唱了。 事实上，穿过城墙，里面并没有想象中的庄严，本以为这里的冤气会压迫灵魂，让人窒息，事实上是，一路惊魂未定，却连一丝血腥气都未曾嗅到过。 监狱明显翻新过，若是复古风格，经历过枪林弹雨的山石和被抓破了的淋满殷红的墙壁才与它相称。角落里卧着的一口大钟倒是引人注意，介绍上说，这是日本帝国主义卑劣行径的体现，过去每天都有僧人到这里来超度，借以来消磨人们的反抗意志。看到这里我无意为日本开脱，若是余生充满痛苦，透过佛法来看世界倒是一个不错的选择。佛教从古印度传到中国，日本，最后成为世界三大宗教之一，自然是可以为大众消灾解祸的。这里仅仅表明立场，不做任何评价。 不过倒是想起了关于安倍的一则新闻，安倍夫妇通过初等教育渗透“爱国主义思想”，那么这些东西就像一种信仰，正在这些孩子们大脑中根深蒂固，那么与宗教，还有我们从小被培养的抗日情怀，其实都是同样一种意识形态。 整个监狱不大，猜测犯人不足一千，里面有很多过去工厂的牌坊，现在一些关闭，一些则摆放一些遗物供人们参观。大概以前犯人们就都在这里劳作。还有医务室，对于重症的病人，当然安安静静的等待他们死去。因为在这里最便宜的就是人命，人命是换取劳动果实的易耗品，当然也是供这里的人取乐的工具。把犯人双眼用黑布蒙上，让其跪在地板上，然后把脖子套进绳索，再把木板抽走，人就掉在了几米之下的木桶里，然后被几个同伴默默地抬起奔赴坟场，狱卒在后面举着短枪，准备随时扣下扳机。 复原图倒是有几具骷髅，混着朽木和尘土。当然我十年前在黑龙江省博物馆便见过真实的骨架，除了不理解为什么手心那里是凹下去的，其余并没有什么意外。小时候也埋葬过燕子，所以对骨头并不怎么畏惧，也不觉得好端端的一个人忽然变成一堆白骨有什么奇怪的地方。那个年代，人命真的是不值钱的，有些人终其一生不过吃了几颗枪子而已。 那么与那时相比，我们是否更加幸运？当然是否定的。那时的冲突是意识形态，现在则是文化断层。我们是否要缅怀先烈？那也不必，这种历史不会再重演。若是生在战争年代，那么终生梦想便是世界和平，人生安稳。现在一定与那时不一样。有人说历史一共分为三种：第一种是已经逝去的岁月，往事不可追忆；第二种写在了各类史诗典籍中，可能迫于当时时局，略加修改；那么第三种便是自己阅读各类典籍，加上自己的心得体会，认为历史应当是这个样子。那么历史是不必躺在水晶棺中任人观赏的了。与华丽相比，应该更接近于真实。 那么现在中日关系如何？我们作为小人物当然不想太清楚。国际上有一条交友准则，没有永恒的朋友，只有永恒的利益。从旅顺回到大连，写下了这样的话： 旅大是日本的情妇，被百般虐待，所有的灵感都来源于她，荣誉则是成为一份作品，而毁灭也恰好是她。","link":"%E4%BD%9B%E2%80%A2%E6%95%99%E5%8C%96%E2%80%A2%E5%B1%A0%E6%9D%80/"},{"title":"","text":"从朋友的推荐一点点变成懒猫专栏作家。","link":""},{"title":"写作大纲","text":"找回二十几年失去的东西，明明过活的那么认真，到头来却被伤的遍体鳞伤。从听话的孩子逐渐转向独立人格独立思想。以古为镜。 朋友篇 恋爱篇 社会篇 职场篇 校园篇 游记篇 随感篇 历史篇 文化篇 金钱篇 律法篇 道德篇 领导篇 美食篇 文人篇 为人处事，道德，杀伐决断 希望在自己耄耋之年，看淡这样的文字，不会觉得幼稚。","link":"%E5%86%99%E4%BD%9C%E5%A4%A7%E7%BA%B2/"},{"title":"地坛游记","text":"我总会在受伤后行动不便的日子想起史铁生。第一次是拄着拐杖，第二次是十年后坐上轮椅的时候。在此期间，我曾无数次羡慕在这京城中长大的孩子，仿佛从书中描述的都是另外的一个世界，一直持续到我来到北京工作，幸运的是工作和居住都在四环附近，大多的名胜古迹只需要一小时左右的车程。市内有很多前朝的遗址，比如元大都遗址公园，甚至明清时候的九宫八庙，自然也能发现一些陈年趣事， 比如光绪帝用自来水比我早了整一百年这种半封建半现代的事情。 东直门吃过午饭后，沿着安定路旁边的河流一路骑行，慢悠悠的来到地坛的南门。马路对面就是雍和宫，经常有无数善男信女来此求取姻缘。再往南就是北京很有名的小吃簋街，这附近总是热热闹闹的，丝毫找不到小说中“这院子无人打理”，“杂草从生”的痕迹，园内也是各色人等，还在襁褓中的孩子，放假休息的学生，一边游走一边电话的成年人，还有三两成群过来散步的老人。 沿着地坛外侧砖路散步，自然是脚本慢下来不在乎时间的流逝，一方面是为了找寻小说中提到的地点，另一方面也是想要亲眼见证石门下被照的透亮的坎坷。出门时候尚未规划好行程，又临时起意来到这园子，打算看这里的日落，是否会如湖面一样拖起长长的影子。参观祭坛要额外买票，在我从前去过的许多园林之中，祭坛多被虚掩起来，虽然现在早已不再从事祭祀的活动，所幸遗迹被肉眼可见的保留了下来。 正午的方泽坛，我装做皇帝一样走向高台，穿过外墙进入内墙，然后一步步的迈过阶梯，前面有人拍照也丝毫不去避讳。登上祭祀台，已经简化了很多东西，目前的摆设是遵循1750年乾隆时代的摆设。方泽坛对面是皇祇室，大堂的中央摆放着皇地灵位，左右内侧摆放着清代卓越贡献的几代君主的灵位，从介绍得知，他们的肉身葬在我不曾听过的地方，左右外侧供奉五岳、五镇、四海、四渎、五陵山神，而皇陵大概率是龙脉所在吧，惭愧对大清历史不求甚解，也不想亵渎前人再去抄送。破旧残缺的青砖总会让人想起故宫，甚至是影视剧午门问斩血溅五步的场景。祭坛低矮墙壁的角落里，有人在练习拉伸，有人刚刚把刀从鞘中抽出来，一时无法分辨刀是真品还是高仿，加上这人的穿着，颇有反清复明吕四娘的装扮。假期里来参观的人自然不少，父亲给孩子讲解着祭祀的斋戒礼教，男人躲在角落打电话谈着生意，小夫妻在拌嘴，走马观花后觉得不该来此，还有三五成群在这野餐拍照留念。我呢，在进门之前摘下耳机，登上这祭祀的高台，甚至已经想好了焚香祷告，烹羊宰牛的画面。殿中前现存的大多是复制品，确实无法像真品那样让人怦然心动。 去年在故宫大殿参观的时候是有真迹的，我鼓足勇气与石像对视，这石像经历了战国争雄，五代十国，以及数不清楚的动乱时候仍然总算完好的保存了下来，过去的创造他的人早已深埋黄土，几百甚至几千后它还会伫立在这里，变的只是一批有一批的瞻仰者。若不是空气中弥漫的腥臭的味道和铭牌上距今几百上千年的字眼过于突兀，我会沉浸在无尽的历史长河中久久不能回神。还有在东直门某博物馆看见的函谷关的瓦当，不得不又回溯起楚汉争入关中那段荡气回肠的历史。 从祭坛出来后，继续播放《我与地坛》的有声读物，重游重温一遍内容，新鲜的风景和记忆里尘封的旧的内容交织融合。他是后天的残疾，最后也没有看透生死，只得出来生没得选死不必急于求成的结论。倘若生下来从未体会过奔跑的感觉，那么便也只能怨天尤人，要是他一蹶不振不再写作，那就是另外的故事了。这是否又是今生来体验人间苦难的下凡？不管怎么样，我从不把这种这当作励志的故事。 于是我开始去设想从前的园子，大小应该不会有很大的变化。但西北口钟的那十分破旧的那一口钟现在已经无从得见，到处的荒野杂草野路被修缮成了整齐划一的灰砖，不变的是，倒还能在路边看见近乎晒干的了蚯蚓。尽管现在重修了钟楼，封闭了马厩，同时又加上了诸多娱乐设施。只是现代的气息太浓，若来追忆经典定会觉得索然无味。还好能找见几棵400年前明代的古树，不远处还有一个妇女在教孩子聆听树的声音。上了年纪的树自然是被铁圈围起来的，让人不自觉就想起摇曳尾于涂的典故了。而古树的枝条上，总会紫藤会围着这样的老树生长，交织和抱，开出淡淡的小花，引得路人争相过来拍照。园子北侧翻修的太彻底，丝毫没有小说中的痕迹，我尝试在树的附近寻找史铁生车轮的痕迹，当前正如他所说，这园子正在被不懂它的人精心雕琢。现在每个公开场所都有所谓的商业模式，这点798为首的文艺社群中尤为突出，自然地坛也无法幸免。来地坛之前，在想象是多么幽静的环境，比人高的杂草，以及东南角那高亢嘹亮的声音，每天从北到南从南往北的女工程师。现实却是丝毫没有桃花源的感觉，似乎成为人们茶余饭后来消遣的场所了，又不由得感叹现代人肤浅的享乐简直来的太过容易，无论每个公园都会有游乐设施在大煞风景，还有不知道是哪个年代的流行歌曲一直响个不停。思绪拉回现在，老人们在吹奏手风琴还有小号，另外一旁还有正在进行的门球的赛场，倒是孩子们在无所顾及的疯跑嬉闹。 但，对于这园子的一年四季，我总是无暇来观望的，就连楼下的后花园也很少去宠幸。除了文中提到的雨燕外，还有喜鹊，乌鸦，鸽子这些鸟类，算是为数不多超出作者的笔墨吧。倒是最近每年清明都去龙潭湖散步，看鸭子高飞，鸳鸯戏水。大概是距离首都图书馆比较近的缘故吧，常常是在潘家园的二手市场中恣意寻找后骑车到方庄。但别人用过的东西从风水上讲毕竟还会残留上一个人的精气，还无法完全接受。 在我那密不透风的学生时代，总觉得许多异乡游记是和三皇五帝一样传说的故事，而我却生在一个山高皇帝远的地方，守着些不为外人道的自然风光。甚至我在工作以后才有机会到一些不算太远的旧址吊唁。比如渤海湾曾经甲午海战的地方，东鸡冠山上到处是日俄战争枪林弹雨的痕迹，就连误入的墓群主人，也分不清到底是旧时的未亡人还是几年十几年甚至几十年前疲于奔命的过劳者，甚至脚踏的这片四方黄土就是乃木宝典战死之处，还有作为标志性的建筑的弹壳，我甚至不愿想象战争年代白发人送黑发人情感被上司大如天的威严严苛所淹没，死后被历史记住已经是最大了补偿了。大连是到处都有墓碑的，在每一个所谓现代定义的景点公园，凡事对外的，总会在一不留神间瞧见墓碑或者墓群就在不远处。中日之间是有宿命的姻缘的，这点在那些发生过大规模屠杀战争的地方尤为严重。大连的每一片土地都渗着鲜血，有革命先烈的，有当代年轻人的。当地的大户说，采集百年弱冠的血，用温热的殷红把混着泥土的陈年凝块化开，喝了可以长生不老。 故宫是溥仪的家，地坛也是史铁生的后花园。至于龙潭湖附近，长眠着一位《碧血剑》中的故人，功高盖主而殁于崇禎。两次拜会，第一次因为疫情，第二次由于天色渐晚行到庙前又不忍打扰。倒不是有多喜欢古迹，除了闲逛外，多半是朋友邀约或泛读诗书自然想去凭吊一番。 十九点按时日落，大概是因为现在楼宇太多的缘故吧，守了一个下午，从中午等晚上，一直到路灯亮起，也没有在祭坛的石门前瞥见落日的余晖。索性来到簋街，在胖妹面庄的胡同前排起长长的队，再顺手把这些记录下来。 2023年4月29日于地坛","link":"%E5%9C%B0%E5%9D%9B%E6%B8%B8%E8%AE%B0/"},{"title":"外滩夜游","text":"dd 黄浦江真的很出片，无论是白天在世博中心，夜晚的外滩，都会给你一种。身处大都市的感觉，下午的黄浦江风和日丽，偶有渡轮从江面驶过，夜晚的外滩，人流拥挤，放松的人群和和东方明珠隔江相望。 同事说，没有到过外滩就等于没有到过上海，所以我特地在外滩周围订了酒店，然后在黄埔的大都市，我尽情的游玩。计划里有外滩，豫园，城隍庙，还有人民广场，大世界，然后再这一圈xxx。 就能让我骑着小黄车悠哉悠哉的去看夜晚慢慢变黑，虽然地铁也很近，但是不喜欢那种，但是喜欢那种夜幕悄悄降临的感觉，嗯，对于上班，对上班族最。最残忍的事就是早上踏着踏着日光，或者日光没出来的时候就要出发，那晚上迎接你的就是一片黑暗，你偶尔有。街上的霓虹灯，但就不足以照亮街边的路。 要骑车，这次实实在在栽了一个跟头，在望京的时候，我经常行行在一条笔直的马路上放开了双手去骑行，靠着自然的平衡去穿过一条又一条的街道。为什么说上海栽了一个跟头呢？这是一个实实在在的跟头。平地摔了，嗯，人行斑马线的油漆太重，而且但是在单手去查的导航，所以导致。直接重心不稳，整个人飞，整个人飞了出去，不敢想象当时后面的人是怎么样一个想法。 一般来讲，这种事情都会有一个预兆，比如说后面的事情不顺，但不幸中的万幸就是也就只有膝盖擦破了皮。在行驶到外滩的中途，刚好有一家药店，我可以去买一些消毒器械，简单简单处理过之后，我就到外滩来散步。 当然这两天总会遇到一些管制，比如你世博附近演唱会散场，人流拥挤导致这一带几乎封路，对于地铁站安安检也是无能为力，直接直接放弃，崩溃，直接崩溃，放弃我今天。外滩的周边是不是不允许驶入共享单车的，驶入或者是停放共享单车的，嗯。 这就和你知道长安街相似，长安街禁止在在进故宫一带，长安街只有自行车才能使用，包括带助力的。不带，不带助力的自行车才能驶入，包括电动车都是禁止进入的，所以。在去年的深秋，我才能从百子湾一路骑到石景山，这是我觉得长安街带给我的意义。那么对于外滩呢，嗯，简单的来讲就像是一条街。你沿着黄浦江上的一条街，对面是和陆家嘴这种都市中心不太相望，嗯，在这里我们就可以看到这座城市的地标。 我不知道对于在城市的地位，这两者是否等同，但是可以肯定的是，这里人潮拥挤，确实是一个不得不来的地方。 从上北京到上海，几乎没有什么不习惯的地方，严格上来说是在北京这些方面都被磨合的很好，但不同的地方就是。这里的外国人会多一些，随处可见老外在拍照，在等，等着等着这边的红绿灯。对不对也可以。 外滩当然也不例外，嗯，有来有的外国人也有，也有一对，也有有一些情侣。嗯，可能对于外滩相当于迪士尼来说，确实不是一个适合分手的圣地。 江上的渡轮来来回回的回顾着，似乎一些是为了品牌，另一方面就是为了让为了游客去拍出更加质量，更加有质量的照片。你自拍的时候还是也试着一个人旅游去拍照，但往往总不尽如人意，比如距离感。我没有去拍照，不少，有个有个孩子要，要我帮他去拍照，然后，然后。他还很很乖巧的帮我，帮我先拍了几张。 大概是出于长期被骗的一个新人的我下意识下意识去说，或者是会不会把我的手机带走这样的，但看着对方。看着像一个没有步入社会的大学生，而且是为了演唱会来到这里，后来也就加了微信，他给我传，还顺便赠送了我刚刚出片的照片。刚刚出炉的风景照，这得再次吐槽一下，苹果的像素太难了，安卓一张16兆，你苹果呢？ 嗯，大概是旅游高峰，而且又是日暮，大家都会堆在入口的地方，但。等回来的时候，可能由于这一片，嗯，一个小时就逛完了，然后等等出来的时候就可以。这人是少了很多，这里看高手大山。 自从离了渤海江畔，到大城市打拼，还真的没有，今年还真没有吹过海，无论是海风还是江风，几乎都没有吹过这样。明天不会感冒，是吧？ 转了一圈，又从外滩出来啊，一波又一波的人流，我一个个企图找到一个吃饭的地方，夜晚八点。嗯 来的时候开着导航，在小小巷子里左拐右拐，回去的时候逆着人流走一条最长的街道，然后。在这夜里的八点，你在上海最正宗的小龙虾。 意外的是连接就是和平饭店，嗯，前面有一堆的小吃，今晚只是过来逛逛和平饭店，改天去吃。","link":"%E5%A4%96%E6%BB%A9%E5%A4%9C%E6%B8%B8/"},{"title":"房间","text":"他还是饶有兴味的看着戏剧。对他来说没有什么比戏剧更能打发这个黄昏了。他在想他的妻子在他身边该有多好。前一天他们吵了一架，她一气之下离家出走就再也没有回来。现在他只能在这个没有几个观众的看台下，痴痴地望着台上，当然心里想的还是他的结发妻。只不过他的戏剧能让他感觉稍微好些。 “先生，麻烦你跟我们走一趟”两个警察模样的人出现在他面前，冷冰冰的声音划破了这一沉寂。我们这位好好先生可是从来不问缘由的，更何况他觉得自己也没犯什错。甚至于老婆吵架时，他都是默默的承受着家庭暴力。 这次的目的地不是警察局，竟然是他的家里。屋中仿佛听见一男一女在吵架，女的似乎在咆哮：“看你昨天带回来的那个小男孩，再这么养下去我们都要穷死了！”男的成熟稳重，但也极富心机，他似乎都看不到那人的脸。那人说的每一句话都好似千斤：“我自有安排。”那个女人的声音听起来好像他的妻子，不过凭着他对她的相信，这一荒唐的想法很快就被否定了，哪怕他们只是新婚。就算新婚之夜他们刚刚吵了一架，他们也相信彼此都知道，两个人的完美主义还要慢慢磨合。世界上绝对没有任何人可以替代彼此的位置。本想等她气消了之后再和他一起游山玩水的。结果他发现现在像重物一样被人摔在地上，然后被拖进了一间黑屋子里。 清醒了一会，他发现这个屋子的布局竟然和他家一模一样，而且他也告诉自己，仅仅是相似而已。这个黑屋子很像是他的卧室，只不过没有了灯，整个屋子就好一间暗房。他瞪大眼睛似乎不敢相信这是真的。难道是谁要向他复仇吗？怎么选择了个这么相像的地方。他是个好好先生，但是也得罪过不少人。慢慢的，他发现这个屋子里还有其他人。角落里蹲着一个小男孩，目光有些呆滞，衣衫褴褛，头发也有些凌乱，而且无论他怎么喊，男孩就是不理他。男孩的周围，有一排排的月饼礼盒，上边贴满了个各种情绪的标签。走上前，他看见“智慧”和“勇气”，他曾经毫不犹豫的选择了前者，不过他觉得现在应该换个决定了。只不过男孩前面标有“自卑”与“抑郁”的盒子已经空了。“哎，今天可是中秋，看来今晚是很难见到月亮的了。”他自言自语道。 还好是中秋，月光可以透过这些黑暗，给每一间黑屋子带来光明。“喂，你看见前面那扇窗了吗？打开它，我们就可以出去了。”男孩仍然不理他，径直向前，甚至连头也不回。“终究还是孩子。”他一边叹着气，一边跟了过去。走了几步他就看见一个小女孩的骸骨横在前方，月光下显得格外阴森。而小男孩由于留恋外边的新鲜空气再也听不到他的声音了。就好像月光之下有塞壬的歌声似的。 他也不晓得为何清楚的记得过去了两周，大概是处于艰难险境的人对时间更为敏感吧。小男孩最终还是倒在了小女孩的身旁。“是我害了他。”不过这句话他没有说出口，因为他的身边已经没有其他人了。求生的欲望越来越强烈，回过头，门是虚掩这的，而且无论如何都无法反锁。他想过从这扇门中穿过去，只不过竟然有些怕那些人都聚集在门口，他一时间招架不住，于是还是选择跳窗。 不知道是已经没有退路还是求生的愿望过于强烈，拉开窗户，几个跟头，他就翻入了下一层。 虽然是高层，但是还是阴森森的像一个地下室。昏黄的灯光下边，照亮的几处蜘蛛网。他只有拼命的奔跑，只不过这里除了实验室还是实验室，难道这里住着一个和他一样的工作狂吗？他很清楚他这样很快就会被后边的人追上。“快过来这里，这里很安全！”走近细看，那人竟然是他的姑姑。他也来不及多想了。 暂时松了一口气，他瘫软在地上，余光扫过地面，一批批的黑影掠过。那她姑姑呢？为什么他可以随意走动？为什么她知道知道这里就是绝对安全的？为什么……难道？他不允许自己再这么想下去了。 “他就藏在这里。快点！”一个似曾相识的声音，十分钟之前是如何告诉自己这里是如何安全，现在有是如何把自己推向绝望的深渊的，当然这就是人性，他早就已经见惯，这次却疏忽大意。当然他终究是个理性的动物，抓紧门锁，外边向右转一圈，他就向左转一圈，累了就干脆锁死，就这样一直僵持着。 “无论如何我也要救我的孩子。”门外传来一阵叹息。 母亲受人驱使只是为了救子吗？他的心忽然颤了一下，他知道这种情况母爱是绝对不会讲道理的。他松开门锁，放弃了抵抗。 “你要用我来换你的孩子可以，但是我出去一定杀了你！”这话他是吼出去的。 “好！”对面毫不迟疑。 门开了。 里面走出了一个瞋目怒视的人 ，浑身散发着杀气，仿佛眼神都可以杀人。只有那个为了救儿子可以赔上性命的人还站在那里，似乎在等待最后的仲裁。现在两方都已经切身感受到，面对死亡本身就该无所畏惧。 随从的人早已经被吓破了胆，她还是义无反顾的站在那里，他死死的扼住她的咽喉，哪怕是他的长辈，哪怕帮助过他又马上背叛了他。这些他都不再想，因为他早已经被愤怒所淹没。他死死的攥住她的脖子，仿佛下一秒就能像向捏死一只蚂蚁一样捏死他。只不过，他突然松开了手。“带我去见他。你快点！”冷冰冰的语气，一点亲情的味道都没有了。她不回应，只是不停的咳嗽。 回到了之前的地方，之前的一男一女早已不见，地下只剩下一个破旧的书包，是他少年时期用过的，他解释不清楚。黑屋里走出个人影，正是先前日子倒下的小男孩，不同的是，他变得干净帅气又阳光。“是你救了我！”男孩嘴角上扬。 “我要去报警。你去自首？”这位好好先生第一次表现的这么富有攻击性。 去警局的路上，之前发生的一切好像都消失了，就连那件屋子也在慢慢的崩坏。路的尽头，她的妻子在等着他，她也经历了同样的事。她首先打破了这一宁静，“亲爱的我想写本书。” “嗯？” “你之前不是说过每个人走不出自己的世界吗？” “那你这本书的名字就叫做《房间》好了。” “这是一个主人格被邪恶人格囚禁的故事。” “而且主人格终将获得胜利。” 他们彼此一次笑，又是黄昏，落日的石阶前，一切坎坷都被照的透亮。","link":"%E6%88%BF%E9%97%B4/"},{"title":"深夜随笔","text":"要说从读书开始伊始到大学毕业，最大的收获是什么。大概是独立之精神，自由之思想。通俗的来讲就是官逼民反，在一直听话的过程中一直无法满足期望与要求，厌倦了君臣父子的这种病态。从那时候起，开始很多的不相信，文化，教育，以及文凭。中国人喜欢毫无意义的卷，仿佛比别人多努力一点就能多得一些，长此以往，自然而然催生了大多数精致的利己主义者，以及优秀的绵羊。 从能力或者文凭来看，中国人更加趋近于文凭，一部分是为了面子，在邻里之间吹嘘，好似现代版读书人的事叫盗而不叫偷，另一部分是为了尽可能的避免别人像被挑白菜扔来拣去。做营销的人总会有一套，先给你制造各种各样的焦虑，然后宣称自己有灵丹妙药。从当今互联网的招聘状态来看，颇有捡芝麻丢西瓜的意味。从某种程度来讲，我们所谓的快乐式教育已经荡然无存，家长一方面希望孩子能一个快乐的童年，而另一方自己有深陷漩涡，希望下一代续写昨日的故事。所以，这样的单纯，善良最后就都变成了无知与不作为残害的牺牲品。甚至不知道我们为了什么以及为什么要这么做。 喜欢看武侠，风清扬说最厉害的招式不在武功之中，而是阴谋陷阱。这句话在这里也同样适用现在的教育，资源在少数人手中，算是寒门再难出贵子的境况。暂且不论这样的教育弊端如何，但在传统儒家的观念里的尊师重道仍然被保留了下来，但是却不会有对于道德的一些标准。于是我们常常在讲，是招一个道德好但是能力一般的人还是没什么道德但是专业能力很强的人？大概是从陈平开始，从举孝廉到任人唯能，所以汉王灭楚，魏武伐仲。宋襄兵败，任侠多累。 古代的功名利禄，是和科举考试有很大关系的。至于后人妄论八股骈文，却是身在其中而不自知。又有一群人，不管心里怎么想，但是做给别人看的总要符合这个身份和当时的规则。从这点看来，现在的人没有气节，也可以称的上是某种程度的投机分子。假意逢迎不合理的制度并且为了追求自身利益最大化而劳心费力，这样的人多了，就会对这样的环境起到了正反馈的作用，从人性来讲，不反对等于隐式认同。这其实和抗战时的汉奸特务无疑，他们也只是在居无定所中安身立命，尽管这会奴役和残害自己的同胞。但，对于国素质而言，从某种程度来讲， 冷漠遗忘不作为，却更胜于杀人分尸，路边人的健康温饱甚至生死，依旧不会被关心。偏偏很大一部分人又喜欢站在道德制高点来讲述这些话。唯一不同的一点是，现在人不必被钉在耻辱柱上，因为残害杀人的定义，是由律法来决定的。 文人的圈子中从来不缺乏批判，但单多半只是自娱而已，伴随的还有求而不得。只有身居高位才能付诸忧国忧民，血染疆场才能保家卫国。而治国之策能否施展，自然有历史为证：贾生才调，武侯余生，东坡鹰犬，放翁镜湖，嵇康放荡，阮籍穷哭，守仁流放，嗣同快哉。 回到现在。纵有诸多不适，但总归会隐忍着走完这一程，随之而来的是被贴上言简意赅的标签，然后用机械化的方式来查询SQL。似乎现在的一切都能用古代文字来解决，“世有伯乐然后有千里马，千里马常有而伯乐不常有，故虽有名马，，，。安求其能千里”。教育可以做什么，历史可以带来什么，似乎有一双看不见的手，伸出大气层，蒙在了太阳之上。我们可以不关心国际形势，因为这是政治家的事情，当然也可以不关心战争，按照俄乌的节奏，世界大战是早晚的事，那其实科技也不必关心，程序员成了码农，人机融合遥遥无期。 小人物又能做些什么呢？余华笔下的福贵是凄惨的，莫言总是在讲述村野往事，韩寒的天才少年在夕阳下凌乱。在某个不经意的瞬间，我时常想起屈原的渔夫，苏轼的洗儿，陆游的咏梅，以及闻一多的暗杀……","link":"%E6%B7%B1%E5%A4%9C%E9%9A%8F%E7%AC%94/"},{"title":"雨","text":"小时候，雨是村头泥泞的路口，墙角湿滑跌在原地，不穿雨靴，不披雨衣，一把天堂伞默默撑到彼岸。 上学后，雨是城中疾驰的孩子，结队成群疾行风中前有单车，后有乌云，一盏日光灯悄悄驱散阴霾。 工作了，雨是都市湿漉的地板，半干半湿透着氤氲，昨夜雨疏，今夕风骤，一个外乡人匆匆留念海棠。 其实呢，雨该是镜湖踉跄的渔夫，驿外断桥咏叹春梅。清者濯缨，浊者濯足，一代文化人静静独留风骨。","link":"%E9%9B%A8/"},{"title":"爱情是婚姻的坟墓么","text":"婚姻是第二次投胎。 所谓爱屋及乌，经常有一种爱她就要包容她的一切的言论。那么反过来也是一样的，如果是在几经磨合之后仍然不能付诸真心，或者经历了无数次想去改变对方，再或者对现状无能为力只能默默叹气的时候。举个例子，对妹夫看不顺眼的时候，但凡在他们孩子身上看到任何相似之处，也都会有种莫名的不喜欢，甚至是把情绪转移过来。 周围的人大概有这样几种状态，单身未婚，同居未婚，已婚未育，已婚养娃。 单身未婚要么没有遇到正缘，要么是感情上面的独行者，常常被他人贴上活在自己世界，适合一个人的标签。他们也许渴望一场轰轰烈烈的爱情，但从不轻易涉足。 同居未婚，有些人打算长期维持这样的状态，彼此间相对比较独立，而且大多是丁克主义，双方也有稳定的收入，还不用在乎双方的亲戚闲言碎语以及社会舆论，那么在矛盾冷战时候也会发出是不是分手的质疑？ 还有很大一部分人，不管条件如何，总归是先住在一起，然后再慢慢磨合，他们可能是大学生，也可能才刚刚步入社会，经常说出的话是顺应自己内心的想法，而且大多讲究顺理成章顺其自然，一旦有了夫妻之实，在分开之后另寻新欢很难说不是二婚。 当然也有些是真爱，本就打算结婚，然后住在一起，互相之间总会有个照应。然后一起走过磨合，订婚，再结婚的过程，这也不失为一段佳话，既加深了羁绊，也创造了彼此间的记忆，甚至哪怕新婚燕尔，甚至也能用老夫老妻这样的话语来调侃了。 养娃的人是最累了，十月怀胎，甚至民间还有一孕傻三年的说法。前几种情况相比，只有这有母性的光辉。而且常常被不孝有三，无后为大的观念所左右。不管是出于传宗接代还是其他的目的，在这的过程中，总会不自觉得强加上去自己的想法，甚至要求他做的更好抑或是不能落后于人，抑或者彻底沦为炫耀的资本。但对于家庭和事业兼顾的人来说，这往往很难两全，总会给孩子留下一些原生家庭的不安与不适感，并且常常对此无能为力。 几十年后的养老院，还是那样大的院子，周围还是同龄的人，仍然会把人分门别类，依旧听着要那个人的发号施令，江湖依旧是那个江湖。但，最近的新闻总是看的心惊胆寒，现代文明带来的身心不适已经极大的缩短了人的寿命，谁又能保证真的能活到那一天呢？幼年时盼望有人披着晚霞，踏着黄昏带你走出这桎梏，耄耋之年为何又作茧自缚，穿过着一阵阵的喧嚣，却只能看他人天伦。 对于不婚不育的人，我们一方面要感谢他们为人口减少作出的贡献，另一方面也会出于自己小小的私心，想要伴随生命从小到大的成长，即使无法告知他人生的意义，即使在他18岁的时候会也发出安德烈一样的感慨。谁说不能效仿古人，一门七进士，父子三探花呢？","link":"%E7%88%B1%E6%83%85%E6%98%AF%E5%A9%9A%E5%A7%BB%E7%9A%84%E5%9D%9F%E5%A2%93%E4%B9%88/"},{"title":"MacOS安装的软件无法打开","text":"因为 PicGo 没有签名，所以会被 macOS 的安全检查所拦下。 安装后打开遇到「文件已损坏」的情况，请按如下方式操作： 信任开发者，会要求输入密码: 1sudo spctl --master-disable 然后放行 PicGo : 1xattr -cr /Applications/PicGo.app 然后就能正常打开。 https://github.com/Molunerfinn/PicGo/blob/dev/FAQ.md","link":"macos%E5%AE%89%E8%A3%85%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80/"},{"title":"NFC复制卡写手机手环","text":"手机无法复制加密的IC卡,所以需要需要额外的方法来进行写入 读原来的卡 仅复制卡号 创建空白卡 仅复制卡片卡号 写入数据接下来就是把手机/手环放在机器进行写入 添加成功 参考资料NFC-PRO至尊双频版操作说明读写卡操作视频:https://cloud.video.taobao.com/play/u/null/p/1/e/6/t/1/409421501065.mp4加密卡手机手环模拟操作视频:https://cloud.video.taobao.com/play/u/null/p/1/e/6/t/1/409017352153.mp4","link":"nfc%E5%A4%8D%E5%88%B6%E5%8D%A1%E5%86%99%E6%89%8B%E6%9C%BA%E6%89%8B%E7%8E%AF/"},{"title":"SSD介绍","text":"slc、mlc、tlc闪存芯片颗粒区别介绍在U盘、SSD等固态存储产品中，闪存芯片颗粒是核心，其关乎产品成本、寿命以及速度。闪存芯片颗粒主要有三种类型，分别为SLC、MLC、TLC，三者之间的区别，如下。 SLC = Single-Level Cell，即1bit/cell，速度快寿命长，价格贵（约MLC 3倍以上的价格），约10万次擦写寿命； MLC = Multi-LevelCell，即2bit/cell，速度一般寿命一般，价格一般，约3000—10000次擦写寿命 TLC =Trinary-Level Cell，即3bit/cell，也有Flash厂家叫8LC，速度慢寿命短，价格便宜，约500-1000次擦写寿命。 1.速度最快，寿命最长，价格最贵的SLC颗粒intel 傲腾900P固态硬盘是英特尔针对商业客户和游戏发烧友推出高性能SSD，它使用的就是SLC闪存颗粒， 持续写入速度2.0G/S，4K写入50万IOPS； 持续读取速度2.4G/S，4K读取55万IOPS； 寿命约为全盘写入15000次，每天全盘写入一次，预估寿命为40年； SLC闪存颗粒就像这款搭载它的傲腾900P一样，尽管已经是“宇宙级最强SSD”了，但因为贵，所以销量惨淡！ 2.速度较快，寿命较长、价格较贵的MLC颗粒三星960 Pro是三星针对游戏发烧友和专业级用户推出的高性能SSD，它使用的是MLC闪存颗粒， 持续写入速度是2.0G/S,4K写入33万IOPS; 持续读取速度是3.2G/S，4K读取33万IOPS； 寿命约为全盘写入1500次，每天全盘写入一次，预估寿命为4年； 对普通人用户来说，SLC颗粒就像劳斯莱斯幻影，好是好，但是太贵，所以，极少有人买；MLC颗粒就像宝马7系，车还算可以，但还是贵，买的人还是少； 只有TLC颗粒就像福克斯，虽然性能和品质远不如劳斯莱斯和宝马730，但是价格实惠，所以，买的人最多； 3.速度较慢，寿命较短、价格最便宜的TLC颗粒三星针对消费级市场推出的廉价版SSD，虽然它采用了速度最慢的TLC闪存颗粒，但因为它使用了PCIE3.0*4通道作为数据传输通道，所以，它的读取速度还是甩了所有SATA接口SSD几条街； 三星960EVO持续写入速度为1.5G/S，4K写入30万IOPS； 持续读取速度为3.2G/S，4K读取33万IOPS； 寿命约为全盘写入700次，每天全盘写入1次，预估寿命为2年； 当然，普通用户根本没有那么大的写入数据需求，以每天20G的数据写入量，即便是寿命最短的三星960EVO，预期寿命也有20年； 最后，我想说，以普通用户的日常数据处理量，TCL闪存颗粒肯定够用了，没有必要去追求什么SLC、MLC；我们只要性价比，我突然发现一个事实：目前某东上热销的SSD都是TLC固态！ 转载地址","link":"ssd%E4%BB%8B%E7%BB%8D/"},{"title":"intel 12代CPU折腾记","text":"最近小米新出了迷你主机，甚至连nuc贴纸都没摘，所以还不如直接买intel的nuc 华尔街峡谷，毕竟从nuc8的黑苹果一路走过来的。什么都不用改，直接用豆子峡谷的vesa壁挂。但是也有一些问题。 大小核的问题12核16线程其实是4大核8小盒，所谓大小核问题，就是在以vmware为首的很软件，经常出现小核跑满大核限制的情况，然而在任务管理器中还显示CPU占用100%。 需要在电源模式中开启性能模式，然后才能解开大小核的显示，后续的时候没有发现特别不适应的地方。 显示器延迟问题因为主机是双HDMI和双typec的接口，所以必须要接一台typec的的显示器，但是Philip网红显示器接上有很长的延时点亮问题，有时候甚至比开机时间还要长，同时也咨询过intel和Philip的售后支持人员，答复如下： intel：从Xe显卡开始就有这种兼容问题，存在和philip，aoc部分型号的兼容问题 philip：客服说显示器10s点亮正常，到了售后说是更长的时间，最后到厂家说32s才正常（东西不错，售后真的太差。。。 另外显示器有时候不能4K60@刷新，客服说要把显示器的hub改成2.0，但是这样就只能接一些键鼠摄像头一类的东西了。 2.5g网口驱动问题2.5G驱动目前好像只能离线安装。目前win10和win11系统内部没有集成2.5G网口的驱动，所以需要手动去官网下载驱动，然后手动安装。这里不太推荐驱动精灵一类的第三方软件。但是其他驱动只能联网之后安装，所以还是先准备个U盘吧。 Win11强制登陆MS账户win11虽然很丑，但是据说只有这个对大小核兼容好一点，现在只有企业版核教育版可以不用强制登陆MS，其他的都绕不过去，有的输入神秘代码亲自测无效，估计是MS家修复了这个问题。 系统缓存的问题装好系统之后，遇到了C盘占用特别高的问题，网上查询之后是因为内存太大，导致OS自动做了休眠文件，为了把内存都压到磁盘里。 PCLE4唯一值得安慰的是PCLE4的NVME，顺序读取有6600MB/S，总之还算不错。但是总归是TLC的，毕竟我连MLC 都能写坏…","link":"intel-12%E4%BB%A3cpu%E6%8A%98%E8%85%BE%E8%AE%B0/"},{"title":"“智能”家居相伴的日子","text":"你是程序员吧，我家电脑有点慢，网络有点卡，帮我看一下吧。” 尽管网上关于程序员修电脑的段子已经层出不穷了，似乎大多数人也不再吐槽程序员修电脑这个事情。事实上，不管走到哪里都总会有人找我修电器，从广告LED屏幕，电子秤，再到手机电脑，电视盒子，最后到路由器。所以当别人问我大学读的什么专业，我干脆回答修家电的。 我似乎已经形成了习惯，不管走到哪里都要准备一套趁手的设备：螺丝刀套装，钳子，万用表和绝缘胶带，准备了这些电工和网工必备的工具来提升维修的效率，至于网线钳实在是太累手，已经抛弃不用了。 这几年NAS的成品百花齐放，有对爱好者入门很友好的群晖，有适合更加专业一些的威联通，甚至于联想和绿联这样的商家也纷纷推出成品来降低使用者的门槛。其实驱动着自建NAS的爱好者不断折腾不过以下几个原因，网盘限速，限制文件大小，还有各种网盘的不定时监控。在我自从被用百度网盘被莫名限制文件下载之后，便开始了在家里自建数据中心的想法，这样就可以不受拘束自由的下载和分享文件。实施下来除了晚上各种网线灯和电源灯的光污染之外，其他方面提升了很高的幸福指数，上传下载可以跑满家里的千兆内网，也可以分享体积大于5GB的单个文件，至于存储空间就取决于钞能力了，也希望早日能够实现家庭百T存储的梦想。 一开始由于资金的原因，我打算在Centos7上自己部署一些开源服务，但是鸟哥私房菜实在太厚啃不动，加之后期的维护成本巨大，每个服务维护起来都要敲指令。后来我索性花重金买了QNAP当红机器，同时也不定时和同学柜子里的黑群晖在做着异地同步。在这一切准备完毕后，我找到了联通公司要了动态公网IP地址，结束了与内网穿透的相爱相杀的艰难的日子，同时利用闲置域名设置了一套动态域名解析，用手机随时随地连回家里的服务。唯一遗憾的是回老家是用树莓派做的网页监控也经常被运营商封掉，后来从群友处得知 80/8080/443这几个端口不能使用，联通客服只能从后台看见网络状态，其他的超出了支持范围，同时也驳回了我想去找网警咨询的要求。 后来了我解到，如果是在家里建站好像是要和公安部门申请的，走一个类似备案的流程。而联通的上传带宽只有30MBPS，似乎满足不了随时连回家观影4K电影的需求。在极客心的驱使下我走上了单宽带叠加的路程，使用家里200M的宽带同时拨号三次可以达到550M的网速，再后来趁着活动免费提升到了500M，单线多播这才告一段落。但是搬家到北京之后，出租房的网络太差并且带宽只有100M，在因为网络不稳和在经历了无数次和运营商以及二级运营商的扯皮后，只能选择额外加上一个其他运营商的线路，京东下单了小米AX5400路由器，在上边设置了一个双宽带叠加。相对而言没有软路由那么自由，硬路由的叠加只能是不同的运营商的宽带，比如移动和联通。而且运算速度也不如X86架构的软路由，优点是NAT性能很好。所以还是推荐软路由加上个普通路由做个AP。 经过群友不完全统计，有些地区的运行商很大方会直接给公网IP，有些地方运营商政策不一，需要等一定的时间，然后手动更改为路由器拨号。还有一些运营商甚至明码标价，公网IP每月固定收费，这个典型的代表就是北京移动。 解决了存储问题后，下一个面对的问题是网络。我想到很多国外的设备仍然需要连接海外的服务器进行激活，比如Oculus的VR眼镜，包括Google Pixel在内的原生安卓，这些都需要在连接海外服务器的情况下激活，这样的功能默认在国内是无法使用的。所以我想玩的痛快游一些，于是便在路由器的上挂一层代理，这样电脑手机都不用安装专门的客户端了，甚至连kindle都可以愉快的科学上网了。我折腾了下面三种： X86平台的工控机 这种产品现在已经成为产业链了，主要供货渠道来是各个平台短视频平台的科技UP主，基本上是一次购买终身答疑的制度，还有对应售后的微信群以及用于下载资料和固件的博客网站。对于小白用户，大概要熟悉一周左右，需要安装EXSI和两个路由器系统虚拟机，其中一个是国产路由器操作系统IKUAI，另一个是大名鼎鼎的Openwrt。再把网卡直通（类似EC2的增强联网）。IKUAI的系统是免费的，也可以在这里安装虚拟机安装openwrt，当然禁止套娃。Openwrt在Github上有源代码和release文件，也有开源的编译方法。这里有个小插曲： a) 我装系统一直用的ventory，出现安装之后无法启动的错误，给技术支持打电话之后，的工程师表示镜像没有问题，换了刻录镜像的方式之后可以安装。后来调查应该是ventory的支持不好。 b) 用自己的四核笔记本电脑编译OP源码，几个小时CPU一直满载，风扇噪音比冰箱制冷的声音还要大。（我的冰箱因为压缩机问题本身噪音就很大，妥妥的人工噪音） 普通路由器降级再刷官改固件 实习的时候部门老大过来跟我闲聊，他说把家里的AC86U刷了梅林固件，后来因为信号问题影响孩子写作业又刷回原厂固件了。梅林固件我是用的斐讯K3刷的，江湖人称漏油机，好像是因为散热的硅脂不太行，只要加热就会有油析出，拆开之后散热器上是油和灰尘的混合体（画面太美就不放了，想看可以移步朋友圈）。而且斐讯的其他产品也可以随便刷机，我把两个K2分别刷了openwrt和Padavan的系统，N1和T1都刷成了安卓电视盒子，其中个人觉得T1作为影音系统的效果更好一些。不过N1还可以刷成openwrt制作旁路由。 旁路由 我的网络理论知识不太行，虽然不懂原理，但是按照提示把主旁路由设置为相互的网关之后，屋内的设备就能愉快的上网了。这样流量每次都会在旁路由上转一圈，然后能做的事情就更多了。 当然言归正传，折腾完之后还是有一定的维护的成本，这一套部署下来家里感觉变成了一个KTV，24小时的噪音和灯光污染，软路由的网线口已经基本插满，家里每晚都闪烁着黄绿交替的灯。当然是黄灯闪烁，绿灯常亮。在一次在通电的情况下拔掉系统盘导致了磁盘坏块，如下图，数据丢失，虚拟化需要手动操作，然后上面的流程又需要重新开始。 虽然大多数折腾的产品都很耗费时间精力，不过还是极大的方便了我的生活。在有了外网环境之后，下一个要折腾的就是原生安卓系统了。 我是四年的米粉换了Iphone，还要从小米8刷原生安卓开始，来叙述这一段爱恨情愁。。。。。。 我在换了苹果全家桶之后，有种整个世界都安静的感觉，不用经常清理内存，也不必忍受普铺天盖地的广告。相信对于大多数爱好者来说，折腾安卓刷机的那个年代还是还留下了很多美好的回忆。对我来说，一切都是从高一那阵给同学手机刷机救砖开始，同学在手机root之后删除了系统关键文件导致无法开机。于是我一直花费整个晚上去找适配Android2.3.5的ROM 包，到后来也会尝试用一些软件破解手机锁屏密码，比如爱思助手，奇兔刷机之类的。直到最近几年，国内各大安卓厂商技术已经相对成熟，刷机精灵也早已倒闭，在安卓系统开始变得封闭的那段时间里，我渐渐忘记了安卓刷机的事情。直到有一天，我手里的小米8在过保后经常屏幕反复黑屏，系统变卡之后，我终于忍无可忍重操旧业。正巧了解到有个关于原生安卓的开源项目” MoKee“，这个刷机步骤和以前大同小异。如果是品牌手机需要把系统降级到开发版，然后刷入TWRP（也就是以前的Recovery），最后双清卡刷ROM包。由于我在家里已经安装好了软路由，激活时候完全不用担心连接国外服务器延迟卡顿的问题。终于在刷机完成后，我的小米8好似复活了一般，清爽的没有广告，和三星相似的UI，再装上Google 三件套，我仿佛嗅到了自由的味道。 然而好景不长，大概半年以后，原生安卓的系统出现了和国内硬件水土不服的问题，经常发生内存爆满，应用卡顿，需要多次手动释放内存才能正常使用，而且还有很多本地化的功能无法使用，比如NFC门禁，小米公交钱包。而我在因为手机卡顿无法刷码差点被赶下公交车后，便开始尝试其他社区的官改包了，所谓官改包就是在官方的包上剔除广告和预装应用，然后再加上一些提升效率的小工具。我找了一个人气还行的ROM，不过在刷机期间发生了一点点误操作，安卓不小心被刷成变砖头了，还是出现了熟悉的兔子界面，玩笑一语成谶。而对于小米来说，官方从根源上解决了用户自己救砖的问题，用户使用自己的设备刷机还需要官方的授权密码，而维修店的刷机设备则不需要。我在和小米官方售后交涉了小半年之后，终于在用9008免密刷机的方式刷回了最新版的小米安卓系统。还真是应了群友的话，愿你刷机半生，最后MIUI养老。 在分享过这个经历之后，便有朋友过来向我请教把手机刷成砖头的”秘诀”了。 除此之外，闲来无事翻出来一个闲置的36W的三色LED灯，我起初想本着废物利用的原则，然后又买了一段220V的开关延长线，淘宝了买羊皮纸做了个简单的照明灯壳子，也用了闲置的米家智能插座。 对于IOS设备来说还可以和Siri进行联动，只需要在快捷方式里加上一个唤醒米家设备的设置，最后用HomePodMini唤醒智能设备，唯一美中不足的是京东海淘的音响的是英版的插座，需要买额外的转换插头，如果用多口氮化镓的话会还重新分配工功率影响使用。此外HomePod还可以作为屋子里所有Apple设备的音响，无论你是MacOS, Ipad还是iphone都可以无缝连接，HomePodMini是名副其实的WIFI音响，你值得拥有。 除了电子设备之外，生活总会有些突如其来的小插曲，比如洗衣机坏了，面板报错E3，朋友在电话里告诉我盖子传感器有问题，开微信视频指导我修，怎么拆盖子和电路板。我在和厂家确认过维修价格之后，便驳回了房东给的报销，还是自己拆更放心些，洗衣机报错盖子盖不严，拆机后发现传感器生锈了，最后使用了320目砂纸打磨搞定。一段时间过后，在某读书群认识一个同样修过洗衣机的姑娘，跟我讲如何给家里更换洗衣机电路板。顺便还晒了一波男朋友给的全家桶 – R2S，Pixel 加上 Google 三件套。她也给男朋友订阅了Jetbrains全家桶。 我甚至有个大胆的想法，希望以后传统家电的厂家可以暴露给用户一些接口，让用户写代码或者使用图形拖拽的方式来对品牌家电进行互联，等以后有了房子后搞一套HomeKit智能家居，下图是我现在用到的智能家居的app，给各大厂商定一个小目标，就希望有一天可以互相整合开放SDK吧。","link":"%E2%80%9C%E6%99%BA%E8%83%BD%E2%80%9D%E5%AE%B6%E5%B1%85%E7%9B%B8%E4%BC%B4%E7%9A%84%E6%97%A5%E5%AD%90/"},{"title":"ventoy引导wtg","text":"ventoyventoy是一个可以支持启动很多镜像的工具，可以理解为win + linux的版本的PE。现在也兼容了openwrt，chromeOS， EXSI这些系统了，虽然还不支持MacOS哈哈哈哈 WTG现在民间有萝卜头的Windows To Go 辅助工具|WTG辅助工具 v5.6，可以轻松的安装系统到U盘。 https://bbs.luobotou.org/thread-761-1-1.html 我的系统是CZ880 的256G版本,读写均可达到400MB/S左右，这个速度已经很接近Sata3固态硬盘了。 WTG + ventoy 按照下图设置好，vhdx容量选择64G。然后选好U盘和对应镜像，写盘完成之后从U盘启动完成初始化，进入一次系统，不然据说ventoy进去的时候会导致系统起不来。（动态存储，64G，实际安装完只有8G，随着使用会慢慢增大） 备份刚才安装好了vhdx，然后安装ventoy，这次会格式化所有的分区，而且默认分区是EXFAT，如果想使用WTG的话需要把系统格式化NTFS，这样才能运行windows。不格式化的话，就会….Any way就是花式错误 把一开始vhdx拷贝回来就行啦。（需要安装个插件 新建ventoy目录里ventoy_vhdboot.img 白名单有时候不想让ventoy显示其他的东西，比如黑苹果的EFI，office的ISO，这样就需要设置显示image_list的白名单。 就是在ventoy目录下ventoy.json这个格式，而且只会显示这里的镜像。 1234567891011121314151617181920{ &quot;image_list&quot;: [ &quot;/ventoy/OS/win10wtg.vhdx&quot;, &quot;/ventoy/OS/linux/archlinux-2023.02.01-x86_64.iso&quot;, &quot;/ventoy/OS/linux/CentOS-7-x86_64-DVD-2009.iso&quot;, &quot;/ventoy/OS/linux/chromeos_15117.112.0_reven_recovery_stable-channel_mp-v2.bin&quot;, &quot;/ventoy/OS/linux/Fedora-Workstation-Live-x86_64-37-1.7.iso&quot;, &quot;/ventoy/OS/linux/FydeOS_for_PC_iris_v16.0-stable&quot;, &quot;/ventoy/OS/linux/kali-linux-2022.4-installer-amd64.iso&quot;, &quot;/ventoy/OS/linux/linuxmint-21.1-xfce-64bit.iso&quot;, &quot;/ventoy/OS/linux/manjaro-gnome-22.0.2-230203-linux61.iso&quot;, &quot;/ventoy/OS/linux/pop-os_22.04_amd64_intel_22.iso&quot;, &quot;/ventoy/OS/linux/pop-os_22.04_amd64_nvidia_22.iso&quot;, &quot;/ventoy/OS/linux/ubuntu-22.04.1-desktop-amd64.iso&quot;, &quot;/ventoy/OS/windows/cn_windows_10_enterprise_ltsc_2019_x64_dvd_9c09ff24.iso&quot;, &quot;/ventoy/OS/windows/win7.iso&quot;, &quot;/ventoy/OS/windows/zh-cn_windows_11_business_editions_version_22h2_updated_jan_2023_x64_dvd_82450200.iso&quot;, &quot;/ventoy/OS/windows/zh-cn_windows_server_2022_updated_oct_2022_x64_dvd_884ce1ea.iso&quot; ]} PS：找chatgpt要了一份自动生成json文件的代码： 1234567891011121314151617181920212223import osimport jsondir_name = os.path.basename(os.getcwd())def convert_to_unix_path(windows_path): return windows_path.replace('\\\\', '/')def get_files_in_directory(path): files = [] for root, _, filenames in os.walk(path): for filename in filenames: file_path = os.path.join(root, filename) relative_path = f&quot;\\{dir_name}\\{path}\\{os.path.relpath(file_path, path)}&quot; files.append(convert_to_unix_path(relative_path)) return filesventoy_json = { &quot;image_list&quot;: get_files_in_directory(&quot;OS&quot;)}with open('ventoy.json', 'w') as f: json.dump(ventoy_json, f, indent=4)","link":"ventoy%E5%BC%95%E5%AF%BCwtg/"},{"title":"你的下一个电脑还得是电脑","text":"M4芯片先给了Ipad，这是没想到的，最近Apple的操作是越来越看不懂了。到同事打赌一年不买苹果产品的期限还没到（M2 Pro买了半年就发M3 Pro 被刺），关于8G起步内存的事也没怎么关注，倒是趁着这次发布会想起来被吃灰的Ipad。 “买前生产力，买后爱奇艺”。吃灰了好久还是决定利用起来。现在的定位感觉还是视频剪辑，甚至还不能写代码，所以一些重量级别的事情只好远程连接windows。 这个是外接显示器的效果，距离M1可以外接显示已经好几年了，但是ipad锁屏之后外接显示器也会黑屏的这个问题还是没有修复，最后只能把ipad的亮度调到最低。 这个是RDP连接Windows的效果，除了RDP logo之外也看不出来其他的东西，然后就可以使用妙控键盘来控制了。 由于合上盖子会导致自动锁屏，所以需要在设置里关闭自动锁定。（本来为了省电设计的功能，到这里就变成了负优化） 这个是合上盖子的效果。 合上盖子RDP的效果： 已经只用MacOS当主力系统已经很多年了，就让Windows活在虚拟机里吧。","link":"%E4%BD%A0%E7%9A%84%E4%B8%8B%E4%B8%80%E4%B8%AA%E7%94%B5%E8%84%91%E8%BF%98%E5%BE%97%E6%98%AF%E7%94%B5%E8%84%91/"},{"title":"使用ipad 串流 MacOS","text":"服务端是sunshine，客户端叫做moonlight MacOS安装的命令如下： 使用该命令会自动拉取源码包并且自动编译，然后使用sunshine命令启动： 12brew tap LizardByte/homebrew brew install sunshine 这个服务会启动在47990端口，进入网页是这个样子 客户端是使用moonlight，可以在app store直接下载 点击 Add Host Manully，填入服务端的ip。 然后会提示提示配对，这里给了一串PIN码，需要填写到服务端的WEB中 然后把上一步moonlight的PIN写到这里 然后对于MacOS来说，需要给到终端录屏和辅助功能的权限。 然后就可以开心的玩了～","link":"%E4%BD%BF%E7%94%A8ipad-%E4%B8%B2%E6%B5%81-macos/"},{"title":"便携显示器","text":"宣传是这样的： 到手是这样的 画质确实很清晰","link":"%E4%BE%BF%E6%90%BA%E6%98%BE%E7%A4%BA%E5%99%A8/"},{"title":"出远门带的电子产品","text":"MacBook/ipad/iphone/nuc12/鼠标/耳机 Gan/移动电源/type C电源 NFC复制器+空白卡","link":"%E5%87%BA%E8%BF%9C%E9%97%A8%E5%B8%A6%E7%9A%84%E7%94%B5%E5%AD%90%E4%BA%A7%E5%93%81/"},{"title":"多平台日程同步","text":"本来是apple全家桶，无奈AWS上的MacOS没办法用，于是在windows端使用outlook对apple的日历进行接入。 首先在apple日历部分添加outlook账户，这样就可以配置完apple日历和outlook的双向同步，在MacOS/IOS上安装outlook客户端，然后windows只需要使用默认的邮件客户端即可。 graph LR i(ics文件) --导入--> ia(iPhone apple 日历) ic[icloud] ma(Mac apple日历) ia io(Iphone outlook) os[outlook server] mo(Mac outlook) os wo(windows outlok) ia is(iphone sorted3) is ic ms(Mac sorted3) ms ma 从下图可以看到日历分为outlook和icloud的部分，我们把后续的日程添加到Outlook部分就好。另外注意的是，outlook的默认日历就叫做“日历”，不能修改名字也不能删除。 同时我也在apple上安装了sorted3，只有日程会被上边的流程同步，任务只能用软件自带的icloud同步（apple设备），这样就满足了在window和apple随时查看和编辑的功能了，sorted3中也可以选择需要同步的日历。 对于批量的日程，那么需要用到ICS文件，实测iphone的微信不能唤起apple的日历，所以采取了发邮件的办法，这里用到的是apple的邮件客户端，倒入outlook会有些许同步的问题，就不再继续研究了。手机的Apple日历倒入之后，全平台很快就可以进行同步了。 这样无论是apple日历，outlook 还是sorted3，只要一个软件添加日程，剩下的平台都会同步。 import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.esm.min.mjs'; mermaid.initialize({startOnLoad: true, flowchart: {curve: 'linear'}});","link":"%E5%A4%9A%E5%B9%B3%E5%8F%B0%E6%97%A5%E7%A8%8B%E5%90%8C%E6%AD%A5/"},{"title":"小米4A刷OpenWrt","text":"最近由于ipad随航经常卡断，导致体验直线下降，有如下几个怀疑： 小米路由器偷工减料无线功能不行 电脑带不动 升级了MacOS13 就说咱对于国产的偏见，以及小米路由器频繁抽风挂后台，还有小米的生态做的稀烂，在和客服人员沟通后得到了模棱两可十分不专业的回答之后下定决心把手边的小米4A刷成OpenWrt，毕竟对于爱好者而言，客服就是半路出家的半吊子，毕竟解决不了问题咱就迁走嘛。本身是资深软路由用户，刷机也没啥成本。 刷前提醒 不要偷懒不刷breed，否则刷崩了就只能救砖 救砖只能用小米自己的软件，毕竟封装的太多了，能用开源就用开源，尽量屏蔽厂家这一层 可以找下国内魔改的Rom，虽然官方有小米的适配，但是刷完默认Wi-Fi，还有过几十分钟5G Wi-Fi变成公开的问题。 还是建议使用有线刷机，无线的话无法刷入Breed 官方的地址，看看就好 救砖刷机之前还是很有必要先说下救砖，只能用到小米的官方工具，而且只有Windows版本，所有这里需要准备一台windows带网口的设备。 MIWIFIRepairTool.x86.zip(980 kB) 用网线把电脑网口和路由器的Lan口连在一起，这样在刷机工具中会看到电脑有一张网卡被路由器DHCP分配了IP，192.168.31.X, 此时无法登陆web 后台。这里建议在打开软件之前先执行这个刷机步骤： 1断开电源，按住Rest键，再接通电源，直到橙灯闪烁再松开2打开刷机软件，这里回识别一会网卡3等待路由器恢复，完成之后指示灯会变成蓝色4然后就可以通过192.168.31.1 进入后台界面了 这个有个小插曲：我一开始在刷机最后一步断电重启的路由器，试了两三次均不能刷入，论坛上也建议不成功的话多刷几次。没有出现需要降级路由器固件的情况。 解锁SSH网上提供了一个Python脚本来解锁路由器的telnet和SSH，然后会预制一个Buybox的环境，其实就是一个Linux的工具箱环境，我们可以执行curl，wget等命令。telnet的用户名和密码都是root。 SSH会遇到这个错误，所以用telnet 了： 本地可以用Python启动一个文件服务器方便路由器下载文件，用SCP，FTP 啥的也行 可以用浏览器访问IP:8000来访问文件服务器，然后wget提取文件链接。 刷入BreedBreed更像是BIOS一类的东西，每次Reset路由器之后，就会进入到breed后台，IP地址是192.168.1.1，如果进不去后台可以把IP改为C类IP地址的网段，然后就可以进到Breed 后台来输入OpenWrt 固件了。 breed-mt7621-pbr-m1.bin.zip(95 kB) 路由器没啥空间了，所以都要放在/tmp文件夹下，把链接换成自己文件服务器的链接。 进入到临时目录:cd /tmp. 下载”breed”:curl https://breed.hackpascal.net/breed-mt7621-pbr-m1.bin –output firmware.bin 执行命令:mtd -r write /tmp/firmware.bin Bootloader 重启后浏览器进入”Breed Web 恢复控制台”:192.168.1.1 v2.5.29 小米4A千兆版OpenWrt固件.zip(39.8 MB) Breed的下载页面：https://breed.hackpascal.net/ 备份分区 我这里先刷的openwrt-ramips-mt7621-xiaomi_mi-router-4a-gigabit-initramfs-kernel.bin，其实已经可以进入路由器后台使用了，然后刷到sysupgrade镜像，其实应该在OP后台刷这个sysupgrade镜像。 刷入openwrt刷完之后，路由器会自动重启，此时telnet会断开。把IP地址改成自动获取，这个时候可以进入到路由器后台了。 设置完无线的用户名密码之后有个很奇怪的问题，WI-FI一直没有网，但是有线正常，后来在Network中删除掉Wan6的DHCP Set就好了。 参考https://www.right.com.cn/forum/thread-4317222-1-1.htmlhttps://blog.51cto.com/xfxuezhang/5866060","link":"%E5%B0%8F%E7%B1%B34a%E5%88%B7openwrt/"},{"title":"小米Ax5400双宽带叠加","text":"硬路由宽带叠加作为临时解决方案，目前只有AX5400和AX9000支持，并且只能是不同的运营商。 高级设置 -&gt; 其他 -&gt; 双WAN设置 注意： 1.开启双WAN功能后会与部分功能冲突，若仍想使用冲突功能，请先尝试关闭双WAN后再试 2.若某些终端设备出现金融类app无法正常使用的情况，可尝试在“WAN口策略”功能中将该设备设置为“WAN1优先”或“WAN2优先”后再试 3.请勿将WAN1或WAN2口与其他Mesh组网设备相连 设置完成的结果","link":"%E5%B0%8F%E7%B1%B3ax5400%E5%8F%8C%E5%AE%BD%E5%B8%A6%E5%8F%A0%E5%8A%A0/"},{"title":"工作台改造","text":"办公无线打印扫描一体机 照片打印机实木电动升降号桌4K显示器要带菊花链 墨水屏显示器移动固态人体工学椅降噪耳机现在有airpod pro2， qc45，华强北airpod Mesh路由屏幕挂灯随身WIFI娱乐4K投影仪吊椅地投幕布 生活即热饮吧自动烘干机全自动扫地机器人可以自己换水自己换垃圾那种 自动拉窗帘家庭中枢 HomePod * 3全屋智能家居定制智能门锁智能猫眼家里要布置的电子设备电脑设备4415U缝缝补补还能再战三年 网络10G 内网24口交换机机柜现在的设备 乐歌自动升降桌 E6—HD 双4K显示器(philip，samsung) NUC8 黑苹果(双系统，内存64G) Ipad air5(apple pencil2 + magic board) 无线打印机(Lenovo M7400 Pro 改) 键鼠(Ikbc，logtech) 耳机(Bose QC 45，Airpod pro 2) 小米路由器AX3000 山特UPS NAS(QNAP 453Dmini， 内存64G) EXSI双软路由(ikuai + openwrt) 小米台灯PRO 公牛插座6排 * 2 绿联Gan 100W 8K typec 视频线 apple magsafe","link":"%E5%B7%A5%E4%BD%9C%E5%8F%B0%E6%94%B9%E9%80%A0/"},{"title":"电容键盘体验","text":"曾经向往过HHKB,也用过一段时间的国产宁芝,总体来说体验还算可以,只是买的早但是只支持有线最后还是弃坑了 这里记录一次电容充电的记录,尽管理论上电容键盘是无限寿命,但是也遇到了按键失灵的问题,客服解释说是缺电需要充电,同时提供了对应的驱动软件,大概过程就是插上电脑,然后用检验工具按下任意键就好了.印象里就充了一次电然后好几年都没问题.特此记录下来","link":"%E7%94%B5%E5%AE%B9%E9%94%AE%E7%9B%98%E4%BD%93%E9%AA%8C/"},{"title":"打印机改无线","text":"过年回家给家里的老式打印机改装了无线打印，了解到目前无线打印分为以下几种： 自带的无线功能，插网线就能用 有线打印机 + 小白盒子 有线打印机 + 电脑共享 安装驱动前两种基本没有什么差异，不过需要手机和电脑分别安装打印机驱动，无线的可能支持微信无线打印，但是用盒子自己改的目前还不支持移动端，这种一般是打印机使用连接路由器，一般公司是这种。 无需安装驱动当然有办法可以让手机不用安装驱动，需要使用PC/MacOS安装驱动之后再局域网共享打印机，这样windows和安卓都能搜到。 苹果特殊的协议有一些老式的打印机会出现苹果设备搜不到打印机的情况， 是因为没有兼容airprint协议导致的。当然新的打印机无需考虑这个问题。曾经有个airprint的软件，现在已经停更，也不想折腾了。Anyaway，劝退apple全家桶的最后一根稻草。","link":"%E6%89%93%E5%8D%B0%E6%9C%BA%E6%94%B9%E6%97%A0%E7%BA%BF/"},{"title":"工具集锦","text":"工欲善其事必先利其器，所以干活之前要先准备好工具，也就是基础设施一类的东西，对于电工网工而言，就是电气设备网线一类的东西了。 电工必备大概是从自制插排开始，一把10元螺丝刀螺丝刀开始，自制插排，换插座吗，就把线接一起就行，没啥难的，注意接的时候断电。 如果你想自己做插排，你可以使用以下步骤：准备材料：你需要一个电缆，一个插头盒，一些电线和电缆接头。切线：按照需要的长度将电缆切为若干段，并分别给每一段线剥去绝缘层，留下裸露的电线。做接头：将裸露的电线与电缆接头相连，并给接头做好绝缘。安装插头：在插头盒中安装电缆接头，并确保每个接头的接触良好。测试：插上插头，确认每个插口都能正常工作。注意：请确保使用适当的工具和安全设备，避免造成危险。如果你不熟悉电器装置，建议请专业人员帮助。 电烙铁手残党哎，一言难尽。忘记留图。以后争取买一把好的电烙铁。 网工以前是因为路由器和电脑网卡不行导致延迟太大，所以需要自己做一段网线，需要买网线钳，水晶头一类的东西。另外顺便把光猫和NAS的网线也给换了。 蓝色是自己做的。 如果你想要做网线，你可以使用以下步骤：准备工具：你需要一把剪刀、一台网线剥线器和网线插头（RJ45插头）。剥线：使用网线剥线器将网线剥去外层的绝缘层，留下八条裸露的线芯。分类：根据网线插头的颜色代码将线芯分为五组，分别是白色、橙色、绿色、蓝色和棕色。排列：排列五组线芯，按照颜色代码将线芯排成一条直线，从左到右依次是白、橙、绿、蓝和棕。对接：将网线插头与网线相连，把排列好的线芯插入网线插头中，直到线芯完全插入插头。测试：使用网络测试仪测试网线的连通性。注意：网线插头的颜色代码有不同的标准，在选择网线插头时请确认使用的是适合你的网线标准。 水晶头剥线钳其实现在的网线都是B类的直通线，网线线序xxx，不够据说现在的交换机都能智能识别线序，从二层这里兼容了双绞线和直通线，当然本人偶尔也有把线序弄错的时候，但是竟然还可以正常传输，这点不得而知。 螺丝刀学生时代买的10元螺丝刀用了很多年，遇到其他尺寸也要单买不同的规格，况且买东西经常赠送小螺丝刀什么的，每次换一个地方都要买一个螺丝刀套装，miniso的15元套装也用了很多年。不过入手了电动螺丝刀之后兼职不要太幸福，拆电脑，门锁窗户把手都是分分钟的事。按左边拆螺丝，按右边拧螺丝。","link":"%E5%B7%A5%E5%85%B7%E9%9B%86%E9%94%A6/"},{"title":"硬件常见的坑","text":"苹果外设 秒控键盘和笔没有平替 有了homepod还需要一台手机转发，手机关机指令无效 苹果建议不低于4K，不然屏幕发糊 键盘 ikbc有时候锁定win按键 [^1] 锁定 Fn+左win 解锁 Fn+ 右win(ikbc w200实测) 电容键盘没电要使用软件给电容充电 NIZ plum静电容键盘的alt和win键互换位置: 按住Fn和侧面标注有Win/Mac的按键3秒以上，看到指示灯闪烁就代表成功切换。 typec一线通 便携显示器可以使用笔记本给屏幕供电，此时显示器作为hub 大型显示器可以使用显示器给屏幕供电，此时显示器作为hub c口ipad也可以一线通，此时显示器作为hub 部分安卓手机可以一线通，此时显示器作为hub 部分小米手机能充电，能做hub，不支持视频 显示器不支持给充电c宝供电 三星客服说vesa壁挂和支架分开的显示器不能升降旋转 大于65W/90W 以上的机箱不建议typec一线通，功率跟不上会关机 typec 用了Dock就不能一线通了，因为已经不是全功率了 4K视频线和屏幕线一般可以混着用 充电线一般是2.0，4K线可以3.0满速 100W充电宝和氮化镓 加个设备会重新分配功率 2Wmah充电宝给电脑只能支持俩小时 不用apple自家的充电头，magsafe最多10W PC typec无法充电，MacOS开机无显示器不进系统 NUC 维奇说白苹果也是没显示器不进系统 typec无法充电试试退出运输模式 电脑的坑 有些笔记本没有主板电池，内置电池用完了bios会恢复出厂设置 标称最大支持16G/32G还可以插更多内存 [^1]:IKBC键盘Win键失效的解决办法_NXGG的博客-CSDN博客_ikbc windows键","link":"%E7%A1%AC%E4%BB%B6%E5%B8%B8%E8%A7%81%E7%9A%84%E5%9D%91/"},{"title":"网络维修记录","text":"房屋选择 加了宽带师傅B微信，几天没有结果，经得知属于联通网络，遂工信部投诉，第二天联通打电话，告知他们IP.cn和speedest都显示是联通的IP。联通师傅A一直在重复不是联通的网，然后安利办理宽带。询问是不是有二级运营商或者其他方式走联通的主线缆，师傅A还是在重复不是联通的网，而且谈话提到师傅B又还是岔开话题显然知道里面的猫腻，又开始重复不是联通的网让再办一条。无奈只能赶他出去了。 接线的也是人才，一根8芯的线硬生生给拆成了4根接WAN，4根接LAN，网线的一头同时接WAN口和LAN口。 交叉测试 客厅原网线 + 原路由器 = 80M 客厅新网线 + openwrt = 200M+ 客厅新网线 + 原路由器 = 80M左右（可以说明是百兆路由器 成果从4-80M不等实现了全屋200M宽带覆盖，DHCP看到连接成功。 traceroute结果如下，上边还是有个交换机，好像还是给包了一层，中间商做的PPPoe。","link":"%E7%BD%91%E7%BB%9C%E7%BB%B4%E4%BF%AE%E8%AE%B0%E5%BD%95/"},{"title":"记录mokee刷机","text":"How does flash mokee as Android System?如果你的系统是稳定版的话，可能需要先降级回到开发版 0. unlock and image zip downloadYou can use SD card or OTG USB as your image zip storage. mokee MK-${version}.zip (system zip) Magisk-v21.0.zip (ROOT solution &amp; Universal Systemless Interface provided by John Wu) open_gapps (GSM services) 1. twrpfind your android device1adb device reboot into fastboot1adb reboot bootloader flash twrp into fastboot1fastboot flash recovery twrp.img after flash twrp rec 1fastboot reboot 2. use image to flash device1fastboot flash recovery twrp-x.x.x-x-x.img 2023 年 mokee 已经停更了","link":"%E8%AE%B0%E5%BD%95mokee%E5%88%B7%E6%9C%BA/"},{"title":"MacOS干扰那些事","text":"随航掉帧https://discussionschinese.apple.com/thread/253757661 直接查有线之后，速度有很大改进，原来不是随航掉帧，是路由器不行。 airpod pro和蓝牙设备串扰2.4G 干扰https://support.apple.com/zh-cn/HT201542没辙，换homepod吧，起码homepod还真的不错","link":"macos%E5%B9%B2%E6%89%B0%E9%82%A3%E4%BA%9B%E4%BA%8B/"},{"title":"雷电4传输","text":"市面上的对拷线总是没有称心如意的,做的最好的应该是绿联, 于是在ChatGPT上询问了相关事宜,大概意思就是一个把雷电设备虚拟成一张网卡,然后设置一个单独的网络通道,两台机器使用IP地址进行通讯,知乎上也有成功的雷电3案例,只是他们WebDav的速度是600MB/S 而我的是雷电4也是这个结果,只是在NUC12识别时候总是不能满速识别. 咨询客服之后也没有得到满意的结果,不久前intel吧nuc业务线给华硕了,结果售后只是给排查方向,看BIOS有没有打开雷电开关之类的,或者就是等待十天半个月的返厂检测. webdav: window下显示 20G的虚拟网卡,在linux下也是如此 设备管理器显示USB4而不是雷电4 直连MBP两个雷电口: popos 和MBP使用iperf3对打: MacOS: 雷电4的线+40G硬盘盒 40G硬盘盒原装测速 win测速","link":"%E9%9B%B7%E7%94%B54%E4%BC%A0%E8%BE%93/"},{"title":"代码之髓","text":"1。 从需要的地方开始阅读2。 先掌握概念再细读3。 如果以上不奏效，从头开始手抄。按照时间间隔来衡量学习效果，每隔25分钟看学习了多少。","link":"%E4%BB%A3%E7%A0%81%E4%B9%8B%E9%AB%93/"},{"title":"关键20小时","text":"快速学习●分解步骤——把技能做最大程度的细分，分成若干小步骤。 ●充分学习——对每个小步骤进行充分学习，以便进行灵活的练习，并在练习中自我纠正。 ●克服困难——克服在练习中出现的生理、心理或者情绪上的障碍。 ●集中练习——至少用20小时集中学习最重要的小步骤。 技能习得1.早期认知。了解你即将学习的技能是什么，探索研究，想想整个过程，把技能细分为几个可以控制的小步骤。 2.中期联想。训练、注意环境反馈，根据反馈调整方法。 3.后期自主训练。不用怎么有意识地注意方法步骤就可以很自如地开展技能训练 速习得技能的10个方法1.选择方向；如果你优先学习你感兴趣的事，那么你肯定花不了多少时间就能学成。 2.集中精力；“集中精力，只学一门”对快速习得技能的重要性是不言而喻的。当然，这并不意味着你把其他技能拒之门外，只是你暂时将之搁置，等待未来重拾。 3.制定目标；你的目标制定得越轻松，掌握相关技能的速度就越快。快速习得技能的目的并不是要尽善尽美，成为世界级大师，而是要在兼顾能力和效率的同时，快速提高技能。 4.分解技能；我们学习的大部分技能都需要细化步骤。当定下想学习的技能后，就该把这项技能细化为若干步骤。学会对步骤进行筛选。把关键的步骤先找出来，再集中时间和精力去学习。 5.获得工具；对于某些技能而言，只有获得了必备工具，我们才可能最大限度地利用时间充分学习。 6.扫除障碍；●训练前的准备工作。例如，训练前找不到工具放哪儿了；训练前还没有选到合适的工具；忽略训练的必要条件。●使用临时训练工具。例如，借别人的装备，也就是说，你使用的器材是有时间限制的，随时会被要求归还。●环境干扰。例如，开着的电视；突然响起的电话；刚刚收到的电子邮件。●情绪障碍。例如，害怕；怀疑；害羞。 7.腾出时间；腾出时间,建议你下决心保证20小时的训练量。一旦训练开始，就别停下来。如果中途卡住了，一定要坚持住，直到达到20小时这个初级训练目标。如果你没有毅力投入20小时，那么请你放弃。 8.及时反馈；快速反馈有助于快速习得技能。如果反馈及时或只有一点点延迟，我们会更容易把实际操作情况和目前所获得的结果联系起来加以分析，再做出适当的调整 9.计时训练；初学一门新技能时，往往容易过分估计实际投入训练的时间。特别是当你状态不佳时，你会发现训练时间过得像蜗牛爬一样，慢慢吞吞。事实上，你实际训练的时间远没有自我感觉的时间那么长。你只需遵守一个规则：一旦计时开始，中途一定不能停下来。记住：在你练得有点泄气时，这个方法会让你更加轻松地完成更为持久的训练。持续训练的时间越长，技能习得就越快。每天腾出时间做3~5次这样的分段计时训练，短时间内就会看到明显步。 10.数量速度。刚开始习得新技能时，人们往往希望做得尽善尽美，但力求完美很容易让人产生挫败感。因为我们永远都不可能做到百分之百的完美。别去设想有完美的表现，保持良好状态的同时，保证训练量和训练速度才是最应该考虑的。练就一门技能必须用心，必须坚持。刚开始学习时，不要盲目追求质量，相反，必要的训练量和训练速度才是制胜法宝。练得多，练得快，才能学得快。 有效学习的10个方法1.收集信息；实践前，查阅一下和这门技能相关的信息是十分必要的。例如，花20分钟的时间上上网、去书店或者去住所附近的图书馆找找相关参考书和资料。总之，你应该想方设法地找到关于这门技能的参考书（至少三本）、教学DVD、教学课本或者别的学习资料。 2.克服困难；在早期研究中，参考资料里有很多让人疑惑不解的地方，有的是概念，有的是方法，有的是理念。通常情况下，你很清楚它们的重要性，可是你始终无法理解它们的意思。既无法理解为什么要这么说，也无法理解为什么要这么做。别紧张，有困惑很正常。 不愿克服困难是影响技能习得快慢的主要因素。愚蠢的感觉的确不好受，不过请你随时提醒自己：随着技能实践的不断深入，你会慢慢解决这些疑惑，最终理解这门技能 3.关联类比；不愿克服困难是影响技能习得快慢的主要因素。愚蠢的感觉的确不好受，不过请你随时提醒自己：随着技能实践的不断深入，你会慢慢解决这些疑惑，最终理解这门技能 4.逆向思维；学习新技能前，别去幻想你会学得多么完美。多设想一下最坏的结局吧！ 5.咨询交流；投入时间和精力学习新技能前，有必要和内行聊一聊。这样我们可以提前预知技能训练的每个阶段会遇到的情况，从而消除对技能学习的疑虑和误解，使我们在技能训练的过程中不但不会灰心丧气，反而会更有兴趣坚持下去。 6.排除干扰；干扰因素越少，技能习得就越有效。 7.间隔重复；“间隔重复”是一个很好的记忆方法，它可以帮助我们定期且系统地回顾所获取的知识和信息。对于那些记忆起来有难度的信息，我们更要经常复习，而对于那些记忆起来相对简单的旧知识，我们不必经常复习 推荐：Anki SuperMemo Smartr 8.创建定式；大多数技能学习都有一套固定的模式：确定项目、着手准备、坚持学习等。建立一套简单的定式可以让我们比较轻松地了解其中的关键环节。罗列清单方便我们记住学习要点，使技能训练的流程更加系统化，以便我们把精力投入到关键环节上。创建定式确保每次训练都有一套固定的模式。 9.预期测试；预期测试是指依靠已知经验，在尝试实践前假设接下来会发生的变化或者产生的结果。如果你养成了预期测试的习惯，那么你学技能会更高效。科学地讲，预期测试结果随着以下四个因素的变化而变化 ●观察——你最近在关注什么？●经历——你对这个领域了解多少？●假设——怎样做会才会更进一步？●测试——下一步你有什么新尝试？ 我建议用一个笔记本或者其他的工具记录你在训练中做出的假设。如果你不断思考这些假设，并且形成新的想法，那么你的实验成果会更加丰硕。 10.尊重生理。我们的大脑和身体都处在各自的生理系统中，因此，它们都有生理需求，比如食物、水、锻炼、休息、睡眠。我们不能把自己逼得太紧，这样会适得其反。因为大脑和身体在没有足够能量储备的情况下是不可能高效运转的 最佳学习周期是90分钟左右，在这个周期内，人的精力是最集中的。大脑和身体都需要一个自然的休息。因此，我们要瞄准时机锻炼、休息、吃饭、享用零食、打盹儿或做别的事情。 定期腾出时间练习，这就是练习的诀窍。","link":"%E5%85%B3%E9%94%AE20%E5%B0%8F%E6%97%B6/"},{"title":"吃掉那只青蛙","text":"明確目標：確定你自己究竟想要什麼。目標清晰至關重要。在每天開始工作之前，把你的目標全部寫下來。 精心計劃：把你的想法付諸筆端。你花費在準備工作上的每一分鐘時間，都將使你在工作過程中節約5～10分鐘的時間。 運用80/20法則：20%的活動能產生80%結果。因此，盡量把你的精力集中在那20%的活動上。 著眼未來：對你來說，最重要的、應該優先處理的事情就是那些將對你以後的生活或者工作產生最重要影響的事情，無論該影響是正面的還是負面的。首先全力以赴地處理這些事情。 學會說「不」：既然你沒有時間去做所有的事情，你必須學會推遲處理那些沒有什麼意義的工作，從而騰出時間來處理那些少數的、重要的工作。 使用ABCDE法：根據自己列出的工作清單開始工作之前，先花費一點兒時間，根據輕重緩急對這些事情進行安排，從而確保你先處理最重要、最有價值的事情。 抓住關鍵：要想圓滿完成自己的工作，你必須具備哪些能力和技能？找出這個問題的答案，然後通過日復一日的努力來解決上述問題。 抓大放小：找出你工作中最重要的三件事情，你對公司90%的貢獻都來自這三件事情。無論如何，先把這些事情做好，然後，你才能騰出更多的時間來安排你的生活。 精心準備：著手工作之前，先把一切都準備就緒：所有的資料、信息、工具、辦公用品，以及你可能用得到的數據，然後，你就可以全心全意地工作了。 循序漸進：如果你下定決心一步一個腳印地前進，那你就能完成最艱巨、最複雜的工作。 精益求精：你在自己的領域內知識越淵博，技能越嫻熟，你動手就越快，任務完成得就越早。 施展才華：確定你最擅長做什麼事情，或者說你能把什麼事情做得最好，然後全身心地投入這些工作，精益求精。 突破瓶頸：確定影響你實現自己目標的瓶頸所在，或者是主要障礙，無論是來自外界還是來自自身，然後集中精力消除這些障礙。 自我施壓：假設你即將離開你所在的城市，外出一個月的時間，離開之前必須把所有重要的工作都處理完。 挖掘潛能：確定你每天什麼時候處於腦力和體力的最佳狀態，然後據此安排自己一天的工作，盡量在這段時間裡處理那些最重要、最緊迫的任務。要注意充分休息，從而保證最佳狀態。 說幹就幹：做你自己的拉拉隊隊長。在任何情況下，都尋求事情積極的一面。把精力集中在如何解決問題上，而不是問題本身。要保持樂觀向上的態度。 避開科技陷阱：你可以利用高科技來提高自己的通訊質量，但是注意不要讓自己成為科技的奴隸。要學會偶爾把所有的通訊設備都關掉，切斷自己與外界的聯繫。 化整為零：把複雜而又艱巨的大任務分割開來，變成許多部分，每次只處理一小部分。 創造大塊時間：為自己安排一份日程表，然後集中精力用那些大塊的時間來處理對你來說最重要的事情。 培養緊迫感：養成迅速處理重要工作的習慣。把自己培養成一個能迅速、圓滿完成工作的人。 全力以赴：根據事情的輕重緩急來安排優先處理的事情，然後立即著手處理最重要的、必須優先處理的事情，全心全意地去做這件事情，決不中途停止，直到百分之百地完成為止。這是工作高效、業績突出的關鍵所在。 下定決心，每天都實施這些規則，直到它們成為你的第二本性。一旦你在時間管理方面養成上述習慣，使之成為自己個性中一個不可分割的部分，你的前途將不可限量。說做就做！吃掉那只青蛙！","link":"%E5%90%83%E6%8E%89%E9%82%A3%E5%8F%AA%E9%9D%92%E8%9B%99/"},{"title":"好叶视频笔记","text":"有明确目标，加速达成规划 目标不会不变（喜欢做的/擅长的）、 成功不需要天赋（结合自己的技能/技能优劣分类，找出5个） 好点子+简单策略，成就=潜能/方向（更高目标+要事优先+其他想法记录暂缓+成功健康共存），其他选择say no 热情源自于成功，毁于挫败和标签。 创造热情的方法（创造，抢新潮流，整合自己的技能点） 悲观和负面评价只有悲观的结果（习得性无助）、 ABCDE（Adversity 挫折，Belief 信念，Consequence 后果，Disputation 争辩，Energization 获得能量） 不要在乎别人的负面评价。讨好别人只会碌碌无为，屈服于这个时代的暴力。 正面思维加强做事的活力，加速学东西，悲观思维会否定可能性。 正面思维的七个方法： 观察想法 感恩日记 重塑思维（怎么可以达到 正面想法 给别人正面想法 注意想法：放弃受害者思维，清空不幸的想法 避免负面环境 无法致富的四个观念（钱的罪恶感，对别人的话太敏感，保持现状，不愿意先付出，企业需要三五年后或者10年） 复利思维，每天进步一点点 小事百分百对自己负责，完成小行动 做事会吸引相似的人和事 成为什么样的人有没有这个习惯，不习惯有没有这个习惯，习惯和核心价值观一致吗，习惯合理吗？ 视觉化和肯定 视觉化过程而不是结果 联系自我肯定 不切实际的幻想可能反效果 二八定律：20%的努力产生80%的结果，外包80%可替代的事情 帕金森定律：有限时间内占用时间会膨胀（限制=高效）任务期限前移一半，尊重承诺，只做少数事情 恢复能量的方法： 精力管理： 间歇性休息：（52/17） 睡眠：每天7-8H或者午休20min 甜食水果补充损失的意志力 运动加强专注力和记忆力，决定意志力 操控意志力，给意志力奖励，自我对话激励意志力 记录微小决定待会再做：为大事保存能量 if -then机制：减少决策损耗的能量 控制工作环境，为工作做铺垫（霍桑效应：被监视的时候更有生产力 5倍提升法： 关闭手机通知，控制手机（6秒钟看手机，等于损失25min高效时间 隐藏工作关的APP（app放在不容易看见的地方 设置信息时间段（特定时间接收消息 每天的能量循环：90/20间歇：90分钟深度工作，20分钟休息，根据自身适当调节","link":"%E5%A5%BD%E5%8F%B6%E8%A7%86%E9%A2%91%E7%AC%94%E8%AE%B0/"},{"title":"效率（忘记哪里摘抄的了","text":"1.两分钟法则如果一件事可以在两分钟内完成，比如回复邮件，一个简单的家务，就立即完成，因为记住它、计划时间、在后来完成它，可能会花费五分钟甚至更多的时间。 2、五分钟法则拖延症是影响工作效率的大魁首之一，想要治愈它不是给自己定下目标、下定决心去完成一项大任务，而是只在那件事上花五分钟。你会发现在大多数情况下，它在超出五分钟的时候依旧很顺利，因为你已经进入了平坦期。 3、不要坚信自己的记忆力很强悍即使你是一个记忆天才，也要把每件事都从你的脑子里清理出来，并进行记录，方法不重要，可以把它们写在一个笔记本里，也可以放进专门的应用里等等。 4、30分钟专注于一件事在30分钟内只做手头上的事，不去理会其他任何事，没有电话、没有邮件、不说话、不看QQ消息提醒，除非发生火灾。当然，如果老板找你谈话例外，这是没办法的事。 5、尽量保持睡眠时间，白天小睡睡眠少可能导致许多能力退化，不是危言耸听，美国军方研究表明，“每天少睡 1 小时持续一周会导致相当于 0.1 血醇水平的认知退化”。 《睡眠的秘密世界》指出：熬夜之后无论白天你干得有多好，情绪也不会太高。更重要的是前瞻性思考能力、行动的意愿、对冲动的抑制力、乐观程度、同理心、情商等也会下降。 所以，白天小睡真的是个好习惯，你没有发现爱熬夜的自己变笨了吗？ 6、总是戴着耳机戴着耳机不一定在听音乐，这可以防止别人接近你、打扰你。有些人听音乐时工作效率更高，比如小编。 7、程序员离开手机一会儿真的没关系工作时把手机调成静音，放在眼睛看不到的地方，可以分批集中时间处理电话短信。 还有邮箱也一样，不用一直去关注，特别是放在早上和晚上处理，把需要解决的和代办事件列表连在一起，有用的存档，做到邮箱清零。 8、MI3早上理出最重要的三件事，或是改成一件必做的，3件应该做的，或是五件可以做的，然后开始做最重要的一件事。不要认为意志力可以解决一切，把最重要的事情放在早晨做，并且尽可能地让所有事情自动化（委托，分批等等）。 9、有计划的拖延你的大脑需要休息，并且有时候新一期的绿箭侠可以比最好的TED演讲创造更大的奇迹。 10、假装无能有时候假装无能能让你更有精力去展示自己的能力。 11、不追求完美，程序员更不需要达尔豪斯大学的心理学教授 Simon Sherry 的完美主义与生产力研究发现，完美主义是生产力的绊脚石： 完美主义者完成任务需要花费更多的时间。 完美主义者因此等待完美时刻而耽搁。就商业而言，如果你等到了完美时刻时间已经太迟。 完美主义往往因为一叶障目而不见泰山，因为过于关注小事情而错失了大场面。 所以，真的，差不多就行了。 最后，还有一个方法就是把信用卡刷爆，当你觉得对工作不满意、没动力、效率不高时，去把你的信用卡刷爆，绝对鸡血满满，这个方法只为大家开心一下，要是这样还没动力： “吃苦耐劳”真的是优良品质吗，与你怎么做相比，老板们应该更关心你做了什么、达到的效果。所以，效率，还是效率，希望这些实用小技巧对大家有所帮助。","link":"%E6%95%88%E7%8E%87%EF%BC%88%E5%BF%98%E8%AE%B0%E5%93%AA%E9%87%8C%E6%91%98%E6%8A%84%E7%9A%84%E4%BA%86/"},{"title":"《每个人的OKR》书摘","text":"物质激励会减弱内在动机，降低绩效；鼓励不道德行为，减少创造力；助长短视思维。 [toc] 时间管理的一些术语OKRO：objectives 目标 KR：key result 关键结果 针对O有KR1，KR2，这个其实类似于里程碑， O KR 信心指数（1-10） 备注 KR1 KR2 KR2 每日站会 -&gt; 周会 -&gt; 月度会议 -&gt; 季度会议 -&gt; 年度 SMARTS：Specific 具体的 M：measurable 可衡量的 A：attainable 可实现的 R：Relevant 相关的 T：time-bound 有时限的 帕雷托原则 帕雷托原则，也可称为二八法则，由意大利经济学家帕雷托提出，意思是让20%的投入产生80%的效益 我们在每天的工作中，总会有精力充沛的时候，也会有大脑疲劳不堪的时候。因此我们要把握一天中精力最充沛的时间去集中精力做重要的事情。在疲惫时，我们则可以停下重要的工作，去做一些琐碎的事情，比如处理邮件等。 “吃青蛙”定律 “吃青蛙”定律来自博恩·崔西的《吃掉那只青蛙》。 “青蛙”是指最艰巨、最重要的任务。坚持三个原则： 每天早上做最难的那件事，那么，一天之内就没有比这更糟糕的事情了； 面对两件重要的事，要优先做更重要的那一件； 对于重要的事，要立即行动，说做就做，否则考虑得再周全而不行动也无济于事。 时间管理小贴士 1.拒绝拖延症 2.赢得时间 把工作写在纸上思考 建立工作时段，集中处理重要任务或同类任务（批量处理，缩小切换的时间） 开工前准备好所有材料 设立拒绝打扰时间（保持专注） 从小事做起 重要的事情拥有优先权（要事第一） 将任务分成若干环节，分别进行处理 尽可能做那些确实关键的工作 抑制完美主义 学会授权，对于烦琐的服务性工作可以借助他人之手（授权外包） 保持快节奏 任务分解，由大到小，由复杂到简单（任务分解） 给每一项任务规定完成期限（DDL，没有期限的会一直拖着） 重点任务，尽早完成 (吃掉那只青蛙) 根据自己工作效率或者注意力的高低波动，规划做事顺序（能量高峰） 关于居家办公营造办公环境规划工作时间专用空间吃什么明确目标阶段性在家办公的时候，我们制定OKR要注意： （1）周期可以更短，1个月或者两个月为一个周期，甚至一周，加快节奏，提升产出； （2）要与上级及关联者沟通，达成一致。 遵循以下5W1H法则： 何人（Who）： 何时（When）： 何事（What）： 何地（Where）： 为何（Why）： 如何（How）： 制定周计划 任务清单，明确如下： ● 具体的任务：要做什么？ ● 任务的产出：如何判断完成了任务？ ● 任务的完成时间：什么时候完成？ 在制定任务清单注意要点： ● 每个任务，完成的时间不超过1天。 ● 每个任务，都应有完成标志。 ● 任务的完成信息，能够共享和同步。 制作周计划任务可视化看板。可视化看板包含三要素： ● To Do：本周计划要完成的任务项。 ● Doing：今天将要做的任务项。 ● Done：本周已经完成的任务项。 深度工作 每次深度工作可以设定在45分钟到1.5小时之间。 根据注意力恢复理论，我们的注意力是有限的，只能在一段有限的时间内专注于一项任务，直到它变得让人筋疲力尽。 至于一项任务是否属于深度工作，可以参考以下问题： ● 该任务是否需要集中注意力？ ● 任务需要有专门的知识技能吗？ ● 任务很难重复吗？ ● 该任务会创造新的价值吗？ 保持不间断的专注，你需要创造一个无干扰的环境。这意味着要屏蔽无关的和破坏性的打扰——聊天信息、电子邮件、会议、电话、社交媒体及其他杂音。非常需要注意的一点是，要与你的团队和上级达成一致：允许你不及时回复消息。 由于这个原因，许多人强制执行严格的“隔离措施”： ● 将手机设置为“免打扰”模式； ● 将邮箱设置为自动回复消息； ● 将“深度工作”时间分享给同事。 每周回顾：花时间反思过去一周进展顺利和失败的原因，并计划下一周的工作。 这是检视目标，并确保自己每天所做的工作能够帮助自己实现目标的机会 在回顾的时候，我们可以参考以下问题清单： ● 我本周总体感觉如何？ ● 是什么让我在本周达到目标？ ● 有什么事情阻止我本周实现目标？ ● 我本周采取了哪些行动来推动我实现长期目标？ ● 下周我该如何改善？ ● 下周我该怎么办，以使我实现长期目标？ 营造环境、明确目标、深度工作和每周回顾，这是使在家工作更高效的四步法。 但是，至关重要的是：寻找初心。 初心，是指自己感兴趣的事，能发挥自己优势的事，可以实现自己价值的事。 拥有初心，你就具备最大能量，就会取得更多成果。” 时间表参考： 上午时间 要做的事情 备注 其他 6:00 - 7: 00 晨间流程 先洗漱收拾屋子（30min），然后冥想，做导引（30min）， 7:00 - 8:00 吃早餐 上个流程把该下锅的都下锅 8:00 - 9:30 深度工作 内容为： … 12:00 - 13:00 午饭 … … 16:30 - 17:00 结束工作 需要复盘然后规划下一天 自我激励: ● 成功之后奖励自己吃冰激凌 ● 每天早上起来对着镜子说：我是最棒的 ● 回想自己的巅峰时刻 ● 告诉好朋友自己的想法 ● 先开始一小步 ● 记住：完成胜于完美","link":"%E3%80%8A%E6%AF%8F%E4%B8%AA%E4%BA%BA%E7%9A%84okr%E3%80%8B%E4%B9%A6%E6%91%98/"},{"title":"自控力","text":"重读《自控力》，几点感受如下： 1.意志力是可以消耗的、意志力像肌肉一样，是可以消耗的。 2.容忍罪恶，自我救赎中国自古以来的耻感文化不利于自我救赎，会造成轻微的心理创伤，时间长容易患抑郁症，什么都不想干就是对当前的行为表示不满，并且没有更好的方法。 3.意志力会传染一个好的团体至关重要。 4.我不要的我力量不要想一头粉色的大象，你的脑海里出现了什么呢？ 5. 拥抱无聊允许自己就这样的活着。","link":"%E8%87%AA%E6%8E%A7%E5%8A%9B/"},{"title":"驯服头脑中的野兽","text":"野兽特征 第一点 讨厌难的事情 （为了防止浪费能量） 对所以刺激都有反应 （并行处理） 力量大 （处理速度快） 驯兽师 第一点 逻辑导向 （只能串行处理） 能力消耗大 （很多依赖大脑的工作记忆） 力量弱小 结论 第一点 驯兽师无法战胜野兽。（战斗力，野兽是发散意识，驯兽师是集中记忆 世界上不存在擅长集中注意力的人。（重新来过就好） 如果能引导野兽，就能获得巨大的力量。（信息干消耗专注力） 给野兽喂食填饱肚子，和咖啡（减少疲劳感，专注时间会变长，150-200mg咖啡因） 和咖啡的原则 不要和太多，超过300mg效果消弱，400mg产生副作用 咖啡加速牛奶或者奶油（有些人心跳加速可以缓解） 起床90min内不喝（防止和皮质醇冲突） 2B-Alert（请google，一个美国的算法） 和绿茶一起喝（咖啡因 + 茶氨酸 效果提升） 饮食方法补充必要营养 铁、锌、镁等矿物质 维生素D 叶酸、维生素B12 ω-3脂肪酸 胆碱 必需氨基酸 S-腺苷甲硫氨酸（SAM-e） “MIND”饮食（多吃对大脑有益的，少吃有害的，不限制卡路里） 良好饮食习惯，记录mind饮食法的日期 专注力日志+记分板（记录专注多久了） 当成游戏①增加有效的获得回报的预感。②减少无效的获得回报的预感。 影响注意力的因素（单调乏味，难度不对） 内观和正念 意志力会越用越少 控制自己会消耗能量 能力用尽无法控制 已经否定了补充糖分理论 观察自己 观察自己所想，比如目前状态，走路状态， 走神之后拉回来，然后继续 一次只做一件事，吃饭的时候不要刷剧 幻想平静的场景 工作环境 专用空间 专用设备（工作手机电脑和生活手机电脑） 账号分区（同工作和生活） 内容拦截（短信和广告） 噪音管理（降噪耳机） 自身性格（外向音乐加强效率，内向降低） 纯音乐（歌词会降低专注力） 工作间隙听音乐 适当记录情绪（比如无聊，焦虑，把情绪物质化，像什么。。。 观察情绪而不是控制 学会放弃和休息很多人会有如下误区，在众多的压力中，自责是伤害最大的。所以要自我接纳。 ①过分追求专注力。②过于责备自己没有专注力。 既然事情已经发生了，接纳就好，不需要评判，只是去观察。 做一些补救的办法，尝试相关的新事物（有优势的，能学到东西的） 休息的方法 微休息(几十秒到几分钟) 任务休息（和番茄工作法类似。不过是防止休息跑远了，在复杂任务间隙做简单任务，达到休息的目的。降低大脑运算速度。 积极休息（休息时做温和的运动，比如定期散步） 超积极休息（高专注力的多巴胺，剧烈运动释放压力） 美军睡眠法（从头到下冥想放松） 偶尔睡个午觉（自己加的，毕竟多阶段休息）","link":"%E9%A9%AF%E6%9C%8D%E5%A4%B4%E8%84%91%E4%B8%AD%E7%9A%84%E9%87%8E%E5%85%BD/"},{"title":"关于速食我想说的话","text":"Soylent最早接触的速食是Soylent，准确的说应该是代餐，据说是一个程序员为了节约时间发明创造的产品，他那个时候没有AIGC时间都浪费在debug上了，所以从吃上来节省时间。无论是学生时代还是在帝都上班的时光里，这款产品的定位始终透露着吃不起的风格，而且国内一直没正规渠道卖过，只能海淘遂放弃。 若饭海外的东西国内总有平替，这个叫做“若饭”，也曾疯狂追捧过，除了是为了腾出时间让老板过上更好的生活，要么就是外边的饭太难吃了。这个花样很多，固体的粉末的，还有其他口味以及能量棒什么的。总结下来就是真的吃不饱，起码两瓶才能保证没有饥饿感（好像也没有饱腹感），号称科学的添加了各种人体所需的营养，可以满足人体的需求。尽管这样，官方对他的定义仍然是建议每周保持几顿正常餐饮。不过在帝都，不吃几条街的馆子那就可惜了，遂放弃。 接下来是几款速食产品，单品不超过一顿饭的成本，按照时间顺序有蔡林记，阿宽，拉面说，牛肉河粉。至于速热米饭和自热锅，本来印象就不好，就不在这里再踩一遍了。 蔡林记京东购入，打折的时候不到10元一包，当初也是被公司附近的小馆子逼到只能网上买吃的，公司的饮水机的热水永远也泡不完两碗热干面，个人也不是很喜欢酸豆角，即使每顿两碗，这个能量还是供应不上学习时候的用脑过度。连着吃几天还是会感觉身体营养不良。 阿宽小面味道不错，单价实惠，面皮吃了很上瘾，但是真的没啥能量，肚子饱了但是脑袋反应不过来，不能常吃，后来还是去同学家一口气吃了两三大碗米饭（排骨玉米汤）。 拉面说拉面说似乎是这里最高档的面了，这个是半干半鲜面，一半都需要煮上6-8分钟，再用开水冲开里面的料包，所以这个不适合在办公室吃，汤面多一些，拌面少一些。配料应该是速食界的天花板了，但是也抵不住疫情期间每天吃过的厌倦，真的不会再买了。另外狠狠的吐槽下和府捞面，除了宣传的书房里的拉面，其他都是严重掉粉，量上价格贵又难吃系列，貌似现在店里也是这种预知的餐盘，但是卫生问题仍然不能保证，工作人员素质问题有待提高。 五谷道场本来方便面是不应该放在这里的，毕竟非油炸国产之光 个人心中的国产方便面排名： 五谷道场 &gt; 汤达人 &gt; 康师傅 &gt; 其他 五谷道场兰州牛肉面和线下兰州牛肉面味道一模一样，辣子的味道能品尝出大西北的粗犷 牛肉河粉线下58一碗的河粉尽管可以免费续面，但是单价还是很贵，于是超市购入一箱火车头河粉，还是面饼+汤料的搭配，只是这个价格赶超拉面说还是让人觉得没有下次了。味道嘛，以后还是去吃线下吧，大不了再多续几碗嘛～ 羊肉泡馍女同事推荐的，山姆超市高档货，味道很浓郁，料包需要开水煮，我这砂锅煮了五六分钟打开看羊肉还有部分红血丝。不过味道不错，比上边同价位越南河粉好上不少。 日清拉面Youtube刷到了日清拉面创始人的故事，所以直接上网买了一堆，不过都没有青菜包，图片的肉片也是没有的，感觉还是拉王比较好吃，泡开了之后看起来很像日式拉面而是方便面，其他的泡开的和方便面没差。鸡汤拉面也很惊艳，用开水冲泡开就能直接收获一碗鸡汤面，生的面渣还能当作干脆面吃。出前一丁是日清的子品牌，其他都是杯面（基本上都是合味道），因为吃不饱就没有买。 这个就是日清拉王泡开的效果了，基本上看不出是方便面，再加上空气炸锅烤的鸡蛋简直完美～ 总结价格上真的不值得，营养也不见得跟得上，还是好好吃饭吧～","link":"%E5%85%B3%E4%BA%8E%E9%80%9F%E9%A3%9F%E6%88%91%E6%83%B3%E8%AF%B4%E7%9A%84%E8%AF%9D/"},{"title":"几个获取公网IP的网站","text":"如果你固定了公网IP，那么这几个结果都是一样的，如果你是二级运营商，那么可能出口IP不一样，需要向运营商索要动态公网IP。 speedtest： https://api-v3.speedtest.cn/ip 12345678910111213141516{&quot;code&quot;: 0,&quot;data&quot;: {&quot;country&quot;: &quot;中国&quot;,&quot;province&quot;: &quot;北京&quot;,&quot;city&quot;: &quot;北京&quot;,&quot;district&quot;: &quot;朝阳区&quot;,&quot;isp&quot;: &quot;中国联通&quot;,&quot;lon&quot;: &quot;120.333&quot;,&quot;lat&quot;: &quot;45.34&quot;,&quot;countryCode&quot;: &quot;CN&quot;,&quot;ip&quot;: &quot;123.113.111.178&quot;,&quot;operator&quot;: &quot;中国联通&quot;},&quot;msg&quot;: &quot;ok&quot;} IP.cn: https://ip.cn/api/index?type=0 1234567{&quot;rs&quot;: 1,&quot;code&quot;: 0,&quot;address&quot;: &quot;中国 北京 北京市 联通&quot;,&quot;ip&quot;: &quot;123.113.111.178&quot;,&quot;isDomain&quot;: 0} IP API: http://ip-api.com/json/ 1234567891011121314151617{&quot;status&quot;: &quot;success&quot;,&quot;country&quot;: &quot;China&quot;,&quot;countryCode&quot;: &quot;CN&quot;,&quot;region&quot;: &quot;BJ&quot;,&quot;regionName&quot;: &quot;Beijing&quot;,&quot;city&quot;: &quot;Beijing&quot;,&quot;zip&quot;: &quot;&quot;,&quot;lat&quot;: 23.22,&quot;lon&quot;: 21.222,&quot;timezone&quot;: &quot;Asia/Shanghai&quot;,&quot;isp&quot;: &quot;China Unicom Beijing Province Network&quot;,&quot;org&quot;: &quot;&quot;,&quot;as&quot;: &quot;AS4808 China Unicom Beijing Province Network&quot;,&quot;query&quot;: &quot;xxxx&quot;} https://checkip.amazonaws.com/123.113.111.178","link":"%E5%87%A0%E4%B8%AA%E8%8E%B7%E5%8F%96%E5%85%AC%E7%BD%91ip%E7%9A%84%E7%BD%91%E7%AB%99/"},{"title":"家用电","text":"峰谷电“峰谷电” 是电力市场的一个概念，它是根据电力需求的高峰和低谷时间设定的不同电价。 具体来说，”峰电” 是指在一天中电力需求量最大的时段（通常是早晚高峰时段）所使用的电力，而”谷电” 则是指在一天中电力需求量最小的时段（通常是深夜）所使用的电力。电力公司通常会设定更高的电价来销售峰电，而设定较低的电价来销售谷电。 这种定价策略是基于供求关系的。在电力需求量大的时候，电力资源相对紧张，因此电价相对较高；而在电力需求量小的时候，电力资源相对充足，因此电价相对较低。 峰谷电价的目的是鼓励消费者在电力需求量较小的时段使用更多的电力，从而平滑电力需求曲线，减轻电网的负担，优化电力资源的配置。对于一些大型工业用户，他们可以通过调整生产计划，在电价较低的时段使用更多的电力，从而节约电力成本。 空调现在的空调大多数不再使用氟利昂作为冷媒。氟利昂（CFCs，Chlorofluorocarbons）是一种臭氧层消耗物质，它们对环境产生了极大的破坏，特别是对地球的臭氧层。在20世纪80年代和90年代，科学家发现了所谓的“臭氧洞”，这主要是由于氟利昂和其他一些化合物的使用。这导致了《蒙特利尔协定》的签署，该协定旨在逐步淘汰氟利昂和其他臭氧层消耗物质的生产和消费。 因此，现代的空调和制冷设备通常使用其他类型的冷媒，如R-410A或R-134a，这些冷媒的臭氧破坏潜力（ODP）为零，但它们的全球变暖潜力（GWP）仍然相对较高。为了进一步减小环境影响，科研人员和制造商正在研究和开发具有更低全球变暖潜力的冷媒。","link":"%E5%AE%B6%E7%94%A8%E7%94%B5/"},{"title":"消毒药水","text":"紅藥水又稱紅汞，汞會讓蛋白質凝固沉澱，所以有抑菌的作用，因為對人體組織的傷害較小，曾經廣泛使用於局部皮膚創傷，是預防細菌感染最常用的表皮消毒藥水。 為何當初會拿來作為傷口處理用？大家小時候做生物實驗為了要看清楚細胞或是某些組織，會用染色劑把它們染色方便觀察。紅藥水就是這種作用，紅色顏料嘛！只不過對於細胞來說，染色劑會把細胞毒殺，所以被染過色的細胞，就等於是死了，同樣的道理，細菌本身也是細胞，所以當細菌被染色劑碰到時，也同樣會死亡。古時候醫療沒有很發達，就會使用比較容易取得的染色劑作為傷口殺菌之用。 使用紅藥水除了要擔心會有汞殘留人體外，還會看到很明顯的紅色，造成傷口色素沈澱，會留下疤痕，另外蠶豆症的患者不可以使用。其實紅藥水抑菌作用微弱，治療效果差，現在幾乎沒有在使用了！ 紫藥水主要成分是龍膽紫稀釋溶液，也可以叫結晶紫，聽到結晶紫是不是也勾起大家小時候做實驗的回憶？ 用來分辨細菌的革蘭氏染色法裡面有個步驟就是使用結晶紫。因爲它的陽離子能和細菌蛋白質的羧基結合，影響代謝而產生抑菌作用。它能抑制革蘭氏陽性菌，特別是葡萄球菌，對白色念珠菌也有較好的抗菌作用。外用可治療皮膚與粘膜的創傷感染及潰瘍、小面積的燙傷、鵝口瘡等。 不過傷口感染化膿時，不適合使用紫藥水，因爲它有收斂作用，會在傷口表面形成一層痂膜，讓壞死組織中的膿難以排出而向深部擴散，加重感染。紫藥水會使皮膚殘留紫色痕跡，脫色不易，所以對較大面積的傷口，盡量避免使用。而且跟紅藥水一樣，蠶豆症的患者也是不可以使用，否則會引發急性溶血反應。 值得一提的是，因為紫藥水擁有潛在的致癌性，所以現在醫療機構已不用紫藥水來消毒傷口。 黃藥水成分為Acrinol，也是常見的外用消毒劑。它跟紫藥水一樣，陽離子能和細菌蛋白質的羧基結合，影響代謝而產生抑菌作用。 黃藥水同樣也會染色，不過因為亞洲人皮膚是黃色，加上黃藥水的著色力不比剛剛講的紅藥水和紫藥水強，所以比較容易清除。它的特點是，抗菌效力不受膿血蛋白質影響，所以可以用來治療化膿性傷口。 要注意的是，黃藥水不適用在大於兩手掌面積的傷口或是深部感染傷口。不過因為他的抗菌效果沒有很好，現在也很少使用了。 白藥水雖然叫白藥水，但其實不是白色，而是一種透明液體，主要成份是陽離子殺菌劑benzakonium加上局部麻醉劑(Dibucaine Hydrochloride)、血管收縮劑(Naphazoline Hydrochloride)、抗組織胺(Chlorpheniramine Maleate)。應用原理為破壞微生物的細胞膜，除了對抗細菌之外，對真菌也有效。白藥水的特色是它沒有顏色，所以對於擔心傷口被染色劑染色或是衣服被優碘染到顏色的人來說，白藥水算是一個很好的選擇。 白藥水因為添加了局部麻醉劑，所以有止痛的效果，跟擦優碘或是雙氧水比起來，舒服多了。裡面添加的抗組織胺對於減輕局部組織的腫脹及組織液的滲出有不錯的功效，也有止癢的效果。但是在這邊要提醒各位，如果你的傷口已經傷到了真皮或是皮下組織，建議不要使用白藥水作為傷口處理之用，因為血管收縮劑有傷口收斂的效果，會讓你的傷口更容易產生包覆作用，會讓傷勢惡化在裡面，所以白藥水還是只適合表淺的傷口護理。 雙氧水又叫過氧化氫水溶液。小時候我賽跑跌倒，手肘磨破皮，傷口看起來髒髒的，回家媽媽拿醫藥箱的雙氧水幫我消毒。真的很痛！我邊看傷口冒泡泡邊哭！媽媽還會說『哭什麼？誰叫你要不小心跌倒？！』這種狠話也只有家人才說得出口。 為什麼我的傷口會冒泡泡？其實雙氧水可以殺菌，是利用它接觸傷口發生氧化反應釋放出氧氣的原理。 雙氧水可以分解血液中的酵素，除去血漬，但其穿透力差，殺菌時效短暫，用在深的傷口，容易造成蛋白質變性，組織壞死，傷口反而不易復原。一般只適合在出血凝塊的表淺傷口處理。目前也不建議將雙氧水直接用作傷口清理之用，因為對皮膚過於刺激，容易傷害到表皮細胞。 優碘優碘呈深褐色，殺菌效果強，可以在20~30秒內殺死病毒、細菌、黴菌、結核菌、原蟲等，為廣效型的殺菌劑，更有預防傷口化膿的功效，而且容易清洗、溫和不刺激，不過塗在傷口在還是會痛啦！優碘是目前使用最廣泛的消毒藥水。優碘會留下黃褐色顏色，容易使皮膚在日曬後形成色斑，頸部以上部分傷口使用時要多加考慮。 不過大家不要誤會，其實優碘並不會造成傷口的色素沉澱，剛剛提到了曬太陽之後會產生色斑，主要是因為陽光照射之後，容易形成紫黑色的固態碘，外觀上會很像色素沉澱所以會引起誤會。 當優碘與傷口組織接觸時，會形成薄膜，然後慢慢釋出碘來達到殺菌效果。但值得注意的一點是，此薄膜通常有點黏黏的，如果傷口較大，大多數人會再覆蓋一層紗布，結果優碘形成的薄膜加上組織液與紗布黏在一起，下次換藥時拆紗布的時候相信很多人都有經驗，絕對痛到你嘴歪眼斜！所以建議塗完優碘後，可以在傷口上蓋上石蠟紗布(如下圖)來降低傷口的沾黏。 今天跟大家分享這麼多消毒藥水，簡單來說，紅、紫、黃藥水目前已經不建議使用，雙氧水如果要用的話，也只適用在第一次消毒傷口，不適合持續使用 ; 頭頸部的表淺傷口可以使用白藥水避免色素沈澱 ; 身體跟四肢的傷口可以考慮使用優碘。 ![[Pasted image 20230702120450.png]] 當然要告訴大家很重要的一點，就是雖然居家常備這些藥水，可以處理小型的傷口，非常方便，但如果過了幾天，傷口都沒好轉的跡象，甚至愈來愈紅，愈來愈痛，就要趕快去看皮膚科，畢竟傷口的照顧是一門很大的學問，它還牽涉到用什麼去覆蓋，要不要擦抗生素藥膏，又要擦哪一種抗生慌藥膏，幾天換藥一次，需不要縫合，要不要貼人工皮……等等很多問題，來防止疤痕的形成，這些都不光是擦個藥水就能解決這麼簡單。","link":"%E6%B6%88%E6%AF%92%E8%8D%AF%E6%B0%B4/"},{"title":"自制辣椒油","text":"起锅烧油,放入香料(八角,花椒,桂皮,香叶),葱姜,蒜,香菜,洋葱炸至金黄捞出弃用 碗内辣椒切碎,有条件可以自己研磨五香粉和芝麻混合,用白酒拌匀(激发香味防止炸糊),我放的化花雕酒味道也很不错 热油泼到辣椒上,然后滴几滴醋增香.","link":"%E8%87%AA%E5%88%B6%E8%BE%A3%E6%A4%92%E6%B2%B9/"},{"title":"小白零基础线上配镜，拔草蔡司。","text":"购买理由网络越来越发达了，很多事情都可以在网上完成，学习外卖快递什么的比以前方便多了，甚至配眼镜也可以了。希望有一天可以在线吃饭吧。 流程先谈一下线上配眼镜的优缺点吧: 优点： 便宜，线下普通眼睛的钱就能配到蔡司的镜片 可以熟悉配眼镜的流程，防止日后被坑 缺点： 需要线下验光，线下有些家不提供验光或者验光度数不准确 眼睛框可能带着不舒服 需要3-7天才能拿到成品，没有备用眼镜的话很难受 几个月前被种草蔡司镜片，在蔡司睛选小程序上询问最普通的莲花膜也要上千，更何况我每天超过10小时面对电子屏幕，必须要蓝光膜，姑且不说是不是智商税，起码图个心里安慰，不要以为有蓝光膜就可以随便作了，眼睛病了也是病啊，就跟不好好吃饭等于慢性自杀一样。 找了几篇帖子，最终在1688上选择了一家深圳的眼镜店，我配的是钻立方的蓝光膜，应该是比较入门的一款镜片，毕竟第一次尝试，打算成功了后下一个眼镜直接上顶配。实测一周后发现，除了选镜框的时候没注意到尺寸有点小之外，其他的都算不错。基本流程就是，选镜框-验光-下单镜片-邮寄镜框-镜框加工。 镜框镜框由于经费原因没有选择蔡司原厂，在京东上选了个商务风格纯钛材质了。品牌是精工，日本的老牌子了，眼镜店里的品牌在网上都搜不到，索性买了大品牌风格类似的。 京东下单，不过还需要调货，精工店比宝岛店还便宜一些。对这镜子试了试觉得风格挺好看就联系顺丰邮寄走 了，邮费18大洋。 后期收到货的是时候才发现同样的镜框，近视镜和平镜的感觉是不一样的，也可能是第一次用半框，总会看见边框。 验光验光是在宝岛眼镜，搜索公众号选择验光师就可以了(不要选配镜师)，之后的数据会同步到小程序上，验光的费用是50,个人觉得还是挺划算的，毕竟一堆参数，验光师操作一堆设备操作起码半个小时，再加上我问了一堆问题。当然也不排除有些店嫌麻烦不提供验光服务的，去之前要电话沟通好。当然电话里说50一次然后去店里不给验光的也有。 如果想货比三家防止度数不准确的话，那么就不要去同一个连锁店了。毕竟他们都可以查到数据…… 总之，宝岛还是挺靠谱的。 镜片镜片根据需要下单就可以了，上边的加个是一片的，记得数量要选2,然后还有加工费，算上这些差不多是线下的三分之一。加工之前卖家会确定下镜框和度数，剩下的就是加工时间和物流的时间了，顺丰发出。顺便吐槽下顺丰没有之前快了。 收货收到的第一感觉是轻，毕竟配眼镜成功的标准就是感觉不到它的存在。后来觉得我的树脂镜框就像一块石头压在了脑袋上。 除了天没亮剩下的都亮了的感觉。 如何保养保养的话，买了美的超声波清洗仪，190入手。当然也可以洗假牙手表珠宝什么的。没有精力每天去洗，家里又多了一个长期吃灰的设备。 总结总体来看的话，还算挺成功的一次配镜。毕竟有句话叫做能用钱搞定的不要花是时间。懒人不止一次的为这个社会带来变革，希望有一天穷人也可以吧。","link":"%E5%B0%8F%E7%99%BD%E9%9B%B6%E5%9F%BA%E7%A1%80%E7%BA%BF%E4%B8%8A%E9%85%8D%E9%95%9C%EF%BC%8C%E6%8B%94%E8%8D%89%E8%94%A1%E5%8F%B8%E3%80%82/"},{"title":"血型","text":"血型是一种遗传特性，主要由 ABO 系统和 Rh 系统两个主要系统决定。 ABO 血型系统：这是最重要的血型系统，包括 A型、B型、AB型和O型四种血型。A型血液具有A型抗原，B型血液具有B型抗原，AB型血液具有A型和B型抗原，而O型血液则没有这两种抗原。 Rh 血型系统：Rh 血型系统是在 ABO 血型系统之后最重要的血型系统。最主要的是 Rh(D)抗原，它决定了一个人是 Rh阳性（Rh+）还是 Rh阴性（Rh-）。因此，我们常常会听到血型被描述为 A+ 或 O- 这样的形式，其中的 “+” 或 “-“ 就是指的 Rh 血型。 所以，总共有八种血型：A+、A-、B+、B-、AB+、AB-、O+ 和 O-。 ABO 血型系统是一种基于人体红细胞上存在的抗原类型的分类系统。在 ABO 系统中，主要有 A 型抗原、B 型抗原和没有这两种抗原的 O 类型。 以下是具体的细节： A型血：有 A 型抗原，体内产生抗 B 抗体B型血：有 B 型抗原，体内产生抗 A 抗体AB型血：有 A 型和 B 型抗原，体内不产生抗 A 或抗 B 抗体O型血：没有 A 型或 B 型抗原，体内产生抗 A 和抗 B 抗体关于父母血型和孩子血型的关系，因为 ABO 血型是由两个等位基因决定的，一个从母亲那里继承，一个从父亲那里继承。A 和 B 两个等位基因是显性的，而 O 等位基因是隐性的。所以： 如果父母的血型都是 A 型，那么孩子可能是 A 型或 O 型（假设其中一个或两个父母携带了 O 基因）。如果父母的血型都是 B 型，那么孩子可能是 B 型或 O 型（假设其中一个或两个父母携带了 O 基因）。如果父母的血型都是 O 型，那么孩子只能是 O 型。如果父母的血型是 A 型和 B 型，那么孩子可能是 A 型、B 型、AB 型或 O 型（假设其中一个或两个父母携带了 O 基因）。如果父母的血型是 A 型和 O 型，那么孩子可能是 A 型或 O 型。如果父母的血型是 B 型和 O 型，那么孩子可能是 B 型或 O 型。如果父母的血型是 AB 型和 O 型，那么孩子可能是 A 型或 B 型。如果父母的血型是 AB 型和 A 型，那么孩子可能是 A 型或 AB 型。如果父母的血型是 AB 型和 B 型，那么孩子可能是 B 型或 AB 型。如果父母的血型是 AB 型，那么孩子可能是 A 型、B 型或 AB 型。 不同血型的人接受输血时，必须确保血型相容，否则可能产生严重甚至致命的免疫反应。例如，B型血的人如果接受A型血的输血，他们体内的抗-A抗体会攻击输血中的A抗原，导致血液凝块、器官损伤等问题。 理解 ABO 血型遗传关系的关键是知道 A 和 B 基因是显性的，而 O 基因是隐性的。这意味着如果一个人从父母那里获得了 A 或 B 基因和 O 基因，那么 A 或 B 基因将显性表达，而 O 基因将隐性表达。 用这个理念，我们可以对血型遗传关系进行一些简化： 如果两个 O 型血的父母（OO 和 OO），他们的孩子只能是 O 型血。 如果两个 A 型血的父母（可能是 AA 或 AO），他们的孩子可能是 A 型或 O 型血。 如果两个 B 型血的父母（可能是 BB 或 BO），他们的孩子可能是 B 型或 O 型血。 如果两个 AB 型血的父母（AB 和 AB），他们的孩子可能是 A 型、B 型或 AB 型血。 如果一个 A 型血的父母和一个 B 型血的父母（可能是 AA, AO, BB 或 BO），他们的孩子可能是任何血型。 如果一个 AB 型血的父母和一个 O 型血的父母（AB 和 OO），他们的孩子可能是 A 型或 B 型血。 以上简化可能没有涵盖所有的情况，但基本上可以解释大多数情况的遗传模式。请注意，这个遗传模式是理想的，现实中可能存在一些偏差。 如果你想更详细地理解每种可能的遗传模式，我推荐你使用 Punnett 方格。Punnett 方格是一种在生物学中用于理解和预测遗传模式的工具。在这个方格中，你可以表示每个父母的基因型（例如，A 型血的父母可能是 AA 或 AO），然后看看每种可能的组合。 此外，血型也在妊娠中起着重要的角色，特别是母亲是Rh-而胎儿是Rh+时，可能会发生Rh不兼容，导致新生儿溶血性疾病。这种情况可以通过在怀孕期间给予母亲抗-Rh(D)免疫球蛋白（Rho(D) immune globulin）预防。 血型在医学、法医学和人类遗传学研究中都很重要。不过，关于血型和性格、饮食偏好等的关联的说法，尚无科学依据。","link":"%E8%A1%80%E5%9E%8B/"},{"title":"懒猫微服入门篇（零）：开箱初探，硬件亮相","text":"用了一个半月的懒猫微服，来写一个伪开箱。机甲风格外壳也得值个几百块，这个外壳还支持拆机之后全身水洗。在桌面上确实颜值很高，在各个小主机都是塑料外壳的时代，属于用心良苦了。 这张图是创始人在用户群里发的实拍图： 据群友们聊天说，这台机器已经经过了多个版本迭代，最后定型为现在这个样子。以后不要再用鞋盒了。 系统与配置通过 neofetch 可以看到，这台机器预装的是 Debian 12，实际系统也做了不少魔改优化。核心配置如下： CPU：Intel Core i5-1155G7 @ 4.5GHz（4 核心 8 线程），相当于现在主流的 N305 强了很多。 内存：笔记本内存 DDR4，最大可扩展至 32GB，3200MHZ （买的时候可以谈从 16G 升级到 32G） 显卡：Intel Iris Xe Graphics，英特尔最强核显，核显频率最高 1.35GHz，支持 4K 高清输出与 H.265 视频硬解 存储： 系统盘：512GB PCIe 4.0 NVMe，用于运行系统组件和保存根目录文件。 数据盘：两个 2.5 寸 SATA 盘位，可以组 RAID0 或者 RAID1。SSD 或者 HDD 不限。 主板：看上是自己做的，叫做 YENTEK LC2580，启动热键是 F11，进入 BIOS 的按键是 &lt;DEL&gt; 。 没有锁 BIOS，也支持刷成其他的系统。 运行 dmidecode 可见内存状态如下： 12345678910sudo dmidecode -t memory | grep -e &quot;Size&quot; -e &quot;Form Factor&quot; -e &quot;Locator&quot; Size: No Module Installed Form Factor: Unknown Locator: Controller1-ChannelA-DIMM0 Bank Locator: BANK 0 Size: 32 GB Form Factor: SODIMM Locator: Controller0-ChannelA-DIMM0 Bank Locator: BANK 0 ... 网络性能网络配置方面也比较主流： 有线：2.5G 单网口，可惜我的路由器还是千兆不能完全发挥其能力 无线：Intel AX210，支持 WiFi 6 可以跑满千兆。 12345(base) lzcbox-029c588e ~ # dmesg | grep -i ethernet[ 2.946824] Intel(R) 2.5G Ethernet Linux Driver[ 9.157839] Bluetooth: BNEP (Ethernet Emulation) ver 1.3(base) lzcbox-029c588e ~ # lspci | grep -i network04:00.0 Network controller: Intel Corporation Wi-Fi 6 AX210/AX211/AX411 160MHz (rev 1a) 于 WIFI6 来说协商速率一般是 2402Mbps，所以就算达到协商速率的一般的话，也就是差不多千兆，加上很多家用路由也仅仅是千兆，我为了 POE 供电所以牺牲了部分内网带宽，所以没有跑满。如果你有 2.5G 的机器和交换机，那么一定可以跑的很舒服，基本就到机械硬盘的上限了。 CPU 性跑分跑了几次 geekbench6，能够看到单核心的性能有 1700+，由于测速的同时还在运行很多系统应用，所以实际的数值比这个还要大一些。 后面用了 EndeavourOS KDE 的随身碟，能够看到单核心分数还能再提升。这个 CPU 跑 docker，K8S 甚至虚拟机都没啥问题了。 外部接口机器背部接口一览，我这边插了一张采集卡，非常实用： 接口方面也非常丰富： USB：USB 3.0 x3 Type-C：USB 3.2 Type-C x2，支持反冲保护 视频输出：HDMI 2.1 x1，支持 4K 输出、多声道音频 音频接口：3.5mm 耳机口，支持高阻抗耳机 电源接口：DC 5525 整机搭载一枚 17mm 涡轮静音风扇，结合滚珠轴承与自研调速算法，实际体验确实安静，确实没有 3.5 寸硬盘那种炒豆子的声音了。 可以看到 Deepin 的 团队出来做产品的能力还是挺强的，从主板到 OS 的深度定制，技术功底可见一斑。 下面是群友的发的效果图，实物质感确实很棒，欢迎找我下单体验！","link":"%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%85%A5%E9%97%A8%E7%AF%87%EF%BC%88%E9%9B%B6%EF%BC%89%EF%BC%9A%E5%BC%80%E7%AE%B1%E5%88%9D%E6%8E%A2%EF%BC%8C%E7%A1%AC%E4%BB%B6%E4%BA%AE%E7%9B%B8/"},{"title":"懒猫微服实战入门（一）： 从开启SSH到免密登录，一步步教你搞定远程管理","text":"对于很多资深的 NAS 玩家来说，拿到一台机器首先要配置远程登录和环境依赖。懒猫上其实可以实现云计算讲的 Iass - Pass -Sass 这三个层级，不过对于资深玩家而言，肯定是要从 Infra 这个级别入手的。 官方文档如下：https://developer.lazycat.cloud/ssh.html 安装懒猫开发者工具，然后再右上角能够看到 sshd 服务的状态。然后点击开启，之后我们才可以使用 ssh 登录，在写这篇文章测试的时候，我关闭了这个按钮，再去 ssh 直接就报错了。 默认是 root 身份登录，密码在开发者工具里启动的时候设置： 1ssh root@&lt;your-service-name&gt;.heiyu.space 如果觉得密码麻烦，也可以导入密钥，更加安全： 1ssh-copy-id -i ~/.ssh/id_ed25519 root@xxxxx.heiyu.space 输出如下： 1234567891011/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: &quot;/Users/xu/.ssh/id_ed25519.pub&quot;/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keysroot@micro.heiyu.space's password:Number of key(s) added: 1Now try logging into the machine, with: &quot;ssh -i /.ssh/id_ed25519 'root@xxxx.heiyu.space'&quot;and check to make sure that only the key(s) you wanted were added. 如果觉得 root 用户不安全的话，可以新建一个日常用户，然后加到 docker 组里面，也能正常使用 docker 123456sudo useradd -m -s /bin/bash user1usermod -aG docker user1usermod -aG sudo user1 如果遇到到 root 组会有无法使用 sudo 的问题，请独立安装，sudo 是单独的软件包,需要安装才有.并不是所有 Linux 都有 sudo 1apt update &amp;&amp; apt install sudo 注意：要开着懒猫微服 APP ，否则无法使用 heiyu.space 提供的穿透服务。","link":"%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A-%E4%BB%8E%E5%BC%80%E5%90%AFssh%E5%88%B0%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95%EF%BC%8C%E4%B8%80%E6%AD%A5%E6%AD%A5%E6%95%99%E4%BD%A0%E6%90%9E%E5%AE%9A%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86/"},{"title":"懒猫微服实战入门（十）：通过 nmtui 设置静态 IP，接入旁路由实现科学上网","text":"日常开发中，我主要使用的是 MacBook 作为主力机。但有些软件、驱动或容器服务必须在 X86 架构环境下测试，这时懒猫微服就是一个很好的辅助平台。然而在一些网络场景下，为了访问特定服务，还需要将这台设备接入旁路由中。 不然我访问 Dockerhub 是这样的，经常会超时，只能用不是很全的镜像站。 群晖等设备提供的图形化网络面板，懒猫微服这类轻量系统没有 GUI，只能使用命令行工具。NetworkManager 提供了一个非常好用的文本界面工具：nmtui。 什么是 nmtuinmtui 是 NetworkManager 的 TUI（Text-based User Interface）组件，界面类似简化版 GUI，操作简单，功能却很强大。通过它，我们可以方便地完成以下配置： 选择并连接网络设备（有线或无线） 设置 手动 IP 地址 指定 网关、DNS 服务器 管理 路由策略 开启或关闭 DHCP 自动获取功能 命令如下： 1nmtui 设置静态 IP 接入旁路由打开 nmtui 后，进入“Edit a connection”，编辑你连接的网卡（如 enp2s0），手动设置 IP 地址、网关和 DNS。如下图所示，我将所有网络解析都指向了旁路由（比如是 OpenWrt 或其他带翻墙能力的设备）： 确保设置完成后，运行以下命令重新应用配置： 1nmcli device reapply enp2s0 如果配置无误，网络将立即切换到静态 IP 并走旁路由的网关。 验证效果这样子终端就能下载 Docker image 了，其实到这一步已经完成了。 接下来，可以通过懒猫微服中安装的浏览器测试网络是否生效。 继续打开 YouTube 首页，也能顺利访问并加载视频页面： 你没看错，这是 浏览器里的浏览器，实现了一个“浏览器套娃”的效果。😂 最终，我播放了银临的《牵丝戏》，人美歌也好听～","link":"%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E5%8D%81%EF%BC%89%EF%BC%9A%E9%80%9A%E8%BF%87-nmtui-%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81-ip%EF%BC%8C%E6%8E%A5%E5%85%A5%E6%97%81%E8%B7%AF%E7%94%B1%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"},{"title":"懒猫微服实战入门（十一）：一键换源指南：用 chsrc 开启丝滑体验","text":"最近懒猫微服的系统固件进行了更新，默认的软件源重新指向了国际源。估计是为了方便海外用户，但对于国内开发者来说，访问速度顿时大打折扣，软件安装和更新频繁卡在连接阶段，着实是一个问题。 正巧群友推荐了一个神器 —— chsrc。这个工具支持一键切换系统、Python、conda 等多个主流组件的源，简洁高效，非常适合懒猫微服这样的轻量环境使用。 下载并安装 chsrcchsrc 项目在 Gitee 上提供了预编译的可执行文件，适用于不同架构的 Linux 设备。我当前使用的是 x86_64 架构，因此只需运行以下命令： 12curl -L https://gitee.com/RubyMetric/chsrc/releases/download/pre/chsrc-x64-linux -o chsrcchmod +x ./chsrc 下载后，为了方便使用，我们通常会把它加入环境变量。但懒猫微服的一个特殊机制是：除了 /root 目录，其他目录在每次重启后都会被重置。这意味着如果你将 chsrc 放在 /home 或 /usr/local/bin 之类的目录，它在下次重启后可能就不见了。 所以我将 chsrc 的二进制文件移动到了 /root/app 下（可以新建这个目录），并在 ~/.bashrc 中手动追加了环境变量： 1export PATH=/root/app:$PATH 这样每次打开 shell 时，系统就会自动把 chsrc 所在路径加入 $PATH，确保我们可以直接使用 chsrc 命令。 一键更换 Debian 软件源懒猫微服是基于 Debian 的发行版，因此可以直接运行： 1chsrc set debian 运行后，工具会先检测系统当前源格式（支持新版 deb822），然后测速多个国内镜像源（如清华、中科大、阿里等），自动选择最快的源进行替换，整个过程完全自动化，再也不用去网上搜帖子找各种源了。 更换 Python 镜像源除了操作系统本身的源之外，也能更换 Python，node 这样的源。 我制作了一个 Miniconda 的一键安装脚本，用来替代系统自带的 Python3.11，用 conda 虚拟环境管理起来很方便。 12345678910111213141516171819202122232425#!/usr/bin/env bashset -e# 1. 下载最新 Miniconda 安装脚本echo &quot;📥 正在下载 Miniconda 安装器...&quot;MINICONDA=Miniconda3-latest-Linux-x86_64.shwget https://repo.anaconda.com/miniconda/$MINICONDA -O /tmp/$MINICONDA# 2. 静默安装到 ~/miniconda3echo &quot;⚙️ 正在静默安装到 ~/miniconda3...&quot;bash /tmp/$MINICONDA -b -p $HOME/miniconda3# 3. 添加到 PATH（写入 .bashrc）echo &quot;🔧 正在将 Miniconda 添加到 PATH...&quot;CONDA_INIT='export PATH=&quot;$HOME/miniconda3/bin:$PATH&quot;'if ! grep -q &quot;$CONDA_INIT&quot; ~/.bashrc; then echo &quot;$CONDA_INIT&quot; &gt;&gt; ~/.bashrcfi# 4. 初始化 conda（非交互式）$HOME/miniconda3/bin/conda init bash# 5. 提示用户刷新 shellecho &quot;✅ 安装完成！请运行以下命令以立即生效：&quot;echo &quot; source ~/.bashrc&quot; 这个脚本的好处是全程自动化，不需要你动手点选目录，也不必一步步设置环境变量，适合懒猫开发者在新设备或系统还原后快速恢复工作环境。 安装好 Miniconda 之后，就可以利用 chsrc 来更换 pip 源了： 1chsrc set python 此命令会将 pip 的默认源改为清华源或豆瓣源等国内镜像，提高模块下载速度，彻底告别“卡在安装 xx 模块”的窘境。 最后一步，把 conda 的源也换成国内的。直接执行： 1chsrc set conda 然后需要手动更新 .condarc 配置文件。 小结这次我体验了 chsrc 在懒猫微服上的完整使用链路，感受可以总结为三句话： 能跑就行？不，要跑得快。 别用默认源，懒人换源有奇效。 系统、Python、Conda，一条龙解决卡顿。 如果你也在用懒猫微服、或者在其他 Debian 系的轻量服务器上摸索开发环境，强烈推荐你试试这个工具和脚本组合。毕竟，“懒得配置”不应该成为“卡在配置”的理由。","link":"%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%EF%BC%9A%E4%B8%80%E9%94%AE%E6%8D%A2%E6%BA%90%E6%8C%87%E5%8D%97%EF%BC%9A%E7%94%A8-chsrc-%E5%BC%80%E5%90%AF%E4%B8%9D%E6%BB%91%E4%BD%93%E9%AA%8C/"},{"title":"懒猫微服实战入门（十二）：用 iVentoy 打造你的 PXE 服务器","text":"很多介绍 Linux 的书籍都会在结尾推荐 PXE 装机方式，尤其是经典的 TFTP + Kickstart 自动部署方案。但在普通家庭或轻量办公环境中，这种方式显得有些繁琐。在 U 盘装机的环境中，我一般使用的 Ventoy多合一 。不过 Ventoy 团队又推出了一个支持 PXE 的装机版本，名为 iVentoy，和 WDS 类似，不过更加省心，这个应用已经上架懒猫微服的应用商店，非常适合内网多机装系统的场景。终于不用再琢磨 WDS 了。还有就是之前不小心用店家带的 U 盘把主机的所有数据都格式化了，这种手残也一去不复返了。 什么是 PXE 无盘装机？PXE，全称 Preboot eXecution Environment，是一种允许电脑在没有本地操作系统、光盘或 U 盘的情况下，通过网络从服务器下载引导程序并完成系统安装的机制。 PXE 装机简化流程如下： 1234567891. 开机 → BIOS/UEFI 设置为从网卡启动（PXE Boot） ↓2. 客户端通过网卡发出 DHCP 请求 → 获取 IP 和引导文件地址 ↓3. 通过 TFTP 下载启动文件（如 pxelinux.0 或 iPXE） ↓4. 加载内核（vmlinuz）和安装器（initrd.img） ↓5. 进入图形界面或执行自动化系统安装 PXE 装机适用场景 大量办公电脑或服务器的系统部署 设备没有 USB 接口或启动盘时 多系统测试、系统重装、快速恢复环境 各类 PE 工具、Linux Live 系统启动 懒猫微服 上 iVentoy 装机体验以下是我在懒猫微服环境中使用 iVentoy 的全过程： 1. 上传系统镜像进入懒猫的应用数据目录：应用数据 - Iventoy - ISO将你准备好的 Windows / Linux ISO 文件上传到此路径。 2. 启动 iVentoy，配置网络确保机器在内网下有一个 有效的 IPv4 地址，然后启动 iVentoy。 3. BIOS 设置启用 PXE进入待装机设备的 BIOS，确保启用 PXE Boot / 网络启动功能。 4. 插网线，选择 PXE 启动启动设备，确保插入网线（无线网卡 PXE 启动通常不被支持），从网卡启动。 5. 自动进入 iVentoy 引导菜单如果网络配置无误，设备会自动弹出引导菜单，可以看到之前上传的 ISO 镜像。 选择一个系统镜像，回车进入即可，相当于将 ISO 当成 LiveCD 使用。 6. 成功进入桌面系统以 Pop!_OS 为例，系统已经顺利启动，无需任何 U 盘！ 小结这个办法还是适合炫技，把电脑接上网线，然后不用 U 盘，凭空装好系统，不过还是没有 U 盘那么丝滑，有时候不能打满千兆带宽。不过假如手头 U 盘不够用，或者要在多个系统反复装机测试就很方便了。","link":"%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89%EF%BC%9A%E7%94%A8-iventoy-%E6%89%93%E9%80%A0%E4%BD%A0%E7%9A%84-pxe-%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"title":"","text":"","link":""},{"title":"懒猫微服实战入门（十四）：不登录客户端，如何用 Samba 挂载懒猫微服网盘？","text":"懒猫微服网盘自带自动挂载 Samba 功能，但如果不登录客户端，也可以手动通过微服的私有地址来挂载，实现访问和高速传输。 由于懒猫网盘采用多租户架构，每位用户的数据是隔离的。因此，访问路径通常为： 1smb://&lt;ip&gt;/&lt;用户名&gt; 🧩 步骤一：开启内网访问服务在开始挂载前，请确保你已在懒猫微服后台开启了“内网访问服务”，否则 SMB 连接会被拒绝。 💡 回忆一波上机考试的方式以前在上机考试时，老师会将题目放在服务器共享目录中，我们用 Win + R 输入 \\\\IP地址 来下载资料，当时还觉得这操作很高端。 解释：这是通过 Win + R 快捷键打开“运行”窗口，输入 \\\\&lt;IP&gt; 快速访问局域网 SMB 共享目录。通常用于临时打开文件夹，不做映射。 🐧 macOS/Linux 挂载方式（CLI）在 Linux 或 macOS 上，可以直接用以下地址挂载： 1smb://&lt;ip&gt;/Download 或者通过 mount.cifs： 1sudo mount -t cifs //192.168.1.100/your-username /mnt/share -o user=your-username,password=your-password 🪟 Windows 上手动挂载 SMB 网盘在 Windows 中，需要通过图形界面手动挂载为本地磁盘，操作如下： 第一步：右键“此电脑” → 映射网络驱动器 解释：在这里你可以： 选择盘符（建议使用末尾的 Z:, Y:, X: 等）； 输入共享路径（例如 \\\\192.168.1.100\\your-username）； 可勾选“使用其他凭据连接”等选项。 第二步：确认挂载路径并验证身份系统将提示输入用户名和密码： 第三步：挂载成功，查看 Z 盘内容成功后，可以在“此电脑”中看到挂载好的 SMB 网络盘： 你可以像操作本地硬盘一样打开、拖拽、复制文件。 打开挂载目录后的界面如下： 🚀 实测传输速度：约 500MB/s我测试了一下，将文件从 SMB 网盘拖入 PVE 虚拟机，传输速度稳定在 500MB/s，表现不错。","link":"%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89%EF%BC%9A%E4%B8%8D%E7%99%BB%E5%BD%95%E5%AE%A2%E6%88%B7%E7%AB%AF%EF%BC%8C%E5%A6%82%E4%BD%95%E7%94%A8-samba-%E6%8C%82%E8%BD%BD%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E7%BD%91%E7%9B%98%EF%BC%9F/"},{"title":"懒猫微服实战入门（十五）：大疆Pocket3 素材导入懒猫网盘","text":"日常使用 Pocket3 拍摄视频，就是共享比较麻烦，不然就得每个手机安装一个 app，然后再导出。突发奇想可以把素材传到懒猫网盘中，这样就解决了这个痛点。 大疆的机器每次连接都要走这个流程，不得不说真的很麻烦。这个 Wi-Fi 的记忆功能比较鸡肋。 连接之后需要右上角先把视频下载到手机本地，然后点击分享。 这里可以选各种软件，比如 airdrop，微信，邮件。我这里选懒猫微服，点击之后就会跳转到懒猫网盘。 第一次传输我发现速度慢的离谱。询问了售后才发现 ios 会默认在 wifi 网络不好时走流量的。 因为大疆的 pocket3 传输需要连接相机的 Wi-Fi。所以手机是整个一断网额的状态。这流量也不快。 偷偷跑流量是手机和运行商的传统了，那么在蜂窝网络里给他关掉。关掉无线局域网助理。 关了之后，再重复上边的操作，就发现懒猫网盘打不开了，嗯 这就是预期的行为了，不会偷偷的用网了。 于是询问大疆额售后能不能让机器连接家里的网，得到的回答是不行。只能手动切换 Wi-Fi。 换了网之后再传输，这个速度就舒服多了，虽然没跑满千兆，但是也能够看了。 然后把上一步的视频文件夹共享出来，以后把素材都发到这个文件夹里。再共享给其他的懒猫用户，就很方便了。 两个很想吐槽的地方 大疆 pocket3 不能直接连家里 Wi-Fi，传文件到网盘必须换网 Apple 的 lighting 原生不支持 OTG，需要买转接头。","link":"%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E5%8D%81%E4%BA%94%EF%BC%89%EF%BC%9A%E5%A4%A7%E7%96%86pocket3-%E7%B4%A0%E6%9D%90%E5%AF%BC%E5%85%A5%E6%87%92%E7%8C%AB%E7%BD%91%E7%9B%98/"},{"title":"懒猫微服实战入门（十六）：把懒猫微服当作 24 × 7 在线开发机","text":"最近和极限科技沟通，将 INFINI Console 上架到懒猫微服。可以当作随时可用、不关机的 远程开发机。比如连接自己部署的 ES，中间件，数据库什么的。 1. 应用商店一键安装 INFINI Console从懒猫微服应用商店搜索 Console，点击“安装”即可： 2. 初始化与登录初始化之后登录： 首次登录后台，左侧侧边栏包含 Dashboard、Agents、Settings 等模块： Dashboard 默认展示 CPU / 内存 / 磁盘实时曲线。 顶栏可切换“明暗主题”并显示当前工作区 ID。 右下角有“检查更新”按钮，提示有新版时可一键升级。 3. 用 Dockge 安装 EasysearchES 的话，我是直接用 Dockge 安装的，如果你需要啥中间价，数据库都可以用这个安装。 前提需要用 lzc-cli appstore copy-image 来获取国内的镜像源： 12# 将官方镜像复制到懒猫内网仓库lzc-cli appstore copy-image infinilabs/easysearch:1.13.0-2159 然后把 docker run 或 docker-compose.yml 中的镜像地址替换成上一步生成的私有 registry 地址即可。全部容器由 Dockge 图形化管理：（截图信息要点） Dockge 左侧列出所有 Stack，右侧显示 Easysearch 服务状态为 Running。 端口 9200 已自动映射，重启、查看日志，都能一键完成。 4. 为什么说它适合做开发机？ 需求 懒猫微服能力 体验亮点 24 × 7 在线 独立云主机，自动重启、监控告警 关掉本地电脑，服务仍在运行 x86 架构 后端统一使用 x86 节点 对 Mac M 系列（ARM）用户，可避免本地编译兼容性问题 多端远程开发 内置 Web Shell、端口映射、域名分配 VS Code Remote / JetBrains Gateway 秒连接 镜像同步 lzc-cli appstore copy-image 国内网络下拉镜像不超时 中间件生态 Dockge + Compose RabbitMQ、Redis、Postgres 都能一键启动 环境变量管理 UI + .env 托管 私密信息集中维护，避免泄漏 总结下来，把懒猫微服当作一个可远程访问的轻量开发机还是挺合适的： 不用担心公网 IP 和端口映射 应用商店部署方便快捷 支持命令行部署、私有镜像同步 用 Dockge 管理一套中间件生态完全没问题 适合：👉 想要随时随地调试项目的开发者👉 不想在本地装一堆环境的轻量用户👉 有多端共享、协作需求的远程开发场景 整套流程走下来，你只需一台浏览器，就能获得 24 × 7 不关机的云端开发环境。如果你也是 Mac M-芯片用户、经常出差或需要多端协作，不妨试试用懒猫微服托管自己的 DevBox。","link":"%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E5%8D%81%E5%85%AD%EF%BC%89%EF%BC%9A%E6%8A%8A%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%BD%93%E4%BD%9C-24-%C3%97-7-%E5%9C%A8%E7%BA%BF%E5%BC%80%E5%8F%91%E6%9C%BA/"},{"title":"懒猫微服实战入门（十七）：把 Steam 游戏存到懒猫网盘","text":"懒猫微服的网盘基本可以替代一些公有的网盘，还有一个好处是可以自动挂载，只要打开懒猫微服的客户端，然后自动把网盘就能自动挂载到 Finder，十分方便。 网盘的挂载是支持了 WebDAV 和 Sambda。这是常见的两种远程访问的协议。 WebDAV（Web Distributed Authoring and Versioning）主要用于 HTTP/HTTPS 协议 的文件共享，适合 远程访问、云存储。基于 HTTP/HTTPS，可在浏览器中直接访问（如 http://server/webdav）。 SMB（Server Message Block）/ Samba 主要用于 局域网文件共享（如 Windows 共享文件夹、NAS、企业内网存储）。 通过 mount 命令可以看到，懒猫微服客户端默认使用的是 SMB 协议挂载： 12//xu-automount@file.micro.heiyu.space/xu-automount on /Users/xu/lazycat_automount/micro (smbfs, nodev, nosuid, mounted by xu)//xu-automount@file.micro.heiyu.space/xu on /Volumes/xu (smbfs, nodev, nosuid, mounted by xu) 默认有两个文件夹，其实都是指向网盘根目录的软连接。两者内容完全一样。 &lt;用户名&gt;-automount：这个应该不是自动挂载到文件管理器的目录 &lt;用户名&gt;: 这个是网盘多租户的目录 所以在 Steam 里我们直接添加驱动器就好： 然后可以选择这两个文件目录，就像前面介绍的，这两个选择哪个都行： 然后这个时候会弹出来这个提示。我们选择允许。这样 Steam 才能有写入懒猫网盘的权限。 然后选择下载之后，我们发现网盘里多了一个 SteamLibrary 的目录。所有的游戏都存在这里。 如果你比较习惯网盘的页面，也可以在网盘里找到 SteamLibrary 的目录 如果哪天不再需要写入懒猫网盘，用这个办法删除。网上吐槽挺多的。","link":"%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E5%8D%81%E4%B8%83%EF%BC%89%EF%BC%9A%E6%8A%8A-steam-%E6%B8%B8%E6%88%8F%E5%AD%98%E5%88%B0%E6%87%92%E7%8C%AB%E7%BD%91%E7%9B%98/"},{"title":"懒猫微服实战入门（三）:懒猫智慧屏，以为是地表最强电视盒子，结果是闺蜜机","text":"过年那阵子，为了看春晚不卡顿，打算换一个当贝盒子，尽管这些年刷过矿机当盒子或者 Armbian，但是仍然对当贝系列情有独钟，而时过境迁，最后发现在当年风靡市场的网红盒子，不过 RK3566 而已，根据不同的 RAM+ROM 的组合来卖到更高的价格，实在是没有什么性价比。 于是想到 X86 能性能会更加好一些，比如 Android TV 这种固件，不过这种基本都是海外版本，纯净的基本什么都要自己捣鼓，而 B 站评论的第三方链接又很担心安全问题。 这问题一直持续到我购买了懒猫微服，高性能的 X86 主机，还带 HDMI（目前 Typec 不支持供电和视频传输），和飞牛的原生 Gnome 输出不同的是懒猫智慧屏其实是商店里面一个独立的 APP，本质上相当于客户端，需要手机扫码授权才能使用 登录之后是这样的，其实就是在原来 APP 的基础上加了一个 Chrome 浏览器，然后其他的应用也能在显示器上打开。右上角依次是搜索栏，软件商店和登出按钮。接下来就是可以愉快的观影了，个人体验新开一个账户，然后设置应用白名单体验会更加的好～（但是用手机遥控的时候会提示，智慧屏正在被其他用户使用是否停止 hhhh） 我尝试的观影流程如下： 把视频传输到懒猫网盘（拖拽上传或者 Samba） 打开视频播放器（其他播放器也可） 然后选中网盘文件就可以播放啦 目前支持手机端遥控，类似市面上的盒子助手， 我连接了 Action III ，能够愉快的观影了。 由于是内置的应用，所以不存在电视盒子广告乱象的问题，11 代 I5 拿来观看 4K 也是轻松秒杀，需要什么就往网盘传什么。高端的需求只需要简单的办法。感觉不用买 Apple TV 了，如果需要其他软件比如 jellyfin 啥的也可以自己部署～。 机器有 USB 还能插键鼠，接好外设的时候记得重启一下，应该是容器部署的原因，让容器在启动的时候再读一遍/dev/bus/usb 下的设备。除了观影，接会议室的演示大屏幕也不错～ 毕竟这个页面，连 debian 虚拟机都能使用，其他的应用也不在话下。想用 X86 安卓的话，直接安装到虚拟机里～ 为啥说可以成为闺蜜机呢？ 为啥说可以成为闺蜜机呢？ 某天在商场的时候看到一个大大的带支架的还可以随时移动的平板叫做闺蜜机。 那么懒猫微服 + HDMI 投屏器/毫米波投屏器 + 可移动支架，是不是很像？ 某宝上还有这样的改装套餐，解决显示器供电看来就 OK。 市面上没有好用的电视盒子？选懒猫！ 市面上没有良心的在线网盘？选懒猫！ 市面上没有便宜的闺蜜专机？选懒猫！ 市面上的闺蜜机动辄大几千，配置又差强人意，还不如买懒猫微服，还有专业的售后陪玩，探索无限可能！ 什么？你说闺蜜机还得有语音助手， AI 美颜，娱乐互动？快登懒猫微服用 Docker 来部署吧，还有机会上架懒猫商店哦～","link":"%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%89%EF%BC%89-%E6%87%92%E7%8C%AB%E6%99%BA%E6%85%A7%E5%B1%8F%EF%BC%8C%E4%BB%A5%E4%B8%BA%E6%98%AF%E5%9C%B0%E8%A1%A8%E6%9C%80%E5%BC%BA%E7%94%B5%E8%A7%86%E7%9B%92%E5%AD%90%EF%BC%8C%E7%BB%93%E6%9E%9C%E6%98%AF%E9%97%BA%E8%9C%9C%E6%9C%BA/"},{"title":"懒猫微服实战入门（二）：打造多人协作环境,权限控制+数据隔离一步到位.md","text":"最近在懒猫微服上架了一些应用，正好分享给家里人用。这个实现起来很简单，在懒猫微服上开一个新的用户，然后控制这个用户是否可以安装软件，可以使用什么软件，这样不同用户之间的数据就隔离开了，比如每个人的懒猫网盘和懒猫清单是独立的，互相不会产生干扰。 下面就以实际操作为例，教大家新建用户，并且了解这些自带的安全机制。 新建用户设置 - 用户管理，这里可以看到现存的账户，第一次激活的时候会提示注册一个管理员账户，后面可以右上角点击邀请成员，然后会得到弹出一个二维码，新的客户端需要下载懒猫客户端，然后客户端扫码添加输入信息即可。 扫码后可以为新用户设置用户名和密码。客户端下载地址：👉 https://lazycat.cloud/download 注册完成后，新成员就可以使用自己的账号登录懒猫微服啦。默认是“非管理员权限”，更安全。 用户权限控制新建之后，我对这个新用户的画像是用户而不是管理者，所以只需要登录之后看到应用白名单就可以了。 点击新建用户的头像，可以设置用户可以看见应用的白名单。 比如，我只授权了家庭成员使用懒猫网盘、懒猫清单等基础工具。于是使用手机端登录新的账户，可以看到在我的应用中只有刚刚选中那些，这对于日常使用来说刚刚好，这个页面相对于安装了几十个 app 的管理页面来说，实在是清爽。 登录的二次验证在此之前我们先来介绍多因子验证（MFA），通俗来讲我们在使用用户名密码登录的时候有时候还要接收一个验证码，有时候是发到邮箱的，有的是手机短信，还有个需要安装特定的 APP 来查看，比如 Authy，Google Authenticator。 而懒猫微服在 APP 中内置了 MFA 接收验证码的功能，新设备登录的时候会有如下提示： 在一台新的设备登录懒猫账户的时候，已经登录这个账户的设备就会弹出这个提示，这个时候我一般是提前打开懒猫微服 APP。 当然如果没有提前打开或者登录呢，也可以在「微服管理 - 安全码」来查看，比如这样，这个方式很 Apple 但是用着比 Apple 的提示舒服多了。 那么什么时候才会触发这个 MFA 呢？经过不完全测试，主要还是在这里设备管理这里有一个云端白名单，在这里的设备可以就可以免去 MFA 的验证，如果删除某个设备之后，这个设备会马上注销登录，并且在此登录的时候还需要 MFA 验证。这个操作，极大了降低了被黑客攻击的可能性。 当然如果你觉得 MFA 比较麻烦，那么也可以使用手机号码的方式进行登录，绑定手机号，然后用收验证码的方式进行登录,比如这样： 1【懒猫微服】验证码：0000，5分钟内有效！请勿转发或泄漏。 写在最后以前用过很多 NAS，一直苦于怕黑客攻击而没有监管 NAS 放在互联网，而一套完整的登录机制也要花费很大的精力去维护，拓展。期间也选择过蒲公英这样的异地组网设备，虽然可以达到目的，但是过程不尽如人意，对于很多国产生态来说，售后一直是缺失的很重要的一环。而懒猫微服恰好弥补了这样的短板，让懂技术的人从繁杂的维护设备中解放出来，像使用公有云一样的使用 NAS。","link":"%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E6%89%93%E9%80%A0%E5%A4%9A%E4%BA%BA%E5%8D%8F%E4%BD%9C%E7%8E%AF%E5%A2%83-%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6-%E6%95%B0%E6%8D%AE%E9%9A%94%E7%A6%BB%E4%B8%80%E6%AD%A5%E5%88%B0%E4%BD%8D-md/"},{"title":"懒猫微服实战入门（四）：完全DNS访问，和本地代理冲突了怎么办？","text":"刚拿到懒猫微服的时候，了解到这个机器完全使用 DNS 来访问是很吃惊的。拒不完全使用经验，大概是机器里部署了一套私有的 DNS server，然后广播到整个局域网。而公网上的则是 heiyu.space，通过 whois 查看，公网的 domain 是在腾讯云购买的。 所以应该是两套的解析结构，局域网访问的时候，就先用机器部署的私有 domain 进行解析，如果使用流量或者在外边，就是走互联网上 DNSPod 的解析记录。这个结论属于猜测，因为很多公有云也确实四这么做的，一个公开托管的 domain 用来互联网解析，一个 VPC 内的 private domain 用来解析 VPC 内部的地址。 懒猫微服和传统的 NAS 又很大的不同，如果作为小白玩家可以很快上手，当做 Sass 服务来用。但对于专业玩家，总有一种技术的强迫症，总用抽丝剥茧，从 Saas 一点点解析到 Iass，然后一点把懒猫编程能够公开访问的私有云。 比如网络。可以通过 dig 或者 nslookup 来解析 12dig xxx.heiyu.space +shortdig xxx.heiyu.space AAAA +short 但是，DNS 解析这里慢慢就出现问题了。在某次上传文件到懒猫网盘的时候，我发现速度慢的可怜，几乎是走了公网。在 VIP 答疑群里得知，流量应该是从代理转了一圈，然后回来的，所以慢，剩下的就是解决这个问题了。 那么办法就是放行白名单，不让他走代理，由于是 DNS 访问，而很多代理的规则是根据域名匹配的，所以要去改这个匹配规则。当然如果你用 nmtui 配置静态 IP 地址的话，那么内网访问也是没有问题了，直接走上级路由的默认路由表即可。 而白名单主要是放行， _.heiyu.space 和 _.lazycat.cloud 这两个域名，heiyu.space 是穿透服务，lazycat.cloud 是官网和论坛。 不同的软件有不同的设置办法，比如说用 DOMAIN-SUFFIX 来替代域名的泛解析，所以放行的时候 heiyu.space 这这样子就好。我在修改配置文件的时候用 DOMAIN-SUFFIX 匹配*.heiyu.space 不生效，花了不少的时间。实际不需要再写一次 * 号。 而最终落到配置文件上就是这样的。（之前写 DOMAIN-SUFFIX,*.lazycat.cloud,DIRECT）一直不生效。 1234rules:- DOMAIN-SUFFIX,lazycat.cloud,DIRECT- DOMAIN-SUFFIX,heiyu.space,DIRECT- DOMAIN-SUFFIX,deepseek.com,DIRECT 也总结一下其他规则吧，最常见的类型有这些： 1）DOMAIN 只匹配某个域名本身。 举例：gs.apple.com → 只有访问 gs.apple.com 才会命中。 2）DOMAIN-SUFFIX 匹配所有以这个后缀结尾的域名。 举例：apple.com → gs.apple.com、itunes.apple.com 都会命中。 3）DOMAIN-KEYWORD 匹配包含某个关键词的所有域名。 举例：apple → apple.com、gs.apple.com、appleabc.xyz 都会命中。 4）IP-CIDR 匹配某个 IP 地址段。 举例：192.168.0.0/16 → 匹配 192.168 开头的所有 IP。 这些是规则写法里最基本的几种，掌握了就能应对绝大多数情况。","link":"%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E5%AE%8C%E5%85%A8dns%E8%AE%BF%E9%97%AE%EF%BC%8C%E5%92%8C%E6%9C%AC%E5%9C%B0%E4%BB%A3%E7%90%86%E5%86%B2%E7%AA%81%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E%EF%BC%9F/"},{"title":"懒猫微服实战入门（五）：文件上传到懒猫网盘，SMB 电视盒子观影","text":"作为一个合格的 NAS，肯定要有文件共享的功能，一般我们常用的是 SMB，NFS 和 WebDav 这三种，然后需要设置共享目录和用户权限。 懒猫网盘提供了一个开箱即用的方案，直接通过 APP 把网盘的文件夹映射自动挂载到本地，不需要像 Linux 那样 mount，也不需像 window 一样新建磁盘映射： 我们看看以前要挂载一个盘有多麻烦: 12345# Debian/Ubuntusudo apt install cifs-utilssudo mkdir /mnt/smb_sharesudo mount -t cifs //SERVER_IP_OR_NAME/SHARE_NAME /mnt/smb_share -o username=SMB_USER,password=SMB_PASSWORD,domain=WORKGROUP 如果需要开机自动挂载，还得改/etc/fstab 里面的条目。但是，懒猫网盘可以开箱即用，不管你是用浏览器，APP，还是用访达挂载 SMB 都访问都可以。属实是解放了 Mac 党的电脑空间。 在网盘中点击自己的头像，然后设置 - 网络服务这里，可以看到设置。甚至点击起开内网服务，还会给一个 IP 地址的 SMB 地址： smb://ip/user-name，电视盒子不能安装懒猫 app，但是有了 IP 地址之后就可以连接 SMB 了～ 然后就是当贝盒子这里啦，如果你是小米盒子或者其他的盒子，只要文件管理器支持 SMB 就 OK 进入文件管理器，选择 局域网共享连接。 然后输入懒猫微服的 IP 地址，用户名密码就是微服 APP 的， 这一套有点 AD 域的感觉了。 如果你的文件管理器默认没有 SMB 也没有关系，还可以使用第三方应用进行 SMB 连接，比如这个 Github 项目，可以从 release 中下载 APK 进行安装。 连接成功后，可对文件进行扫描和管理。 通过以上配置，就可以在电视盒子上通过 SMB 连接 NAS，开心的观看的 4K 电影了。","link":"%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%88%B0%E6%87%92%E7%8C%AB%E7%BD%91%E7%9B%98%EF%BC%8Csmb-%E7%94%B5%E8%A7%86%E7%9B%92%E5%AD%90%E8%A7%82%E5%BD%B1/"},{"title":"懒猫微服实战入门（六）：使用2fauth共享你的MFA","text":"标题有点绕口，甚至听起来有点反直觉。 故事的背景是这样的，去参加了 AWS 的活动给的账户强制开 MFA，但是我们还想团队内部 share 使用，于是产生了这个需求。 登录到 AWS 的控制台强制开了 MFA，而且在第一次注册的时候强制绑定多因子验证。这也就意味着，其他人如果想登录这个账户就得随时 call 我，然后我去发给他数据验证码，这实在很不方便，所以想到了共享的 MFA 的需求。 头几天逛商店看到的，觉得项目有点意思就下载了，没想到这么快用到了。懒猫商店，一键部署很方便，当成 Saas 服务来用，完全不考虑部署运维的事情。 之前给小伙伴开了懒猫微服的账户，共享了 planka 来看项目进度，这次把 2fauth 的权限也添加给他。 首先我这边先注册管理员的账户，默认是登录页面，需要切换一下。 登录之后会提示绑定一下这个账户的 MFA，我就是为了不在手机上安装 MFA 软件才用这个的，就不要套娃了。反正外面还有懒猫的验证系统，那个还有 TLS 加密，安全码验证。 选择不绑定设备之后，在这里导入需要设置的 MFA，这可以用摄像头或者导入二维码文件。我用的电脑端，所以直接在应用处截图，然后导入到这里了。 点击最下面的导入，然后选择二维码 - 上传 就可以了。 导入之后是这样的，可以二次确认签发机构。 然后把生成的 6 位数字填写到 aws 控制台上，就可以成功验证了。 在 2fauth 控制台上是这样的，点开就可以查看 6 位数字验证码。 那么回到一开始的话题，怎么共享给其他账户呢？点击下方 - 管理员 - 用户 ，然后我们来新建一个普通用户。步骤基本和前面的一致。 本来以为有用户组一类的概念，把两个用户和 MFA 放在一个组里达到 share 的目的，结果发现这个分组完全是用来区分的 TAG。也没有找到把用户加到组里的操作。那就从管理员导出，再从下一个用户导入吧。 首先试了二维码，但是导入的时候就提示 server error。于是查了了 wiki，都是其他 MFA 软件导入 2fauth 的。无奈只能只能导出配置文件。名字叫做 2fauth_export.json 登录新用户的时候新建，然后选择文本文件。导入刚才的配置文件就可以了。 配置文件基本长这样： 123456789101112131415161718192021{ &quot;app&quot;: &quot;2fauth_v5.3.2&quot;, &quot;schema&quot;: 1, &quot;datetime&quot;: &quot;2025-05-16T08:35:07.676665Z&quot;, &quot;data&quot;: [ { &quot;otp_type&quot;: &quot;totp&quot;, &quot;account&quot;: &quot;Q&quot;, &quot;service&quot;: &quot;AWS SSO&quot;, &quot;icon&quot;: null, &quot;icon_mime&quot;: null, &quot;icon_file&quot;: null, &quot;secret&quot;: &quot;secretsss&quot;, &quot;digits&quot;: 6, &quot;algorithm&quot;: &quot;sha1&quot;, &quot;period&quot;: 30, &quot;counter&quot;: null, &quot;legacy_uri&quot;: &quot;otpauth://totp/&quot; } ]} 整个过程有点绕，有人说每个人手机安装 google authenticator 扫一下不就好了吗？ 为什么采取这个方案？ 之前用手机安装类似软件，每次去三里屯维修的时候都说返厂要把数据抹掉，下次还得重新绑定，还有一些软件只认 MFA 不认人。 这过程不光折腾的够呛，而且 Apple 本身的问题还要 MFA 来买单。 起初是想做一个类似于团队共享 MFA 的场景的，类似于 RBAC，控制起来很灵活，但是实际体验下来是没有达到的。 把最早的 MFA 二维码截图 share 出去也能扫，但是不确定有效时间。","link":"%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9A%E4%BD%BF%E7%94%A82fauth%E5%85%B1%E4%BA%AB%E4%BD%A0%E7%9A%84mfa/"},{"title":"懒猫微服实战入门（八）：懒猫微服 × SSH Remote：打造随时随地的云端开发环境","text":"Apple 开始换了 ARM 芯片之后，我们还处于 X86 和 ARM 交叉的阶段。所以有时候还得有一台 X86 的开发环境来测试一些兼容性问题。一开始手里面只有低配置的软路由，后来入手了懒猫微服，这个 11 代 i5 的 CPU 终于能够编译一些重型的任务了。 下面演示如何把懒猫微服配置成一台云端开发机，并分别用 VS Code 与 PyCharm 进行远程开发。 虽然懒猫微服的商店已经上架了 code-sever 可以开箱即用，除此之外我们也来探索下其他的方案。 1 · 准备 SSH 免密登录修改 ~/.ssh/config（若无自行创建）： 123456789Host lzc HostName server.heiyu.space # 服务器域名 / IP User root # 默认用户名 IdentityFile ~/.ssh/id_ed25519 # 私钥路径 Port 22 # 默认端口 ServerAliveInterval 60 # 60 秒保活 TCPKeepAlive yes # TCP 保持连接 ForwardAgent yes # 允许代理转发 IdentitiesOnly yes # 只尝试显式钥匙 终端测试： 1ssh lzc # 应直接登录而不再提示密码 2 · VS Code ：一键 Remote 需要 Remote Development 三件套插件（SSH / WSL / Containers）。 安装完成后，点击左下角 棕黄色的 Remote 图标。 VS Code 自动读取 ~/.ssh/config，显示刚才的 lzc 主机。 选择需要打开的文件夹，我们是 root 登录，所以基本上所有的路径都有访问权限，由于懒猫微服的设置，除了 root 目录外，其他的目标可能会被清空，所以我们尽量把代码留在 root 目录下就好。 打开之后我们就可以看到代码了，剩下的就和本地差不多了，这也就是偷懒不学 VIM 的原因吧。 3 · PyCharm ：Gateway 秒连我们再来看 Pycharm，默认提供了远程开发的功能。记得最早 Jetbrains 的是这么实现的，把本地代码推送到远端的/tmp 文件夹然后调用远端编译器执行。现在用了 Gateway 基本可以达到实时的效果了。 依次点击 New SSH Configuration → Add，填入主机、端口、用户名，并选择 私钥 或 密码。 连接成功后，选择需要打开的服务器目录（同样建议用 /root/...）。 首次连接时 PyCharm 会在服务器端安装一个 IDE Agent。 安装完毕即可像本地一样运行、调试、补全。 写在最后apple 的 M 芯片用来开发，而懒微服就作为上线环境之前的测试环境，当需要 X86 环境的时候，随时切换过去。","link":"%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E5%85%AB%EF%BC%89%EF%BC%9A%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D-%C3%97-ssh-remote%EF%BC%9A%E6%89%93%E9%80%A0%E9%9A%8F%E6%97%B6%E9%9A%8F%E5%9C%B0%E7%9A%84%E4%BA%91%E7%AB%AF%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"},{"title":"懒猫微服实战入门（九）：给懒猫安装图形界面，使用 XRDP 实现远程桌面","text":"虽然我们日常使用 Linux 系统时，大多数操作都是通过终端完成的，比如运行服务、查看日志、编辑配置文件等。但在某些场景下，图形界面仍然是非常有用的：例如需要打开浏览器进行调试、运行带 GUI 的应用程序，或者想给不太熟悉命令行的同事一个更友好的访问方式。 因此，这一篇教程就来介绍如何在懒猫微服上安装图形桌面环境，并通过 XRDP 实现远程桌面连接。我们选择的是轻量级的 XFCE4 桌面环境，它资源占用小，运行稳定，界面风格有点像老版本 Windows，非常适合资源有限的 VPS 或微型容器环境。当然，你也可以选择 KDE Plasma、GNOME 等更现代的桌面环境，但安装包体积和资源占用会更高。 一键安装脚本经过多次测试，我总结了一份实用的一键安装脚本，适用于基于 Debian 的系统（如 Ubuntu 或懒猫微服）： 123456789101112131415161718192021222324252627#!/usr/bin/env bashset -eecho &quot;==&gt; 设置 keyboard-configuration 为无交互模式&quot;echo 'keyboard-configuration keyboard-configuration/layoutcode select us' | debconf-set-selectionsecho 'keyboard-configuration keyboard-configuration/modelcode select pc105' | debconf-set-selectionsexport DEBIAN_FRONTEND=noninteractiveecho &quot;==&gt; 更新系统包索引&quot;apt updateecho &quot;==&gt; 安装桌面和远程桌面组件&quot;apt install -y xfce4 xfce4-goodies xorg dbus-x11 x11-xserver-utils \\ xrdp xorgxrdp keyboard-configurationecho &quot;==&gt; 配置 .xsession 启动 XFCE&quot;echo &quot;startxfce4&quot; &gt; ~/.xsessionchmod +x ~/.xsessionecho &quot;==&gt; 添加 xrdp 到 ssl-cert 用户组（避免黑屏）&quot;adduser xrdp ssl-certecho &quot;==&gt; 启动并启用 xrdp 服务&quot;systemctl enable xrdpsystemctl restart xrdpecho &quot;✅ 安装完成！现在可以使用 Windows 远程桌面（mstsc）登录本机 IP，使用系统用户名登录 XFCE 桌面。&quot; 你只需要将这段脚本保存为 install-xrdp-xfce.sh 文件，赋予执行权限并运行即可： 12chmod +x install-xrdp-xfce.sh./install-xrdp-xfce.sh 需要注意的是, 重启之后这个配置仍然会消失.所以还需要使用 systemd –user 拉起来这个脚本. 远程桌面使用说明 安装完成后，在 Windows 系统中打开“远程桌面连接（mstsc）”。 输入你的懒猫主机 IP 地址。 使用系统中的用户名密码进行登录 如果一切正常，应该可以看到一个 XFCE 图形桌面。 如果你连接后出现黑屏问题，通常是 .xsession 配置不正确或者权限不足，上述脚本中已经处理好了这个问题。 补充：如果你还想让它能本地显示图形界面如果你希望在物理机或有显卡输出的虚拟机中直接打开图形界面（不是远程连接），可以额外添加如下配置： 123echo &quot;exec startxfce4&quot; &gt; ~/.xinitrcchmod +x ~/.xinitrcstartx 这样你在本地终端执行 startx 就能启动 XFCE 桌面。 通过上述脚本，我们可以非常快速地为懒猫微服安装一个可用的图形桌面环境，并通过 XRDP 实现远程访问。这在需要图形界面支持的场景下尤其方便，例如： 使用浏览器调试网页； 可视化工具如 Wireshark、GParted； 为不熟悉命令行的用户开放访问权限。 如果你希望安装 KDE、GNOME 等更复杂的桌面，可以将 apt install 中的包名替换为 kde-standard、gnome 等，并注意资源占用问题。","link":"%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E4%B9%9D%EF%BC%89%EF%BC%9A%E7%BB%99%E6%87%92%E7%8C%AB%E5%AE%89%E8%A3%85%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%EF%BC%8C%E4%BD%BF%E7%94%A8-xrdp-%E5%AE%9E%E7%8E%B0%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2/"},{"title":"写给懒猫微服玩家的容器小书 Docker篇（一）：《无法部署的诅咒》","text":"一直想写一本容器小书，真好懒猫基本都做了容器化，所以把这部分分享出来。不同的是，懒猫微服中使用 pg-docker 来替代 docker 命令，使用 dockge 来执行 docker-compose。以下讲解以标准 docker 为主，这样子既学会了 docker 知识，也能够在懒猫微服上启动 Docker 服务。 《无法部署的诅咒》讲的是 Docker 的起源与作用、镜像与容器概念、安装入门🏙️ 开篇：代码在电脑上运行良好，部署却频频翻车小李是一名后端工程师，刚完成一个用 Flask 编写的内部管理系统。他信心满满地将代码提交，交给测试工程师老赵部署。 可没想到—— “报错了！你是不是少传文件了？” “我这边 Python 是 3.6，怎么你这代码用了 match case？” “你数据库呢？你 Redis 配了？环境变量在哪？” 这一刻，小李陷入了一个叫「部署地狱」的世界。 这个世界里，每一台服务器都是独一无二的“宠物”，需要手动配置、手动部署、手动踩坑，稍有不慎就会陷入版本冲突、依赖缺失、环境不一致的深渊。 小李心里想：有没有一种办法，能让我把代码和环境一起打包起来，无论在哪运行都能保持一致？ 🌀 变故：神秘的程序员大叔与魔法容器在公司茶水间，小李邂逅了一个带着黑框眼镜的大叔，大家都叫他老周。 老周是个技术老炮，在各种部署大灾难中杀出血路。他听完小李的吐槽后，轻轻地推了一份文档过来，只写了五个字母： Docker “这是个魔法容器，”老周说，“把你代码和环境都打包进去，哪怕放在火星，也能跑。” “以后别再‘它在我电脑上可以跑’了，Docker 能让所有环境变得一致。” 小李的眼睛亮了。 🔧 技术讲解 Part 1：什么是 Docker？Docker 是一个开源的容器化平台，它允许开发者将应用及其所有依赖打包成一个“容器”，保证在任何平台上都可以一致运行。 你可以把 Docker 想象成： 程序员的打包箱子：把你写的程序、环境、库、配置都放进去，打包成一个“镜像”； 程序员的快递服务：运行镜像就像打开快递，内容和你寄出时一模一样。 🚀 为什么要用 Docker？ ✅ 跨平台运行：一次构建，到处运行（Run anywhere） ✅ 快速部署：秒级启动，适合 CI/CD ✅ 环境一致性：不再“你电脑能跑我电脑不行” ✅ 轻量隔离：不像虚拟机那么重，不需要整个操作系统 ✅ 资源占用少：用起来更像一个进程，而不是一台虚拟机 ☑️ 一句话总结：Docker 解决了“在我电脑上能跑”的问题。 🛠️ 技术讲解 Part 2：如何安装 Docker？老周拍了拍小李的肩膀，说：“先装起来，动手最重要。” 🧑‍💻 在 Mac / Windows 上： 访问官网：https://www.docker.com/products/docker-desktop 下载并安装 Docker Desktop 安装后打开终端（Terminal），输入： 1docker --version 如果看到 Docker 的版本信息，说明安装成功。 🧑‍💻 在 Linux（Ubuntu）上：1234sudo apt updatesudo apt install docker.iosudo systemctl start dockersudo systemctl enable docker 🔐 建议将当前用户加入 docker 组，以免每次都要用 sudo： 1sudo usermod -aG docker $USER 🧠 技术讲解 Part 3：Docker 的核心概念 概念 说明 镜像（Image） 应用和其依赖的静态快照模板（如：打包好的 Python 环境 + Flask 项目） 容器（Container） 镜像运行出来的实例，是真正“活着”的程序 Dockerfile 编写镜像的“配方”，定义如何构建镜像 Docker Hub 类似 GitHub 的公共镜像仓库，可上传/下载别人做好的镜像 docker 命令 Docker 的主命令工具，用于操作镜像、容器、网络、卷等 📌 镜像 vs 容器 镜像是“模具”，容器是“实物” 镜像不可变，容器是可运行的环境 一个镜像可以运行多个容器 🧪 技术实践：Hello Docker 世界老周指导小李敲下第一行命令： 1docker run hello-world 如果 docker run/pull 有问题，那么可以通过lzc-cli appstore copy-image your-images来使用懒猫的镜像仓库。 这个命令会做三件事： 自动从 Docker Hub 拉取一个 hello-world 镜像（如果本地没有） 基于镜像运行容器 容器运行后输出信息，然后自动退出 这是验证 Docker 是否正常运行的“点灯测试”。 🧱 小李的第一个真实容器：Flask Web 项目打包实战老周笑着说：“现在，把你那个 Flask 管理系统也丢进 Docker 试试。” 小李在项目根目录下写了一个 Dockerfile： 1234567891011121314# 使用 Python 官方基础镜像FROM python:3.11-slim# 设置工作目录WORKDIR /app# 复制项目文件COPY . /app# 安装依赖RUN pip install -r requirements.txt# 设置启动命令CMD [&quot;python&quot;, &quot;main.py&quot;] 构建镜像：1docker build -t my-flask-app . 启动容器：1docker run -p 5000:5000 my-flask-app 现在访问浏览器 http://localhost:5000，你的项目上线了！ 💡 小知识快闪 Docker 容器内部不包含完整操作系统，只包含必要的运行库； Dockerfile 的每一行都是一层（Layer），构建时会缓存复用； docker ps 查看运行中容器，docker images 查看已有镜像； 可以通过 .dockerignore 文件忽略不想加入镜像的文件，比如 .git 和日志。 ⚔️ 章节尾声：打破部署诅咒这次，小李把打好的镜像发给了测试老赵： 1docker run -p 5000:5000 my-flask-app 老赵只运行了一行命令，项目便神奇地跑了起来。 “不改配置？不用装 Python？数据库也连上了？”“你这是什么魔法！” 小李笑了笑，第一次感觉部署是件简单的事。 🧭 第一章总结知识点： 技术点 命令 安装 Docker Mac/Win 下载 Docker Desktop / Ubuntu 安装 docker.io 查看版本 docker --version 运行测试容器 docker run hello-world 编写 Dockerfile FROM / COPY / RUN / CMD 构建镜像 docker build -t name . 运行容器 docker run -p 宿主:容器 镜像名","link":"%E5%86%99%E7%BB%99%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E7%8E%A9%E5%AE%B6%E7%9A%84%E5%AE%B9%E5%99%A8%E5%B0%8F%E4%B9%A6-docker%E7%AF%87%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E3%80%8A%E6%97%A0%E6%B3%95%E9%83%A8%E7%BD%B2%E7%9A%84%E8%AF%85%E5%92%92%E3%80%8B/"},{"title":"写给懒猫微服玩家的容器小书 Docker篇（二）：《镜像旅馆的秘密》","text":"一直想写一本容器小书，真好懒猫基本都做了容器化，所以把这部分分享出来。不同的是，懒猫微服中使用 pg-docker 来替代 docker 命令，使用 dockge 来执行 docker-compose。以下讲解以标准 docker 为主，这样子既学会了 docker 知识，也能够在懒猫微服上启动 Docker 服务。 《镜像旅馆的秘密》讲的是 Docker 镜像的原理、分层结构、生命周期、Docker Hub 上传与下载、常见镜像命令详解🏰 开篇：进入镜像旅馆自从小李用 Docker 成功打包并运行了自己的 Flask 项目，他的开发效率飞快提高。 某天，老周带他来到一座巨大的数字建筑——Docker 镜像旅馆。 “这是你所有镜像的家，”老周说，“也是全球程序员共享旅程资源的中转站。” 镜像旅馆里，层层叠叠地存放着成千上万个镜像，就像一栋模块化的高楼大厦。 🧱 镜像的本质：一层一层搭起来的文件系统老周告诉小李： “镜像（Image）其实是一个只读的分层文件系统。你写的每一条 Dockerfile 指令，都会构成一层 Layer。” 比如这个简单的 Dockerfile： 12345FROM python:3.11-slimWORKDIR /appCOPY . /appRUN pip install -r requirements.txtCMD [&quot;python&quot;, &quot;main.py&quot;] 对应的镜像层如下： FROM → 拉了一个基础镜像层（Python 3.11） WORKDIR → 添加一个设置工作目录的 Layer COPY → 拷贝代码文件的 Layer RUN → 安装依赖的新 Layer CMD → 容器入口（不是 Layer，但存配置） 💡 小知识：Docker 会尽量缓存和复用前面的 Layer，节省时间和存储。 🧪 镜像命令全攻略小李打开终端，开始探索这些镜像的日常操作。 1. 查看本地镜像：1docker images 输出示例： 123REPOSITORY TAG IMAGE ID CREATED SIZEmy-flask-app latest 123abc456def 2 minutes ago 125MBpython 3.11-slim 789xyz654hij 3 days ago 40MB 解释： REPOSITORY：镜像名 TAG：标签（版本号） IMAGE ID：镜像唯一标识符 SIZE：镜像大小 2. 查看镜像历史构建过程（看每层）：1docker history my-flask-app 3. 删除镜像：1docker rmi my-flask-app （⚠️ 若有容器在运行该镜像，需先停止并删除容器） 🗂 镜像仓库：Docker Hub老周指了指旅馆大堂里的一个巨大电梯： “这是 Docker Hub，全球最大的镜像共享仓库。” 在这里，小李能下载成千上万的开源镜像，也能上传自己的。 登录 Docker Hub：1docker login （需要先注册账号） 下载镜像：1docker pull nginx 这会从 Docker Hub 拉取最新版本的 nginx 镜像 指定版本拉取：1docker pull redis:6.2 如果 docker run/pull 有问题，那么可以通过lzc-cli appstore copy-image your-images来使用懒猫的镜像仓库。 （相当于拉取 redis 仓库中 tag 为 6.2 的镜像） 上传镜像（先打标签）：12docker tag my-flask-app yourdockerhubname/my-flask-app:1.0docker push yourdockerhubname/my-flask-app:1.0 📦 镜像 Tag 与版本控制老周问：“小李，你知道为什么镜像都有个 :latest 吗？” 小李说：“这是默认版本号吧？” “对，但我们不能依赖它。开发、测试、生产应使用明确版本号，比如 1.0、20240321 等。” Docker 镜像是通过 tag 来区分版本的： 12docker build -t myapp:1.0 .docker build -t myapp:latest . 你可以为同一个镜像打多个标签，对应不同场景使用。 🔍 镜像体积优化技巧小李注意到镜像越来越大了，占了很多硬盘空间。 老周给了他几点建议： 使用轻量级基础镜像： 比如 python:3.11-slim 代替 python:3.11 合并 1RUN 命令，减少层数： 1RUN apt update &amp;&amp; apt install -y git &amp;&amp; rm -rf /var/lib/apt/lists/* 删除临时文件： 安装后清理缓存，避免垃圾文件残留 多阶段构建（进阶）： 构建和运行使用不同的镜像阶段 📂 镜像保存与迁移后来小李想把自己的镜像传给另一位没有 Docker Hub 的同事。 他用到了镜像导出与导入： 导出镜像为 .tar 文件：1docker save my-flask-app &gt; myapp.tar 导入镜像：1docker load &lt; myapp.tar 镜像打包成离线文件，便于携带与备份。 🔍 深入 Layer 实战：查看镜像内容小李很好奇，镜像到底长什么样？ 老周教他运行容器并进到里面： 1docker run -it --rm my-flask-app /bin/bash 这样他就能直接进入容器的 Linux 环境，像在服务器上一样查看文件结构： 123ls /cd /appcat requirements.txt 他终于明白，每个镜像就像是一个“静态快照”，而容器才是“它的动态运行副本”。 📊 镜像生命周期总结表 操作 命令 查看本地镜像 docker images 构建新镜像 docker build -t name . 删除镜像 docker rmi 镜像名 下载镜像 docker pull 镜像名[:tag] 上传镜像 docker push 镜像名[:tag] 镜像打包导出 docker save &gt; xxx.tar 镜像导入还原 docker load &lt; xxx.tar 镜像历史层查看 docker history 镜像名 🎬 尾声：镜像旅馆的门票小李现在拥有了多个镜像，搭配不同的版本、依赖、语言，像积木一样可以快速组合各种环境。 “这就像 Minecraft 的世界地图，每张都是一个镜像。”小李说。 老周点点头：“没错，镜像只是开始，真正的冒险——是容器运行起来后的世界。” 🧭 第二章小结 镜像是构建环境的基础模板，支持版本控制、缓存加速、快速构建 可以上传到 Docker Hub 或导出 .tar 进行离线传输 管理命令要熟练掌握：build、pull、push、rmi、tag、history 优化镜像大小要用 slim 基础镜像、合并命令、清理缓存 ✨ 增补内容：镜像的高级技能与实战应用 🧪 多阶段构建：精致分工，极限瘦身有一次，小李需要构建一个使用 npm 打包前端、Python 启动后端的项目。打包工具很多、依赖也重，他担心镜像太大。 老周说：“你要学会多阶段构建（multi-stage build），把构建阶段和运行阶段分开。” 多阶段构建的目标是：编译用谁都行，最终镜像要最小。 示例：Node 构建 + nginx 托管123456789# 第一阶段：使用 node 构建前端FROM node:18 AS builderWORKDIR /appCOPY . .RUN npm install &amp;&amp; npm run build# 第二阶段：用 nginx 托管打包后的静态文件FROM nginx:alpineCOPY --from=builder /app/dist /usr/share/nginx/html 第一阶段装依赖、打包代码 第二阶段只取编译结果，不用带上 node/npm 等工具 小李一测试，镜像体积从 300MB 降到 25MB，部署速度快了 10 倍！ 🧩 使用 .dockerignore：镜像防垃圾机制构建时，小李发现镜像中夹杂了 .git、node_modules、__pycache__…… 老周摇头道：“你忘了 .dockerignore 文件。” 就像 .gitignore 一样，.dockerignore 告诉 Docker 哪些文件在构建镜像时要排除。 示例：12345__pycache__/.git/node_modules/.env*.log 这个文件放在 Dockerfile 同目录下，能显著加快构建速度和减小镜像大小。 📦 自建私有镜像仓库（Registry）当公司禁止使用 Docker Hub 时，小李开始尝试搭建自己的镜像库。 老周带他部署了一个本地私有镜像仓库（基于 Docker 官方镜像）： 1docker run -d -p 5000:5000 --restart=always --name registry registry:2 现在他可以： 推送到私库： 12docker tag myapp localhost:5000/myappdocker push localhost:5000/myapp 拉取镜像： 1docker pull localhost:5000/myapp 适合公司内部使用，搭配 Nexus、Harbor 可实现更完善的权限、审计、镜像管理等功能。（比如懒猫的 copy-image） 🧠 镜像调试技巧：如何从镜像中探查问题？如果小李的镜像出错了，他可以通过两种方式“探测”镜像内部： 方法 1：运行一个交互式 shell 容器1docker run -it myapp /bin/bash （如果 bash 不存在，可以用 /bin/sh） 方法 2：打开已有容器的终端1docker exec -it container_id /bin/bash 通过 ls、cat、which、env 命令，可以检查： 文件有没有 COPY 进去？ pip install 是否安装成功？ 环境变量是否丢失？ 🔐 镜像安全：不要把密码打包进镜像！小李曾在 Dockerfile 里写了： 1ENV DB_PASSWORD=123456 老周当场拍桌：“你这是把钥匙写死进容器了！” 最佳做法： 在容器运行时注入环境变量（例如使用 .env 文件 + --env 参数） 使用 docker secret 或 KMS 管理 使用 BuildKit 的 --secret 机制加密构建时参数（高级用法） 🧾 镜像标签管理规范建议小李准备上线，他开始给镜像打各种 tag： 12docker build -t myapp:1.0.0 .docker tag myapp:1.0.0 myapp:latest 老周说： “tag 是镜像的版本名，不要用 latest 作为生产环境唯一标识。” 推荐命名规范： 标签 含义 myapp:1.0.0 语义化版本控制 myapp:20240324 构建时间戳 myapp:prod 环境标识 myapp:feature-login 功能分支测试 🔁 镜像缓存失效调试技巧有时候构建镜像时，小李发现修改了某个文件，Docker 却好像没更新。 老周点拨他：“那是缓存搞的鬼。” 方法一：强制跳过缓存1docker build --no-cache -t myapp . 方法二：注意 COPY 顺序影响缓存命中Docker 会从上到下按顺序缓存。如果把变化频繁的文件 COPY 太早，就会导致缓存失效： 1234COPY requirements.txt . # OK，变动少，适合先复制RUN pip install -r requirements.txtCOPY . . # 后复制代码，避免频繁无效重建 ✨ 技巧：越是稳定的文件，越早 COPY，利于缓存复用。 📘 第二章 · 补充总结更新版 技术点 命令 / 说明 多阶段构建 FROM ... AS builder + COPY --from=builder 忽略文件 .dockerignore 文件 镜像上传私库 docker push localhost:5000/myapp 开启 BuildKit DOCKER_BUILDKIT=1 docker build ... 进入镜像内调试 docker run -it 镜像 /bin/bash 镜像版本管理建议 避免乱用 latest，使用语义化 tag 跳过缓存构建 docker build --no-cache ... 小李站在镜像旅馆的屋顶，看着一层层高楼像乐高积木一样堆叠而起。 他感到激动——他已经不再为“部署”苦恼，而是拥有了一个随时可打包、可还原的开发宇宙。 老周说：“你的旅程才刚刚开始，容器的世界比镜像更复杂。”","link":"%E5%86%99%E7%BB%99%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E7%8E%A9%E5%AE%B6%E7%9A%84%E5%AE%B9%E5%99%A8%E5%B0%8F%E4%B9%A6-docker%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E3%80%8A%E9%95%9C%E5%83%8F%E6%97%85%E9%A6%86%E7%9A%84%E7%A7%98%E5%AF%86%E3%80%8B/"},{"title":"写给懒猫微服玩家的容器小书 Docker篇（三）：《容器部落生活》","text":"《容器部落生活》讲的是 容器生命周期管理，包括容器的启动、停止、查看、交互、日志、后台运行、重启策略等操作 一直想写一本容器小书，真好懒猫基本都做了容器化，所以把这部分分享出来。不同的是，懒猫微服中使用 pg-docker 来替代 docker 命令，使用 dockge 来执行 docker-compose。以下讲解以标准 docker 为主，这样子既学会了 docker 知识，也能够在懒猫微服上启动 Docker 服务。 镜像旅馆的旅途告一段落，小李的下一站是容器部落。 老周牵着他走过一条闪烁着数字光芒的通道，一排排运行中的应用像帐篷一样排列着。有人在调试日志，有人在重启服务，还有人用 bash 正在某个容器里“打补丁”。 老周说： “镜像只是静态的模板，容器才是它们的生命。容器是镜像运行出来的真实世界。” 🧠 技术基础：容器 vs 镜像 项目 镜像（Image） 容器（Container） 类比 模板、配方 实际的运行实例 特性 只读 可读写 作用 用来创建容器 实际运行中的程序环境 状态 不运行 可运行、停止、销毁 🛫 第一节：容器的启动方式小李想运行他的 Flask 应用镜像。 老周告诉他： “运行镜像的命令是 docker run，容器就像是用镜像盖起来的一顶帐篷。” 1. 最常见方式（临时 + 前台）：1docker run my-flask-app 但程序一执行完就退出了。小李困惑。 老周解释： “容器会在主进程结束后自动退出，比如 CMD [&quot;python&quot;, &quot;main.py&quot;] 一旦结束，容器就结束了。” 2. 保持后台运行（常用）1docker run -d --name flask-app -p 5000:5000 my-flask-app 解释： -d：detached 模式，后台运行 --name：给容器取个名字，方便管理 -p 宿主端口:容器端口：端口映射，把容器内部 5000 暴露到外部 小李可以在浏览器里访问 http://localhost:5000，服务在跑！ 3. 设置环境变量1docker run -d -e ENV=production my-flask-app 在容器内可通过 os.environ['ENV'] 访问。 4. 设置自动重启策略（生产强烈建议）1docker run -d --restart=always my-flask-app 可选策略： 策略名 说明 no 不自动重启（默认） on-failure 出错时重启 always 永远重启 unless-stopped 除非人为停止 🧭 第二节：查看容器状态老周说：“运行中的容器就像是火堆，你得学会看它们是否还在烧。” 查看运行中容器：1docker ps 如果想看所有容器（包括已退出的）： 1docker ps -a 输出示例： 12CONTAINER ID IMAGE STATUS NAMESf123abc456 my-flask-app Up 3 minutes flask-app 🔄 第三节：容器的停止与重启停止容器：1docker stop flask-app 启动容器：1docker start flask-app 重启容器：1docker restart flask-app ⚠️ 容器停止后并不会删除，除非显式用 docker rm 🧰 第四节：进入容器内“远程调试”有一次小李发现容器里缺了个配置文件，他想进去看看。 使用 exec 进入运行中的容器：1docker exec -it flask-app /bin/bash -i：保持输入 -t：分配终端 /bin/bash：使用 bash shell（Alpine 镜像可能要用 /bin/sh） 现在他能像 SSH 进服务器一样，在容器里操作文件、日志、环境变量。 📜 第五节：查看容器日志某天应用崩溃了，小李要调日志。 老周提醒他：“容器日志直接走标准输出和错误输出。” 1docker logs flask-app 可以加参数看最近内容： 1docker logs --tail 100 flask-app 实时滚动输出（调试很有用）： 1docker logs -f flask-app 🧽 第六节：删除容器小李尝试重建容器时，系统提示名字重复。 老周告诉他要先删除原来的： 1docker rm flask-app 如果容器还在运行，先 stop 再 rm，或直接强制： 1docker rm -f flask-app 🔄 第七节：容器生命周期一览表 操作 命令 创建 + 运行容器 docker run 后台运行 docker run -d 设置名字 docker run --name name 设置端口映射 -p 外:内 查看容器 docker ps [-a] 停止容器 docker stop name 启动容器 docker start name 重启容器 docker restart name 删除容器 docker rm [-f] name 查看日志 docker logs [-f] name 进入容器 docker exec -it name /bin/bash 🧪 小李的实战练习任务老周布置了一个练习： “请你写一个脚本，构建镜像，运行容器，设置环境变量和端口，再用日志确认 Flask 成功启动。” 小李完成如下步骤： 1234docker build -t flask-test .docker run -d --name flask-run -p 8080:5000 -e MODE=debug flask-testdocker logs -f flask-rundocker exec -it flask-run /bin/bash 🧬 衍生补充：容器的状态码解释容器退出时，可以用 docker ps -a 查看 STATUS 栏： Exited (0)：正常退出 Exited (1)：出错退出 Up：正在运行 调试时很有用。 🎬 尾声：容器部落里的秩序小李现在已经能够用容器完成： 应用部署 环境隔离 日志查看 重启容错 在线修复问题 他看着容器部落中灯火通明的帐篷，知道自己终于从一个“只会打包镜像”的新人，成长为能驾驭容器生命周期的工程师。 老周拍拍他肩膀说： “你已经能掌控容器的生死了，下一步——掌控它们的数据。” 好嘞，我们来拓展第三章《容器部落生活》，新增三大实战内容： 🚀 Nginx 容器部署🔗 多个容器配合运行（应用 + 数据库）🩺 容器的服务探针（健康检查） 这部分会继续以故事+实战命令+讲解的方式展开，帮助你更贴近真实工作中的容器部署流程。 🧱 实战一：Nginx 容器部署小站点小李想搭个静态站点测试，老周给他出了一个练习： “用 Nginx 容器部署一个 HTML 网站，只通过 Docker 完成。” 1. 准备文件结构：123nginx-site/├── index.html└── Dockerfile index.html 示例： 123456789&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;title&gt;Hello from Nginx&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;Hello Docker + Nginx!&lt;/h1&gt; &lt;/body&gt;&lt;/html&gt; 2. Dockerfile 内容（基于官方 Nginx）：12FROM nginx:alpineCOPY index.html /usr/share/nginx/html/index.html ✅ 把自己的网页文件覆盖掉默认首页。 3. 构建 + 运行：12docker build -t nginx-site .docker run -d --name my-nginx -p 8080:80 nginx-site 打开浏览器访问 http://localhost:8080，小李看到页面显示成功，笑得像个孩子。 🔗 实战二：应用容器 + 数据库容器组合运行接着老周出了第二个任务： “把你的 Flask 应用和一个 MySQL 数据库用两个容器跑起来，实现数据连接。” 方法一：手动网络 + 多容器连接1. 创建网络（容器间通信）：1docker network create flask-net 2. 启动 MySQL 容器：12345docker run -d --name my-mysql \\ --network flask-net \\ -e MYSQL_ROOT_PASSWORD=root123 \\ -e MYSQL_DATABASE=mydb \\ mysql:5.7 3. 启动 Flask 应用容器（连接到 MySQL）：假设 Flask 连接数据库时使用： 1host = 'my-mysql' # 容器名就是主机名 启动命令： 12345docker run -d --name flask-app \\ --network flask-net \\ -e DB_HOST=my-mysql \\ -p 5000:5000 \\ my-flask-app 🔗 容器间在同一个网络中，通过名字直接通信，像局域网一样！ 方法二：使用 docker-compose（下一章会详细讲） 🩺 实战三：为容器添加“健康探针”老周问小李：“如果你的服务挂了，但容器还在运行，你怎么知道？” 小李摇头：这不就是“僵尸容器”吗？ 老周笑了： “那就给它加一个健康探针（HEALTHCHECK），定期检测服务状态。” 为 Flask 容器加健康检查：修改 Dockerfile： 12HEALTHCHECK --interval=30s --timeout=5s --start-period=5s --retries=3 \\ CMD curl -f http://localhost:5000/health || exit 1 在 Flask 代码中添加一个健康检查路由： 123@app.route('/health')def health(): return &quot;OK&quot;, 200 构建镜像，运行容器后，通过命令查看健康状态： 1docker inspect flask-app | grep -i health 输出示例： 1234&quot;Health&quot;: { &quot;Status&quot;: &quot;healthy&quot;, ...} 如果 /health 接口返回失败状态码，容器会标记为 &quot;unhealthy&quot;，可配合自动重启策略联动修复。 🧭 实战拓展总结表 场景 命令 / 技术 部署静态站点 Nginx + COPY index.html 容器间通信 docker network create + --network 参数 多容器组合 应用容器连接数据库容器 服务探针 Dockerfile 添加 HEALTHCHECK，应用实现 /health 探针状态查看 `docker inspect 容器名 🎬 尾声 · 容器集群的微光小李站在容器部落的山丘上，看着成百上千个容器像城市灯火一样运转。 Nginx 做前端代理，Flask 作为后端逻辑，MySQL 管理数据，每个服务都是一块积木，有秩序、有协作。 老周淡淡说： “这只是单机的容器调度，真正的战场——在云上。” 小李的眼里闪起光芒：“那我下次要学的就是——Compose，K8s，还有 CI/CD，对吧？” 老周点头：“没错，下一站——数据卷与共享、Compose 编排，再之后……你就要去打云原生的战了。”","link":"%E5%86%99%E7%BB%99%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E7%8E%A9%E5%AE%B6%E7%9A%84%E5%AE%B9%E5%99%A8%E5%B0%8F%E4%B9%A6-docker%E7%AF%87%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E3%80%8A%E5%AE%B9%E5%99%A8%E9%83%A8%E8%90%BD%E7%94%9F%E6%B4%BB%E3%80%8B/"},{"title":"写给懒猫微服玩家的容器小书 Docker篇（四）：《数据之岛与持久化卷》","text":"一直想写一本容器小书，真好懒猫基本都做了容器化，所以把这部分分享出来。不同的是，懒猫微服中使用 pg-docker 来替代 docker 命令，使用 dockge 来执行 docker-compose。以下讲解以标准 docker 为主，这样子既学会了 docker 知识，也能够在懒猫微服上启动 Docker 服务。 《数据之岛与持久化卷》讲的是 Docker Volume 持久化数据方案、挂载宿主机目录、多个容器共享数据、自动创建卷、数据备份与恢复等🏝️ 开篇：数据会随浪消失有一天，小李运行了一个容器，里面的 Flask 项目能正常写入用户信息到 SQLite 数据库。可当容器一停止，再启动——所有数据消失了！ 老周说：“你的数据，被潮水带走了。” “Docker 容器默认的文件系统是临时的，只要容器删除，数据也就没了。想让数据真正存活，就要登上‘数据之岛’。” 🧠 基础概念：数据卷（Volume）Docker 提供了三种数据持久化方案： 方案 用法 场景 Volume Docker 管理的专属数据区 最推荐、安全、可多容器共享 Bind Mount 映射宿主机目录 更灵活，适合本地调试 tmpfs 临时存储在内存 适合敏感数据，重启即丢弃 本章重点讲解：Volume（数据卷） 与 Bind Mount（绑定挂载） 📦 第一节：使用 Volume 保存数据小李重新部署了 MySQL 容器，他决定为数据提供一个“保命空间”。 1docker volume create mysql-data 然后运行 MySQL 时挂载： 1234docker run -d --name my-mysql \\ -e MYSQL_ROOT_PASSWORD=123456 \\ -v mysql-data:/var/lib/mysql \\ mysql:5.7 -v 卷名:容器内目录：将卷挂载到容器内数据库文件存储位置。 容器即使删除，数据卷依然保留！ 查看所有卷：1docker volume ls 查看卷详细信息：1docker volume inspect mysql-data 输出中可以看到 Mountpoint，即数据在宿主机上的物理位置。 🧪 第二节：自动创建匿名/具名卷小李写了个简单的服务： 1VOLUME /app/data 每次 docker run 时，Docker 会自动生成匿名卷挂载到 /app/data。 但这类匿名卷难以追踪、管理，老周建议： “生产环境请用具名卷，并在运行时用 -v 显式指定。” 🔗 第三节：绑定挂载宿主机目录（本地调试神器）开发中，小李想把宿主机的项目代码直接挂进容器，不必每次重建镜像。 1234docker run -d --name dev-nginx \\ -p 8080:80 \\ -v /Users/xiaoli/site:/usr/share/nginx/html \\ nginx 本地 /Users/xiaoli/site 的代码实时反映在容器内网站目录，修改立刻生效！ 使用 Bind Mount 的场景： 本地开发热更新 日志文件落盘 配置文件映射 IDE + 容器联调 🤝 第四节：多个容器共享数据卷老周给小李展示了另一个高级玩法： “多个容器可以挂载同一个卷，共享数据，就像一块公共磁盘。” 小李准备两个容器： 一个容器写入日志 一个容器实时读取日志 123456789# 写入容器docker run -d --name logger \\ -v shared-logs:/logs \\ busybox sh -c &quot;while true; do date &gt;&gt; /logs/t.log; sleep 2; done&quot;# 读取容器docker run -it --name reader \\ -v shared-logs:/logs \\ busybox tail -f /logs/t.log 这两个容器在不联网的情况下，通过挂载卷实现了数据同步，让小李直呼神奇。 🔄 第五节：备份与恢复数据卷老周说： “你现在的数据安全了，但还不够。万一服务器挂了怎么办？你得学会备份。” 备份数据卷为 .tar：12345docker run --rm \\ -v mysql-data:/data \\ -v $(pwd):/backup \\ busybox \\ tar czf /backup/mysql-backup.tar.gz -C /data . ⛴️ 第一个挂载是数据卷，第二个挂载是宿主机当前目录，输出备份包。 恢复数据卷：12345docker run --rm \\ -v mysql-data:/data \\ -v $(pwd):/backup \\ busybox \\ tar xzf /backup/mysql-backup.tar.gz -C /data 只需备份 .tar.gz 文件即可，适合迁移数据、升级、容灾。 🧹 第六节：清理无用卷（慎用）随着实验多了，小李电脑堆满了无主卷。 查看： 1docker volume ls 清理： 1docker volume rm 卷名 清除所有未被挂载的孤立卷（慎用）： 1docker volume prune 清理命令要慎重，别误删生产卷！ 📋 Volume 挂载选项速查表 类型 命令 特点 匿名卷 -v /path 难追踪，系统自动命名 具名卷 -v myvol:/path 推荐用法，可管理 Bind 挂载 -v /host:/container 与宿主机文件交互，适合本地调试 tmpfs --tmpfs /path 内存存储，重启即消失 权限控制 -v myvol:/path:ro 只读挂载 SELinux/AppArmor :z、:Z（高级安全挂载） 安全增强场景 🧠 小李的应用持久化策略建议 类型 内容 数据库 必须挂载 Volume 保持数据持久 日志 推荐落盘到宿主机或集中采集 配置文件 可用 Bind Mount 从本地同步配置 静态资源 静态目录挂载 + CDN 临时缓存 tmpfs 或容器内路径，无需持久化 🎬 尾声：构建自己的数据之岛小李站在一个小岛码头，身后是一个个挂载卷，他的应用和数据终于脱离容器生命周期的束缚。 老周说： “真正的服务，要能容器随时销毁，数据却永存。” 小李点头，轻轻拍了拍他那卷 MySQL 的备份包，知道自己已经拥有了构建“数据之岛”的能力。 继续拓展高级内容，围绕： 🧪 数据卷在 CI/CD 中的作用和实战应用 ☸️ 数据卷在 Kubernetes 中的延伸 —— PVC（PersistentVolumeClaim）挂载 以小李的旅程为主线，继续带你掌握更强大的容器化数据策略。 🔧 拓展一：数据卷在 CI/CD 中的角色与实践在一次项目发布中，小李加入了公司的 DevOps 流水线。他发现 GitLab CI 跑测试时，每次都重新构建环境，速度太慢，还会出现缓存丢失的问题。 老周告诉他： “在 CI/CD 环境中，合理使用数据卷可以极大加快构建速度、保留缓存和数据状态。” ✅ 使用场景 1：缓存 pip/npm 依赖，加速构建小李把 pip install 改成挂载缓存目录： GitLab Runner 示例：.gitlab-ci.yml： 123456789101112131415cache: key: pip-cache paths: - .cache/pipbuild: script: - docker run --rm -v $CI_PROJECT_DIR:/app -v $CI_PROJECT_DIR/.cache/pip:/root/.cache/pip my-builder-image bash -c &quot; cd /app &amp;&amp; pip install -r requirements.txt &amp;&amp; pytest &quot; 🔁 依赖安装过程可被缓存，构建速度提升 50%！ ✅ 使用场景 2：测试数据隔离小李部署端到端自动化测试容器： 123docker run --rm \\ -v test-volume:/app/test-results \\ e2e-runner:latest 测试结果可从宿主机挂载目录或卷中提取，用于后续报告生成或持久存档。 ✅ 使用场景 3：构建产物跨阶段传递CI/CD 有多阶段：构建 → 测试 → 部署小李通过挂载共享卷，将编译好的前端包从构建容器传给部署容器： 12docker run --name builder -v build-volume:/output frontend-builderdocker run --rm -v build-volume:/usr/share/nginx/html nginx ☸️ 拓展二：Kubernetes 中的数据卷演进 —— PVC 实战进入云原生世界，小李不再直接使用 docker run，而是通过 Kubernetes 来编排容器。 在 K8s 中，数据卷概念变得更专业： Volume（临时存储，随 Pod 生命周期） PersistentVolume（PV：管理员创建的存储资源） PersistentVolumeClaim（PVC：用户申请的存储） StorageClass（存储策略模板） 🔐 场景一：部署 Stateful 服务（如 MySQL）小李写了以下 YAML： 123456789101112131415161718192021222324252627282930313233343536373839apiVersion: v1kind: PersistentVolumeClaimmetadata: name: mysql-pvcspec: accessModes: - ReadWriteOnce resources: requests: storage: 5Gi storageClassName: standard---apiVersion: apps/v1kind: Deploymentmetadata: name: mysqlspec: replicas: 1 selector: matchLabels: app: mysql template: metadata: labels: app: mysql spec: containers: - name: mysql image: mysql:5.7 env: - name: MYSQL_ROOT_PASSWORD value: &quot;123456&quot; volumeMounts: - mountPath: /var/lib/mysql name: data volumes: - name: data persistentVolumeClaim: claimName: mysql-pvc 💡 PVC 是 “我要一个 5Gi 的盘”，PV 是“管理员给你一个”，Pod 中挂上它即可持久保存数据。 🧠 小知识点：K8s 中 Volume 的对比 类型 生命周期 是否持久 典型用途 emptyDir Pod 生命周期 ❌ 临时缓存、构建产物传递 hostPath 节点目录挂载 ⚠️ 有风险 本地开发测试 PVC（推荐） 与集群存储绑定 ✅ 数据库存储、日志、持久缓存 📦 StorageClass：自动动态分配 PVC在云环境（如 EKS、GKE）中，PVC 可以自动创建对应的 PV（EBS、Ceph、NFS 等），只要指定 StorageClass 即可： 1storageClassName: gp2 这种方式可以实现跨节点迁移不丢数据、按需付费扩容、快照备份等高级功能。 ✅ 拓展总结：Docker 到 CI/CD，再到 Kubernetes 的数据策略演进 场景 技术 推荐做法 本地开发 Bind Mount 映射目录，实时更新 本地持久化 Volume 隔离性好，便于管理 CI/CD 中间数据 卷 / 缓存目录 挂载 .cache、build 等路径 K8s 中数据存储 PVC + StorageClass 可扩展、可备份、可跨节点持久化 🎬 尾声：从数据孤岛到分布式星图在 DevOps 流水线中，小李用数据卷构建了无缝衔接的构建流程； 在 Kubernetes 集群中，他用 PVC 实现了跨集群节点的 MySQL 数据持久化部署； 他站在云端存储的星图前，知道自己已经掌握了从 Docker 到 DevOps 再到 Kubernetes 的数据生命周期。 老周拍拍他： “你已经造好了船，也撑起了帆。下一步，是用 Compose 编排你的舰队。”","link":"%E5%86%99%E7%BB%99%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E7%8E%A9%E5%AE%B6%E7%9A%84%E5%AE%B9%E5%99%A8%E5%B0%8F%E4%B9%A6-docker%E7%AF%87%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E3%80%8A%E6%95%B0%E6%8D%AE%E4%B9%8B%E5%B2%9B%E4%B8%8E%E6%8C%81%E4%B9%85%E5%8C%96%E5%8D%B7%E3%80%8B/"},{"title":"写给懒猫微服玩家的容器小书Docker篇（五）：《多容器交响曲：Docker Compose 上场》","text":"一直想写一本容器小书，真好懒猫基本都做了容器化，所以把这部分分享出来。不同的是，懒猫微服中使用 pg-docker 来替代 docker 命令，使用 dockge 来执行 docker-compose。以下讲解以标准 docker 为主，这样子既学会了 docker 知识，也能够在懒猫微服上启动 Docker 服务。 《多容器交响曲：Docker Compose 上场》讲的是使用 Docker Compose 统一编排多容器服务，理解 YAML 配置结构、服务依赖、网络、挂载、构建策略、变量管理、Compose vs K8s 初探等 🎼 开篇：服务之间的管弦乐团随着项目日益复杂，小李的服务已经不再是一个容器就能承载的了。 前端、后端、数据库、缓存、日志系统……像一个交响乐团，需要统一调度、和谐配合。 老周递给他一个新的工具：“Docker Compose——它是你的指挥棒。” 🎻 第一节：什么是 Docker Compose？老周解释： “Docker Compose 是 Docker 的多容器编排工具，用一份 docker-compose.yml 文件，就能同时启动、停止、构建多个服务。” Compose 帮你解决： 多个服务启动顺序 多容器共享网络 统一管理环境变量 配置简洁、开发者友好 跨平台部署一致 📄 第二节：写出你的第一个 docker-compose.yml小李的项目结构如下： 12345678myapp/├── backend/ # Flask 应用│ ├── app.py│ └── Dockerfile├── frontend/ # 静态页面│ ├── index.html│ └── Dockerfile└── docker-compose.yml docker-compose.yml 示例：1234567891011121314151617181920212223242526272829version: &quot;3.9&quot;services: backend: build: ./backend ports: - &quot;5000:5000&quot; volumes: - ./backend:/app environment: - DB_HOST=db depends_on: - db frontend: build: ./frontend ports: - &quot;3000:80&quot; db: image: mysql:5.7 environment: - MYSQL_ROOT_PASSWORD=123456 - MYSQL_DATABASE=mydb volumes: - dbdata:/var/lib/mysqlvolumes: dbdata: 🔧 每个 service 就是一个容器定义，Compose 会为它们创建默认网络，自动 DNS 互通。 🧪 第三节：Compose 命令实战速查小李在项目目录下运行： 1docker-compose up -d 后台启动所有服务！ 其他常用命令： 操作 命令 构建镜像 docker-compose build 后台启动 docker-compose up -d 前台启动 + 日志输出 docker-compose up 停止服务 docker-compose down 查看容器日志 docker-compose logs [服务名] 重启某个服务 docker-compose restart 服务名 进入某个容器 docker-compose exec 服务名 bash 📦 第四节：Compose 的网络与数据共享机制老周介绍： “Compose 默认创建一个网络，所有服务能通过服务名互相访问。” 在上面的例子中： backend 容器可以用 db:3306 连接 MySQL frontend 可通过 backend:5000 访问后端 API 小李不再需要手动 docker network create 和 --network 参数，Compose 一切自动打通。 Volume 的挂载：Compose 中的 volume 显式声明（如 dbdata:）会自动创建、管理。 支持： 1234volumes: - ./data:/data # Bind mount - myvolume:/data # Named volume - /custom/path:/data:ro # 带权限控制 🌐 第五节：使用 .env 管理配置变量Compose 支持使用 .env 文件集中管理变量： .env 文件： 12DB_PASSWORD=123456DB_NAME=mydb Compose 文件中使用方式： 123environment: - MYSQL_ROOT_PASSWORD=${DB_PASSWORD} - MYSQL_DATABASE=${DB_NAME} 🚀 配合 CI/CD 时 .env 可由流水线动态生成，便于多环境切换（dev/stage/prod）。 🧬 第六节：高级配置技巧1. 统一重启策略：1restart: unless-stopped 确保服务宕机时能自动重启。 2. 多阶段构建支持：123build: context: ./backend dockerfile: Dockerfile.prod 可指定构建路径、Dockerfile 文件、构建参数等。 3. Healthcheck 健康检查：12345healthcheck: test: [&quot;CMD&quot;, &quot;curl&quot;, &quot;-f&quot;, &quot;http://localhost:5000/health&quot;] interval: 30s timeout: 10s retries: 3 🆚 第七节：Docker Compose vs Kubernetes 简析 特性 Compose Kubernetes 启动容器 简单 标准化 配置语言 YAML YAML 网络 自动共享 需显式配置 存储 Volume PVC + SC 服务发现 服务名互通 DNS/ClusterIP 用途 本地开发 / CI 集群部署 / 云原生 高可用 / 伸缩 ❌ ✅ 内建 社区生态 中小项目广泛使用 大型平台标准方案 小李理解了：Compose 是“轻量乐队指挥”，K8s 是“交响级 AI 指挥系统”。 🔁 第八节：Compose + CI/CD 集成发布小李将 Compose 整合进 GitLab CI 流程： .gitlab-ci.yml 示例： 12345678910111213141516services: - docker:dindstages: - build - deploybuild: stage: build script: - docker-compose builddeploy: stage: deploy script: - docker-compose up -d CI 构建完镜像后，直接用 Compose 部署，既省事又稳定。 🧠 小李 Compose 使用技巧总结 目标 技巧 服务隔离 每个项目单独一个 Compose 文件 共享网络 不用写 network，服务名即 DNS 跨环境配置 使用 .env 动态切换变量 状态排查 docker-compose logs / ps / exec 多环境文件 使用 docker-compose.override.yml CI/CD 联动 编排命令嵌入流水线任务中 🎬 尾声：指挥容器交响曲的时刻当小李敲下 docker-compose up 的回车键，前端、后端、数据库同时启动，日志齐鸣，服务稳定运行。 “这就是我梦想的微服务协奏曲啊。” 老周拍了拍他肩膀： “你已经能用 Compose 驾驭服务之海，下一步，是把它们部署上云、扩展弹性、自动滚动升级。” 小李点头，望向远方的集群编排系统——Kubernetes，眼中闪着新的渴望。 好！那我们就在第五章《多容器交响曲》中，继续深入补充这四大实战技能： 🧩 补充一：Compose 的多环境部署实践（开发、测试、生产）小李希望同一套服务，在开发、测试、生产环境下分别使用不同的配置，比如： 数据库密码不同 是否挂载本地代码 是否启用调试模式 老周教他使用 Compose 的多文件配置机制： ✅ 方案一：使用 docker-compose.override.ymlDocker Compose 默认会自动加载 docker-compose.override.yml 并与主文件合并。 文件结构：1234docker-compose.ymldocker-compose.override.yml.env.dev.env.prod 主配置（docker-compose.yml）：1234567services: web: build: . ports: - &quot;8000:8000&quot; environment: - ENV_MODE=${MODE} 开发环境覆盖文件（docker-compose.override.yml）：123456services: web: volumes: - ./src:/app/src environment: - DEBUG=true 运行： 1MODE=development docker-compose up ✅ 方案二：按环境拆分多个 Compose 文件适合 CI/CD 或部署多个 stage。 示例： docker-compose.dev.yml docker-compose.prod.yml 运行： 1docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d 多个 -f 会按顺序合并，后面覆盖前面。 📦 建议主文件写“公共配置”，子文件按环境细化。 🎯 补充二：优化服务依赖启动顺序小李发现，即使写了 depends_on，后端有时候也连不上数据库。 老周摇头说： “depends_on 只是控制启动顺序，不是等服务就绪。数据库可能还没监听端口就已被标记为 ‘up’。” ✅ 正确姿势：服务内设置“等待就绪”比如 Flask 等数据库： 1234567#!/bin/bashuntil nc -z db 3306; do echo &quot;Waiting for db...&quot; sleep 1donepython app.py 或者使用工具包如 wait-for-it.sh： 12COPY wait-for-it.sh /wait-for-it.shENTRYPOINT [&quot;/wait-for-it.sh&quot;, &quot;db:3306&quot;, &quot;--&quot;, &quot;python&quot;, &quot;app.py&quot;] 🩺 推荐结合容器健康检查，判断服务是否真正 ready。 🛠 补充三：Docker Compose V1 ➜ V2 迁移技巧小李的 CI 工具用的是 Compose v1，项目准备升级。 老周提醒： “Docker Compose v2 使用的是 docker compose（空格），而非 docker-compose（短横线）。” ✅ 主要变化： 项目 v1 (docker-compose) v2 (docker compose) 命令格式 docker-compose up docker compose up 安装方式 独立二进制 集成于 Docker CLI 文件格式 v2, v3 推荐统一 v3.9 ✅ 迁移建议： 删除旧的 docker-compose 二进制 使用 docker compose CLI 更新脚本、CI 工具调用方式 移除 legacy 字段（如 links） 检查 .env 是否兼容（v2 更严格） ☸️ 补充四：Compose 与 Helm 的映射关系对照当小李进入 Kubernetes 世界，他问老周： “Compose 文件和 K8s 的 YAML 有啥对应关系？” 老周说：“很好理解，Compose 是开发者的 K8s 简化版本。” 对照表： Compose Kubernetes services: Deployment + Pod volumes: PersistentVolumeClaim ports: Service（NodePort / ClusterIP） depends_on: initContainers 或 readinessProbe .env ConfigMap / Secret docker-compose.yml Helm Chart (values.yaml + templates) 示例：Compose 转 Helm 构思Compose 配置：1234567services: web: image: myapp:latest ports: - &quot;8080:80&quot; environment: - DEBUG=true Helm values.yaml：1234567891011image: repository: myapp tag: latestenv: - name: DEBUG value: &quot;true&quot;service: port: 8080 targetPort: 80 Helm deployment.yaml（模板）：12345678containers: - name: web image: {{ .Values.image.repository }}:{{ .Values.image.tag }} env: {{- range .Values.env }} - name: {{ .name }} value: {{ .value }} {{- end }} ✅ 小李意识到，Helm 是“模板化 + 分层管理”的 Compose 超集，是云原生部署的标准组件管理器。 🎬 尾声：Compose 是微服务上云的跳板小李已经用 Docker Compose 实现了： 开发环境热更新 测试环境集成数据库 生产环境独立配置 CI/CD 自动部署服务 为 Kubernetes 迁移打下基础 他明白了： “Compose 就像舞台排练，Kubernetes 才是真正的大型音乐厅。但有了排练，登台才不会慌。”","link":"%E5%86%99%E7%BB%99%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E7%8E%A9%E5%AE%B6%E7%9A%84%E5%AE%B9%E5%99%A8%E5%B0%8F%E4%B9%A6docker%E7%AF%87%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E3%80%8A%E5%A4%9A%E5%AE%B9%E5%99%A8%E4%BA%A4%E5%93%8D%E6%9B%B2%EF%BC%9Adocker-compose-%E4%B8%8A%E5%9C%BA%E3%80%8B/"},{"title":"懒猫微服开发篇（零）：上架应用需要哪些知识","text":"懒猫微服的可玩性在于可以让开发人员放开手脚来做一些事情，等于是提供了一个可靠的基础设施。那么理所当然我们可以把开源的知识应用到上面，比如开发或者移植应用，或者干脆部署一些好玩的东西。这在传统 NAS 上实现起来很困难，甚至都没有包管理工具。 我们看一看开发懒猫应用，需要什么样的知识？ 那么，开发懒猫微服的应用需要掌握哪些技能呢？ NPM懒猫微服的 CLI 本质上是一个通过 NPM 全局安装的工具包，因此掌握一些基本的 NPM 使用方法是必要的。 1npm install -g @lazycatcloud/lzc-cli 这个工具是用 JavaScript 编写的，但如果你只是为了使用而非开发，那么并不需要掌握这门语言。当然，你也可以选择使用 pnpm 或 yarn 作为包管理工具，或者通过 NVM 来创建 Node.js 虚拟环境。 如果在 macOS/Linux 上遇到了权限不足的问题，其实不一定要使用 sudo。默认情况下，npm 的全局目录是 /usr/local，普通用户对其没有写权限。比如我们可以看到： 1234567891011 ll /usr/total 0drwxr-xr-x 918 root wheel 29K 6 5 14:05 bin/drwxr-xr-x 32 root wheel 1.0K 6 5 14:05 lib/drwxr-xr-x 417 root wheel 13K 6 5 14:05 libexec/drwxr-xr-x 8 root wheel 256B 6 10 09:31 local/drwxr-xr-x 230 root wheel 7.2K 6 5 14:05 sbin/drwxr-xr-x 43 root wheel 1.3K 6 5 14:05 share/drwxr-xr-x 5 root wheel 160B 6 5 14:05 standalone/lrwxr-xr-x 1 root wheel 25B 6 5 14:05 X11@ -&gt; ../private/var/select/X11lrwxr-xr-x 1 root wheel 25B 6 5 14:05 X11R6@ -&gt; ../private/var/select/X11 因此我们可以通过设置 npm 的全局安装目录，规避权限问题。在当前用户目录中创建一个文件夹并添加到环境变量中即可： 12345678 npm config get prefix/usr/localmkdir ~/.npm_packagesnpm config set prefix ~/.npm_packages/npm config get prefix/Users/home/.npm_packagesexport PATH=~/.npm-global/bin:$PATH 开发的技能是可选的，如果你只是移植现有的应用的话，那么具备一些 Docker Compose 的知识就足够了，这个我们后面再说。 如果是开发原创 APP 的话，那么无论是 Vue，React，Go，Python 都有用武之地，只要是 Web 的应用能够本地运行或者打包成 Docker 就能上架商店。相信很多开发的小伙伴也会做一些 Devops 的事情，这部分的技能是可以完全迁移过来的。 Linux很多 NAS 是基于 FreeBSD 或者 Linux 改的，懒猫微服是基于 debian12， 虽然在设计之初是针对非专业玩家。但是后来也开放了 SSH，可以做和其他 Linux 一样的事情，给了 root 用户，所以可以底层操作文件，网络，查看分区，监控，以及系统负载。 所以不是只有树莓派或者自己笔电装机才能学 Linux，懒猫微服的系统重启之后会复原（除了 root 目录和网络设置），所以请随便折腾。 虽然有了一套很完善的图形客户端，但是相信很多专业的玩家还是更加喜欢用传统 Linux 的方式来看待这个微服，我管他叫做拆解系统设计。 举个例子：用 htop 查看负载、用 nmtui 配置网络、用 lsblk 查看磁盘分区、用 systemctl 设置服务自启。深度定制的系统，让我们可以完全无视内核，以及 grub 的这些东西。甚至连 sambda，webdav 这些 server 都不用自己安装。 DockerDocker 好像对 NAS 玩家是必须的，无论是群晖，威联通。与传统 NAS 不一样的是，懒猫微服集成了三套 docker，分别是系统组件，playground 和应用商店。 playground 就是我们刻板印象的 Docker， 这里叫做pg-docker，所以需要懂一些 Docker 的知识，比如下载，打包，上传，还有数据卷的贡献。甚至包括 Docker- compose 的使用。 应用商店也是基于 Docker 运行的， 上架软件时有两种方式： 直接打包：这个一般用于原创应用或者移植开源无 docker 版本的应用。调试的时候可以使用懒猫内置的 Docker Registry 的 image 进行测试，颇有 VS code remote 的风格。这个调试模式叫做 devshell。 Docker 镜像迁移：一般用于已有的 docker image 的迁移，由于国内出海宽带不足，访问 Docker 经常失败。所以需要使用懒猫提供的 Docker Registry 来做一个国内版本的镜像。然后再做目录的映射。 OIDC这个稍稍有点跑题，前面的都是传统 Devops 需要的东西。这里的 OIDC 叫做 OpenID Connect，是单点登录实现的一种。传统的认证有基于 cookie 的，或者基于 JWT 的。OIDC 是后者，也是单点登录中最优雅的实现。除了 OIDC 之外，你可能听说过 SAML，Oauth，其实也都是 Single Sign-On 的不同实现，而 Oauth 是和 OpenID Connect 源同一脉，Oauth 的各家实现千差万别，而 OpenID Connect 既统一了规范，解决用户态的问题。换句话说 OAuth 2.0 只是用来授权，颁发的是Access Token，而对于访问者是谁还需要开发人员自己存数据库。OIDC 则是引入了ID Token，这通常是通常是 JWT，所以认证直接请求 IDP 解码就好了。大致是这个流程： 下图是 OIDC 的基本流程： 能够学到哪些知识： 微服内部的官网看起来是根据 OpenResty 改的（个人推断），所以可以来复习一下 nginx 或者 OpenResty 相关的知识 Docker 的使用，容器这几年还是挺火的，移植应用必备，甚至还支持 web VNC。 HTTP 知识：有些情况需要对 http 的请求做特殊的处理，比如加一些自定义 header 或者 cookies 单点登录：微服内置了 OIDC 的认证，应用能够自动帮助我们申请 CLIENT_ID 和 CLIENT_SECRET，简化了和 IDP 打交道的环节。 总结如果你熟悉 Web 开发、Docker 和基本的 Linux 操作，那么你已经可以快速上手懒猫微服的应用开发。无论是移植开源项目，还是开发原创 App，只要能够在本地运行或打包为 Docker 镜像，就可以顺利上架到应用商店。 懒猫微服不仅仅是一个面向普通用户的 NAS 系统，更是一块为开发者打造的自由试验田 —— 它就是一台稳定可靠的 Debian 云主机，你可以在上面尽情发挥创意与技术。","link":"%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%BC%80%E5%8F%91%E7%AF%87%EF%BC%88%E9%9B%B6%EF%BC%89%EF%BC%9A%E4%B8%8A%E6%9E%B6%E5%BA%94%E7%94%A8%E9%9C%80%E8%A6%81%E5%93%AA%E4%BA%9B%E7%9F%A5%E8%AF%86/"},{"title":"懒猫微服排查篇（一）：403 Forbidden！记应用商店 pip 使用清华源的报错","text":"由于自身调试 OIDC 需要，写了一个懒猫 ENV 查看器，然后发到商店里给大家使用/ 打包的时候偷了个懒，直接打包的没有用容器，然后其中一位用户就遇到这个问题： 要了下日志，结果是发现访问清华源有问题，被清华源直接返回了 403，这个问题还比较稀奇，毕竟在我的印象里清华源一直都很稳。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566-------------logs:-------------app-1 | 2025-06-23T14:28:36.813573986Z Start Child Process: [sh -c ./lzcapp/pkg/content/run.sh]app-1 | 2025-06-23T14:28:36.813587080Z PATH:&quot;/&quot; is served by &quot;exec&quot;://&quot;5005,./lzcapp/pkg/content/run.sh&quot;app-1 | 2025-06-23T14:28:36.818585835Z fetch https://mirrors.ustc.edu.cn/alpine/v3.20/main/x86_64/APKINDEX.tar.gzapp-1 | 2025-06-23T14:28:36.997192042Z fetch https://mirrors.ustc.edu.cn/alpine/v3.20/community/x86_64/APKINDEX.tar.gzapp-1 | 2025-06-23T14:28:37.251288967Z 2025/06/23 22:28:37 http: proxy error: dial tcp 127.0.0.1:5005: connect: connection refusedapp-1 | 2025-06-23T14:28:37.251446934Z 2025/06/23 22:28:37 http: proxy error: dial tcp 127.0.0.1:5005: connect: connection refusedapp-1 | 2025-06-23T14:28:37.444530406Z v3.20.6-201-gd57c9d7d1c9 [https://mirrors.ustc.edu.cn/alpine/v3.20/main]app-1 | 2025-06-23T14:28:37.444552892Z v3.20.6-203-g66ce3a1d0dc [https://mirrors.ustc.edu.cn/alpine/v3.20/community]app-1 | 2025-06-23T14:28:37.444560548Z OK: 24177 distinct packages availableapp-1 | 2025-06-23T14:28:37.732800630Z (1/25) Installing libbz2 (1.0.8-r6)app-1 | 2025-06-23T14:28:37.834399822Z (2/25) Installing libexpat (2.7.0-r0)app-1 | 2025-06-23T14:28:37.978333761Z (3/25) Installing libffi (3.4.6-r0)app-1 | 2025-06-23T14:28:37.996681317Z (4/25) Installing gdbm (1.23-r1)app-1 | 2025-06-23T14:28:38.023808099Z (5/25) Installing xz-libs (5.6.2-r1)app-1 | 2025-06-23T14:28:38.059202322Z (6/25) Installing libgcc (13.2.1_git20240309-r1)app-1 | 2025-06-23T14:28:38.120270779Z (7/25) Installing libstdc++ (13.2.1_git20240309-r1)app-1 | 2025-06-23T14:28:38.219766620Z (8/25) Installing mpdecimal (4.0.0-r0)app-1 | 2025-06-23T14:28:38.244870690Z (9/25) Installing ncurses-terminfo-base (6.4_p20240420-r2)app-1 | 2025-06-23T14:28:38.266752323Z (10/25) Installing libncursesw (6.4_p20240420-r2)app-1 | 2025-06-23T14:28:38.301269438Z (11/25) Installing libpanelw (6.4_p20240420-r2)app-1 | 2025-06-23T14:28:38.318329841Z (12/25) Installing readline (8.2.10-r0)app-1 | 2025-06-23T14:28:38.474049984Z (13/25) Installing sqlite-libs (3.45.3-r2)app-1 | 2025-06-23T14:28:38.628199528Z (14/25) Installing python3 (3.12.11-r0)app-1 | 2025-06-23T14:28:39.316803498Z WAIT ./lzcapp/pkg/content/run.sh 127.0.0.1:5005 ERR: dial tcp 127.0.0.1:5005: connect: connection refusedapp-1 | 2025-06-23T14:28:39.367766399Z (15/25) Installing python3-pycache-pyc0 (3.12.11-r0)app-1 | 2025-06-23T14:28:39.753346082Z (16/25) Installing pyc (3.12.11-r0)app-1 | 2025-06-23T14:28:39.770701744Z (17/25) Installing py3-setuptools-pyc (70.3.0-r0)app-1 | 2025-06-23T14:28:39.929343816Z (18/25) Installing py3-pip-pyc (24.0-r2)app-1 | 2025-06-23T14:28:40.207250136Z (19/25) Installing py3-parsing (3.1.2-r1)app-1 | 2025-06-23T14:28:40.304655931Z (20/25) Installing py3-parsing-pyc (3.1.2-r1)app-1 | 2025-06-23T14:28:40.317188019Z WAIT ./lzcapp/pkg/content/run.sh 127.0.0.1:5005 ERR: dial tcp 127.0.0.1:5005: connect: connection refusedapp-1 | 2025-06-23T14:28:40.529573664Z (21/25) Installing py3-packaging-pyc (24.0-r1)app-1 | 2025-06-23T14:28:40.618998893Z (22/25) Installing python3-pyc (3.12.11-r0)app-1 | 2025-06-23T14:28:40.653772503Z (23/25) Installing py3-packaging (24.0-r1)app-1 | 2025-06-23T14:28:40.830130888Z (24/25) Installing py3-setuptools (70.3.0-r0)app-1 | 2025-06-23T14:28:40.995056226Z (25/25) Installing py3-pip (24.0-r2)app-1 | 2025-06-23T14:28:41.318293072Z WAIT ./lzcapp/pkg/content/run.sh 127.0.0.1:5005 ERR: dial tcp 127.0.0.1:5005: connect: connection refusedapp-1 | 2025-06-23T14:28:41.764687778Z Executing busybox-1.36.1-r29.triggerapp-1 | 2025-06-23T14:28:41.768553945Z OK: 75 MiB in 42 packagesapp-1 | 2025-06-23T14:28:42.318842615Z WAIT ./lzcapp/pkg/content/run.sh 127.0.0.1:5005 ERR: dial tcp 127.0.0.1:5005: connect: connection refusedapp-1 | 2025-06-23T14:28:42.994899875Z Looking in indexes: https://pypi.tuna.tsinghua.edu.cn/simpleapp-1 | 2025-06-23T14:28:43.192401924Z Collecting Flask (from -r ./requirements.txt (line 1))app-1 | 2025-06-23T14:28:43.219653783Z ERROR: HTTP error 403 while getting https://pypi.tuna.tsinghua.edu.cn/packages/3d/68/9d4508e893976286d2ead7f8f571314af6c2037af34853a30fd769c02e9d/flask-3.1.1-py3-none-any.whl (from https://pypi.tuna.tsinghua.edu.cn/simple/flask/) (requires-python:&gt;=3.9)app-1 | 2025-06-23T14:28:43.219966823Z ERROR: Could not install requirement Flask from https://pypi.tuna.tsinghua.edu.cn/packages/3d/68/9d4508e893976286d2ead7f8f571314af6c2037af34853a30fd769c02e9d/flask-3.1.1-py3-none-any.whl (from -r ./requirements.txt (line 1)) because of HTTP error 403 Client Error: Forbidden for url: https://pypi.tuna.tsinghua.edu.cn/packages/3d/68/9d4508e893976286d2ead7f8f571314af6c2037af34853a30fd769c02e9d/flask-3.1.1-py3-none-any.whl for URL https://pypi.tuna.tsinghua.edu.cn/packages/3d/68/9d4508e893976286d2ead7f8f571314af6c2037af34853a30fd769c02e9d/flask-3.1.1-py3-none-any.whl (from https://pypi.tuna.tsinghua.edu.cn/simple/flask/) (requires-python:&gt;=3.9)app-1 | 2025-06-23T14:28:43.319551942Z WAIT ./lzcapp/pkg/content/run.sh 127.0.0.1:5005 ERR: dial tcp 127.0.0.1:5005: connect: connection refusedapp-1 | 2025-06-23T14:28:43.578023168Z Traceback (most recent call last):app-1 | 2025-06-23T14:28:43.578037493Z File &quot;/lzcapp/pkg/content/app.py&quot;, line 2, in &lt;module&gt;app-1 | 2025-06-23T14:28:43.578038656Z from flask import Flask, request, render_templateapp-1 | 2025-06-23T14:28:43.578039625Z ModuleNotFoundError: No module named 'flask'app-1 | 2025-06-23T14:28:43.581234895Z ChildProcess exit: exit status 1app-1 | 2025-06-23T14:28:44.320074235Z WAIT ./lzcapp/pkg/content/run.sh 127.0.0.1:5005 ERR: dial tcp 127.0.0.1:5005: connect: connection refusedapp-1 | 2025-06-23T14:28:45.320738420Z WAIT ./lzcapp/pkg/content/run.sh 127.0.0.1:5005 ERR: dial tcp 127.0.0.1:5005: connect: connection refusedapp-1 | 2025-06-23T14:28:46.321124378Z WAIT ./lzcapp/pkg/content/run.sh 127.0.0.1:5005 ERR: dial tcp 127.0.0.1:5005: connect: connection refusedapp-1 | 2025-06-23T14:28:47.322143472Z WAIT ./lzcapp/pkg/content/run.sh 127.0.0.1:5005 ERR: dial tcp 127.0.0.1:5005: connect: connection refusedapp-1 | 2025-06-23T14:28:48.322911993Z WAIT ./lzcapp/pkg/content/run.sh 127.0.0.1:5005 ERR: dial tcp 127.0.0.1:5005: connect: connection refusedapp-1 | 2025-06-23T14:28:49.323128356Z WAIT ./lzcapp/pkg/content/run.sh 127.0.0.1:5005 ERR: dial tcp 127.0.0.1:5005: connect: connection refusedapp-1 | 2025-06-23T14:28:50.323783719Z WAIT ./lzcapp/pkg/content/run.sh 127.0.0.1:5005 ERR: dial tcp 127.0.0.1:5005: connect: connection refusedapp-1 | 2025-06-23T14:28:51.323982245Z WAIT ./lzcapp/pkg/content/run.sh 127.0.0.1:5005 ERR: dial tcp 127.0.0.1:5005: connect: connection refusedapp-1 | 2025-06-23T14:28:52.324934294Z WAIT ./lzcapp/pkg/content/run.sh 127.0.0.1:5005 ERR: dial tcp 127.0.0.1:5005: connect: connection refusedapp-1 | 2025-06-23T14:28:53.325225164Z WAIT ./lzcapp/pkg/content/run.sh 127.0.0.1:5005 ERR: dial tcp 127.0.0.1:5005: connect: connection refusedapp-1 | 2025-06-23T14:28:54.325889637Z WAIT ./lzcapp/pkg/content/run.sh 127.0.0.1:5005 ERR: dial tcp 127.0.0.1:5005: connect: connection refusedapp-1 | 2025-06-23T14:28:55.326592221Z WAIT ./lzcapp/pkg/content/run.sh 127.0.0.1:5005 ERR: dial tcp 127.0.0.1:5005: connect: connection refusedapp-1 | 2025-06-23T14:28:56.326903845Z WAIT ./lzcapp/pkg/content/run.sh 127.0.0.1:5005 ERR: dial tcp 127.0.0.1:5005: connect: connection refusedapp-1 | 2025-06-23T14:28:57.327197993Z WAIT ./lzcapp/pkg/content/run.sh 127.0.0.1:5005 ERR: dial tcp 127.0.0.1:5005: connect: connection refusedapp-1 | 2025-06-23T14:28:58.327666585Z WAIT ./lzcapp/pkg/content/run.sh 127.0.0.1:5005 ERR: dial tcp 127.0.0.1:5005: connect: connection refused GPT 查询了下，可能就是 IP 给限制了。 打开清华的 Pypi 的页面，看到这位的 IP 确实被清华拦截了。 为了防止这个情况，有两个办法： 直接使用 Docker 做好镜像，这样就无关软件源 可以同时设置其他 pypi 源： 1pip config set global.extra-index-url &quot;https://mirrors.aliyun.com/pypi/simple/ https://repo.huaweicloud.com/repository/pypi/simple/ https://mirrors.cloud.tencent.com/pypi/simple/&quot; 然后可以使用 pip config list 查看,能看到我这个是走了腾讯云的： 1234567891011pip install pandasLooking in indexes: https://pypi.org/simple, https://mirrors.aliyun.com/pypi/simple/, https://repo.huaweicloud.com/repository/pypi/simple/, https://mirrors.cloud.tencent.com/pypi/simple/Collecting pandas Downloading https://mirrors.cloud.tencent.com/pypi/packages/9f/cc/ae8ea3b800757a70c9fdccc68b67dc0280a6e814efcf74e4211fd5dea1ca/pandas-2.3.0-cp312-cp312-macosx_11_0_arm64.whl (10.7 MB) ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 10.7/10.7 MB 3.6 MB/s eta 0:00:00Requirement already satisfied: numpy&gt;=1.26.0 in /opt/miniconda3/lib/python3.12/site-packages (from pandas) (1.26.4)Requirement already satisfied: python-dateutil&gt;=2.8.2 in /opt/miniconda3/lib/python3.12/site-packages (from pandas) (2.9.0.post0)Requirement already satisfied: pytz&gt;=2020.1 in /opt/miniconda3/lib/python3.12/site-packages (from pandas) (2025.1)Requirement already satisfied: tzdata&gt;=2022.7 in /opt/miniconda3/lib/python3.12/site-packages (from pandas) (2025.1)Requirement already satisfied: six&gt;=1.5 in /opt/miniconda3/lib/python3.12/site-packages (from python-dateutil&gt;=2.8.2-&gt;pandas) (1.17.0)Installing collected packages: pandas","link":"%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E6%8E%92%E6%9F%A5%E7%AF%87%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A403-forbidden%EF%BC%81%E8%AE%B0%E5%BA%94%E7%94%A8%E5%95%86%E5%BA%97-pip-%E4%BD%BF%E7%94%A8%E6%B8%85%E5%8D%8E%E6%BA%90%E7%9A%84%E6%8A%A5%E9%94%99/"},{"title":"懒猫微服故事篇（一）：服务器宕机之后，我和前端靠懒猫微服结对编程","text":"故事篇分享我和懒猫微服的方方面面，这里没有高深的技术，也没有过多的讲解。我始终坚信着技术是服务于生活，因为它能够给我们带来小确幸。更多的时候，我们追求技术，有时候为了兴趣，有时候为了心目中那小小的执念。慢慢在这个过程中会成为别人眼中的哆啦 A 梦。懒猫微服是一个百宝箱，我们能拿出千变万化的道具。事情会过去，但是感动和记忆会留下，我们可以随时追忆。 和前端同学约好晚上一起过一遍 API，主要是确认 Swagger 上的接口和字段设置。我事先把后端代码、API 和 Swagger 文档都部署在服务器上，让他先通过浏览器简单预览一遍，然后再开始写前端代码，这样能提前避免前后端格式对不上的问题。 准备开始之前，结果他突然说：‘你的 Swagger 打不开了。我登陆到管理控制台看了下，果然和之前部署 Dify 一样的问题，telnet 端口和 Ping 都正常，但是 SSH 和 Web 应用全都访问不了了。从基本监控俩看，CPU 和磁盘也没什么问题。大概率又是 OOM 了。 DDL 赶在眼前，得赶紧让他连到我的服务器或者开发机才好。第一个想到的是端口转发，把服务映射到公网上去，一方面调试的时候属于明文传输，在互联网上很容易被监听，篡改报文。另一方面，家里的公网 IP 经常出问题，总有一阵子会封禁所有的端口，所以最后采取了异地组网的方式。 我和他说，我在我的 NAS 上给你开一个账户，然后你试试来访问我的 Macbook 上的服务。你去下载一个懒猫微服，下载地址是https://lazycat.cloud/download，然后扫描我给你的二维码，这样就可以访问我的NAS了。（回看这段感觉有点像电信诈骗哈哈，感谢前端同学的信任） 他下载 APP、注册账号，我分配权限后，确认他能正常访问微服主页，就开启了端口转发。把我的 Macbook 的地址和 Web 的端口映射出去，只允许已登录的微服客户端访问。这样就免去了被其他的人中间攻击的烦恼，尤记得第一次把服务公开到整个互联网的时候，日志里出现的 IP 真是天南地北，北欧的，中东的，非洲的…… 现在用懒猫微服做异地组网，整个流程只需几分钟，再也不用担心这些琐碎的问题了。 他问了我几个问题。 Q1：网址好像打不开。 A1：你打开懒猫微服试试，或者放在后台。需要靠这个软件来做 DNS 解析。 Q2：你的懒猫是什么，软件嘛？还是硬件？ A2：是一个硬件产品，我拍给你，他带了异地组网的功能。 Q3: 还能穿透其他服务嘛？ A3: 除了线下的设备，微服商店里的服务都能穿透，比如使用 planka 来管理进度，有点 Jira 那个味道了。 后面写点感悟，关于云服务器，IDC 和微服民间几种不同的说法： 前期可以用云做一些 POC，然后稳定了之后就可以搬回自己的机房了。 一切的一切都可以交给云厂商来做，一方面减轻了运维人员的负担，另一方面还可以弹性伸缩，即用即付。 一些传统公司或者是自己有 IDC 的机房会喜欢第一种说法，而云厂商会采取第二种说法。 这并不是否定公有云的价值，但在使用过程中，除了价格高之外，还有一个现实问题：售后支持常常跟不上。国内这些厂商追求短期效应，心思都放在大客户上，用各种加班来满足大客户的需求，当然也包括一些 24K 纯白的需求。而对于处于调研初期的大公司，小微企业，或者说技术爱好者并没有得到平等的对待，甚至的毫不关心的态度，相对于潜在的商单，他们更喜欢数着现在的钱。同样很多传统做 NAS 的厂家售后也跟不上，要么是响应时间等很长很长，或者给到完全不靠谱的结论甚至一本正经的一读乱回。需要注意的是，这里不是一棒子打死所有的云厂商和 NAS 厂家，而是当你遇到紧急的问题时候，还是有很高的概率遇到这样的冷处理。所以我们常开的一句话玩笑话：迁走。 现在觉得，如果不是生产环境必须要对互联网公开或者强制遵循一些安全上的 0 信任原则，比如 POC 环境或者个人环境，用懒猫就完全足够了，还要什么云服务器，那么贵又那么脆。 曾经曾经——我也是云计算忠实的拥护者。。。。。。","link":"%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E6%95%85%E4%BA%8B%E7%AF%87%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%95%E6%9C%BA%E4%B9%8B%E5%90%8E%EF%BC%8C%E6%88%91%E5%92%8C%E5%89%8D%E7%AB%AF%E9%9D%A0%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E7%BB%93%E5%AF%B9%E7%BC%96%E7%A8%8B/"},{"title":"懒猫微服故事篇（二）：西湖邂逅后，我手把手教她玩转NAS","text":"去年与她相识于杭州，是在西湖的游船上。参加活动过后，我想在杭州逗留一天，看看被世人称为眼泪的西湖水。没做攻略，匆匆向前台要了手册，然后来到距离最近的码头。磨磨蹭蹭之后总算开船，隔着一堆大爷大妈看着看着她在拍照，也邀请我帮她拍照。于是找她要攻略，一起逛三潭映月，净慈寺，讨论雷峰塔的倒下。 因为苏堤，我们聊到东坡，美食以及宦海沉浮。聊到最爱的粤菜和川菜更是共同的爱好，去成都旅游的时候找他要了攻略，并且约定下次去她的城市旅游给我当导游。 https://appstore.lazycat.cloud/#/shop/detail/cloud.lazycat.shell.files 加了微信一直零零碎碎的聊着。一个周末的早上，她找我帮忙转换视频格式。由于微信的限制无法发送大文件，于是我建议她通过懒猫网盘传给我。 于是开始做思想工作，把数据上传到我的家里的懒猫微服上。这里还是感谢信任和支持，没有认为我这个是一些诈骗盗取的网站。（毕竟曾经在学校讨论代理问题，被文科生当成黑客） 然后开账户，她的 windows 好像没有可以扫码的地方，所以我帮助她注册好，然后发给她。和她自己注册不一样的是，她的设备我登录时候我这边会弹出“安全码”，然后再发给她，这样她就就可以自己处理登录的问题了。我给她开了懒猫相册，清单，网盘和一些好玩的 APP，除了处理这个事情之外，也希望后面也能慢慢用起来其他的功能。 我是一个非常不喜欢 MFA 的人，但是这个二次验证还是能够接受。常规的 MFA 是每次登录都要手动输入二次验证码，而这个相同的设备只需要一次。虽然从系统设计的角度上看二者没有太大的区别，但是还是感觉这个设计，用来节约我们浪费在二次验证上的时间。我们不是牛马，我们是人，我要相信自己的验证。 然后我告诉他把文件上传到网盘上，然后共享整个文件夹给我。在我的不完全测试下只有文件夹才能共享，然后操作完文件之后再做同样的操作共享给她。毕竟对比被共享人而言，这个目录是只读的，所以我们用共享给对方来完成这个操作。 当然中间有个小插曲，就是上传需要等好久。她的是文科生所以对网络一知半解。一开始还以为她家的网速慢，还稍微吐槽了下。 上传完成之后，我于是让她测试下家里的网速。毕竟以前找我修电脑的姑娘，不是电脑配置过时就是，几乎完全的电脑盲。然后测试下来发现她家的网速还算可以，主要是国内的运营商限制比较多。国内是唯一按照 BGP 收费的，加上还要打击 PCDN，所以每家的上传少的可怜，30MBPS 是刚好能玩的水准，转算成实际的速度嘛，还是等等吧。 实际上，她给我的文件竟然有 15 个 G 多。这种大文件如果不是自建 NAS 或者商业方案根本没有传输的办法。QQ 和微信限制大小，就连邮箱也要限速 5 个 G。最早以前，我们用的办法就是，分段压缩成多个压缩包，然后一个个传给对面，对面再用相同的办法解开。十分麻烦并且耗时。而使用传统的 NAS 还要面临不定时封端口的噩梦，装机师傅和客服都解释不清楚，没有地方去问。虽然家里有公网 IP，但是不想每天被这种琐碎的问题困扰，当初购买懒猫微服也是最喜欢他们这个穿透的卖点。内网传统的是永恒的问题，然后是动态域名解析，做好还要加上健康检查，之前休假的时候把家里的机器透传到公网上，然后三五天就被封端口，但是回去看的时候内网怎么都是好的，但公网 telnet 依然有问题，除非重启路由器更换 IP。 现在我不用为了网络穿透的问题烦恼了，不用担心二次验证以及黑客攻击的问题。用拓竹的例子来说吧，只有用懒猫是在玩 NAS，其他的传统硬件都是在折腾。折腾固然好，兴趣价更高。若为自由故，二者皆可抛。 懒猫带给我的，是丰富的硬件资源和社群沟通，以及售后的专业和及时。花钱买省心，剩下抄作业。大抵如此了。","link":"%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E6%95%85%E4%BA%8B%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E8%A5%BF%E6%B9%96%E9%82%82%E9%80%85%E5%90%8E%EF%BC%8C%E6%88%91%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E5%A5%B9%E7%8E%A9%E8%BD%ACnas/"},{"title":"懒猫微服炫技篇（一）：使用懒猫微服的穿透服务，车机使用DS music 远程听歌，黑群晖不用再洗","text":"声明：炫技篇不是最佳实践，只是为了记录过程和那颗折腾的心。虽然很多时候可以用钱来升级或者多忍一忍就好了。但是折腾的心始终是不安分的，技术在职场中证明不了什么，但是在生活中可以。当晦涩的理论不仅仅存在于书本，才能给我们带来更大的价值。这个过程中能够找到我们到底是为了什么才需要这项技术，问题的痛点，以及这技术的前世今生。。。。。。 前些天给老旧的车载导航升级了 WIFI 功能，大致就是出厂的时候锁了 wifi 的驱动和 UI，然后通过 ADB 解锁的，然后通过路由器 Mesh 升级了老旧的 APP 以及导航数据，这次又带来了全新的功能，给普通车机升级 Carplay。 毕竟我的初衷，就是想在车机上安装懒猫 APP 而已啊。 Part 1：下载懒猫微服 APK，通过 U 盘导入安装，报错：解析错误，解析软件包时出现问题。 于是和懒猫相关技术进行确认，很快 CEO 给到了答复，目前只支持比亚迪和华为。毕竟国产车嘛，路子野一点也正常。 那我如果不用安卓，换 Carplay 呢？是不是就能用 IOS 的客户端直接投过去了？ Part 2：开始改 Carplay。 车载导航是当时赠送的，安卓 6.0。朋友推荐说可以购买 Carplay 盒子，于是疯狂搜索，现在的 Carplay 盒子分为两种。 有线 Carplay 改无线 Carplay 安卓车机改无线 Carplay 我的安卓车机没有 Carplay APP，方向盘也没有语音控制按钮。所以一开始能不能支持 Carplay，我是比较有疑问的。直到搜到了一篇夸赞车连易的帖子，大概说是最早做这个方向的公司，产品比较稳定一类的。 于是买回来调试，需要先安装他们的 autokit 软件检测（买之前需要用 Iphone 检测），这个 APP 后续当 Carplay APP 使用。（这里有个小插曲，之前 adb 调试的时候在改了工厂模式，开了 USB 调试，导致后来 USB 无法识别任何设备，包括 U 盘，2.4G 发射器，手机，以及 Carplay 盒子）对照之前的照片，关了就好了。然后我就拥有了人生第一台 Carplay 车机，盒子一点不烫，就是手机哗哗掉电。 开心之余还不忘记去找懒猫 APP，屏幕上有钉钉，百度网盘，网易云，甚至连 Home Assistant 都有？那我的懒猫微服 APP 呢？原来是 Apple 的白名单限制，美其名曰为了安全。GPT 搜下了，基本上除了导航和音乐一类的设备其他都没有了。那我高速服务区追个剧？好歹让投个屏嘛。。。。。。 同时和微服以及 Carplay 盒子的厂家确认，得到了一份寥寥无几的 APP 名单。 梦碎？ GPT 的解释如下： 以下内容基于 Apple 开发文档（2024 年最新版）及最近一次 iOS 18.4 更新的公开信息整理而成，可作为「CarPlay 现阶段 官方 支持的 App 类型、代表性应用，以及常见限制」速查表。(Apple Developer) 1 | CarPlay 允许上车的 8 大官方类别 类别 典型代表 App 主要交互模板 备注 导航 Apple 地图、Google Maps、Waze、Gaode/高德 地图、仪表盘、列表 iOS 18.4 起可设 默认导航（EU 地区率先落地）(The US Sun) 音频 Apple Music、Spotify、网易云音乐、Podcast、Audible、DS Music（Synology） 播放中、网格、列表 仅音频；禁止歌词滚动、视频封面等会分散注意力 通信 电话、信息、WhatsApp、钉钉、Teams 列表、语音 文本内容不得直接显示，只能通过 Siri 朗读 停车 EasyPark、停简单 列表 提供空位、计费等信息 EV 充电 Tesla、ChargePoint、小桔充电 列表、地图 可筛选功率、空闲桩等 加油 / 加氢 BPme、壳牌加油 列表、地图 仅提供站点 &amp; 价格；支付流程需遵循「停车后才允许」规则 快餐外卖 Dunkin’、星巴克 列表 只能选择常用餐点并一键复购，禁做复杂自定义 驾驶辅助 / 任务 扫盲测试、行车记录提示类 网格、信息 聚焦安全提醒、里程统计等（不含 ADAS 改装） 车企自家 App（空调、座椅、360 环视等）属于「Automaker Apps」，与上表并列但须由车厂提交。(Apple Developer) 2 | 为什么某些 App（视频、文件管理等）上不了 CarPlay？ 场景 限制要点 开发侧原因 视频/娱乐（Netflix、哔哩哔哩） 行车安全：禁止播放分散注意力的可视内容 CarPlay 模板不提供视频区域；审核会拒绝 文件管理（ES 文件浏览器、NAS 探索） 无对应类别；操作路径过复杂 无可用模板且易诱导司机操作 社交媒体（微博、X、抖音） 不得显示滚动 Feed、评论等 CarPlay 指南明令「No social networking」(Apple Developer) 游戏 / 浏览器 驾驶分心 &amp; 没有类别 同上 3 | 作为开发者，要满足哪些门槛？ 申请 CarPlay Entitlement 向 Apple 提交 App ID、类别说明、演示视频；获批后才能编译带 CarPlay 功能的版本。(Apple Developer) 使用系统提供的模板 只能调用列表、网格、地图、Now Playing 等固定 UI；不可自绘按钮或随意布局。(Apple Developer) 全部操作无需拿起 iPhone 登录、付费等「复杂流程」必须设计为停车后才可完成，或通过 SiriKit 语音处理。 严格的内容审核 不得插入横幅广告，禁止收集车辆数据做非核心用途，消息不可明文显示等。 4 | 对普通用户而言的使用限制 维度 具体表现 设备要求 iPhone 6s 及以上（iOS 17+ 建议），Lightning 有线或支持无线 CarPlay。 同时运行数量 iOS 18.4 支持「三排图标」；实际显示取决于车机分辨率。(The US Sun) 地区差异 某些导航/支付/餐饮 App 仅在特定国家可上车，例如中国区暂不开放「Apple 钱包加油」。 多任务 非导航类 App 在后台仅获有限音频/定位权限；切回主屏超过 8 分钟或手动关闭即结束会话。 常见 Q&amp;A 问题 解答 能在 CarPlay 打开 NAS 上的影片吗？ 不行，现阶段只支持「音频类」DS Music；视频需停车使用原车 USB/HDMI 或车企自带系统。 想在车机上用 VSCode、ES 文件浏览器？ 属于生产力 / 文件管理场景，CarPlay 无对应类别，无法过审。 越狱或使用 CarBridge 能装任何 App 吗？ 理论可行但高风险：系统不稳定、Apple Pay 安全受损、保修被拒，不建议在主力机尝试。 官方 仅开放 8 大类别，核心目标是「行车安全 + 切实刚需」。 想把新 App 带到 CarPlay？先判断是否符合这 8 类，然后按模板开发并申请 entitlement。 作为用户，若某款 App 还未上车，说服力最大的途径是：去 App Store 给开发者留言催更，而不是等「万能破解」。 Part3小红书上搜到了 DS audio 的攻略，竟然是群晖套件？评论区还有人推荐 DS music，颜值很高。下载之后我也很喜欢。 不就是群晖嘛，这年头谁还没一个黑群晖了。公网 IP 不定时被封端口，那懒猫转发了解一下？ 于是把群晖的端口映射出来，就在 APP 中可以远程连接使用了，这不比 Synology QuickConnect 还省事嘛。。。。 各类软件测试如下 DS audio 一直提示登录，尽管手机端已经一切正常 DS music 可以正常访问和听歌，这个软件颜值爱了 DS music+ 一直加载失败， DS cloud 和 DS player 在打开时候好像是一样的 UI，能找到歌曲，但是点击没反应 最后喜欢的还是 DS music，功能正常还好看啊。 除了 DS 系列，好像 Q 系列也行，不过吃灰很久很久了。（具体连接待测试） 用懒猫微服解决了公网转发的问题，再也不担心被运行商封端口了，还有车载大屏（除了有点掉帧），也算圆了一个梦吧。 你的车有 Carplay 吗？","link":"%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E7%82%AB%E6%8A%80%E7%AF%87%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E4%BD%BF%E7%94%A8%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E7%9A%84%E7%A9%BF%E9%80%8F%E6%9C%8D%E5%8A%A1%EF%BC%8C%E8%BD%A6%E6%9C%BA%E4%BD%BF%E7%94%A8ds-music-%E8%BF%9C%E7%A8%8B%E5%90%AC%E6%AD%8C%EF%BC%8C%E9%BB%91%E7%BE%A4%E6%99%96%E4%B8%8D%E7%94%A8%E5%86%8D%E6%B4%97/"},{"title":"懒猫微服炫技篇（二）：使用懒猫微服倒推停电时间","text":"早晨的时候，突然听到饮水机和扫地机器人重启的声音，只有一种可能是电闸重启了。没有人为重启，那就是意外断电了。赶紧 SSH 登录到懒猫微服，第一时间查看 uptime，果然 3 分钟之前重启了。懒猫的 BIOS 有上电自启的功能，所以能够看到确实是停电了。 使用 uptime -s 显示系统最后一次启动的具体时间 然后又看了看群晖，群晖接到了 UPS 上，几乎没受到啥影响。 昨天刚把懒猫从 UPS 上拿下来，因为发现 UPS 有无线干扰。结果第二天就遇到断电，果然是怕啥来啥。 先看看开机时间： 1journalctl --list-boots # 列出所有启动记录 重点观察： LAST ENTRY：上次关机时间 FIRST ENTRY：本次启动时间这两个时间中间如果有一个空档，而没有正常的 shutdown 日志，就极可能是断电。 可以看到从 08:31 到 08:41，系统中断了 10 分钟，符合意外断电并自动重启的特征。 然后看看关机日志，基本都是昨天的手动关机的日志，今天意外断电的日志丢失，也在情理之中。 1journalctl -b -1 | grep -i &quot;shutdown\\|power\\|crash\\|kern.*panic&quot; # 检查上次会话 如果是正常关机，会有 systemd-shutdown 或服务停止记录； 如果是异常断电，则日志会直接中断，没有“收尾”。 到这基本上可以确定是 08 点 31 断电的了，再拉下系统日志：能看到好好的 UPNP 的日志突然中断。然后 10 分钟后转为开机日志。基本上可以确定是意外断电。 1journalctl -S &quot;2025-06-17 08:30:00&quot; -U &quot;2025-06-17 08:42:00&quot; 赶紧查下 SMART 信息，还好没啥事。 1smartctl -a /dev/sda","link":"%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E7%82%AB%E6%8A%80%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E4%BD%BF%E7%94%A8%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%80%92%E6%8E%A8%E5%81%9C%E7%94%B5%E6%97%B6%E9%97%B4/"},{"title":"","text":"懒猫商店如今已有 1000+ 应用，日常使用中经常要在搜索栏反复查找，着实有些不便。有没有更简单的方法呢？答案是：可以直接把网页保存成 Mac 应用，像手机 App 一样快捷打开！ 下面就手把手教大家几种实用的方法。 优雅方案——PWA在 Mac 上，我们有更高级的玩法。不少现代网站都支持 PWA（Progressive Web App），简单来说，就是让网页像 App 一样运行： 可以像应用一样安装在本地 点击图标就能直接启动，无需打开浏览器 界面简洁，没有多余的地址栏和标签页 下面是懒猫清单的安装效果： 支持 PWA 的网站，在地址栏右侧会自动弹出“安装应用”按钮。 只需点击它，就能轻松将网页保存为应用。 PWA 的优点：速度快、体验好、支持离线，真正做到了网页与 App 的无缝结合。 通过 PWA 添加之后，会在 Finder 里弹出 Chrome 应用，我这里添加了懒猫网盘，懒猫原生的 APP 基本都是带 PWA 的，所以这一点体验很好。 添加完桌面应用之后，浏览器会有“在应用中打开”的提示，点击就可以像 APP 一下打开，就是前面第二张懒猫清单的图片。 如何通过 Chrome 中安装懒猫 Web 应用 在 Chrome 浏览器中打开你要保存的网站（如懒猫微服务）。 点击右上角“更多”按钮，依次选择**投放、保存和分享 → 将网页安装为应用…**。 有些网站也会直接在地址栏右侧显示“安装”图标，点一下即可快速安装。 安装时你可以自定义应用名称，这里以 OnlyOffice 为例。 这样做还可以解决 Mac 没有 Office 订阅的痛点，直接通过网页版弥补。 完成后，应用会存放在： 1/Users/你的用户名/Applications/Chrome Apps.localized/ 它们会以.app格式存在，完全就像普通 Mac 应用一样。 123❰~/Applications/Chrome Apps.localized❱✔≻ lsIcon? 懒猫清单.app/ONLYOFFICE Docs.app/ 懒猫网盘.app/ 如何通过 Safari 中把懒猫应用添加为 APP对于不支持 PWA 的网站，Safari 也提供了一个类似的解决方案。 在 Safari 中打开要保存的网页。 选择“文件 → 添加到程序坞”，或者点击“共享”按钮 → 添加到程序坞。 输入自定义的应用名称，点击“添加”。这个应用会自动放在应用程序里面。 应用将会被保存到“应用程序”文件夹中，支持从程序坞、启动台或 Spotlight 快速启动。 直接拖拽到 Dock，一键启动无论是通过 Chrome 还是 Safari 安装的网页 App，安装完成后都可以像普通应用一样拖到 Dock。 只需保持懒猫微服务后台连接，点击 Dock 图标，就能立即打开应用，体验和原生 App 无异！ 进阶玩法：自定义网页启动器当然，你也可以用 Python 快速实现一个简单的网页启动器： 123import webbrowserwebbrowser.open(&quot;https://www.apple.com&quot;) # 打开网页 支持新窗口、新标签等操作，适合简单自定义。 结语通过以上方法，我们就可以把常用的懒猫 APP 变成 Mac 的桌面应用，随时一键直达，告别繁琐的搜索过程，体验飞跃式提升！","link":""},{"title":"我用Amazon Q写了一个Docker客户端，并上架了懒猫微服商店","text":"https://appstore.lazycat.cloud/#/shop/detail/xu.deploy.containly 自从被种草了 Amazon Q，我陆陆续续写了不少小软件，其中这个 Docker 客户端是一个典型的例子，比较符合自己平时使用的习惯，也分享给一些朋友和 NAS 爱好者来用。 故事还要用上次折腾黑群晖说起，本意想把 NAS 和打印机共享二合一的，所以把闲着的软路由做了改装。顺便使用 Docker 跑一些服务，有老本行的 ES 集群，也有自己写的一些工具类型的服务。 随着时间增长，部署的服务多了，时间长了就会忘记服务的端口，甚至还要登录群晖 Web 端进行查看，群晖的 Container Manager 很好用，就是登录的密码策略比较复杂，每次登录都比较麻烦，所以后来使用了一个 HomePage 来保存这些服务。但是每次调试 Docker 都非常麻烦。与 Portainer 相比，我需要的只是一个简洁的面板来查看容器的 URI、状态，并进行启停操作，因此我决定自己开发一个。 这个是群晖的 Container Manager，后面还有很多容器。记住这么多端口然后随时维护绝对不是一个容易的事。 我开发容器面板叫做 Containly， 是一个 Container 的管理工具。最早的时候用我是用 GPT 写的。但是随着项目越来越大，GPT 每次都会丢一些东西，而且还没办法操作本地目录，后来才转向了 Amazon Q，这个版本还是用 Q CLI 来做的。 于是写好之后我把这个 APP 上架了懒猫微服的商店，这个是一款国产化的 NAS，可玩性非常高，对开发者也十分友好。上线当日就有很多开发者安装使用了。 Containly 的核心功能是通过目录映射的 Docker 引擎读取所有容器信息，包括容器的启动、退出、停止及其他状态。例如，当容器处于“Create”状态时，它会被标记为“Other”状态，便于管理。 默认情况下，每个容器卡片会显示容器的网桥信息、端口映射和 URL。默认使用 HTTP 协议，鼠标悬停时，会在右侧显示操作按钮。通过点击这些按钮，操作会被保留，再次点击会隐藏，这样子就整个比较美观。 按钮功能包括： 停止/启动 重启 查看日志 SSH 进入容器 切换 HTTP/HTTPS 黑名单管理 此外，Containly 还提供了一个输入框，用户可以输入需要监控的 NAS 域名，面板会自动根据域名和端口拼接成 URI，并存储在 localStorage 中。更进一步，Containly 还支持暗黑模式，提升了用户体验。 另外如果多节点部署服务的话，还可以把从节点放入黑名单，这样子就只显示主节点的信息，面板就比较清爽。如果需要从节点的信息再从黑名单移除。 利用面板的 SSH 功能， 能够直接从面板进去访问容器的 SHELL，不用执行再 docker exec 的命令。 看日志也很方便，也无需再使用 docker logs，这样调试容器的时候就很方便了。 我已经打包好了 Docker 镜像并配置了 GitHub Actions，便于自动化部署。你可以通过以下方式部署 Containly： Docker 部署命令12345docker run -d \\ --name containly \\ -p 5000:5000 \\ # 映射容器端口到主机 -v /var/run/docker.sock:/var/run/docker.sock \\ # 挂载Docker socket，允许访问宿主机Docker cloudsmithy/containly:latest # 使用最新版本的Containly镜像 Compose 配置123456789version: &quot;3.8&quot;services: containly: image: cloudsmithy/containly:latest ports: - &quot;5000:5000&quot; volumes: - /var/run/docker.sock:/var/run/docker.sock restart: unless-stopped 这个是使用 Q 修改的部分代码截图： 后来机缘巧合之下用了 Q pro，看来也不能优化再多。 除了使用 Q CLI，我们还可以通过安装 VSCode 和 JetBrains 插件来使用 Q，安装插件后，免费版本可以使用 Builder ID 登录，Pro 版本则支持使用 IAM Identity Center 登录。 在 VSCode 中，你可以通过 Q 聊天面板与 Q 进行交互，并且支持中文聊天。 与 GPT 相比，Q 的优势在于它可以直接操作本地文件，用户可以直接在文件夹中生成工程文件，极大提升了开发效率。","link":"%E6%88%91%E7%94%A8amazon-q%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AAdocker%E5%AE%A2%E6%88%B7%E7%AB%AF%EF%BC%8C%E5%B9%B6%E4%B8%8A%E6%9E%B6%E4%BA%86%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%95%86%E5%BA%97/"},{"title":"深度长文：NAS大降价的年代，我为何接受溢价来购买懒猫微服（附送回本攻略）","text":"最早知道懒猫微服，是去年的时候，那个时候最直观的感觉就是价格比同类型产品要贵一些，但是很极客风，不过硬件配置比传统 NAS 要高出很多。但在现在各种小主机盛行的年代，这台机器就显得性价比不高，甚至有些人认为有割韭菜的嫌疑。 今年朋友又过来推荐，说是售后很好，可以根据自己的需求来答疑，比如把三方监控放在存在 NAS 里，比如想用私服搭建游戏服务器等等，而网上不管怎么样，还有说情绪价值一定给拉满的。 第一次咨询的时候，是和 CEO 通了个电话，抱着将新将疑的态度购买回来，拆箱，测评。相信其实很多人即使没听过王勇，也一定听过或者用过 Deepin。大学的时候使用过一段时间的 deepin，很多细节确实符合国人的使用习惯。这个背书对于技术人来说，实在是一下子路转粉。想想自己在电话里还跟对方说，其实专业的技术人员，不用和我说这么直白的词，再想想王总在 Deepin 以及 Emacs 方面的贡献， 实在是有些惭愧。 我本身是开发者，问题是技术细节相关的，比如为何这个实现和群晖类不一样，对某处设计比较反常识的地方询问和拆解，总的来说，像是上了侠客岛一样，平时自认为是开发人员里面最懂 Infra 的，结果到这里谁的 Linux 都比我玩的好。 目前重度使用了一周多，每天都会在 VIP 群里问问题。主要把维护的问题解决出来，好像附送了一个终身的云厂商支持一样。从他们的宣传来看，7 _ 18 的支持显得更加实在一些，服务相比海底捞有过之无不及。我本身用过不少 7 _ 24 小时支持的云厂商，要么低峰时候找不到人，而 24 小时支持又何尝不是对技术从业者的压榨呢？比如随时 on-call，倒班机制是我本人深恶痛绝的，有些厂家号称是 7 * 24 小时支持，但是经常已读乱回要么不回，或者干脆说这个问题和他们产品的交叉是涉及第三方，然后索性不管了。有意思的是，当使用两个公司交叉的业务时，都要让我去找对方。但是在懒猫这里就不会发生这样的问题，之前用的商店里的 dify 有问题，他们去找移植应用的人去修改了。 还有一个卖点，是硬件终身售后，甚至包括磁盘和后续的数据恢复（前提是不加密），有些推吞吐量高要求的情况甚至可以做 Raid0，然后外接 NAS 或者硬盘仓备份，所以这不是一款后端存储的产品，而是放在存储和用户之间的加速器，作为家庭的边缘算力，前面接 MBP 后面接存储池这样子。 商店目前上架了 1000+的应用，虽然官方的应用不多，但是很多三方应用都是他们的开发人员移植的，于是后来才有了越来越多的开发者也跟着移植的过程，在移植的过程中，可以学 docker-compose 的用法，以及跨架构打包 docker image ，还有单点登录的集成。这些都是我的兴趣点，而且也想学一学里面设计的机制，大学毕业的时候我想设计一款 NAS，那也仅仅是基于 centos 做了一些改动，后来买了威联通，虽然不常开案例问问题，但问的也仅仅是关于这个产品本身的东西，包括专业程度和响应级别都不是能够一概而论的。甚至连 trouble shooting 上传日志都很方便。 全容器化的服务以及对操作系统的修改，可以看出沿袭了当年在 deepin 的风骨。包括应用商店在内，很多系统组件都完全采用用容器托管。还有自己的单点登录系统，而对于 OIDC 的支持其实很多企业都没有做到。还有一点不得不提的，开发者的社区很活跃（主要指的是微信群和上架应用商店），每天都会有几位开发人员默默的上架应用和攻略。慢慢的我也熟悉了把 docker images 转换成为懒猫商店的模式。也上架了自己的几个应用，有原创的，也有把喜欢的开源项目移植过来。 最喜欢的原生应用是网盘和清单，首先说网盘曾经有一篇为什么没有人去做网盘的帖子，讲述了网盘研发成本高，就连曾经宣称用不限速的阿里云盘也变节了。改善 NAS 生态是刀山火海、暗礁遍布，却仍要做那一股清流；研发与售后成本明摆在前，却仍坚持全线自研，把服务做到极致。清单有种小清新的感觉，极简风格，日常记录一些 todo，主要同步之后多平台编辑实在很舒服。打破了关于以前产品自带的软件都很烂的固有观念。 想起来《琅琊榜》中的一句话拿来形容创始人，“如此愚蠢，却又如此有胆识的人，已经很久没见到了。” 我一直相信技术是服务生活的，但慢慢的变成了炫技以及慢慢变成了改需求以及最后变成了漫长的牛马生涯，在学生时代一直有一个远景，做一款全平台的软件自己用，后来发现学习成本巨大，而且也没有资金外包出去，虽然这几年接触了 flutter，但也没有构建一个全新的跨平台产品出来。 有了懒猫微服之后，这一切都解决了，只需要打包好 docker image，如果可以的话就上架商店给其他人用。用公网访问，TLS 证书卸载这些都一步搞定。当我们默默的喷绿联，极空间丢数据，群晖如何守旧不肯升级 CPU，以及限制磁盘认证的问题。曾经我们还忽略了这样一款从操作系统，软件生态，甚至应用商店。这款机器比我之前 DIY 构想的还要完善，完美。 我想去拆解他的技术细节。但是不想再出来一个商业竞品来扰乱这份宁静。在我看来这是一款充满着技术者热情和情怀的产品。 附送：懒猫微服社区激励机制一览 贡献类别 具体动作 奖励金额 备注条件 应用移植 成功将一款高质量的自托管应用移植并上架商店 100 元/款 - 必须功能正常- 开源应用需标注上游作者- 若多人移植同一应用，仅首位上架者得奖 对接账户系统 / 网盘右键菜单 在移植基础上完成接口对接 +50 元/款 - 自己移植并对接：共 150 元/款- Fork 他人应用并补充对接：50 元/款 应用攻略编写 发布含截图且经验证可行的攻略，并关联商店应用 50 元/篇 鼓励分享使用经验，惠及社区 不予奖励的应用类型 纯网页游戏、离线 Web App、纯数据库软件等 —— 可自由上传，但暂无红包激励 核心要点 先到先得：同款应用仅首位合规上架者获奖。 质量至上：功能正常、信息完整方可审核通过。 额外加成：完成账户系统/右键菜单对接可叠加奖励。 知识共享：高质量攻略同样有奖，鼓励经验传播。 社区激励机制：https://developer.lazycat.cloud/store-rule.html 懒猫打金服：https://playground.lazycat.cloud/#/guideline/448","link":"%E6%B7%B1%E5%BA%A6%E9%95%BF%E6%96%87%EF%BC%9Anas%E5%A4%A7%E9%99%8D%E4%BB%B7%E7%9A%84%E5%B9%B4%E4%BB%A3%EF%BC%8C%E6%88%91%E4%B8%BA%E4%BD%95%E6%8E%A5%E5%8F%97%E6%BA%A2%E4%BB%B7%E6%9D%A5%E8%B4%AD%E4%B9%B0%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%EF%BC%88%E9%99%84%E9%80%81%E5%9B%9E%E6%9C%AC%E6%94%BB%E7%95%A5%EF%BC%89/"},{"title":"自带内网穿透,懒猫微服治好了我的NAS焦虑","text":"知道懒猫微服是一两年前，最初的印象是极客机甲风格，有颜值有性能有。近期入手也是出于朋友推荐,主要还是喜欢自带的内网穿透功能,虽然家里有公网 IP，但是不定时会被运营商封端口（不止常用端口），总是一阵一阵的，询问运营商也没有一个明确的结论，倒不如选一个商业的产品然后省去自己折腾的时间吧 虽然我一直很想 DIY 这样一款产品，开源的大多是 KVM-base 的方案，或者还有商业的 EXSI。毕竟个人精力有限，一直搁置到现在，然后随着事情越来越多，就购买了一台来玩玩，也脱胎换骨当甲方提需求。官网如下：https://lazycat.cloud/ 机器是这样的，浓浓的机甲风格连，着运行了几天也一点都不烫。之前还担心炒豆子的问题，其实相对于白天的噪音几乎是没有的。 i5-1135G7，现在来看不算最新的，不过也比很多 NAS 强很多了，手动@群晖 32G 内存（只能一个盘位，所以加满了） 2.5 寸 2T 原装 HDD（预算有限，目前还在测试阶段，自带的盘是叠瓦盘，介意的话可以自己买盘替换） neofetch 能看到是基于 Debian12 的。然后开发团队在上层构建自己的应用，只是 ssh 需要额外申请，不过一会就批了。 提供全平台的客户端，该有的都有了，这里开发适配应该花了不少时间吧。 MacOS 客户端的界面如下, 如果通过 web 访问就是这样，和传统的群晖有个主页不一样，这个更像是服务导向的，对于小白来说，只需要按照 Sass 的方式来使用，比如文件备份，时间机器，异地组网。而对于技术人员来讲，我个人觉得是更加吃力一些，要搞清楚每个服务是怎么启动的，怎么保证网络传输，怎么保证 HA，尽管懒猫团队已经实现了这些，但是出于职业习惯，还是希望抽丝剥茧，搞清楚从 Iass 到 Sass 的原理，然后学一学背后的哲学，以及在懒猫的商店上架自己应用，还有把应用接入懒猫的 SSO 系统。 关于服务嘛，是大多数玩家最喜欢的地方，有专门的 N 对 1 答疑，7*18 服务比 7 *24 听起来要靠谱很多，只能说专业，太专业了。团队是 deepin 二次创业出来的，都是技术流，所以懂用户，在群里可以做深度的技术答疑。在我之前的感受就是，玩 nas 的太多是爱好者，很多不懂 Linux 和开发，或者懂技术的都是理论派，对自己 host-server 或者 application 没有兴趣。以前的同事能因为这个结缘，由于彼此方向不同更多会集中在 Iass 和 network 的层面，而端对端的解决方案甚少。 但是懒猫让我看到了未来 nas 进化的方向，从硬件 - Iass -pass - Sass 做了全套的定制，也做了我一直想做而没有做完的事情，最早我的想发是在 Centos 上用 docker 跑很服务，然后用 NFS 做 share，然后用 KVM 做虚拟化层，然后用商业的方案做异地组网。尽管过过程十分坎坷，遇到了硬盘噪音，纯开源项目支持不到位，商业方案售后不专业等问题，最后就只在内网使用，走了很多弯路吧。 相信懒猫的这个价格，如果用 AWS 的话，最多半年就烧光 credit 了。有如此专业的团队来支持，治好了我的 NAS 焦虑。 文章来源：","link":"%E8%87%AA%E5%B8%A6%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F-%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E6%B2%BB%E5%A5%BD%E4%BA%86%E6%88%91%E7%9A%84nas%E7%84%A6%E8%99%91/"},{"title":"轻松管理 ES 集群：我把 Infinilabs Console 上架了懒猫微服，默认支持外网访问、","text":"之前我的 infinilabs Console 一直跑在群晖里，由于和 Coco-AI 的默认端口冲突，导致经常忘记端口信息，群晖里运行着 Easysearch，Elasticsearch、OpenSearch 三个大集群，也想慢慢迁移到其他性能高的机器上去，正好最近购买了懒猫微服，能够让我做应用的迁移，顺便还得能上架一些应用。 Infinilabs.console 是什么？如果你用过 Elasticsearch，那就一定知道 Kibana。Infinilabs Console，就是极限科技团队开发的国产可视化控制台，是一个面向 Easysearch、Elasticsearch 和 OpenSearch 的运维、监控、数据管理平台，可以看作是国产版的 Kibana 替代品。 最初接触这个款产品的时候让我眼前一亮，它能够借助 Easysearch 或者 Elasticsearch 的 REST API 来连接集群，同时也高效地管理和监控 Elasticsearch、OpenSearch 以及 INFINI Easysearch 等搜索引擎集群，提供统一的运维、监控、安全和数据管理能力。这一点其实是 Kibana 比不了的，尽管是老牌软件，但是初学 ES 的时候 Kibana 连接 ES 要查 log 设置一些 key，这个整个部署过程就花了一个小上午的时间。而且跨版本，跨引擎来支持的能力也是其他可视化工具无法比拟的。简单来说，真的很符合国人的使用习惯。 首先我们可以在连接的时候不同的引擎（Easysearch、Elasticsearch、OpenSearch ），以及你集群的位置（线下还是在各种云上），同时支持 HTTP 和 HTTPS 的连接。 连接之后，可以看到已经正确识别出来了的 Easysearch、Elasticsearch 和 OpenSearch，并且抓取了相应的数据监控，比如基本的集群状态，节点数量，索引，分片以及文档的数量，还有磁盘和 JVM 的占用。 执行 DSL 的时候可以开启多个 TAB 页这个是我最喜欢的功能，尤其在做集群迁移的时候再也不用找不同的系统去登录了，这里手动@aws 的 OpenSearch。除此之外，做快照传到 S3 的时候也不用担心 access_key 读不到的问题了。曾经我是托管 OpenSearch 的用户，托管节点有诸多问题，无法登录，由于服务本身的问题导致业务滞后（升级卡住，看门狗不定时杀进程），做快照必须借助 Postman 来传递 IAM 凭证。但，换了 Infinilabs console 和 Easysearch 之后，整个世界都清净了。 GitHub 项目地址如下：https://github.com/infinilabs/console 为什么选择了懒猫商店？懒猫微服解决了我日常使用 NAS 的几个痛点： 装了一堆服务（Redis、MinIO、MeiliSearch、Adminer、Swagger UI……），入口太分散； 每次看容器状态都要 docker ps 一把梭； Homepage 要手动配置，配置文件写起来太繁琐； 部署成功后会给到一个域名，然后通过域名访问可以自动解析内外网的 IP 地址，同时也自带了路由守卫功能来重定向到懒猫的 SSO， 而在传统 NAS 部署 Authentik 然后再去应用端做 SSO 的适配应该是 NAS 玩家的终极梦想，而上架商店之后自动集成了这样的认证系统（也是单点登录）。然后，在外边的时候也可以监控和操作自己的 ES 集群啦～（随地大小班的理由又多了一条） 因为上架的应用是 HTTP 的，懒猫微服还能自动做了一个 TLS 传输，用的他们自己域名，然后通过 https 访问 Infinilabs Console。 除此之外还自带了 dozzle，可以很方便查看安装应用的上架信息，毕竟对于开发者来说，装机玩 NAS 是兴趣，但是搭建好之后的维护问题也同样劳心费力，真的一点都不想浪费时间和精力，那么杂活就交给平台来管理吧。 进入懒猫微服的【应用商店】，搜索：infinilabs.console一键安装并启动，打开浏览器，开始使用 Infinilabs Console 吧～ 地址如下： https://lazycat.cloud/appstore/#/shop/detail/xu.infinilabs.console 相关链接 infinilabs.console 介绍：https://infinilabs.cn/products/console/ infinilabs Github 介绍：https://infinilabs.cn/products/console/ 懒猫微服上架地址：https://lazycat.cloud/ 懒猫微服官网：https://lazycat.cloud/","link":"%E8%BD%BB%E6%9D%BE%E7%AE%A1%E7%90%86-es-%E9%9B%86%E7%BE%A4%EF%BC%9A%E6%88%91%E6%8A%8A-infinilabs-console-%E4%B8%8A%E6%9E%B6%E4%BA%86%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%EF%BC%8C%E9%BB%98%E8%AE%A4%E6%94%AF%E6%8C%81%E5%A4%96%E7%BD%91%E8%AE%BF%E9%97%AE%E3%80%81/"},{"title":"懒猫微服进阶心得（一）：M芯片移植懒猫应用构建Docker镜像的常见问题排查及解决方案","text":"本文是使用 Apple silicon 的 MacOS 移植到懒猫商店的踩坑记录，希望能够给大家带来帮助 Apple silicon 很好，在这年几乎带起来 ARM 的生态。但这也拉开了 ARM 和 X86 之战，用户在两大生态中穿梭，只能增加自己应用的兼容性。就比如说用来打包的 Docker image，尽管编程语言和操作系统都在底层屏蔽了硬件架构，但是容器还得用相同架构的。 这是之前移植开源项目时候忘记打包不同架构的 image 而直接推送到懒猫镜像仓库导致的问题。MacOS 默认打包了 ARMv8 架构的镜像，在 X86 上也无法运行。 12pg-docker run -p 5000:5500 registry.lazycat.cloud/u04123229/you/doudizhu-scorer:d1d9085174c0bf8cWARNING: The requested image's platform (linux/arm64/v8) does not match the detected host platform (linux/amd64/v4) and no specific platform was requested 由于打包的时候容器一直在反复重启，所以在 dozzle 上也没有什么明显的报错，所以有个办法就是 ssh 进去用终端pg-docker run，这样所见即所得。dozzle 地址：https://dev..heiyu.space/dozzle/ 于是重新打包，跨架构打包时候需要使用 buildx，当然前提是需要里面的运行时和代码也是跨平台的。 我们先来看概念和原理： buildx 是 Docker 提供的一种扩展功能，它基于 BuildKit 引擎，目的是为 Docker 提供更强大的构建功能，包括： 跨平台构建：支持在一种平台上构建适用于多种平台的 Docker 镜像。 缓存管理：支持高效的缓存管理机制，能够减少重复构建的时间。 多阶段构建：支持复杂的多阶段构建流程。 buildx 使 Docker 能够生成多平台的镜像，这意味着你可以在一个平台上（例如 ARM 或 x86）构建适用于其他平台（如 x86_64、arm64、armv7 等）的 Docker 镜像。 docker buildx build 通过指定 --platform 参数来告诉 Docker 在构建时要生成哪些平台的镜像。例如，linux/amd64 和 linux/arm64 就分别对应 x86 和 ARM 架构。 在 buildx 构建完成后，你得到的不是一个单独的镜像，而是一个支持多平台的 manifest list，这个列表包含了不同架构的镜像。这个列表可以推送到 Docker Hub 等镜像仓库，客户端在拉取时，会根据自己的硬件架构自动选择合适的镜像。 这意味着，我们可以通过同一个镜像标签（如 your_image_name）来支持多个平台的 Docker 镜像，而用户在拉取时会自动选择适合自己平台的镜像。 准备构建环境：Docker Buildx 会首先准备并选择一个构建器（builder）。这个构建器负责在指定的平台上执行构建任务。 选择平台：使用 --platform 参数来选择目标平台，Docker 会通过 QEMU 模拟器或者本地平台来执行构建。 构建镜像：在选择平台后，Buildx 会根据 Dockerfile 和其他构建上下文开始构建镜像。它会处理平台特定的依赖和构建步骤。 生成适配镜像：对于每个平台，Docker Buildx 会生成一个特定的镜像。例如，对于 linux/amd64 和 linux/arm64，它会分别为这两个平台构建独立的镜像，并将它们绑定在一个 manifest list 中。 推送镜像：完成构建后，你可以使用 --push 参数将包含多个架构镜像的 manifest list 推送到 Docker Hub 或其他镜像仓库。这个清单包含了多个平台的镜像，当用户从仓库拉取时，Docker 会自动选择与用户当前平台兼容的镜像 然后来实操 确保 Docker 版本支持 Buildx,用docker buildx version 来验证/ 创建并使用新的 Builder 打包的时候加上平台参数：--platform linux/amd64,linux/arm64 具体命令如下： 1234docker buildx versiondocker buildx create --use --name multiarch-builderdocker buildx build --platform linux/amd64 -t your_image_name .docker buildx build --platform linux/amd64 -t your_dockerhub_username/your_image_name --push . 在这过程中，我们可能还会使用docker tag ，这个命令可以将一个现有的镜像打上新的标签（tag），通常用于将镜像标记为自己的名字或指定版本。这对于推送镜像到 Docker Hub 或其他镜像仓库时非常有用。 1docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG] **SOURCE_IMAGE[:TAG]**：要打标签的源镜像。TAG 是可选的，如果不指定，默认是 latest。 **TARGET_IMAGE[:TAG]**：新的目标标签，通常你可以为镜像指定一个新的名字或版本号。 假设你有一个名为 my_image:latest 的镜像，并且你希望将它标记为属于你自己（例如，your_dockerhub_username/my_image:latest）： 1docker tag my_image:latest your_dockerhub_username/my_image:latest 这条命令会将 my_image:latest 镜像打上 your_dockerhub_username/my_image:latest 的标签。 推送到 dockerhub 之后，然后就可以像往常一样使用 Docker 了。 12docker pull your_dockerhub_username/your_image_namedocker run your_dockerhub_username/your_image_name 如果想走 Github action 一键打包 image 的话，是这样： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849name: Build and Push Docker Imageon: push: tags: - &quot;v*&quot; # 仅在 tag push（如 v1.0.0）时触发jobs: build-and-push: runs-on: ubuntu-latest steps: - name: Checkout source code uses: actions/checkout@v4 - name: Check DockerHub secrets run: | if [ -z &quot;${{ secrets.DOCKER_USERNAME }}&quot; ] || [ -z &quot;${{ secrets.DOCKER_PASSWORD }}&quot; ]; then echo &quot;❌ ERROR: DOCKER_USERNAME or DOCKER_PASSWORD is missing&quot; exit 1 fi - name: Set up QEMU uses: docker/setup-qemu-action@v3 - name: Set up Docker Buildx uses: docker/setup-buildx-action@v3 with: install: true # ✅ 自动创建默认 builder - name: Docker login uses: docker/login-action@v3 with: username: ${{ secrets.DOCKER_USERNAME }} password: ${{ secrets.DOCKER_PASSWORD }} - name: Extract tag name id: vars run: echo &quot;TAG=${GITHUB_REF#refs/tags/}&quot; &gt;&gt; $GITHUB_ENV - name: Build and push Docker image (multi-arch + latest) uses: docker/build-push-action@v5 with: context: . push: true platforms: linux/amd64,linux/arm64 tags: | cloudsmithy/flask-demo:${{ env.TAG }} cloudsmithy/flask-demo:latest 没有把 lzc-cli 写进去的原因是目前只能从终端命令行查看到推送到懒猫仓库的镜像命令，目前还不能存到一个中间位置，所以做了一个通用的版本。 事情到这里本来应该结束的，但似乎有了新的故事。 故事 1：无法打包某次在打包的过程种突然报错，期间一度以为 Orbstack 出现了问题，于是卸载重装，重启电脑，均无效，GPT 和 deepseek 也只是让我检查网络连接。期间重新 docker pull 也是没问题的。 1characters ERROR: failed to dial qRPC: rpc error:code = Internal desc = rpc error: code = Internal desC = header key &quot;x-docker-expoSe-session-name&quot; contains value with non-printable ASCI #2793 无奈只能 Google，在 issue 里有一个评论，打包目录不能出现中文。(我的 OS 默认中文) 参考链接：https://github.com/docker/buildx/issues/2793 故事 2：构建之后没有输出docker buildx build --platform linux/amd64 -t your_image_name . 12WARNING: No output specified with docker-container driver. Build result will only remain in the build cache. To push result image into registry use --push or to load image into docker use --load 这是使用 docker buildx 构建镜像时，指定了 docker-container 驱动，但是没有使用 --push 或 --load 参数。结果是，构建的镜像只会保留在构建缓存中，而不会被推送到镜像仓库或加载到本地 Docker 环境中。 我们可以通过两种方式之一来明确指定输出目标，避免出现此警告： 1. 使用 --push 将镜像推送到远程仓库：如果你希望构建的镜像推送到 Docker Hub 或其他 Docker 镜像仓库，可以使用 --push 参数。例如： 1docker buildx build --platform linux/amd64 -t your_image_name --push . 这将把镜像推送到 Docker 仓库，而不是仅保留在本地构建缓存中。 2. 使用 --load 将镜像加载到本地 Docker 环境：如果你想将构建的镜像加载到本地 Docker 环境中以便后续使用（例如运行容器），可以使用 --load 参数： 1docker buildx build --platform linux/amd64 -t your_image_name --load . 这会将构建的镜像加载到本地 Docker 环境，使你可以在本地运行、调试或进行其他操作。 故事 3：无法同时保存双平台 Image 到本地123docker buildx build --platform linux/amd64,linux/arm64 -t cloudsmithy/shuangpin:latest . --load[+] Building 0.0s (0/0) docker-container:stoic_hellmanERROR: docker exporter does not currently support exporting manifest lists --load 只适用于单平台构建。如果你在跨平台构建（如 linux/amd64,linux/arm64）时使用 --load，则只会将构建的默认平台镜像加载到本地，不会加载所有平台的镜像。跨平台构建时，通常需要使用 --push 将所有平台的镜像推送到远程仓库 1docker buildx build --platform linux/amd64 -t cloudsmithy/shuangpin:latest . --load 使用 --load 时，镜像会被加载到本地 Docker 守护进程中。对于大镜像，加载过程可能需要较长的时间和较多的本地存储空间。因此，如果镜像非常大，可能需要考虑是否使用 --push 直接推送到远程仓库，而不是将其加载到本地。 1docker buildx build --platform linux/amd64,linux/arm64 -t cloudsmithy/shuangpin:latest . --push 故事 3：懒猫仓库黑魔法对了，关于文档上提到的懒猫的 registry 不能在微服外面用，黑魔法的限制其实就是加了认证，直接返回 401. 123docker run -p 5000:5500 registry.lazycat.cloud/u04123229/you/doudizhu-scorer:d1d9085174c0bf8cUnable to find image 'registry.lazycat.cloud/u04123229/you/doudizhu-scorer:d1d9085174c0bf8c' locallydocker: Error response from daemon: Head &quot;https://registry.lazycat.cloud/v2/u04123229/you/doudizhu-scorer/manifests/d1d9085174c0bf8c&quot;: no basic auth credentials. 最后希望这篇文章能够帮助大家在将开源项目移植到懒猫商店时，避免遇到一些常见的坑和问题。祝大家顺利解决跨平台构建和镜像推送中的挑战，提升开发效率！","link":"%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E8%BF%9B%E9%98%B6%E5%BF%83%E5%BE%97%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9Am%E8%8A%AF%E7%89%87%E7%A7%BB%E6%A4%8D%E6%87%92%E7%8C%AB%E5%BA%94%E7%94%A8%E6%9E%84%E5%BB%BAdocker%E9%95%9C%E5%83%8F%E7%9A%84%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"},{"title":"懒猫微服进阶心得（十）：本地开发，如何接入懒猫微服的 OpenID Connect (OIDC)","text":"我们知道懒猫的 OpenID Connect (OIDC) 无需在后台申请，商店里的应用在运行的时候会自动申请，但是本地测试的时候就不太方便。 一般是需要用其他的 IDP 作为测试环境，因为 OIDC 的协议是通用的，不像 OAuth 这么百花齐放。 以我的“家庭任务通知”APP 为例，讲解下在开发模式下接入懒猫微服的 OpenID Connect (OIDC)。 添加 OIDC 登录逻辑首先前端需要有一个 OIDC 的登录按钮，然后做好 OIDC 的逻辑： 使用懒猫 ENV 查看器导出本地配置从应用商店安装我写的“懒猫 ENV 查看器”，导出 env.example 文件，导出项目之后重命名为 .env。这样就可以把商店里的 ENV 复制到本地的开发环境。 不过需要注意的是：应用名字和回调函数还是原来的，不要轻易去改。遇到问题再手动调试。 https://appstore.lazycat.cloud/#/shop/detail/xu.deploy.env 登录后出现回调 URL 报错登录之后我们就看到了这个页面： 点击“授予权限”，会报错。这个是由于回调 URL 不匹配的问题，还是会访问 ENV 查看器的 URL： 手动修改回调 URL然后我们手动把上边的 URL 改成我们自己的回调路由就可以了，如果想自动化，你也可以写一个油猴脚本。 这样就可以完成本地的 OIDC 授权流程啦。开发的时候不用搭 IDP，也能走懒猫的登录流程。是不是很方便？","link":"%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E8%BF%9B%E9%98%B6%E5%BF%83%E5%BE%97%EF%BC%88%E5%8D%81%EF%BC%89%EF%BC%9A%E6%9C%AC%E5%9C%B0%E5%BC%80%E5%8F%91%EF%BC%8C%E5%A6%82%E4%BD%95%E6%8E%A5%E5%85%A5%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E7%9A%84-openid-connect-oidc/"},{"title":"懒猫微服进阶心得（二）：一台机器跑三套 Docker？深入解析懒猫容器的共存机制（上）","text":"本文仅代表个人视角对懒猫 Docker 的拆解分析，内容为基于现象的倒推推测，不代表懒猫官方实现方式。 拿到任何 NAS 的第一件事是开启 SSH 功能，第二步就是用 Docker 启动容器。 懒猫微服这个 docker 还不太一样，一个有三个 Docker： docker : 运行系统组件 pg-docker： 普通的 docker，让我们拿来玩 lzc-docker：运行懒猫商店的 docker 三套 Docker 引擎初探我们先来看看这三套 docker 引擎跑了些什么，从 ps 看起： docker ps1234567891011CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES1838d4f379e5 registry.lazycat.cloud/lzc/lzcsys:latest &quot;/sspk/bin/pd-service&quot; 9 days ago Up 9 days lzc-runtime-peripheral-device-1c2f6d791181b registry.lazycat.cloud/lzc/lzcsys:latest &quot;/sspk/bin/lzc-ingre…&quot; 9 days ago Up 9 days (healthy) lzc-runtime-ingress-control-19699c428d2b0 registry.lazycat.cloud/dexidp/dex:v2.42.0-alpine &quot;/usr/local/bin/dock…&quot; 9 days ago Up 9 days lzc-runtime-dex57952c3e4ba5 registry.lazycat.cloud/lzc/lzcsys:latest &quot;/sspk/bin/lzc-apise…&quot; 9 days ago Up 9 days (healthy) lzc-runtime-api-servers-1cde0eba62fd2 registry.lazycat.cloud/lzc/lzcsys:latest &quot;/sspk/bin/lzc-pkgm&quot; 9 days ago Up 9 days (healthy) lzc-runtime-pkgm-18e9c780c012c registry.corp.lazycat.cloud/homecloud/lzc-registry-proxy:v0.0.0-2887-gd16c7f25.m &quot;/bin/sh -c /lzc-reg…&quot; 9 days ago Up 9 days 80/tcp lzc-registry-proxy59d3803ef304 registry.corp.lazycat.cloud/homecloud/lzc-installer:v0.0.0-2887-gd16c7f25.m &quot;/docker-entrypoint.…&quot; 9 days ago Up 9 days lzc-installerc7192a7fd471 registry.corp.lazycat.cloud/homecloud/lzc-hal:v0.0.0-2887-gd16c7f25.m &quot;/bin/sh -c /sspk/bi…&quot; 9 days ago Up 9 days lzc-hal1d194e975117 registry.corp.lazycat.cloud/homecloud/lzc-recovery:v0.0.0-2887-gd16c7f25.m &quot;/docker-entrypoint.…&quot; 9 days ago Up 9 days lzc-recovery8338ce6a5c17 registry.corp.lazycat.cloud/homecloud/lzc-recovery:v0.0.0-2887-gd16c7f25.m &quot;/sspk/bin/entrypoin…&quot; 9 days ago Up 9 days 这里可以看到，系统级组件都跑在默认的 docker 下。 pg-docker ps123CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMESd0ae10b8fc8f registry.lazycat.cloud/u04123229/qilinzhu/ql-play:fbf2e99a00ef9a7f &quot;sh /app/start.sh&quot; 3 days ago Up 26 hours ql-play0cb9ec655c16 registry.lazycat.cloud/u04123229/cloudsmithy/shuangpin:2a8ede2b23c38be8 &quot;/docker-entrypoint.…&quot; 6 days ago Up 6 days 0.0.0.0:5004-&gt;80/tcp, [::]:5004-&gt;80/tcp unruffled_lichterman pg-docker 实际上就是日常部署、测试容器最常用的那一套运行时环境， Dockge 默认连接的运行时也是这个。只是这里为了区分系统 docker 做了改名，playground 就是随便玩的意思。 lzc-docker ps1234lzc-docker psCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES80c88ae6aa8b registry.lazycat.cloud/app-tv-controller:1.0 &quot;/lzcinit/cloud.lazy…&quot; 16 hours ago Up 16 hours (healthy) cloudlazycatapplzctvcontroller-app-1fdb2211b210e registry.lazycat.cloud/lzc/tvos-release:v0.1.219 &quot;/home/tvos/run.sh&quot; 16 hours ago Up 16 hours 5500/tcp cloudlazycatapplzctvcontroller-tvos-1 这个是懒猫商店的 Docker，实测在客户端中停止应用是是把对应的 docker 删除了，无论是从docker ps -a | grep auth还是可视化工具看来。这也很符合使用容器的习惯，不需要的时候就删除，随用随启动，但是数据仍然还在。 版本和运行时对比我们再来看一下版本，都还是一样的。所以这个就很有意思了。 123456lzcbox-029c588e ~ # docker --versionDocker version 27.5.1, build 9f9e405lzcbox-029c588e ~ # pg-docker --versionDocker version 27.5.1, build 9f9e405lzcbox-029c588e ~ # lzc-docker --versionDocker version 27.5.1, build 9f9e405 再看看存储后端，那是不是有什么魔改呢？看的出来后端都是 containerd。 123456789lzcbox-029c588e ~ # docker info | grep -i 'Runtimes\\|Default Runtime' Runtimes: io.containerd.runc.v2 runc Default Runtime: runclzcbox-029c588e ~ # pg-docker info | grep -i 'Runtimes\\|Default Runtime' Runtimes: io.containerd.runc.v2 runc Default Runtime: runclzcbox-029c588e ~ # lzc-docker info | grep -i 'Runtimes\\|Default Runtime' Runtimes: io.containerd.runc.v2 runc Default Runtime: runc 甚至连 containerd 的版本都一样 12345678910# docker info | grep -i &quot;containerd&quot; Runtimes: io.containerd.runc.v2 runc containerd version: bcc810d6b9066471b0b6fa75f557a15a1cbf31bblzcbox-029c588e ~ # pg-docker info | grep -i &quot;containerd&quot; Runtimes: io.containerd.runc.v2 runc containerd version: bcc810d6b9066471b0b6fa75f557a15a1cbf31bblzcbox-029c588e ~ # lzc-docker info | grep -i &quot;containerd&quot; Runtimes: io.containerd.runc.v2 runc containerd version: bcc810d6b9066471b0b6fa75f557a15a1cbf31bblzcbox-029c588e ~ # 一开始以为是魔改看了下我的 mac 运行的 Orbstack 的配置，好像也没啥差别。 1234567891011docker info | grep -i 'Runtimes\\|Default Runtime' Runtimes: io.containerd.runc.v2 runc Default Runtime: runcdocker info | grep -i &quot;containerd&quot; Runtimes: io.containerd.runc.v2 runc containerd version: 06b99ca80cdbfbc6cc8bd567021738c9af2b36ce 多引擎共存的实现方式DOCKER_HOST 的封装既然三个 docker 都出奇的一致，到底是类似命名空间的隔离嘛？ 123456789101112lzcbox-029c588e ~ # which docker/usr/bin/dockerlzcbox-029c588e ~ # which pg-docker/lzcsys/bin/pg-dockerlzcbox-029c588e ~ # which lzc-docker/lzcsys/bin/lzc-dockerlzcbox-029c588e ~ # file $(which docker)/usr/bin/docker: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=4a41bb12cfd0c306a6ede40f41cfc107b2045371, for GNU/Linux 3.2.0, with debug_info, not strippedlzcbox-029c588e ~ # file $(which pg-docker)/lzcsys/bin/pg-docker: Bourne-Again shell script, ASCII text executablelzcbox-029c588e ~ # file $(which lzc-docker)/lzcsys/bin/lzc-docker: Bourne-Again shell script, ASCII text executable 这就可以发现问题了，docker 是原来的 docker，但是 pg-docker 和 lzc-docker 是封装的脚本，来看一下： 所以我们可以得出一个关键点：懒猫并不是运行了三套完全独立的 Docker 服务，而是通过 shell 脚本封装，复用同一个 docker 客户端，切换不同的 socket 实现了“环境隔离”。这个脚本的作用相当于把 pg-docker 当成 docker 命令使用，还自动附带了环境变量 DOCKER_HOST=...。 123456lzcbox-029c588e ~ # cat $(which pg-docker)#!/bin/bashset -eexport DOCKER_HOST=unix:///data/playground/docker.sockexec docker &quot;$@&quot; 这设置了 DOCKER_HOST 环境变量，使得之后执行的 docker 命令会连接到 /data/playground/docker.sock 这个 Unix Socket，而**不是默认的 /var/run/docker.sock**。 exec 是一个 shell 内建命令，它会用新的进程替换当前脚本的进程。 &quot;$@&quot; 表示把脚本接收到的所有参数（比如 pg-docker ps -a）原样传递给 docker 命令。 之前想上架一个 Docker 可视化工具用来，但是总不知道需要映射哪个 docker.sock，这下子全都清楚了，有了这个就能在 docker 里使用宿主机的 Docker API 了。 daemon.json 配置详解当然与之对应的还有 daemon.json,除了用来改代理之外，我们还能修改这些东西： 1234567891011121314151617lzcbox-029c588e /data/playground/data # cat /lzcsys/var/playground/daemon.json{ &quot;bridge&quot;: &quot;&quot;, &quot;containerd-namespace&quot;: &quot;playground-docker&quot;, &quot;containerd-plugins-namespace&quot;: &quot;playground-docker&quot;, &quot;data-root&quot;: &quot;/data/playground/data/docker&quot;, &quot;default-address-pools&quot;: [ ], &quot;exec-root&quot;: &quot;/data/playground/docker&quot;, &quot;hosts&quot;: [ &quot;unix:///data/playground/docker.sock&quot; ], &quot;insecure-registries&quot;: [ &quot;registry.lazycat.cloud&quot; ], &quot;pidfile&quot;: &quot;/data/playground/docker.pid&quot; 这样多个 Docker 环境就能共存了，例如： 系统默认的 /var/run/docker.sock 一个沙箱环境 /data/playground/docker.sock 这么设置好之后可以快速切换上下文，而不用每次都手动设置 DOCKER_HOST。 在我开发的容器可视化面板总，看到已经可以指定 docker sock 作为连接了,参考： 12345678services: containly: image: registry.lazycat.cloud/u04123229/cloudsmithy/containly:30e4e3279afe9a52 ports: - 5003:5000 volumes: - /data/playground/docker.sock:/var/run/docker.sock restart: unless-stopped 三套 daemon.json 对比分析从实际查找结果来看，懒猫为三套 Docker 引擎配置了不同的 daemon.json 文件和运行时环境： 系统组件专用（docker）：/etc/docker/daemon.json 用户 playground 环境（pg-docker）：/lzcsys/var/playground/daemon.json 懒猫商店环境（lzc-docker）：/lzcsys/etc/docker/daemon.json 123456789sudo find / -type f -name daemon.json 2&gt;/dev/null/etc/docker/daemon.json/run/lzcsys/boot/lzc-os-init/var/playground/daemon.json/run/lzcsys/boot/lzc-os-overlay/lowerdir/lzcsys/etc/docker/daemon.json/run/lzcsys/boot/lzc-os-overlay/lowerdir/lzcsys/lzcsys/etc/docker/daemon.json/lzcsys/etc/docker/daemon.json/lzcsys/var/playground/daemon.json 每个配置文件中都指定了独立的： data-root exec-root pidfile hosts（即 sock 文件路径） 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849# 默认的docker引擎lzcbox-029c588e ~ # cat /etc/docker/daemon.json{ &quot;registry-mirrors&quot;: [ ], &quot;insecure-registries&quot;: [ &quot;registry.lazycat.cloud&quot; ], &quot;log-driver&quot;: &quot;journald&quot;, &quot;cgroup-parent&quot;: &quot;sys_docker.slice&quot;}# 商店的docker引擎lzcbox-029c588e ~ # cat /lzcsys/etc/docker/daemon.json{ &quot;bridge&quot;: &quot;none&quot;, &quot;insecure-registries&quot;: [ &quot;registry.lazycat.cloud&quot; ], &quot;default-address-pools&quot;: [ ], &quot;ipv6&quot;: true, &quot;hosts&quot;: [ &quot;unix:///lzcsys/run/lzc-docker/docker.sock&quot; ], &quot;containerd-namespace&quot;: &quot;lzc-docker&quot;, &quot;containerd-plugins-namespace&quot;: &quot;lzc-docker-plugins&quot;, &quot;exec-root&quot;: &quot;/lzcsys/run/lzc-docker/docker&quot;, &quot;pidfile&quot;: &quot;/lzcsys/run/lzc-docker/docker.pid&quot;, &quot;data-root&quot;: &quot;/lzcsys/run/data/system/docker&quot;, &quot;cgroup-parent&quot;: &quot;lzc_docker.slice&quot;}# playground的docker引擎cat /lzcsys/var/playground/daemon.json{ &quot;bridge&quot;: &quot;&quot;, &quot;containerd-namespace&quot;: &quot;playground-docker&quot;, &quot;containerd-plugins-namespace&quot;: &quot;playground-docker&quot;, &quot;data-root&quot;: &quot;/data/playground/data/docker&quot;, &quot;default-address-pools&quot;: [], &quot;exec-root&quot;: &quot;/data/playground/docker&quot;, &quot;hosts&quot;: [ &quot;unix:///data/playground/docker.sock&quot; ], &quot;insecure-registries&quot;: [ &quot;registry.lazycat.cloud&quot; ], &quot;pidfile&quot;: &quot;/data/playground/docker.pid&quot; 小结懒猫微服总会给我惊讶，除了极客风格的外壳，性能突出的硬件外，里面的软件设计也同样优秀，这个设计让我对 docker 有了更加深刻的认识。 三套 docker 共存不是表面上的魔改，而是通过 containerd 的 namespace 配合脚本封装，在容器之上再抽象一层运行时，把 playground、系统和商店隔离成三界，却又共用一套内核，很好玩。","link":"%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E8%BF%9B%E9%98%B6%E5%BF%83%E5%BE%97%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E4%B8%80%E5%8F%B0%E6%9C%BA%E5%99%A8%E8%B7%91%E4%B8%89%E5%A5%97-docker%EF%BC%9F%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90%E6%87%92%E7%8C%AB%E5%AE%B9%E5%99%A8%E7%9A%84%E5%85%B1%E5%AD%98%E6%9C%BA%E5%88%B6%EF%BC%88%E4%B8%8A%EF%BC%89/"},{"title":"懒猫微服进阶心得（三）：一台机器跑三套 Docker？深入解析懒猫容器的共存机制（下）","text":"在上一期里，我们剖析了懒猫微服原生的三套 Docker 共存方案，这次我们来看看怎么在懒猫微服上启动新的 dev-docker 引擎，既能拓展使用，但又不与现有环境相互污染。 核心思路 独立 daemon.json 指定专属数据目录 / Socket 一个包装脚本 dev-docker 让你照常敲 docker 命令 需要时随时启用，不用时一条命令即卸载 目录规划我目前是在 root 目录下新建了一个 dev 目录，新的容器所有数据都在这个目录下。 123456.├── dev/│ ├── data/ # 镜像层、容器元数据│ ├── exec/ # 运行时文件│ └── daemon.json└── dev-docker # 包装脚本，照样敲 `docker` 提示：docker.sock、docker.pid 会在启动时自动生成到 dev/ 里。 生成 daemon.json这个是主要的文件，定义了 dev-docker 的数据目录，以及命名空间的隔离。 12345678910111213# 先拿到绝对路径，避免 dockerd 报相对路径错误DDIR=$(realpath ./dev)cat &gt; $DDIR/daemon.json &lt;&lt;EOF{ &quot;data-root&quot;: &quot;$DDIR/data&quot;, &quot;exec-root&quot;: &quot;$DDIR/exec&quot;, &quot;pidfile&quot;: &quot;$DDIR/docker.pid&quot;, &quot;hosts&quot;: [&quot;unix://$DDIR/docker.sock&quot;], &quot;containerd-namespace&quot;: &quot;dev-docker&quot;, &quot;containerd-plugins-namespace&quot;: &quot;dev-docker&quot;}EOF 启动 dev-docker 引擎使用 dockerd 指定配置文件启动 dev-docker，然后放在后台进行。 1sudo dockerd --config-file=$DDIR/daemon.json --log-level=info &amp; 执行之后得到如下的结果： 1234567INFO[2025-05-20T12:55:02.072949048Z] detected 127.0.0.53 nameserver, assuming systemd-resolved, so using resolv.conf: /run/systemd/resolve/resolv.confINFO[2025-05-20T12:55:02.157745008Z] Loading containers: start.INFO[2025-05-20T12:55:02.331021502Z] Default bridge (docker0) is assigned with an IP address 172.17.0.0/16. Daemon option --bip can be used to set a preferred IP addressINFO[2025-05-20T12:55:02.394567874Z] Loading containers: done.INFO[2025-05-20T12:55:02.413944743Z] Docker daemon commit=&quot;26.1.3-0ubuntu1~24.04.1&quot; containerd-snapshotter=false storage-driver=overlay2 version=26.1.3INFO[2025-05-20T12:55:02.414179613Z] Daemon has completed initializationINFO[2025-05-20T12:55:02.471933824Z] API listen on /home/ubuntu/ddd/dev/docker.sock 一个 dev-docker 包装脚本这个脚本就是仿照懒猫微幅其他的 docker 实现： 1234567cat &gt; ./dev-docker &lt;&lt;'EOF'#!/usr/bin/env bashexport DOCKER_HOST=unix://$(realpath ./dev/docker.sock)exec docker &quot;$@&quot;EOFchmod +x ./dev-docker 设定DOCKER_HOST=unix://$(realpath ./dev/docker.sock)，然后用 exec docker &quot;$@&quot; 把收到的全部参数原封不动交给真实的 docker 命令执行。 然后就可以正常使用了： 12./dev-docker ps./dev-docker run -d -p 8080:80 nginx 系统自带的 docker 仍在 /var/run/docker.sock 上工作，互不打扰。 将 dev-docker 放入全局 PATH如果想全局生效，运行下方命令。但注意：懒猫微服重启后 /usr/local/bin 会被还原。” 1sudo install -m 755 ./dev-docker /usr/local/bin/ 一键化脚本1234567891011121314151617181920212223242526272829#!/usr/bin/env bash# init-docker-dev.shset -emkdir devBASE=$(realpath &quot;./dev&quot;)mkdir -p &quot;$BASE&quot;/{data,exec}cat &gt; &quot;$BASE/daemon.json&quot; &lt;&lt;EOF{ &quot;data-root&quot;: &quot;$BASE/data&quot;, &quot;exec-root&quot;: &quot;$BASE/exec&quot;, &quot;pidfile&quot;: &quot;$BASE/docker.pid&quot;, &quot;hosts&quot;: [&quot;unix://$BASE/docker.sock&quot;], &quot;containerd-namespace&quot;: &quot;dev-docker&quot;, &quot;containerd-plugins-namespace&quot;: &quot;dev-docker&quot;}EOFdockerd --config-file=&quot;$BASE/daemon.json&quot; --log-level=info &amp;cat &gt; &quot;./dev-docker&quot; &lt;&lt;EOF#!/usr/bin/env bashexport DOCKER_HOST=unix://$BASE/docker.sockexec docker &quot;\\$@&quot;EOFchmod +x ./dev-dockerecho &quot;🎉 Dev Docker 已就绪，使用 ./dev-docker 访问！&quot; 启动脚本： 12chmod +x init-docker-dev.sh # 赋可执行权限（若脚本是下载的）./init-docker-dev.sh 运行完脚本后，后续就在当前目录直接敲 ./dev-docker &lt;command&gt; 即可；如果之前已将 dev-docker 安装到 PATH，全局也可以直接 dev-docker ps 脚本执行记录如下： 123456789🎉 Dev Docker 已就绪，使用 ./dev-docker 访问！ubuntu@ip-172-31-29-78:~$ INFO[2025-05-20T12:55:02.071795870Z] Starting upINFO[2025-05-20T12:55:02.072949048Z] detected 127.0.0.53 nameserver, assuming systemd-resolved, so using resolv.conf: /run/systemd/resolve/resolv.confINFO[2025-05-20T12:55:02.157745008Z] Loading containers: start.INFO[2025-05-20T12:55:02.331021502Z] Default bridge (docker0) is assigned with an IP address 172.17.0.0/16. Daemon option --bip can be used to set a preferred IP addressINFO[2025-05-20T12:55:02.394567874Z] Loading containers: done.INFO[2025-05-20T12:55:02.413944743Z] Docker daemon commit=&quot;26.1.3-0ubuntu1~24.04.1&quot; containerd-snapshotter=false storage-driver=overlay2 version=26.1.3INFO[2025-05-20T12:55:02.414179613Z] Daemon has completed initializationINFO[2025-05-20T12:55:02.471933824Z] API listen on /home/ubuntu/ddd/dev/docker.sock sudo ./dev-docker info查看信息： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253sudo ./dev-docker infoClient: Version: 26.1.3 Context: default Debug Mode: falseServer: Containers: 0 Running: 0 Paused: 0 Stopped: 0 Images: 0 Server Version: 26.1.3 Storage Driver: overlay2 Backing Filesystem: extfs Supports d_type: true Using metacopy: false Native Overlay Diff: true userxattr: false Logging Driver: json-file Cgroup Driver: systemd Cgroup Version: 2 Plugins: Volume: local Network: bridge host ipvlan macvlan null overlay Log: awslogs fluentd gcplogs gelf journald json-file local splunk syslog Swarm: inactive Runtimes: io.containerd.runc.v2 runc Default Runtime: runc Init Binary: docker-init containerd version: runc version: init version: Security Options: apparmor seccomp Profile: builtin cgroupns Kernel Version: 6.8.0-1024-aws Operating System: Ubuntu 24.04.2 LTS OSType: linux Architecture: aarch64 CPUs: 2 Total Memory: 1.8GiB Name: ip-172-31-29-78 ID: b6f661de-2099-4b23-aff8-1a55e35833d9 Docker Root Dir: /home/ubuntu/ddd/dev/data Debug Mode: false Experimental: false Insecure Registries: 127.0.0.0/8 Live Restore Enabled: false ./dev-docker pull ubuntu 下载 images： 1234567ubuntu@ip-172-31-29-78:~$ sudo ./dev-docker pull ubuntuUsing default tag: latestlatest: Pulling from library/ubuntu2f074dc76c5d: Pull completeDigest: sha256:6015f66923d7afbc53558d7ccffd325d43b4e249f41a6e93eef074c9505d2233Status: Downloaded newer image for ubuntu:latestdocker.io/library/ubuntu:latest 检查 docker 版本： 12345ubuntu@ip-172-31-29-78:~$ dev-docker --versionDocker version 26.1.3, build 26.1.3-0ubuntu1~24.04.1ubuntu@ip-172-31-29-78:~$ docker --versionDocker version 26.1.3, build 26.1.3-0ubuntu1~24.04.1 不使用的时候如何卸载？办法 1: ps aux | grep dockerd 查看 docker 进程的 PID 号，然后删除1234567891011121314151617ps aux | grep dockerdroot 470 0.8 0.3 2653088 100248 ? Ssl 07:42 0:11 /usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sockroot 2226 6.6 0.6 7246472 227108 ? Ssl 07:42 1:37 /usr/bin/dockerd --config-file /lzcsys/etc/docker/daemon.jsonroot 27520 0.0 0.2 2874220 90788 ? Ssl 07:46 0:00 /usr/bin/dockerd --config-file /lzcsys/var/playground/daemon.jsonroot 127241 0.5 0.2 2636632 92720 pts/1 Sl 07:52 0:04 dockerd --config-file=/root/dev/daemon.json --log-level=inforoot 405552 0.0 0.0 3748 2048 pts/1 S+ 08:06 0:00 grep --colour=auto dockerd---lzcbox-029c588e ~ # kill -15 127241lzcbox-029c588e ~ # INFO[2025-05-21T08:10:58.184799932+08:00] Processing signal 'terminated'INFO[2025-05-21T08:10:58.198235413+08:00] stopping event stream following graceful shutdown error=&quot;&lt;nil&gt;&quot; module=libcontainerd namespace=dev-dockerINFO[2025-05-21T08:10:58.203590577+08:00] Daemon shutdown complete---lzcbox-029c588e ~ # ps aux | grep dockerdroot 470 0.7 0.3 2653088 100212 ? Ssl 07:42 0:13 /usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sockroot 2226 7.8 0.7 7246472 233080 ? Ssl 07:42 2:18 /usr/bin/dockerd --config-file /lzcsys/etc/docker/daemon.jsonroot 27520 0.0 0.2 2874220 92644 ? Ssl 07:46 0:00 /usr/bin/dockerd --config-file /lzcsys/var/playground/daemon.jsonroot 568622 0.0 0.0 3748 2048 pts/1 S+ 08:11 0:00 grep --colour=auto dockerd 办法 2: pkill -f ‘./dev/daemon.json’ 指定文件删除：1234567891011pkill -f './dev/daemon.json'INFO[2025-05-21T08:14:06.721816466+08:00] Processing signal 'terminated'lzcbox-029c588e ~ # INFO[2025-05-21T08:14:06.728822927+08:00] stopping event stream following graceful shutdown error=&quot;&lt;nil&gt;&quot; module=libcontainerd namespace=dev-dockerINFO[2025-05-21T08:14:06.734923834+08:00] Daemon shutdown complete[1]+ Done dockerd --config-file=&quot;./dev/daemon.json&quot; --log-level=infolzcbox-029c588e ~ # ps aux | grep dockerdroot 470 0.7 0.3 2653088 100340 ? Ssl 07:42 0:14 /usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sockroot 2226 8.3 0.7 7246472 234356 ? Ssl 07:42 2:41 /usr/bin/dockerd --config-file /lzcsys/etc/docker/daemon.jsonroot 27520 0.0 0.2 2874220 92500 ? Ssl 07:46 0:01 /usr/bin/dockerd --config-file /lzcsys/var/playground/daemon.jsonroot 663902 0.0 0.0 3748 1792 pts/1 S+ 08:14 0:00 grep --colour=auto dockerd 清除数据 12rm -rf ./dev # 删数据目录sudo rm -f /usr/local/bin/dev-docker # 若装过 PATH 最后再多一套 Docker，不是为了炫技，而是给开发或者测试环境一个“随时可重置、天然隔离、低成本回收”的保险箱。学会这一招，你就能在懒猫微服乃至任何 Linux 服务器上，放心大胆地尝鲜新内核、新 runtime，甚至复刻生产 bug —— 然后一句 pkill + rm -rf dev/，世界瞬间清爽如初。祝玩得尽兴！","link":"%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E8%BF%9B%E9%98%B6%E5%BF%83%E5%BE%97%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E4%B8%80%E5%8F%B0%E6%9C%BA%E5%99%A8%E8%B7%91%E4%B8%89%E5%A5%97-docker%EF%BC%9F%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90%E6%87%92%E7%8C%AB%E5%AE%B9%E5%99%A8%E7%9A%84%E5%85%B1%E5%AD%98%E6%9C%BA%E5%88%B6%EF%BC%88%E4%B8%8B%EF%BC%89/"},{"title":"懒猫微服进阶心得（四）：每次重启都丢配置？用 systemctl --user 自动装回环境！","text":"在懒猫微服中，为了防止用户误操作破坏系统，默认启用了“重启还原机制”——每次重启都会还原大部分系统改动。不过，用户主目录的数据是保留的（例如 /root/），这就给我们留下了一条生路。 以往每次重启后，我都要手动重新安装 htop、sudo、httpie 等工具，重复操作实在麻烦。之前在 VIP 群里沟通过能否允许使用 systemctl 自启脚本，现在终于支持了 systemctl --user 的开机启动功能，第一时间来体验一下！ 💻 安装脚本 init.sh我们把需要安装的软件统一写进一个脚本，只安装未安装的部分，避免重复浪费时间。同时也支持远程安装一些工具，例如 superfile。 1234567891011121314151617181920212223242526272829303132333435363738#!/usr/bin/env bashset -e # 任意步骤失败立即终止PACKAGES=( sudo htop wget build-essential httpie exa duf bat # 可以继续添加：docker.io nodejs ...)need_install=()for pkg in &quot;${PACKAGES[@]}&quot;; do if ! dpkg -s &quot;$pkg&quot; &amp;&gt;/dev/null; then need_install+=(&quot;$pkg&quot;) fidoneif (( ${#need_install[@]} )); then echo &quot;==&gt; Installing: ${need_install[*]}&quot; apt-get update DEBIAN_FRONTEND=noninteractive apt-get install -y &quot;${need_install[@]}&quot;else echo &quot;==&gt; All packages already installed.&quot;fi# 安装 Superfile 工具if command -v curl &amp;&gt;/dev/null; then echo &quot;==&gt; Installing Superfile (from https://superfile.netlify.app)&quot; bash -c &quot;$(curl -sLo- https://superfile.netlify.app/install.sh)&quot;else echo &quot;❌ curl not found, skipping Superfile install&quot;fi 你可以把这个脚本保存为 /root/init.sh（懒猫微服会保留这个路径），并赋予执行权限： 1chmod +x /root/init.sh ⚙ systemd 用户服务配置由于懒猫微服现在支持 systemctl --user，我们就可以通过用户级 systemd 服务在登录后自动执行该脚本。 在 ~/.config/systemd/user/ 目录下创建服务文件： 12mkdir -p ~/.config/systemd/uservim ~/.config/systemd/user/bootstrap-packages.service 内容如下： 1234567891011[Unit]Description=Bootstrap Required Packages[Service]Type=oneshot # 关键修改！表示一次性任务ExecStart=/root/init.shRemainAfterExit=yes # 任务完成后仍标记为 &quot;active&quot;（可选）# Restart=no # 默认就是 no，可省略[Install]WantedBy=default.target 注意事项： ExecStart 使用 /root/init.sh 是因为懒猫微服重启不会清空 root 目录； 这是一个 oneshot（一次性任务），运行完就退出； default.target 是用户级别的“登录后启动”目标。 🧪 启用和调试服务配置好之后，使用以下命令启动并设置自动运行： 1234systemctl --user daemon-reload # 重新加载用户服务配置systemctl --user start bootstrap-packages.service # 手动运行一次（测试用）systemctl --user status bootstrap-packages.service # 查看服务状态和日志systemctl --user enable bootstrap-packages.service # 设置登录后自动运行 示例运行结果：12systemctl --user start bootstrap-packages.servicesystemctl --user status bootstrap-packages.service 输出如下： 123456789101112○ bootstrap-packages.service - Bootstrap Required Packages Loaded: loaded (/root/.config/systemd/user/bootstrap-packages.service; enabled; preset: enabled) Active: inactive (dead) since Thu 2025-05-29 20:13:58 CST; 941ms ago Duration: 6.438s Process: 142818 ExecStart=/root/init.sh (code=exited, status=0/SUCCESS) Main PID: 142818 (code=exited, status=0/SUCCESS) CPU: 350msMay 29 20:13:53 lzcbox-029c588e init.sh[142926]: Downloading superfile v1.3.1 for linux (amd64)...May 29 20:13:58 lzcbox-029c588e init.sh[142926]: Installing superfile...May 29 20:13:58 lzcbox-029c588e init.sh[142926]: 🎉 Installation complete!May 29 20:13:58 lzcbox-029c588e init.sh[142926]: You can type &quot;spf&quot; to start! 图示效果如下（安装过程中终端自动拉起）： 🚀 小结 步骤 命令 设置 systemd 服务 vim ~/.config/systemd/user/bootstrap-packages.service 测试运行 systemctl --user start bootstrap-packages.service 设置登录自启 systemctl --user enable bootstrap-packages.service 查看运行状态 systemctl --user status bootstrap-packages.service 搭配懒猫微服的 root 持久策略和 systemd 用户服务功能，我们终于实现了：重启自动恢复开发环境，不用每次手动装包了！","link":"%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E8%BF%9B%E9%98%B6%E5%BF%83%E5%BE%97%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E6%AF%8F%E6%AC%A1%E9%87%8D%E5%90%AF%E9%83%BD%E4%B8%A2%E9%85%8D%E7%BD%AE%EF%BC%9F%E7%94%A8-systemctl-user-%E8%87%AA%E5%8A%A8%E8%A3%85%E5%9B%9E%E7%8E%AF%E5%A2%83%EF%BC%81/"},{"title":"懒猫微服进阶心得（五）：使用懒猫微服做Ventoy启动盘","text":"由于经常给别人装系统，所以经常做了一个多合一的系统盘。这今年基本都没用过 windows 了，都是 MacOS + Linux 的组合。但是 Ventoy 本身不支持 MacOS，以前是用 Windows 虚拟机来做这个事情，把 USB 直通进去再烧录。但是最近实在不想碰 Windows，所以想着是不是能在懒猫微服上做这个操作。 下载并解压 Ventoy1234wget https://github.com/ventoy/Ventoy/releases/download/v1.1.05/ventoy-1.1.05-linux.tar.gztar zxvf ventoy-1.1.05-linux.tar.gzcd ventoy-1.1.05/./VentoyWeb.sh 这个默认是启动在 localhost，如果需要外网访问改成 0.0.0.0，运行 ./VentoyWeb.sh 后，你会看到如下提示： 12345678./VentoyWeb.sh=============================================================== Ventoy Server 1.1.05 is running ... Please open your browser and visit http://127.0.0.1:24680===============================================================################## Press Ctrl + C to exit ##################### 翻了翻脚本，是在这里改。 因为我本地通过 dig 解析懒猫微服的域名是 IPV6，所以没办法直接访问,于是我通过 SSH 创建一个本地端口转发（Local Port Forwarding）隧道： 1ssh -N -L 24680:127.0.0.1:24680 root@lzc ssh: 启动 SSH 客户端。 -N: 不执行远程命令，仅用于端口转发（即登录后不打开 shell）。 -L 24680:127.0.0.1:24680: 本地端口转发规则，格式为 本地端口:远程地址:远程端口。解释如下： 24680: 本地监听的端口（你访问 localhost:24680 时会触发转发）。 127.0.0.1: 这是 SSH 远程主机上的地址，指代远程主机自己。 24680: 最终目标端口。 root@lzc: 使用 root 用户连接名为 lzc 的主机（可以是域名或 /etc/hosts 里配置的别名）。 当本地访问 localhost:24680，会通过 SSH 加密通道转发到远程主机 lzc 上的 127.0.0.1:24680，就像直接在远程主机上访问一样。 这个就是 Ventoy 的页面了，由于默认懒猫没有 GUI，所以没办法使用类似 windows 那种客户端，还好 Venoty 提供了一个 web 端可以用来玩。 点击右侧的绿色， 接着 Ventoy 会再确认一次是否格式化设备，务必确认盘符无误，这一步会清空整盘数据，后期可以无损升级。 写盘成功的提示，后期只需要把 ISO 直接拖拽进来。 小结 懒猫微服 + Ventoy Web 是制作多合一启动盘的 “无桌面” 优雅方案。 通过 SSH 端口转发，可在不暴露服务的情况下安全地使用 Web 界面。 写盘后只需拖拽 ISO，后续增删镜像都无需重新格式化。","link":"%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E8%BF%9B%E9%98%B6%E5%BF%83%E5%BE%97%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E4%BD%BF%E7%94%A8%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%81%9Aventoy%E5%90%AF%E5%8A%A8%E7%9B%98/"},{"title":"懒猫的镜像仓库","text":"这几年国内访问 Dockerhub 总有类似的问题，所以很多情况都建议自建 docker 仓库，比如 Habor，Nexus 或者。毕竟 GFW 的花样我们想不到。 云厂商的 ECR。但是对于个人玩家或者爱好者来说这一套实在是太重太难以维护了，可能也就是这个原因，懒猫微服也提供了镜像仓库的和本地仓库的功能。 先说镜像仓库，就是从懒猫微服的服务器上先拉 Docker image，然后再推到自己的 registry。这一步骤通常由出海链路比较好的机器来完成。 懒猫镜像同步功能懒猫提供了便捷的镜像同步命令： 1lzc-cli appstore copy-image cloudsmithy/lazycat-nav 执行之后就可以看到镜像仓库，registry.lazycat.cloud 这个地址。 重要说明：这个地址只能在微服环境中使用，如果在其他地方使用会出现认证错误： 12docker pull registry.lazycat.cloud/u04123229/cloudsmithy/lazycat-nav:854b14e73ab0726eError response from daemon: Head &quot;https://registry.lazycat.cloud/v2/u04123229/cloudsmithy/lazycat-nav/manifests/854b14e73ab0726e&quot;: no basic auth credentials 其实就一个加了认证的 registry，只是微服有凭证可以直接进。 内置 Docker Registry V2懒猫微服内置了一个简化版的 registry，完整使用流程如下： 1234567891011121314# 构建x86架构镜像docker build --platform linux/amd64 -t helloworld:latest .# 获取当前微服名称BOXNAME=$(lzc-cli box default)# 为镜像打上仓库标签docker tag helloworld:latest dev.$BOXNAME.heiyu.space/helloworld:latest# 推送镜像到仓库docker push dev.$BOXNAME.heiyu.space/helloworld:latest# 从仓库拉取镜像docker pull dev.$BOXNAME.heiyu.space/helloworld:latest 实际操作演示： 在 M2 芯片设备上的构建过程： 在 Orbstack 上拉取验证（先删除本地镜像再拉取）： 通过 API 查看镜像列表： 这个简单版本的 docker registry v2，后面用来做跑 CI 的镜像仓库应该是够了。 插曲：如果遇到这个问题，千万别信 AI 是 buildX 坏了，就是中文路径的问题。（AI 查一小时。Google 一分钟） 1docker-container:multiarchERROR: failed to dial gRPC: rpc error: code = Internal desc = rpc error: code= Internal desc =header key&quot;x-docker-expose-session-sharedkey&quot; contains value with non-printable ASCII characters","link":"%E6%87%92%E7%8C%AB%E7%9A%84%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93/"},{"title":"懒猫微服进阶心得（六）：以纸砚双拼为例，快速移植纯前端项目到懒猫微服","text":"之前移植了一款颜值极高的纸砚双拼，想着纯前端类的软件应该都是一样的操作，所以把操作记录下来，方便以后复习查看，也相当于一个教程吧。 对于这种场景来说，前端项目开发完成后，我们将构建好的静态页面部署到服务器上。借助 Docker 和 Nginx，可以实现一套轻量、快速、可移植的部署方式，特别适合懒猫微服这种容器化的环境，也很适合日常调试测试使用。 下面将手把手教你如何打包一个 Vue 或 React 项目，并通过 Docker + Nginx 构建一个可复用的前端部署容器镜像，然后就可以把这个部署到懒猫微服删，当然也适用于各种 Linux + Docker 环境。 1 · 准备目录结构纸砚双拼是 Vue 的项目，所以直接执行这个命令打包 12npm inpm run build 打包完成后，项目根目录下会生成一个 dist/ 文件夹，里面包含： index.html 静态 JS、CSS 资源 图片等其他引用资源 基本所有前端工程化的流程都是部署这个 dist/静态目录。 在开始容器化之前，我们先来整理一下项目结构。 12345my-static-site/├── dist/ # 前端打包后的静态资源目录├── nginx.conf # Nginx 配置文件├── Dockerfile # Docker 构建文件└── docker-compose.yml # docker-compose 管理配置（可选） 主要就是把 dist/ 目录映射到 Nginx 的根目录。 .dockerignore（防止把 node_modules 等大文件复制进镜像）项目根目录建议加个 .dockerignore 文件，防止无用文件进入镜像、浪费空间： 12345node_modules.git.vscode*.logdist 这里的 dist 虽然是构建产物，但因为我们用的是双阶段构建，会在容器里重新生成，不需要提前放入。 2 · Dockerfile（双阶段构建：先构建，再用 Nginx 托管）我们采用双阶段构建方案，能够最大限度减小最终镜像体积，只包含运行时必须的内容。 12345678910111213141516171819202122232425262728293031# 构建阶段FROM node:18-alpine AS buildWORKDIR /app# 复制package.json和package-lock.jsonCOPY package*.json ./# 安装依赖 - 使用npm install代替npm ciRUN npm install# 复制源代码COPY . .# 构建应用RUN npm run build# 生产阶段FROM nginx:alpine# 复制构建产物到nginx目录COPY --from=build /app/build /usr/share/nginx/html# 复制nginx配置COPY nginx.conf /etc/nginx/conf.d/default.conf# 暴露80端口EXPOSE 80# 启动nginxCMD [&quot;nginx&quot;, &quot;-g&quot;, &quot;daemon off;&quot;] 使用 node:alpine 和 nginx:alpine 轻量镜像，构建出来的镜像体积非常小 分阶段构建，确保生产镜像中没有多余文件 nginx.conf（自定义 Nginx 配置）Nginx 配置文件如下： 123456789101112131415161718192021222324252627server { listen 80; server_name localhost; location / { root /usr/share/nginx/html; index index.html index.htm; try_files $uri $uri/ /index.html; } # 禁止缓存 index.html，确保始终获取最新版本（避免缓存导致更新不生效） location = /index.html { root /usr/share/nginx/html; add_header Cache-Control &quot;no-store, no-cache, must-revalidate&quot;; } # 静态资源缓存设置 location ~* \\.(js|css|png|jpg|jpeg|gif|ico|svg)$ { root /usr/share/nginx/html; expires 1d; } error_page 500 502 503 504 /50x.html; location = /50x.html { root /usr/share/nginx/html; }} 3 · 构建与部署3.1 本地构建测试执行以下命令构建镜像并启动： 12docker build -t my-frontend .docker run -p 8080:80 my-frontend 打开浏览器访问 http://localhost:8080，确认页面正常显示。如果用的是懒猫微服，可通过它的 web 浏览器或 ssh 转发方式访问容器。 3.2 可选使用 docker-compose如果本地调试可以使用 12345678910version: &quot;3&quot;services: cors-tester: build: context: . dockerfile: Dockerfile ports: - &quot;80:80&quot; restart: unless-stopped 之前打包踩的坑打包多了之后 Docker 会积累不少旧镜像、缓存和挂载卷，下面这些命令能够清理磁盘空间： 使用 pg-docker 或者 lzc-docker 来替代 强制无缓存构建镜像1docker compose build --no-cache 不使用任何缓存，适合依赖变动或调试构建问题时使用。 📦 查看磁盘空间占用详情1docker system df -v 查看镜像、容器、网络和卷的占用情况，排查“空间去哪了”。 🧹 强制清理所有未使用资源（含挂载卷）1docker system prune -af --volumes 删除所有未使用的镜像、容器、网络和卷，释放最大磁盘空间。注意：慎用，可能会清掉你没保存的 volume 数据。","link":"%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E8%BF%9B%E9%98%B6%E5%BF%83%E5%BE%97%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9A%E4%BB%A5%E7%BA%B8%E7%A0%9A%E5%8F%8C%E6%8B%BC%E4%B8%BA%E4%BE%8B%EF%BC%8C%E5%BF%AB%E9%80%9F%E7%A7%BB%E6%A4%8D%E7%BA%AF%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E5%88%B0%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"},{"title":"懒猫微服进阶心得（八）：如何在 ARM 机器上下载并运行X86镜像以及在X86上运行ARM镜像","text":"之前写好应用做好镜像想扔到懒猫微服上打包，都是先使用 buildx 打包双架构镜像，push 到 dockerhub 上，然后再用微服的 copy image 转成国内的镜像地址，这过程很麻烦。 因为在 Apple Silicon（如 M1/M2 芯片）设备上，默认运行的是 ARM 架构镜像（linux/arm64）。但有些镜像或依赖只支持 X86（linux/amd64）架构。 本文将介绍如何在 ARM 设备上拉取并运行 X86 镜像，以及如何保存和加载镜像。 🐳 拉取 X86 架构的 Docker 镜像使用 --platform=amd64 参数即可拉取 X86 架构镜像： 1docker pull --platform=amd64 nginx:latest docker pull：从远程仓库拉取镜像 --platform=amd64：显式指定拉取 x86_64 架构的镜像 nginx:latest：镜像名与标签 适用于在 M 系列 Mac 上使用 X86 镜像进行兼容性测试或运行仅支持 x86 的应用。 🔍 验证镜像的架构信息拉取完成后，可通过以下命令确认镜像架构： 1docker image inspect nginx:latest --format '{{.Os}}/{{.Architecture}}' 示例输出（成功拉取 X86 架构）： 1linux/amd64 ⚠️ 遇到的运行报错分析执行以下命令尝试运行时： 1docker run --rm -it --platform=amd64 nginx:latest 可能会出现如下错误： 1docker: Error response from daemon: image with reference nginx:latest was found but its platform (linux/amd64) does not match the specified platform (darwin/amd64) 📌 错误原因解析：Docker 镜像是 基于 Linux 内核 的容器运行时，不支持 darwin/amd64 平台。你应显式指定目标平台为： 1--platform=linux/amd64 ✅ 正确命令：1docker run --rm -it --platform=linux/amd64 nginx:latest 此时 Docker Desktop 会自动调用 qemu 进行跨架构模拟（无需额外配置），即在 ARM Mac 上模拟运行 X86 容器。 📦 Docker 镜像的保存与加载Docker 提供 save 和 load 命令，支持将镜像打包导出为文件，便于备份或跨设备迁移。 ✅ 1. 保存镜像为 .tar 文件1docker save -o nginx-amd64.tar nginx:latest -o nginx-amd64.tar：导出的文件名 nginx:latest：指定要导出的镜像标签 也可以一次保存多个镜像： 1docker save -o images.tar nginx:latest redis:alpine ✅ 2. 加载 .tar 镜像文件使用 SCP 或者 FTP 传到懒猫微服上，使用以下命令导入： 1docker load -i nginx-amd64.tar 导入成功后镜像将出现在 docker images 列表中。 ✅ 3. 跨架构导入运行示例如果你从懒猫微服上保存了镜像（如 linux/amd64 的 nginx），在 ARM Mac 上可通过以下方式运行： 1docker run --rm -it --platform=linux/amd64 nginx:latest ✅ 4. 导出为压缩文件（可选）压缩后更便于传输： 1docker save nginx:latest | gzip &gt; nginx.tar.gz 解压并导入： 1gunzip -c nginx.tar.gz | docker load 📝 小结 操作 命令 拉取 X86 镜像 docker pull --platform=amd64 nginx:latest 运行 X86 镜像 docker run --rm -it --platform=linux/amd64 nginx:latest 保存镜像 docker save -o nginx.tar nginx:latest 加载镜像 docker load -i nginx.tar 如果是在 懒猫微服 运行 ARM 镜像呢？ ✅ 拉取 ARM 架构镜像（在 X86 主机上）1docker pull --platform=linux/arm64 nginx:latest 或简写为： 1docker pull --platform=arm64 nginx:latest 这会拉取适用于 linux/arm64 的 nginx 镜像（即 ARM 设备如 Raspberry Pi 或 Apple Silicon 可运行的版本）。 ✅ 运行 ARM 镜像（在 X86 上）1docker run --rm -it --platform=linux/arm64 nginx:latest Docker Desktop 会通过内置的 QEMU 模拟 ARM 架构运行该容器。 ⚠️ 前提是你的 Docker 环境启用了 QEMU 多平台支持（默认大多数 Docker Desktop 安装都已经启用）。 ✅ 验证运行中的容器架构方案一：确认 QEMU 是否已配置（X86 主机想运行 ARM 镜像）如果你在 Intel / X86 主机上运行 –platform=linux/arm64，需要先启用跨架构支持： 1docker run --rm --privileged multiarch/qemu-user-static --reset -p yes 进入容器执行： 1uname -m 输出应为： 1aarch64 说明该容器运行在 ARM 架构上。 如果遇到：exec /docker-entrypoint.sh: exec format error意味着：你尝试在一个 与镜像架构不匹配的主机或模拟环境中运行该镜像，导致容器入口脚本无法被执行。 目标架构 --platform 参数 常见用途 X86 (Intel/AMD) linux/amd64 默认平台，大多数镜像的标准版本 ARM (如 M1/M2/Raspberry Pi) linux/arm64 在 Apple Silicon 上或嵌入式设备运行 在 X86 上模拟 ARM --platform=linux/arm64 跨架构测试、兼容性验证","link":"%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E8%BF%9B%E9%98%B6%E5%BF%83%E5%BE%97%EF%BC%88%E5%85%AB%EF%BC%89%EF%BC%9A%E5%A6%82%E4%BD%95%E5%9C%A8-arm-%E6%9C%BA%E5%99%A8%E4%B8%8A%E4%B8%8B%E8%BD%BD%E5%B9%B6%E8%BF%90%E8%A1%8Cx86%E9%95%9C%E5%83%8F%E4%BB%A5%E5%8F%8A%E5%9C%A8x86%E4%B8%8A%E8%BF%90%E8%A1%8Carm%E9%95%9C%E5%83%8F/"},{"title":"懒猫微服进阶心得（九）：商店 App 如何接管 Docker 引擎？","text":"在之前的内容中，我们提到过懒猫微服采用三套独立的 Docker 环境来隔离系统组件、Playground Docker 与商店 App 的 Docker 实例。那么问题来了：如何让商店中上架的 App 操作 Playground 中的 Docker 引擎？ 答案是：通过挂载 docker.sock 文件来实现跨容器控制。 所以我们可以在商店的 APP 中操作 playground docker，其实也就是 Docker 面板或者轻量 Docker 面板做的事情。 为什么不操作其他两个 Docker 引擎？ 系统组件 Docker 无需干预，重启之后可以复原。 应用商店有自己的生命周期，也无需干预。 一、在 build.yml 中挂载 Playground 路径首先，在打包配置 build.yml 中新增 services 字段，用于将宿主机中的 /data/playground 挂载到容器内部： 12345678910111213manifest: ./lzc-manifest.ymlpkgout: ./icon: ./logo.pngservices: containly: volumes: - bind: create_host_path: true source: /data/playground target: /lzcapp/run/playground type: bind 打包后会生成一个名为 compose.override.yml 的文件。请注意：即使你手动创建了 compose.override.yml，也可能无法直接生效，必须通过打包流程自动生成。（此结论基于初步测试） 生成后的 compose.override.yml 内容如下： 12345678services: containly: volumes: - bind: create_host_path: true source: /data/playground target: /lzcapp/run/playground type: bind 二、修改 manifest.yml 实现 docker.sock 映射为了让上架 App 操作 Docker，需要手动编辑 manifest.yml 文件，添加以下内容： 12345binds: - /lzcapp/run/playground/docker.sock:/var/run/docker.sockenvironment: - DOCKGE_STACKS_DIR=/lzcapp/var/stacks - DOCKER_HOST=unix:///lzcapp/run/playground/docker.sock 这样，容器内的 Docker CLI 或管理面板就可以通过 DOCKER_HOST 环境变量，控制宿主机的 Docker 引擎。 三、完整的 manifest.yml 示例以下是完整可运行的 manifest.yml 配置： 1234567891011121314151617181920212223242526272829303132lzc-sdk-version: 0.1package: xu.deploy.containlyversion: 0.0.2name: Containlydescription: &gt;- A fancy, easy-to-use and reactive self-hosted docker compose.yaml stack-oriented manager.license: https://choosealicense.com/licenses/mit/homepage: https://github.com/cloudsmithy/Containlyauthor: xuusage: &gt;- 安装完成后，请重启懒猫微服以启用 Docker。 此应用将接管懒猫微服的独立 Docker 守护进程，可能存在安全风险。在授予容器 privileged 等权限之前，请确保容器是安全的，且不会执行危险操作。为了避免潜在风险，请确保： 1. 您了解容器的行为，并确认它们来自可信的源。 2. 容器中没有运行高危命令，且没有暴露不必要的端口或服务。 建议先查阅懒猫微服开发者手册，了解相关特性和限制，并根据手册中的安全建议配置容器。application: subdomain: containly routes: - /=http://containly.xu.deploy.containly.lzcapp:5000/services: containly: image: registry.lazycat.cloud/u04123229/cloudsmithy/containly:896f4251373d0ebe binds: - /lzcapp/run/playground/docker.sock:/var/run/docker.sock environment: - DOCKGE_STACKS_DIR=/lzcapp/var/stacks - DOCKER_HOST=unix:///lzcapp/run/playground/docker.sock 四、总结通过挂载 docker.sock 文件和设置 DOCKER_HOST，我们可以让商店上架的 App 控制懒猫微服的 Playground Docker 实例。我用这个功能上架了自己写的 Docker 面板，一起来玩一玩嘛？","link":"%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E8%BF%9B%E9%98%B6%E5%BF%83%E5%BE%97%EF%BC%88%E4%B9%9D%EF%BC%89%EF%BC%9A%E5%95%86%E5%BA%97-app-%E5%A6%82%E4%BD%95%E6%8E%A5%E7%AE%A1-docker-%E5%BC%95%E6%93%8E%EF%BC%9F/"},{"title":"办公外设篇","text":"电脑外设40G硬盘盒盒雷电线 Niz键盘 电脑Mac随航 intel 12代CPU 手机,路由以及其他小米8刷魔趣 以前的智能家居,软路由和原生安卓 出远门带的电子产品 打印机改无线 小米4A刷OpenWrt 小米Ax5400双宽带叠加 软件多平台日程同步 电工网工电工网工工具集锦","link":"%E5%8A%9E%E5%85%AC%E5%A4%96%E8%AE%BE%E7%AF%87/"},{"title":"北京租房心得","text":"房屋选择 刚毕业租房是40平米的公寓，实际也有30平，租金是全部的实习工资。学校蜗居够了，不想再委屈自己。来北京就只能合租了，一般中介都会虚标房间大小和朝向，还是得实际去看房。看房子的话，心理先有个预期，如果没有心仪的房子怎么样。如果是地下室或者一楼性价比再高也不要去看了，尽量租新一点和治安好的房子，北京老破小太多了。看了没相中只会浪费时间。职场人首先要活的体面一点。 不要觉得房子只是一个睡觉的地方，起码的生活设施要有：稳定的水电网，燃气和隔音(手机有很多app可以测试分贝，大于60的房子就不要选择了)。而且疫情影响居家办公已经是家常便饭了。贵点不怕，总之还是要让自己觉得舒服。 朝向： 南&gt;东&gt;西&gt;北 如果不是实在差钱的话，还是建议住在公司附近或者通勤方便的地方，很多人说单程一个半到两个小时。五环以外都是村里了，基础设施和人文设施和市里完全没有办法比，为了省心的话，还是住在繁华地带，毕竟一边工作也要一边生活，不然去市里总有村里孩子进城的感觉。二来北京可以玩的地方很多，地铁站附近去市中心也就半个小时。通勤要算往返时间，尽量减少换乘的等车时间，单程半个小时往返就是一个小时。能坐地铁不要坐公交，人多很挤，乘务员人工报站，还要维持车内秩序，没有降噪耳机的天花板建议慎选公交通勤，无听之于耳很难，很消耗精力。就算下班晚，23点左右公交都没有座位。另外北京有共享单车，可以选择单车+地铁混合交通，单车会员每个月15左右。 不建议极端天气去看房，会漏调一些点。一定找不要临街的房子，五环以为打车没有管制，窗外24H大车通行。 租房好物第一条，选择搬家好搬且轻量的东西，买之前想好搬家怎么处理。然后才是其他，同城搬家可以无视，因为有某拉拉这些，百元以内师傅给搬(非广告，遇到的师傅可以，但是app做的很差，客服跟僵尸一样)。毕竟北京房租高，自己买点小玩意跟房租比根本微不足道，就任性的买买买吧，毕竟以后结婚了就不一定有机会了。(最近看中了一套设备10W+， NUC12飞龙峡谷和M1 Ultra双机双显示器，apple官网推荐的屏幕) 工作效率物品（电脑和显示器台灯）现在基本都离不开电脑，有大桌子的买大显示器，否则就15.6便携屏（typec一线通），还能带去图书馆。建议双屏或者带鱼屏，幸福指数提升很高，MacOS用户可以用slide bar，win用户用duet都可以把ipad当作拓展屏。建议显示器预算2000左右，分辨率4K@60HZ。现在轻薄本也性能炸裂了，没必要买大机箱，台式机的话Macmini和NUC，APU都是不错的选择。 关于机械键盘，如果你的房租隔音好，放心用青轴和茶轴，万一被听见，还能给人留下半夜认真写代码的印象。 嗯，夜深人静的时候一定要选一个暖黄色的灯光，会觉得柔和放松。 还有，多备用几个插排，自己备个路由器，防止别人在公用路由看见你的设备和智能家居。 生活用品大型洗衣机（4L左右）：自从在学校看见有人用公共洗衣机洗鞋，再也不用这玩意了。某鱼，某宝，某东500以下能买到很好的。（个人觉得别人买的洗衣机最多值200） 内衣洗衣机： 懒癌晚期，不想手洗，还有内衣洗衣液。 洗鞋机： 因人而已。 便携式烘干机： 如果不是朝南建议入手一个。 消毒酒精：家中常备，可以买个自动喷酒精的机器 降噪耳机： 2000左右买个降噪耳机绝对值得，就当投资自己吧，开降噪听着音乐假装进入元宇宙。 厨具：单身贵族不推荐了，能清水煮就行了。毕竟打折券很多，北京很多美食羊毛可以薅。豆浆机是个bug，大的豆浆机一个人喝不完，小的费半天劲就一杯还得浪费时间清洗。 灯具：自己可以换个好的搬家拆下带走，如果中介免费给换就更好了。 窗帘： 自己可以换个好的搬家拆下带走，没必要买自动电机。 拖布和苕帚：自己屋里备一个吧。 垃圾桶和垃圾袋： 不多说。 床上小桌子：不知道为啥不给上床下桌，床上是真舒服。 即热饮吧： 3S出热水，适合早起时间紧张的职场人 公交卡：手机NFC 不得不面对的人室友你的预算够了，遇到素质高的室友概率也会大大提高。当然能租开间最好，群租大家回家都是各回各屋，交流极少。 出于公共资源利用效率考虑，还是建议和室友们错开起床和睡觉时间，判断一副眼镜舒服的标准是你感觉不到它的存在。好室友的标准也是也感觉不到他的存在（eg：你上班了，他还未起，你睡觉了，他还没下班回来） 有些女室友通常不化妆不见人，所以女室友洗衣服做饭的时候就委屈一下错开空间吧。 中介一定要找个靠谱的中介，你第六感有一丝丝不舒服就不要租了（比如看起来就不厚道的人），因为不知道以后还有什么狗血的事发生，进入的社会才发现，很多的人不要脸的没有底线，无底洞。高素质的人没必要惹这个气受。如果你觉得中介不给办事但是自己可以解决的话，还是建议不要浪费这个时间，北漂人时间很宝贵，不管你是996还是965。 比较靠谱的: 链家 我爱我家 暖房小程序 豆瓣租房 小红书好像也行 自如（但是房东租客两头吃，但是大家都图省心忍气了） 据说假房源很多，低价吸引的： 安居客 58 哪个中介都会有一些负面信息，房东直租也有坑，记得用法律手段保护自己，50块开个民事诉讼之类的。 慎选小中介！！！！！！不要先交定金 （如何投诉黑中介，待补充） 房东如果是和房东手里租，查好房产证和房东身份证，留作证据。 从中介手里租的话，随便怼房东吧。（不清楚房东和中介的py交易是怎么样的） 不要怕麻烦别人公共区域基本都是先来先占用，不需要过于考虑其他人感受，毕竟大家都可以放东西，别太乱到过分就行。毕竟花钱租了房子，说话硬气点。记得查好水电价格。 每个人的忍耐程度不同，不要人云亦云，说你事多的直接怼回去，毕竟都是试探对方底限。别委屈自己迁就别人。 最后关于GTD跟你说GTD没用的都是没做好的，靠脑子真是记不住，冥想+GTD+复盘，形成规律，别在决策上浪费时间。 北漂人很忙，但是不要慌张。","link":"%E5%8C%97%E4%BA%AC%E7%A7%9F%E6%88%BF%E5%BF%83%E5%BE%97/"},{"title":"2022年6月2日 北京医院拒诊（中日友好医院）","text":"凌晨5点50.大概是被疼醒，流了一夜的血，床单被罩都是血，昨晚处理伤口到1点半，伤口有些深，于是跟领导请好假，和同事交接好今天手头的活，于是开始在各个医院打电话。 太早了没几个电话能打通，无奈只能120 你要救护车吗，我们只管派救护车。高德上电话基本打不通，114很不耐烦的说已经查了三个电话了，直接转了机器报号。附近药店只卖药不处理伤口。打了一个多小时电话，终于有个电话能打通了。这几天没出小区就没做核算，也防止交叉感染。中日友好医院，给了三个方案：1. 120直接能进，显然我神志清醒，不用这个 2. 去发热门诊，等着核酸结果，核酸结果出来不能走3. 等核酸结果出来再看病，估计我也快失血过多了，要是昏倒在路边估计也没人搭理。没办法，硬着头皮打车去医院，于是挂号，门诊发了N95，说我万一是阳性这就得关门了，没办法只能说拿人头担保。 发热门诊要求了核算和流感抗原，好说好商量下，门诊某大夫说已经通知外科大夫过来了，等了好久，外科那边只有一个大夫，说病人多，有空过来，于是问多久能过来，有没有给个时间什么的，回答是没有，体制里的托词，懂得都懂，看来要把我一直晒这了，没办法只能继续磨门诊大夫，反正门诊这人也不多。过了半个多小时，某大夫给写个了条，告诉我直接过去门诊外科就行。一瘸一拐找了半天路，敲开外科大夫的门，礼貌说着刚才的情况，外科科室1里面只有一个男大夫，大概四五十岁的样子，因为刚刚发热门诊大夫已经打过招呼了，于是简单说明情况，对方一副不耐烦的样子，哪个门诊？哪个某大夫？然后把我赶出诊室，没办法只能给门诊某大夫打电话，外科大夫在电话里跟某大夫说，意思病人没有持续性出血，有纱布包扎止血，等核酸结果吧。其实纱布是我自己出门简单包扎的，给大夫看伤口时，纱布往下掉了点，很多干的血迹，裤腿有点紧，还没掀到伤口那，大夫扭头就回诊室了，扔下一句，你这没有持续性出血，俨然一副趾高气扬的样子。我的腿还流着血，我也不知道还有没有命等核酸结果出来。于是质问他是不是今天今天我死在这你也拒诊。“是，我不能违反国家规定，没有48小时核酸不能进手术室”说完大夫扭头就进屋了，和他确认刚才说的话，他似乎也察觉到了说错了话，转过头就不认了，就说国家规定什么的。录音我会上报有关媒体，之前这样的事已经民怨载道了。保安凑过来了，目光盯着那个医生，我的腿还流着血，我尝试跟保安解释，这个医院是不能呆了，就没想好好给治，再来个公报私仇犯不上。估计大家都看新闻了，也没人出来拦着我。后悔当时没有直接报警。或者不讲中文用日语跟他们说。 我也是第一次有底气敢和人吵架，没想竟然在三甲医院。古语讲医门多疾。现在的医生不要求有医德，不要求跟病人好好说话，能把本质工作做好就可以去了，不要求不给开太贵的药。当然不是针对所有医院，仅仅用这个医生举例子，大家结合自己经历自行脑补就好。自疫情开始，多少人因为医院的政策问题被拒在门外，本人命大两次死里逃生，上次是打疫苗之后发烧39度，窗外下着暴雨打着雷，我要去治疗发烧却因为发烧不能看病。否则需要做抗原四项，一共770。再等4-6小时出结果，期间不能离开，发烧39度在急诊那个环境呆半天估计是直接去另外的世界了。一年之内就遇到两起拒诊案件，其他人呢？因此去那个世界的人呢？和变相杀人有什么区别？不作为故意杀人罪可以进局子了吧。这种没有医德乃至道德的人直接革职查办，行政拘留吧。（不作为故意杀人：处死刑、无期徒刑或者十年以上有期徒刑;情节较轻的，处三年以上十年以下有期徒刑） 中日友好医院是压死骆驼的最后一根稻草，北京又如何，上海又如何？6月1日，上海刚刚解封。6月2日北京就重复上演这样的事情，把国家政策当挡箭牌，把百姓的命不当回事。自古有之敢冒天下之大不韪，杀伐决断，后来的人称之为任侠。古来救死扶伤，而今一个个伪君子，在其位不谋其事。 发文可能会被网暴，键盘侠从来不会关心你过的好不好，放心我不会自杀。不想做一个忍气吞声苟活于世的人，洪流之下，很多人都活成了龙啸云。 医院不是法外之地，还轮不到地方自己立规矩。","link":"2022%E5%B9%B46%E6%9C%882%E6%97%A5-%E5%8C%97%E4%BA%AC%E5%8C%BB%E9%99%A2%E6%8B%92%E8%AF%8A%EF%BC%88%E4%B8%AD%E6%97%A5%E5%8F%8B%E5%A5%BD%E5%8C%BB%E9%99%A2%EF%BC%89/"},{"title":"悠乐汇看雪","text":"才吃过燃面，过午时又得出去觅食。 门前的松树又多新雪，一夜之间多了些许北国的味道，鹅毛大雪飘散着，伸出手凉凉的就化了。 北京的冬天很温和，对于东北人来说像深秋，静静的飘雪中撑一把轻伞，就能轻松制造韩剧男女主角的邂逅，北京的人是不是没体会过风刀霜剑？这的雪是留不住的，在气温回暖以及汽车尾气的破坏中，渐渐的融化成水，再蒸发成空气。不喜欢雪的人，是觉得雪堆融化之后道路泥泞，车辆难行，甚至气温来一个急转弯，把这雪水变成冰沙，甚至再光滑一些，这总会影响行人的匆匆。 每一片飘落的雪花，好似这芸芸众生，降生，飘零，陨落以及消亡。一片一片的雪花组成了洁白的雪地，雪地上留下了行人的脚印，有三两好友在讨论，有奔波的快递员外卖骑手，窗下还有小孩子在玩雪，老人在哄孩子，小男孩在团雪球，小女孩在一边看着，穿过街道，已经是光洁的柏油马路，这是雪冢。 无人的雪，踏上有吱吱的声音，光洁的雪总是能给人遐想，好似可以根据心思任意雕琢，又或者因为不是最佳路径从而无人踏足，而不远的一旁布满了行人的脚印，我却刻意绕开。夏日的大排档被闲置在这里，棚子上积满了厚厚的雪，伸出手来攒个小雪球，等着越滚越大。 等待手机升级的功夫，顶了一头的芦花。","link":"%E6%82%A0%E4%B9%90%E6%B1%87%E7%9C%8B%E9%9B%AA/"},{"title":"从望京吃到酒仙桥","text":"作为吃了小半个北京的人，基本上可以看到足迹留在望京和酒仙桥这里两个板块，先说一说踩的雷，不喜欢密云的鱼，分店的方砖厂，前门乱七八糟的餐馆还有簋街的小作坊，还有同样的连锁，合生汇里的品质都要和毕淘买相差甚远。 这边都是写字楼，所以工作日会针对上班的人有优惠，一般不包括周五，因为要放假了大家都high起来了，人多的没有位置。 郭靖烤全羊 58抵100（原来38） 阿壹牛杂（美团单人餐18送饮料） 一井烧肉（25单人餐，菜品半价） 掌上生活100减50（羲和雅苑，烧肉Like，小厨娘淮扬菜，上清水产，九割炸猪排，北李妈妈菜等） 阿诚市井潮汕菜（39.8双人粥，俩小菜，打卡送豆花） 将太无二（39.9 鸡肉锅） 芦花椒麻鸡（晚间50抵100，芦花脆脆茄） 刘胖妹面庄（晚间19.9抵40，重庆胖妹的弟子点，跟北京胖妹没有关系，北京胖妹从来不打折） 聚点串吧 11.2元包浆豆腐 多乐之日5元俩蛋挞 滋啦小路子烧烤（19.9抵50，不咋好吃） 隐市香·川菜·烧烤小馆（19.9 抵50，还有午间单人餐） 中8楼（18.4元黑三剁） 金掌勺锅包肉 39.9元 煲仔皇充528送双倍 怒火八零市井火锅。88.8元 赣南人家98双人餐（三个人也行） 功夫潮牛138双人餐（原来128） 释面（9.9素面，15.9牛肉面，量小不推荐） ~~小湘界98 2-3人餐（量很小，很辣，最好两个人去吃） 管氏串吧 9.9主食 京院涮肉98，现在已经158 不推荐 楠火锅9.9抵100(感觉差评很多) 霸气大叔39抵100 胖子龙虾（毛肚锅很不错） 米湘 九将烧肉（38单人餐） 黄海渔村（鲅鱼水饺，很一般不好吃 蒸汽小镇（水饺 芝湖参鸡汤 松鹤楼小龙虾拌面 十八汆（砂锅秒杀很实惠 老乡鸡9块9 六丁火烤肉99拼盘 霸碗盖饭（首开 重庆秘宗火锅 凯德mall 椰子鸡火锅 丸福日式烤肉 望花路燃面(望京燃面天花板，很容易饿) 牛锣鼓火锅 1819烧烤（其实还不错 荣焱 维京乐章三文鱼（意面双人餐） 小两口淄博烧烤 可以看到从望京一路吃到酒仙桥～ PS北京吃的汇总：","link":"%E4%BB%8E%E6%9C%9B%E4%BA%AC%E5%90%83%E5%88%B0%E9%85%92%E4%BB%99%E6%A1%A5/"},{"title":"家有吃货之自制纯肉肠","text":"淘宝买的猪小肠的肠衣，以前也使用过其他肠衣，效果不好。基本上是腌渍的肠衣，回来用料酒泡了一个多小时，然后用水冲了几遍场子内部，看看有没有坏的地方，有小孔不影响灌肉的可以忽略。 趁着清洗肠衣的时间调制肉馅，用绞肉机打碎，加上卖家的肉料（其实也可以自己调制），每斤肉加入30g淀粉，用来填补肉之间的孔位，红曲粉看颜色放入，差不多一斤肉0.5g的样子，主要为了颜色发红，多了会暗红。这个添加剂据说无害。最后加入葱姜水，六斤多肉我放了两碗。搅拌到最后越来沉，是在没力气搅拌的拉丝，直接就下一步了。 使用用灌肠神器，其实就是一个大号针管。视频里都是很顺利的灌进去了，我这个有肉堆积的现象，然后得用手一点点往下缕，不然会撑到爆开。 把肠衣完全套在神器上。灌好之后用绳子打结，分出每根的大小，最好打两层的绳子，保证切的时候不会破坏肠衣，然后用牙签戳，防止煮的时候肠衣爆开。完事之后进行风干操作，屋内低温自然2小时或者烤箱30风干30分钟。 风干之后可以继续扎眼，然后冷水下锅煮，中间可以自由翻面，有明显气泡可以直接用牙签戳破。全程小火，开锅了就加凉水，40-50分钟之后香肠都飘起来就可以了。记得扎两层绳子，防止切的时候肠衣剥开。 煮好的香肠可以冷冻上，吃多少烤多少，煎炒烹炸都可以。烤箱的话180度15分钟就可以，想吃脆皮的可以多烤一会。 基本上做出来的和网上买的火山石烤肠相差无几，不过自己家做的纯肉的，99. 99%纯肉，外边的比不了哦。","link":"%E5%AE%B6%E6%9C%89%E5%90%83%E8%B4%A7%E4%B9%8B%E8%87%AA%E5%88%B6%E7%BA%AF%E8%82%89%E8%82%A0/"},{"title":"无限续面","text":"聊一聊北京那些无限续面的小吃 外面的面条不知道什么材质做的，怎么吃也感觉吃不饱，就是胀肚还觉得饿，大脑也没有能量。 刘胖妹面庄应该是望京这边最好吃的面了，能免费续面（大碗），但是不能免费加汤。首重三两半，续重二两半。单买了肉末和豌杂。 有打油诗为证： 挑战一天内只吃刘胖妹面庄刷新店内最高续面记录失败和老大哥差了二两半的白面不愧网红的小面店下次再战 和府捞面从三里屯种草之后就一发不可收拾，三十多一碗的价格不续面都觉得亏，用草本汤稀释番茄汤味道不错，最高记录6碗，可以免费加香菜，现在改了菜单，理性考虑吧。个人感觉沦为路边小吃快餐水准了。（有些店完全没有中国风的感觉。。。 ps：已经粉转黑 陈香贵号称拉面界的海底捞，其实就是普通的兰州牛肉面，觉得跟和府捞面的牛肉面也差不多。好处是无线续面，店里人一直不少。 羊肉串比较薛定谔，有次用的打折券就很难吃，串又小又苦，很难不让人觉得有什么猫腻。之前单点的还行。 方砖厂外地人慕名而来，其实还没自己家的炸酱面好吃，商业化了之徒有其表，不怎么推荐。拌面续面的结果就是吃着吃着就凉了，不给加菜，还是第一次续面吃不下去的，排队很长。酸梅汤和拌肚很不错。 蓉李记商场角落的一员。打折券13.9还能无限续面，不过每碗面很少，不过不耽误我吃6碗，最后辣子鸡很不错。","link":"%E6%97%A0%E9%99%90%E7%BB%AD%E9%9D%A2/"},{"title":"自制味精","text":"","link":"%E8%87%AA%E5%88%B6%E5%91%B3%E7%B2%BE/"},{"title":"举报措施","text":"我们都是心思单纯的孩子，在社会这个大熔炉每天都被刷新着三观。国有国法，家有家规。而步入社会之后，可能每天都要面对一些垃圾。人和垃圾人的保护伞。 那么，请拿起法律保护好自己。同时，在不违反法律的前提下，尽最大可能争取自己的权益。 一定不要委屈自己迁就别人！！！ 打官司： 微法院北京法院电子诉讼平台 apple的软件：苹果电脑贸易上海有限公司 北京朝阳房管所： 64186037北京朝阳 # 偷税漏税举报流程 北京市税务局官网[^1] -&gt; 互动交流 -&gt; 税收违法行为检举 里面有【我要举报】和【回复查询】 12345 也就是原来的12315，公众号和电话是不一样的，最近有app了好像","link":"%E4%B8%BE%E6%8A%A5%E6%8E%AA%E6%96%BD/"},{"title":"生活小妙招","text":"### 冰箱去霜 开水倒入不锈钢盆，放入冰箱，几分钟之后冰块就掉下来了 ### 锅去顽渍 白醋和小苏打浸泡一会就可以擦掉了，注意铁锅不能用 ### 玻璃水杯 尽量买双层的隔热杯，防止烫手，单层玻璃不管用。","link":"%E7%94%9F%E6%B4%BB%E5%B0%8F%E5%A6%99%E6%8B%9B/"},{"title":"老一辈的错误观念","text":"吃亏是福 花钱挡灾 穷人家的孩子错不了","link":"%E8%80%81%E4%B8%80%E8%BE%88%E7%9A%84%E9%94%99%E8%AF%AF%E8%A7%82%E5%BF%B5/"},{"title":"身份证科普","text":"身份证号码是由18位数字组成的，分别表示： 1、前1、2位数字表示：所在省份的代码。 2、前3、4位数字表示：所在城市的代码。 3、前5、6位数字表示：所在区县的代码。 4、第7～14位数字表示：出生年、月、日，7、8、9、10位是年，11、12位是月，13、14位是日。 5、第15、16位数字表示:所在地的派出所的代码。 6、第17位数字表示性别:奇数表示男性，偶数表示女性。 7、第18位数字是校检码:校检码可以是0～9的数字，有时也用X表示。 8、＊尾号X是作为尾号的校检码，是由号码编制单位。X是罗马数字的10，用X来代替10，可以保证公民身份证符合国家标准。","link":"%E8%BA%AB%E4%BB%BD%E8%AF%81%E7%A7%91%E6%99%AE/"}],"tags":[{"name":"游记","slug":"游记","link":"tags/%E6%B8%B8%E8%AE%B0/"},{"name":"梦","slug":"梦","link":"tags/%E6%A2%A6/"},{"name":"随笔","slug":"随笔","link":"tags/%E9%9A%8F%E7%AC%94/"},{"name":"诗","slug":"诗","link":"tags/%E8%AF%97/"},{"name":"外设","slug":"外设","link":"tags/%E5%A4%96%E8%AE%BE/"},{"name":"电子极客","slug":"电子极客","link":"tags/%E7%94%B5%E5%AD%90%E6%9E%81%E5%AE%A2/"},{"name":"生活","slug":"生活","link":"tags/%E7%94%9F%E6%B4%BB/"},{"name":"北漂","slug":"北漂","link":"tags/%E5%8C%97%E6%BC%82/"},{"name":"租房","slug":"租房","link":"tags/%E7%A7%9F%E6%88%BF/"},{"name":"装修日记","slug":"装修日记","link":"tags/%E8%A3%85%E4%BF%AE%E6%97%A5%E8%AE%B0/"},{"name":"读书","slug":"读书","link":"tags/%E8%AF%BB%E4%B9%A6/"},{"name":"效率","slug":"效率","link":"tags/%E6%95%88%E7%8E%87/"},{"name":"DIY","slug":"DIY","link":"tags/DIY/"},{"name":"硬件与外设","slug":"硬件与外设","link":"tags/%E7%A1%AC%E4%BB%B6%E4%B8%8E%E5%A4%96%E8%AE%BE/"},{"name":"懒猫微服","slug":"懒猫微服","link":"tags/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"},{"name":"代理","slug":"代理","link":"tags/%E4%BB%A3%E7%90%86/"},{"name":"NAS","slug":"NAS","link":"tags/NAS/"},{"name":"MFA","slug":"MFA","link":"tags/MFA/"},{"name":"Docker","slug":"Docker","link":"tags/Docker/"},{"name":"开发","slug":"开发","link":"tags/%E5%BC%80%E5%8F%91/"},{"name":"Python","slug":"Python","link":"tags/Python/"},{"name":"Linux","slug":"Linux","link":"tags/Linux/"},{"name":"PWA","slug":"PWA","link":"tags/PWA/"},{"name":"极限科技","slug":"极限科技","link":"tags/%E6%9E%81%E9%99%90%E7%A7%91%E6%8A%80/"},{"name":"单点登录","slug":"单点登录","link":"tags/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/"},{"name":"装机","slug":"装机","link":"tags/%E8%A3%85%E6%9C%BA/"},{"name":"反抗","slug":"反抗","link":"tags/%E5%8F%8D%E6%8A%97/"},{"name":"家有吃货","slug":"家有吃货","link":"tags/%E5%AE%B6%E6%9C%89%E5%90%83%E8%B4%A7/"},{"name":"生活小妙招","slug":"生活小妙招","link":"tags/%E7%94%9F%E6%B4%BB%E5%B0%8F%E5%A6%99%E6%8B%9B/"}],"categories":[{"name":"外设","slug":"外设","link":"categories/%E5%A4%96%E8%AE%BE/"},{"name":"远程访问","slug":"远程访问","link":"categories/%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE/"},{"name":"读书笔记","slug":"读书笔记","link":"categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"},{"name":"懒猫微服","slug":"懒猫微服","link":"categories/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"},{"name":"随笔","slug":"随笔","link":"categories/%E9%9A%8F%E7%AC%94/"},{"name":"吃货","slug":"吃货","link":"categories/%E5%90%83%E8%B4%A7/"}],"pages":[{"title":"404","text":"好好吃饭，好好生活。网页找不到了，但是你还在。","link":"404.html"},{"title":"关于我","text":"仍然在折腾路上的不断探索。人在江湖，又岂能笑傲江湖？ 亚马逊云科技（AWS） Community Builders（AI）、亚马逊云科技（AWS）中国技领云博主、极限科技技术博主、Milvus 北辰使者，懒猫微服专栏作家。 专注于 Python 后端开发与 AI 服务部署，熟练掌握亚马逊云科技（AWS）核心服务，包括 Lambda、API Gateway、SageMaker、Bedrock、OpenSearch 等，具备扎实的工程实践能力与系统架构经验。 热衷于开发效率工具与自动化脚本，常年在本地构建 Homelab 环境，部署自研工具与开源项目，深入探索大模型的本地推理、私有化部署与性能优化路径。 曾在亚马逊云科技（AWS）上海 Summit 及 User Group 活动中担任讲师，积极推动技术传播与开发者社区建设。 步入职场后，笔耕不辍，曾为 Udacity 中国、InfoQ、亚马逊云科技、极限科技、懒猫微服等多个知名平台输出高质量内容，在技术传播与行业洞察方面持续深耕。 日常斜杠：写文章拿过奖，修过电脑，家电，写过代码，玩过硬件，3D 设计，做过课程讲师，公开演讲，上架过小程序和微信表情包。 🌐 技术主页 &amp; 平台链接 🎨 拓竹社区 3D 打印模型 ✍️ CSDN 博客主页 🛠️ GitHub 项目主页 dockerhub 📚 InfoQ 技术征文主页 懒猫论坛文集 🎤 社区演讲与活动 🧑‍🤝‍🧑 AWS 用户组 Meetup 分享 🏙️ AWS Summit 技术演讲页面 🎨 设计实验《灵魂画手》：基于 Amazon Bedrock 的动图生成与风格迁移 亚麻拉松 - 12 小时极客说 🧪 极限科技专题供稿（INFINI Labs） INFINI Easysearch 尝鲜 Hands-on 使用 Elasticsearch Python SDK 查询 Easysearch Easysearch 数据可视化与管理平台：INFINI Console 使用介绍 Easysearch、Elasticsearch、Amazon OpenSearch 快照兼容对比 玩转 Easysearch 查询语法 📁 👉 CSDN 专辑汇总 懒猫微服专辑 自带内网穿透,懒猫微服治好了我的 NAS 焦虑 快速检索懒猫商店 1000+应用，微服秒变 Mac 原生 APP 轻松管理 ES 集群: 我把 Infinilabs Console 上架了懒猫微服，默认支持外网访问、TLS 加密和 OIDC 登录 深度长文：NAS 大降价的年代，我为何接受溢价来购买懒猫微服（附送回本攻略） 我用 Amazon Q 写了一个 Docker 客户端，并上架了懒猫微服商店 懒猫微服实战入门（一）：从开启 SSH 到免密登录，一步步教你搞定远程管理 懒猫微服实战入门（二）: 打造多人协作环境：权限控制、数据隔离一步到位 懒猫微服实战入门（三）: 懒猫智慧屏，我以为是地表最强电视盒子，结果竟然可以改装成闺蜜机？ 懒猫微服实战入门（四）：完全 DNS 访问，和本地代理冲突了怎么办？ 懒猫微服实战入门（五）：文件上传到懒猫网盘，电视盒子挂载 SMB 观影 懒猫微服实战入门（六）：使用 2fauth 共享你的 MFA 懒猫微服实战入门（七）：超越蒲公英 SD-WAN，用懒猫转发服务，Ipad 随时远程家里 window，没有带宽和设备限制哦~ 懒猫微服实战入门（八）：懒猫微服 × SSH Remote：打造随时随地的云端开发环境 懒猫微服实战入门（九）：给懒猫安装图形界面，使用 XRDP 实现远程桌面 懒猫微服实战入门（十）：使用 nmtui 设置静态 IP，接入旁路由实现科学上网 懒猫微服实战入门（十一）：一键换源指南：用 chsrc 开启丝滑体验 懒猫微服实战入门（十二）：用 iVentoy 打造你的 PXE 服务器 懒猫微服实战入门（十三）：懒猫穿透不只图形化，纯命令行服务器也可以 懒猫微服进阶心得（一）M 芯片移植懒猫应用构建 Docker 镜像的常见问题排查及解决方案 懒猫微服进阶心得（二）：一台机器跑三套 Docker？深入解析懒猫容器的共存机制（上） 懒猫微服进阶心得（三）：一台机器跑三套 Docker？深入解析懒猫容器的共存机制（下） 懒猫微服进阶心得（四）：每次重启都丢配置？用 systemctl –user 自动装回环境！ 懒猫微服进阶心得（五）：使用懒猫微服做 Ventoy 启动盘 懒猫微服进阶心得（六）：以纸砚双拼为例，快速移植纯前端项目到懒猫微服 懒猫微服进阶心得（七）：懒猫的镜像仓库 懒猫微服进阶心得（八）：如何在 ARM 机器上下载并运行 X86 Docker 镜像以及在 X86 上运行 ARM 架构 Docker 懒猫微服炫技篇（一）：使用懒猫微服的穿透服务，车机使用 DS music 远程听歌，黑群晖不用再洗白 懒猫微服故事篇（一）：服务器宕机之后，我和前端靠懒猫微服结对编程 懒猫微服故事篇（二）：西湖邂逅后，我手把手教她玩转 NAS 懒猫微服炫技篇（二）：使用懒猫微服倒推停电时间 📮 微信公众号文章精选📌 极限科技公众号转载 Coco AI 智能检索 Hugo Blog 集成指南 MacBook Pro 快速搭建 Easysearch 学习环境 INFINI Easysearch 尝鲜 Hands-on ｜征文系列 使用 Elasticsearch Python SDK 查询 Easysearch ｜征文系列 快照兼容对比：Easysearch vs Elasticsearch vs OpenSearch 玩转 Easysearch 查询语法｜征文系列 INFINI Console 使用介绍｜可视化管理平台 Coco-AI 支持嵌入，让你的网站拥有 AI 搜索力 Coco AI 如何接入自定义数据源 MySQL 数据实时接入 Easysearch，零代码迁移全流程 从认证到透传：用 Nginx 为 Easysearch 构建一体化认证网关 Easysearch 基础运维扫盲指南：从 HTTP 到 HTTPS、认证与安全访问全解析 📌 亚马逊云科技公众号转载 Easysearch、Elasticsearch、OpenSearch 快照兼容性解析 超越官方：在 EC2 上部署 PopOS 新功能：Amazon OpenSearch 支持 JWT 身份验证与授权 半小时上手 Amazon Transit Gateway 基于 Lambda 获取实时天气预报推送 快速部署 WordPress 到云端 使用 es-dump 快速备份 ES 数据 GPUS(Nvidia) 如何在 AWS EC2 上部署 Isaac Sim Milvus Milvus workshop Contributor info 翻译 杀死谷歌搜索的那个人 用 GPT 搜索我: Easysearch 文章一栏： OpenSearch 文章一栏：","link":"about/index.html"},{"title":"镜湖的由来","text":"博客取名为镜湖，取自陆游的《鹊桥仙》的”镜湖元自属闲人，又何必、君恩赐与。” 墨客总会把小事写的文雅脱俗，比如辛弃疾的“听取蛙声一片”，欧阳修的”伛偻提携，往来绝者”。 从前的文人可以醉卧沙场，后来的墨客亦可科技兴邦。即使文化人看的透彻，也到底无力改变。 不会再去写歌功颂德一类的东西了，这个是留给发挥的空间，讲一些心里话，做事不愧于心： 很多东西，不必官家老爷赏赐， 很多事情，不用主流价值评看。 在别人的轻蔑中轻轻的说一句，不好意思，我不接受 PUA。 在这个时代，凡事都要冠以名誉，相比之下大多数人显得平淡如水。曾在学生时代曾讽刺当今教育与传销形式极为类似，一代传给一代人，不断重复，也无产生任何实用价值。期间按照所谓的等级阶级把人分成三六九等，并且人为的制造焦虑，信息差异，再冠以各种标签，最后按照这等级制度分发资源。大概类似《美丽新世界》中胚胎诞生之前浇灌酒精来培育畸形胚胎的做法，这样的胚胎只能奔波于最底层，无法翻身。 世人追逐名利如疯狗啃食，厮杀过后遍体鳞伤，然后得一夕安寝。 文人对此是极度敏感的，功名意识更是比他人更进一层。 从小饱读诗书，聪颖会晤，而后被世俗所累，泯然众人。 陆游说：“酒徒一半取封侯，独去作、江边渔父。” 苏轼说：“惟愿孩儿愚且鲁，无灾无难到公卿”。 几千年来如是而已。 语录主页使用hexo + icarus主题，记录生活的碎碎念，和折腾的一些电子产品，hexo 感觉还是适合记录碎片话的东西。同时也尽量避免使用国内的服务器和域名。（防止不必要的麻烦） /vue_blog， 记录的是技术类的一些博客，纯技术为主，不掺杂任何生活相关。 /aws，这里记录学习 aws 的一些心路，还有相应的学习笔记。 博客 feature 计划（不一定修Blog 功能 目录页 markdown 高亮 友链 和 aws 页面，vuepress 连调 评论功能 打赏二维码 社交链接 改 log 404 页面 分类 搜索 草稿和发布的关系 标签 RSS 订阅 归档 最近文章 FOLLOW.IT 订阅更新 文章折叠 图片的问题 固定左右边栏 头像 文章 todo 我与儒释道 工作台打造计划 我的工具们 chatgpt 尝鲜 potplayer 的 aws 实时翻译插 视频字幕提取 mokee 刷机 QNAP 软路由","link":"note/index.html"},{"title":"个人语录","text":"有感 才子佳人乃是佳偶天成，世人却总会棒打鸳鸯。 我给女孩子修电脑，就真的只是修电脑，关心电脑好不好用，甚至会忘记女孩子的名字。（2020） 公开Gitee仓库要实名认证：离变量名有政治倾向的日子不远了。（2023） 人生四大悲剧: 戏子谈法，娼妓从良，恶人经商，老實人夢碎。（2022） 任侠多累,富贵难求。（2021） 毕竟这世界，没有人能够活着离开。 鲁迅拯救不了国人的重病，也无法唤醒沉睡的每个行尸走肉。每一个市井小民，终其一生不免于为温饱奔波，然后使自己免于周遭的迫害，对于家国天下，他们从来不敢轻易去关心。先知喊破了喉咙，不是当作疯傻，就是被冷漠雪藏。（2023.12） 在我那密不透风的学生时代，总觉得许多异乡游记是和三皇五帝一样传说的故事，而我却生在一个山高皇帝远的地方，守着些不为外人道的自然风光。甚至我在工作以后才有机会到一些不算太远的日址吊唁。比如渤海湾曾经甲午海战的地方，东鸡冠山上到处是日俄战争枪林弹雨的痕迹，就连误入的墓群主人，也分不清到底是旧时的未亡人还是几年十几年甚至几十年前疲于奔命的过劳者，甚至脚踏的这片四方黄士就是乃木宝典战死之处，还有作为标志性的建筑的弹壳，我甚至不愿想象战争年代白发人送黑发人情感被上司大如天的威严严苛所淹没，死后被历史记住已经是最大了补偿了。大连是到处都有墓碑的，在每一个所谓现代定义的景点公园，凡事对外的，总会在一不留神间瞧见墓碑或者墓群就在不远处。中日之间是有宿命的姻缘的，这点在那些发生过大规模屠杀战争的地方尤为严重。大连的每一片土地都渗着鲜血，有革命先烈的，有当代年轻人的。当地的大户说,采集百年弱冠的血，用温热的殷红把混着泥土的陈年凝块化开，喝了可以长生不老。 –《地坛游记》（2023.4） 旅大是日本的情妇，被百般虐待，所有的灵感都来源于她，荣誉则是成为一份作品，而毁灭也恰好是她。 –《佛•教化•屠杀》（2017） 世界上最大的谎言是年轻有无限的可能。几十年后回头看去，又为钱财庸碌一生。（2023） 两个人因为相爱而在一起，却又因为相处而变得普通。（2024.4.21） 原来所谓心动，只是在荷尔蒙的刺激下，新鲜感剩下的余温而已。（2024.4.24） 杀人魔踩死了一只蚂蚁，劳动模范在进行杀人比赛。（2024.4.30） 先不说生理性喜欢，但是生理性不喜欢的表现之一是，听她滔滔不绝的讲话，觉得索然无味并无营养，顿时拉肚子赶紧离开。但是讨厌一个人的表现则是，听见他说话，手里的事情都进行不下去，包括睡觉。（2024.5.20） 得不到的，往往呼天抢地，得到之后，又任凭其从指尖溜走。（2024.5.20） 摘抄 要打倒邪恶就要先成为邪恶的化身。 - 《游戏王GX》 霸王十代 在香港，任何一个凡俗的市民，毕生宏愿都置业成家安居，然后老死。 -《胭脂扣》 如梦如幻月，若即若离花。 -《胭脂扣》 不能保护我们宇宙的话，正义我就不要了！（我が宇宙を守れぬ正義など要らぬ ）《龙珠超》托破 古籍摘抄 天下多故，名士少有全者。 - 房玄龄 :《昏害·卷四十九·列傅第十九·阮籍傅》 立身之道，舆文章具，立身先须谨重，又早且识放荡。 - 南朝梁·萧纲 : 《诚凿公大心害》，收入唐·欧踢韵等《势文颊聚》 文章技术blog：AWS加油站生活blog：镜湖catgpt：catgpttranslate:aws translate餐厅选择器：random-restaurant-picker awsx： 1. pypi：GitHub - Xu-Hardy/awsx pypi.org/project/awsx/ 2. npm: awsx-cli - npm","link":"quotes/index.html"},{"title":"博客feature 计划（不一定修","text":"Blog 功能 目录页 markdown高亮 友链 和aws页面，vuepress 连调 评论功能 打赏二维码 社交链接 改log 404页面 分类 搜索 草稿和发布的关系 标签 RSS订阅 归档 最近文章 FOLLOW.IT 订阅更新 文章折叠 图片的问题（github图床） 固定左右边栏 头像 文章todo 我与儒释道 工作台打造计划 我的工具们 chatgpt尝鲜 potplayer的aws实时翻译插 视频字幕提取 mokee刷机 QNAP 软路由","link":"todo/index.html"}]}