<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>镜湖</title>
  
  
  <link href="https://xu-hardy.github.io/atom.xml" rel="self"/>
  
  <link href="https://xu-hardy.github.io/"/>
  <updated>2025-06-30T14:36:55.857Z</updated>
  <id>https://xu-hardy.github.io/</id>
  
  <author>
    <name>Xu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>懒猫微服开发篇（一）：懒猫微服全栈上架指南，一步打包，一键发布</title>
    <link href="https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%BC%80%E5%8F%91%E7%AF%87%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%85%A8%E6%A0%88%E4%B8%8A%E6%9E%B6%E6%8C%87%E5%8D%97%EF%BC%8C%E4%B8%80%E6%AD%A5%E6%89%93%E5%8C%85%EF%BC%8C%E4%B8%80%E9%94%AE%E5%8F%91%E5%B8%83/"/>
    <id>https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%BC%80%E5%8F%91%E7%AF%87%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%85%A8%E6%A0%88%E4%B8%8A%E6%9E%B6%E6%8C%87%E5%8D%97%EF%BC%8C%E4%B8%80%E6%AD%A5%E6%89%93%E5%8C%85%EF%BC%8C%E4%B8%80%E9%94%AE%E5%8F%91%E5%B8%83/</id>
    <published>2025-07-02T16:00:00.000Z</published>
    <updated>2025-06-30T14:36:55.857Z</updated>
    
    <content type="html"><![CDATA[<p>懒猫应用离不开社区的力量，有了各位社区贡献者的支持让懒猫商店的应用越来越丰富。下面示范如何把自己的<strong>全栈应用</strong>上架到懒猫微服。</p><p>官网给出的示例里只有 <strong>3 个必备文件</strong>：<code>lzc-build.yml</code>、<code>lzc-icon.png</code>、<code>lzc-manifest.yml</code>。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250630173852407.png" alt="示例目录结构"></p><ul><li>**<code>lzc-icon.png</code>**：应用图标，必须为  PNG。</li><li>**<code>lzc-build.yml</code>**：定义打包脚本、输出路径与图标路径。</li><li>**<code>lzc-manifest.yml</code>**：应用清单，描述路由规则等。<span id="more"></span></li></ul><h3 id="lzc-build-yml-示例"><a href="#lzc-build-yml-示例" class="headerlink" title="lzc-build.yml 示例"></a><code>lzc-build.yml</code> 示例</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打包预处理，例子里是复制目录，打包前端文件</span></span><br><span class="line"><span class="comment"># 见build.sh这个文件</span></span><br><span class="line"><span class="comment"># rm -rf ./dist</span></span><br><span class="line"><span class="comment"># mkdir -p dist</span></span><br><span class="line"><span class="comment"># 构建后端二进制文件，因为后面写了contentdir是 dist 文件夹，</span></span><br><span class="line"><span class="comment"># 所以dist是打包的上下文</span></span><br><span class="line"><span class="comment"># cp -r backend dist/</span></span><br><span class="line"><span class="comment"># 构建前端，这里就是普通的前端打包命令，只是指定了输出文件夹</span></span><br><span class="line"><span class="comment"># cd ui &amp;&amp; npx vite build --emptyOutDir --outDir ../dist/web</span></span><br><span class="line"><span class="attr">buildscript:</span> <span class="string">sh</span> <span class="string">build.sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># manifest: 指定 lpk 包的 manifest.yml ，一般是这个名字不改</span></span><br><span class="line"><span class="attr">manifest:</span> <span class="string">./lzc-manifest.yml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># contentdir: 前面把前后端打包到这个目录还是。</span></span><br><span class="line"><span class="attr">contentdir:</span> <span class="string">./dist</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pkgout: lpk 包的输出路径</span></span><br><span class="line"><span class="attr">pkgout:</span> <span class="string">./</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># icon 指定 lpk 包 icon 的路径路径，如果不指定将会警告</span></span><br><span class="line"><span class="comment"># icon 仅仅允许 png 后缀的文件</span></span><br><span class="line"><span class="attr">icon:</span> <span class="string">./lzc-icon.png</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># dvshell 指定开发依赖的情况，这个我们后面专门来讲讲</span></span><br><span class="line"><span class="comment"># 这种情况下，选用 alpine:latest 作为基础镜像，在 dependencies 中添加所需要的开发依赖即可</span></span><br><span class="line"><span class="comment"># 如果 dependencies 和 build 同时存在，将会优先使用 dependencies</span></span><br><span class="line"><span class="attr">devshell:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/=http://127.0.0.1:5173</span></span><br><span class="line">  <span class="attr">dependencies:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">nodejs</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">python3</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">py3-pip</span></span><br><span class="line">  <span class="attr">setupscript:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    export npm_config_registry=https://registry.npmmirror.com</span></span><br><span class="line"><span class="string">    export PIP_INDEX_URL=https://pypi.tuna.tsinghua.edu.cn/simple</span></span><br></pre></td></tr></table></figure><p><code>build.sh</code> 执行完后目录结构大致如下：</p><ul><li><strong>dist&#x2F;backend</strong> →  后端（可执行&#x2F;脚本）</li><li><strong>dist&#x2F;web</strong> →  前端（静态文件）</li></ul><hr><h3 id="lzc-manifest-yml-示例"><a href="#lzc-manifest-yml-示例" class="headerlink" title="lzc-manifest.yml 示例"></a><code>lzc-manifest.yml</code> 示例</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">lzc-sdk-version:</span> <span class="number">0.1</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">代办清单Py</span></span><br><span class="line"><span class="attr">package:</span> <span class="string">cloud.lazycat.app.todolistpy</span></span><br><span class="line"><span class="attr">version:</span> <span class="number">0.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">description:</span></span><br><span class="line"><span class="attr">license:</span> <span class="string">https://choosealicense.com/licenses/mit/</span></span><br><span class="line"><span class="attr">homepage:</span></span><br><span class="line"><span class="attr">author:</span></span><br><span class="line"><span class="attr">application:</span></span><br><span class="line">  <span class="attr">subdomain:</span> <span class="string">todolistpy</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/=file:///lzcapp/pkg/content/web</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/api/=exec://3000,./lzcapp/pkg/content/backend/run.sh</span></span><br></pre></td></tr></table></figure><p>routes 这里有三种写法：</p><ol><li><strong>file</strong> 代表文件，一般是纯静态文件，比如打包后的前端文件，在 build.sh 打包的前端问题件，我们前面制定了 content 就是&#x2F;lzcapp&#x2F;pkg&#x2F;content&#x2F;，所以&#x2F;lzcapp&#x2F;pkg&#x2F;content&#x2F;web 也就是刚才的 dist&#x2F;web。这个的意思就是说把跟路由转发这个静态目录，其实就是类似 Nginx 托管静态文件这个样子，只是不需要手动打包，写好命令之后，打包工具帮忙做了这一套。</li><li><code>http(s)://$hostname/$path</code>， 这个是我们印象里的，也就是代理后端，比如&#x2F;api&#x2F;&#x3D;http(s):&#x2F;&#x2F;$hostname&#x2F;$path，其实就类似 Nginx 的 proxy_pass。这个是我们熟知的后端。</li><li><strong>exec</strong>：这个和 http(s)很像，后面多加了一个 run.sh，相当于在转发到 http(s)路由之前，先执行这个脚本。一般是用来一直环境，比如 pip install 什么的，但是由于每个人的环境不一样，还是要使用多个镜像源才保险，我上架的应用就遇到用户通过清华源下载报错 HTTP403 以及 腾讯源下载签名不匹配的问题，或者干脆使用 Docker，这个我们后面再说。</li></ol><p>附上 pip 多源的例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 已有 —— 主索引 &amp; 前两级备用</span></span><br><span class="line">pip config <span class="built_in">set</span>  global.index-url        https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">pip config --add global.extra-index-url https://pypi.mirrors.ustc.edu.cn/simple/</span><br><span class="line">pip config --add global.extra-index-url https://mirrors.bfsu.edu.cn/pypi/web/simple/</span><br><span class="line"></span><br><span class="line"><span class="comment"># ③ 阿里云（华东节点评测最稳）</span></span><br><span class="line">pip config --add global.extra-index-url https://mirrors.aliyun.com/pypi/simple/</span><br><span class="line"></span><br><span class="line"><span class="comment"># ④ 华为云（华南线路友好）</span></span><br><span class="line">pip config --add global.extra-index-url https://repo.huaweicloud.com/repository/pypi/simple/</span><br><span class="line"></span><br><span class="line"><span class="comment"># ⑤ 字节跳动开源镜像（火山引擎，带全站 CDN）</span></span><br><span class="line">pip config --add global.extra-index-url https://mirrors.byteimg.com/pypi/simple/</span><br><span class="line"></span><br><span class="line"><span class="comment"># ⑥ 南京大学镜像（NJU，教育网 &amp; 华东建议保留）</span></span><br><span class="line">pip config --add global.extra-index-url https://mirrors.nju.edu.cn/pypi/web/simple/</span><br></pre></td></tr></table></figure><hr><h3 id="打包与安装"><a href="#打包与安装" class="headerlink" title="打包与安装"></a>打包与安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打包成 LPK</span></span><br><span class="line">lzc-cli project build -o release.lpk</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在线安装 LPK</span></span><br><span class="line">lzc-cli app install release.lpk</span><br></pre></td></tr></table></figure><p>然后是打包，如果缺少 lzc-build.yml，lzc-icon.png，lzc-manifest.yml 三者之一就会报错。</p><p>LPK 是懒猫微服应用商店 APP 的安装包格式，其实可以理解为一个配置文件的压缩包，安装之后其实就是在微服内部启动了一个 alpine 的 image，然后通过 build.sh 安装依赖。</p><p>通过 lzc-docker 来看，直接打包的就是这个 images registry.lazycat.cloud&#x2F;lzc&#x2F;lzcapp:3.20.3</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250630181419299.png" alt="image-20250630181419299"></p><p>命令如下<strong>lzc-docker history –no-trunc registry.lazycat.cloud&#x2F;lzc&#x2F;lzcapp:3.20.3</strong>，能够看到是 Alpine 作为 base image，然后更换中科大的源，以及安装 <strong>gcompat</strong> 以兼容 glibc 程序。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(base) lzcbox-029c588e ~ <span class="comment"># lzc-docker history --no-trunc registry.lazycat.cloud/lzc/lzcapp:3.20.3</span></span><br><span class="line">IMAGE                                                                     CREATED        CREATED BY                                                                                                SIZE      COMMENT</span><br><span class="line">sha256:ba7a533c869a26d89e83bdc5ddb978df5a3502ac91452422a649d0d3cf52190b   7 months ago   RUN /bin/sh -c apk add gcompat <span class="comment"># buildkit                                                                 2.48MB    buildkit.dockerfile.v0</span></span><br><span class="line">&lt;missing&gt;                                                                 7 months ago   RUN /bin/sh -c sed -i <span class="string">&#x27;s/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g&#x27;</span> /etc/apk/repositories <span class="comment"># buildkit   97B       buildkit.dockerfile.v0</span></span><br><span class="line">&lt;missing&gt;                                                                 9 months ago   CMD [<span class="string">&quot;/bin/sh&quot;</span>]                                                                                           0B        buildkit.dockerfile.v0</span><br><span class="line">&lt;missing&gt;                                                                 9 months ago   ADD alpine-minirootfs-3.20.3-x86_64.tar.gz / <span class="comment"># buildkit                                                   7.8MB     buildkit.dockerfile.v0</span></span><br><span class="line">(base) lzcbox-029c588e ~ <span class="comment">#</span></span><br></pre></td></tr></table></figure><p>甚至可以看到，这个 image 是连 bash 以及各种开发运行时都没有的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(base) lzcbox-029c588e ~ # lzc-docker run -it registry.lazycat.cloud/lzc/lzcapp:3.20.3 bash</span><br><span class="line">docker: Error response from daemon: failed to create task for container: failed to create shim task: OCI runtime create failed: runc create failed: unable to start container process: error during container init: exec: &quot;bash&quot;: executable file not found in $PATH: unknown.</span><br><span class="line">(base) lzcbox-029c588e ~ # lzc-docker run -it registry.lazycat.cloud/lzc/lzcapp:3.20.3 sh</span><br><span class="line">/ # go</span><br><span class="line">sh: go: not found</span><br><span class="line">/ # npm</span><br><span class="line">sh: npm: not found</span><br><span class="line">/ # pip</span><br><span class="line">sh: pip: not found</span><br><span class="line">/ # python</span><br><span class="line">sh: python: not found</span><br><span class="line">/ #</span><br></pre></td></tr></table></figure><p>所以这个 backend 文件夹的 run.sh 是拿来安装 Python 依赖的。而前端是使用本地的 npm 打包的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line"></span><br><span class="line"># 切换到当前目录</span><br><span class="line">cd &quot;$(dirname &quot;$0&quot;)&quot;</span><br><span class="line">sed -i &#x27;s/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g&#x27; /etc/apk/repositories</span><br><span class="line">apk update</span><br><span class="line">apk add python3 py3-pip</span><br><span class="line"># ❶ 设主索引，只能有一个</span><br><span class="line"># 已有 —— 主索引 &amp; 前两级备用</span><br><span class="line">pip config set  global.index-url        https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">pip config --add global.extra-index-url https://pypi.mirrors.ustc.edu.cn/simple/</span><br><span class="line">pip config --add global.extra-index-url https://mirrors.bfsu.edu.cn/pypi/web/simple/</span><br><span class="line"></span><br><span class="line"># ③ 阿里云（华东节点评测最稳）</span><br><span class="line">pip config --add global.extra-index-url https://mirrors.aliyun.com/pypi/simple/</span><br><span class="line"></span><br><span class="line"># ④ 华为云（华南线路友好）</span><br><span class="line">pip config --add global.extra-index-url https://repo.huaweicloud.com/repository/pypi/simple/</span><br><span class="line"></span><br><span class="line"># ⑤ 字节跳动开源镜像（火山引擎，带全站 CDN）</span><br><span class="line">pip config --add global.extra-index-url https://mirrors.byteimg.com/pypi/simple/</span><br><span class="line"></span><br><span class="line"># ⑥ 南京大学镜像（NJU，教育网 &amp; 华东建议保留）</span><br><span class="line">pip config --add global.extra-index-url https://mirrors.nju.edu.cn/pypi/web/simple/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pip install -r ./requirements.txt --break-system-packages</span><br><span class="line">python3 app.py</span><br></pre></td></tr></table></figure><p>安装之后的 app 可以通过 lzc-docker 查看，也可以使用 Dozze 查看日志，一般 debug 时候的时候会看这个。</p><p>DOZZL 需要安装开发者工具，然后使用<a href="https://dev.设备名.heiyu.space/dozzle/%E8%AE%BF%E9%97%AE%E3%80%82">https://dev.设备名.heiyu.space/dozzle/访问。</a></p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250630190230526.png" alt="image-20250630190230526"></p><p>一般来说部署有两个 pod，一个是 App-1 结尾的，主要是涉及到转发，run.sh 自动安装依赖，以及健康检查。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PATH:&quot;/&quot; is served by &quot;file&quot;://&quot;/lzcapp/pkg/content/dist&quot;</span><br><span class="line">PATH:&quot;/api/&quot; is served by &quot;http&quot;://&quot;host.lzcapp:53443&quot;</span><br><span class="line">health check finished</span><br></pre></td></tr></table></figure><p>应用名字-1 结尾的，这个才是应用的日志。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[2025-06-29 17:29:29 +0800] [1] [INFO] Starting gunicorn 23.0.0</span><br><span class="line">[2025-06-29 17:29:29 +0800] [1] [INFO] Listening at: http://0.0.0.0:9527 (1)</span><br><span class="line">[2025-06-29 17:29:29 +0800] [1] [INFO] Using worker: sync</span><br><span class="line">[2025-06-29 17:29:29 +0800] [9] [INFO] Booting worker with pid: 9</span><br></pre></td></tr></table></figure><p>希望大家都能够多多为懒猫微服贡献应用。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;懒猫应用离不开社区的力量，有了各位社区贡献者的支持让懒猫商店的应用越来越丰富。下面示范如何把自己的&lt;strong&gt;全栈应用&lt;/strong&gt;上架到懒猫微服。&lt;/p&gt;
&lt;p&gt;官网给出的示例里只有 &lt;strong&gt;3 个必备文件&lt;/strong&gt;：&lt;code&gt;lzc-build.yml&lt;/code&gt;、&lt;code&gt;lzc-icon.png&lt;/code&gt;、&lt;code&gt;lzc-manifest.yml&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250630173852407.png&quot; alt=&quot;示例目录结构&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;**&lt;code&gt;lzc-icon.png&lt;/code&gt;**：应用图标，必须为  PNG。&lt;/li&gt;
&lt;li&gt;**&lt;code&gt;lzc-build.yml&lt;/code&gt;**：定义打包脚本、输出路径与图标路径。&lt;/li&gt;
&lt;li&gt;**&lt;code&gt;lzc-manifest.yml&lt;/code&gt;**：应用清单，描述路由规则等。</summary>
    
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/categories/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
    
    <category term="开发" scheme="https://xu-hardy.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>极限科技稿件数据</title>
    <link href="https://xu-hardy.github.io/%E6%9E%81%E9%99%90%E7%A7%91%E6%8A%80%E7%A8%BF%E4%BB%B6%E6%95%B0%E6%8D%AE/"/>
    <id>https://xu-hardy.github.io/%E6%9E%81%E9%99%90%E7%A7%91%E6%8A%80%E7%A8%BF%E4%BB%B6%E6%95%B0%E6%8D%AE/</id>
    <published>2025-07-01T16:00:00.000Z</published>
    <updated>2025-06-30T14:36:55.861Z</updated>
    
    <content type="html"><![CDATA[<h3 id="5-月文章"><a href="#5-月文章" class="headerlink" title="5 月文章"></a>5 月文章</h3><table><thead><tr><th>发布时间</th><th>文章标题</th><th>文章链接</th><th>阅读量（CSDN）</th><th>统计时间</th><th>备注</th></tr></thead><tbody><tr><td>2025-05-09 13:19:39 ·</td><td>[轻松管理 ES 集群: 我把 Infinilabs Console 上架了懒猫微服，默认支持外网访问、TLS 加密和 OIDC 登录](轻松管理 ES 集群: 我把 Infinilabs Console 上架了懒猫微服，默认支持外网访问、TLS 加密和 OIDC 登录.md)</td><td>CSDN:<br><a href="https://blog.csdn.net/weixin_38781498/article/details/147819180">https://blog.csdn.net/weixin_38781498/article/details/147819180</a><br></td><td>2511 阅读 ·</td><td>2025-06-03</td><td></td></tr><tr><td>2025-05-05 15:28:09 ·</td><td><a href="MySQL%E6%95%B0%E6%8D%AE%E5%AE%9E%E6%97%B6%E6%8E%A5%E5%85%A5Easysearch%EF%BC%8C%E9%9B%B6%E4%BB%A3%E7%A0%81%E8%BF%81%E7%A7%BB%E5%85%A8%E6%B5%81%E7%A8%8B.md">MySQL 数据实时接入 Easysearch，零代码迁移全流程</a></td><td>CSDN:<br><a href="https://blog.csdn.net/weixin_38781498/article/details/147718262">https://blog.csdn.net/weixin_38781498/article/details/147718262</a><br></td><td>3218 阅读 ·</td><td>2025-06-03</td><td></td></tr></tbody></table><h3 id="4-月文章"><a href="#4-月文章" class="headerlink" title="4 月文章"></a>4 月文章</h3><table><thead><tr><th>发布时间</th><th>文章标题</th><th>文章链接</th><th>阅读量（CSDN）</th><th>统计时间</th><th>备注</th><th></th></tr></thead><tbody><tr><td>2025-04-24 17:37:45 ·</td><td>[从认证到透传：用 Nginx 为 EasySearch 构建一体化认证网关](从认证到透传：用 Nginx 为 EasySearch 构建一体化认证网关.md)</td><td>CSDN:<br><a href="https://blog.csdn.net/weixin_38781498/article/details/147484530">https://blog.csdn.net/weixin_38781498/article/details/147484530</a><br></td><td>1728 阅读 ·</td><td>2025-05-06</td><td></td><td></td></tr><tr><td>2025-04-25 15:54:34 ·</td><td>[Easysearch 基础运维扫盲指南：从 HTTP 到 HTTPS、认证与安全访问全解析](Easysearch 基础运维扫盲指南：从 HTTP 到 HTTPS、认证与安全访问全解析.md)</td><td>CSDN:<br><a href="https://blog.csdn.net/weixin_38781498/article/details/147514771">https://blog.csdn.net/weixin_38781498/article/details/147514771</a><br></td><td>1947 阅读 ·</td><td>2025-05-06</td><td></td><td></td></tr><tr><td>2025-04-23 18:12:08 ·</td><td>[Easysearch 服务昨天还好好的，为什么今天突然访问不了了？](Easysearch 服务昨天还好好的，为什么今天突然访问不了了？.md)</td><td>CSDN:<br><a href="https://blog.csdn.net/weixin_38781498/article/details/147460362">https://blog.csdn.net/weixin_38781498/article/details/147460362</a><br></td><td>1446 阅读 ·</td><td>2025-05-06</td><td></td><td></td></tr><tr><td>2025-04-17 22:05:49 ·</td><td>[零代码接入 Google Drive，让 Coco- AI 看懂你的资料库](零代码接入 Google Drive，让 Coco- AI 看懂你的资料库.md)</td><td>CSDN:<br><a href="https://blog.csdn.net/weixin_38781498/article/details/147314801">https://blog.csdn.net/weixin_38781498/article/details/147314801</a><br></td><td>2254 阅读 ·</td><td>2025-05-06</td><td></td><td></td></tr><tr><td>2025-04-17 20:10:35 ·</td><td>[Coco-AI 接入自定义数据源](Coco-AI 接入自定义数据源.md)</td><td>CSDN:<br><a href="https://blog.csdn.net/weixin_38781498/article/details/147312961">https://blog.csdn.net/weixin_38781498/article/details/147312961</a><br></td><td>1069 阅读 ·</td><td>2025-05-06</td><td></td><td></td></tr><tr><td>2025-04-17 19:04:29 ·</td><td>[Coco-AI 集成语雀作为语料库进行检索](Coco-AI 集成语雀作为语料库进行检索.md)</td><td>CSDN:<br><a href="https://blog.csdn.net/weixin_38781498/article/details/147311955">https://blog.csdn.net/weixin_38781498/article/details/147311955</a><br></td><td>1137 阅读 ·</td><td>2025-05-06</td><td></td><td></td></tr><tr><td>2025-04-03 21:32:39 ·</td><td>[Coco-AI 支持嵌入，让你的网站拥有 AI 搜索力](Coco-AI 支持嵌入，让你的网站拥有 AI 搜索力.md)</td><td>CSDN:<br><a href="https://blog.csdn.net/weixin_38781498/article/details/146989181">https://blog.csdn.net/weixin_38781498/article/details/146989181</a><br></td><td>1775 阅读 ·</td><td>2025-05-06</td><td></td><td></td></tr><tr><td>2025-03-24 18:39:29 ·</td><td>[Docker-Compose 部署 EasySearch 异常问题排查](Docker-Compose 部署 EasySearch 异常问题排查.md)</td><td>CSDN:<br><a href="https://blog.csdn.net/weixin_38781498/article/details/146483037">https://blog.csdn.net/weixin_38781498/article/details/146483037</a><br></td><td>1174 阅读 ·</td><td>2025-05-06</td><td></td><td></td></tr></tbody></table><h3 id="3-月文章"><a href="#3-月文章" class="headerlink" title="3 月文章"></a>3 月文章</h3><table><thead><tr><th>发布时间</th><th>文章标题</th><th>文章链接</th><th>阅读量（CSDN）</th><th>统计时间</th><th>备注</th></tr></thead><tbody><tr><td>2025-03-20 21:50:50 ·</td><td>[拓展 Coco AI 功能 - 智能检索 Hexo 博客](拓展 Coco AI 功能 - 智能检索 Hexo 博客.md)</td><td>CSDN:<br><a href="https://blog.csdn.net/weixin_38781498/article/details/146407174">https://blog.csdn.net/weixin_38781498/article/details/146407174</a><br></td><td>1485 阅读 ·</td><td>2025-04-01</td><td></td></tr><tr><td>2025-03-18 12:36:10 ·</td><td>[Coco AI 智能检索 Hugo Blog 集成指南](Coco AI 智能检索 Hugo Blog 集成指南.md)</td><td>CSDN:<br><a href="https://blog.csdn.net/weixin_38781498/article/details/146338445">https://blog.csdn.net/weixin_38781498/article/details/146338445</a><br></td><td>1541 阅读 ·</td><td>2025-04-01</td><td></td></tr><tr><td>2025-03-11 09:21:48 ·</td><td>[Coco AI 全新升级：全图形化 RAG 配置，一键开启智能知识管理！](Coco AI 全新升级：全图形化 RAG 配置，一键开启智能知识管理！.md)</td><td>CSDN:<br><a href="https://blog.csdn.net/weixin_38781498/article/details/146170047">https://blog.csdn.net/weixin_38781498/article/details/146170047</a><br></td><td>857 阅读 ·</td><td>2025-04-01</td><td></td></tr><tr><td>2025-03-09 17:15:36 ·</td><td>[Easysearch 使用 AWS S3 进行快照备份与还原：完整指南及常见错误排查](Easysearch 使用 AWS S3 进行快照备份与还原：完整指南及常见错误排查.md)</td><td>CSDN:<br><a href="https://blog.csdn.net/weixin_38781498/article/details/146135024">https://blog.csdn.net/weixin_38781498/article/details/146135024</a><br></td><td>1294 阅读 ·</td><td>2025-04-01</td><td></td></tr><tr><td>2025-03-09 11:03:08 ·</td><td>[Easysearch 中 PUT 和 POST 更新索引的区别及常见错误解析](Easysearch 中 PUT 和 POST 更新索引的区别及常见错误解析.md)</td><td>CSDN:<br><a href="https://blog.csdn.net/weixin_38781498/article/details/146128940">https://blog.csdn.net/weixin_38781498/article/details/146128940</a><br></td><td>1517 阅读 ·</td><td>2025-04-01</td><td></td></tr></tbody></table><h3 id="2-月文章"><a href="#2-月文章" class="headerlink" title="2 月文章"></a>2 月文章</h3><table><thead><tr><th>发布时间</th><th>文章标题</th><th>文章链接</th><th>阅读量（CSDN）</th><th>统计时间</th><th>备注</th></tr></thead><tbody><tr><td>2025-02-11</td><td><a href="Macbook%20Pro%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAEasysearch%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83.md">Macbook Pro 快速搭建 Easysearch 学习环境</a></td><td>CSDN:<br><a href="https://blog.csdn.net/weixin_38781498/article/details/14557411">https://blog.csdn.net/weixin_38781498/article/details/14557411</a><br><br>微信公众号: <br><a href="https://mp.weixin.qq.com/s/Q9DfNtarX7uwvrBKCoQqDA">https://mp.weixin.qq.com/s/Q9DfNtarX7uwvrBKCoQqDA</a><br></td><td>1037</td><td>2025-03-02</td><td></td></tr><tr><td>2025-02-16</td><td><a href="Coco%20AI%20APP%20%E5%88%9D%E4%BD%93%E9%AA%8C%EF%BC%9A%E5%BC%80%E5%90%AF%E6%99%BA%E8%83%BD%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E6%96%B0%E7%AF%87%E7%AB%A0.md">Coco AI APP 初体验：开启智能知识管理新篇章</a></td><td>CSDN:<br><a href="https://blog.csdn.net/weixin_38781498/article/details/145660517">https://blog.csdn.net/weixin_38781498/article/details/145660517</a><br><br>微信公众号: <br><a href="https://mp.weixin.qq.com/s/Q9DfNtarX7uwvrBKCoQqDA">https://mp.weixin.qq.com/s/Q9DfNtarX7uwvrBKCoQqDA</a><br></td><td>1331</td><td>2025-03-02</td><td></td></tr><tr><td>2025-02-17</td><td><a href="%E6%89%93%E9%80%A0%E6%99%BA%E8%83%BD%E8%AF%AD%E6%96%99%E5%BA%93%EF%BC%9A%E9%80%9A%E8%BF%87Coco%20AI%20Server%20%E5%AE%9E%E7%8E%B0%20Notion%20%E7%AC%94%E8%AE%B0%20RAG%20%E6%A3%80%E7%B4%A2%E5%8A%9F%E8%83%BD.md">打造智能语料库：通过 Coco AI Server 实现 Notion 笔记 RAG 检索功能</a></td><td>CSDN:<br><a href="https://blog.csdn.net/weixin_38781498/article/details/145692866">https://blog.csdn.net/weixin_38781498/article/details/145692866</a><br><br>微信公众号: <br><a href="https://mp.weixin.qq.com/s/E2wMtwF_qioqb1wwp8CZfg">https://mp.weixin.qq.com/s/E2wMtwF_qioqb1wwp8CZfg</a><br></td><td>1170</td><td>2025-03-02</td><td></td></tr><tr><td>2025-02-20</td><td><a href="%E6%8E%A8%E8%8D%90%E7%BB%99%20Easysearch%20%E6%96%B0%E7%94%A8%E6%88%B7%E7%9A%84%E5%87%A0%E4%B8%AA%20Elasticsearch%20%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B7%A5%E5%85%B7.md">推荐给 Easysearch 新用户的几个 Elasticsearch 可视化工具</a></td><td>CSDN:<br><a href="https://blog.csdn.net/weixin_38781498/article/details/145764424">https://blog.csdn.net/weixin_38781498/article/details/145764424</a><br><br>微信公众号: <br><a href="https://mp.weixin.qq.com/s/RaiDPtKJktssJpfd58Tehw">https://mp.weixin.qq.com/s/RaiDPtKJktssJpfd58Tehw</a><br></td><td>394</td><td>2025-03-02</td><td></td></tr><tr><td>2025-02-22</td><td><a href="%E5%AE%9E%E7%8E%B0%20INFINI%20Console%20%E4%B8%8E%20GitHub%20%E7%9A%84%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%E9%9B%86%E6%88%90%EF%BC%9A%E4%B8%80%E7%AB%99%E5%BC%8F%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.md">实现 INFINI Console 与 GitHub 的单点登录集成：一站式身份验证解决方案</a></td><td>CSDN:<br><a href="https://blog.csdn.net/weixin_38781498/article/details/145792720">https://blog.csdn.net/weixin_38781498/article/details/145792720</a><br><br>微信公众号: <br><br></td><td>1018</td><td>2025-03-02</td><td></td></tr><tr><td>2025-02-21</td><td><a href="%E4%BD%BF%E7%94%A8%20INFINI%20Console%20%E9%85%8D%E7%BD%AE%E9%9B%86%E7%BE%A4%E7%9B%91%E6%8E%A7%20Webhook%20%E9%80%9A%E7%9F%A5%E6%8C%87%E5%8D%97.md">使用 INFINI Console 配置集群监控 Webhook 通知指南</a></td><td>CSDN:<br><a href="https://blog.csdn.net/weixin_38781498/article/details/145787827">https://blog.csdn.net/weixin_38781498/article/details/145787827</a><br><br>微信公众号: <br><a href="https://mp.weixin.qq.com/s/5okVri7IOfNgtG17wXgH-g">https://mp.weixin.qq.com/s/5okVri7IOfNgtG17wXgH-g</a><br></td><td>706</td><td>2025-03-02</td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><table><thead><tr><th>发布时间</th><th>文章标题</th><th>文章链接</th><th>阅读量</th><th>统计时间</th><th>备注</th></tr></thead><tbody><tr><td>2025-12-01</td><td>xxx1</td><td>CSDN:<br><br><br>微信公众号: <br></td><td>666</td><td>2025-01-01</td><td></td></tr><tr><td>2025-12-12</td><td>xxx2</td><td></td><td>6666</td><td>2025-01-01</td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;5-月文章&quot;&gt;&lt;a href=&quot;#5-月文章&quot; class=&quot;headerlink&quot; title=&quot;5 月文章&quot;&gt;&lt;/a&gt;5 月文章&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;发布时间&lt;/th&gt;
&lt;th&gt;文章标题&lt;/th&gt;
&lt;th&gt;文章链接&lt;/th</summary>
      
    
    
    
    <category term="极限科技" scheme="https://xu-hardy.github.io/categories/%E6%9E%81%E9%99%90%E7%A7%91%E6%8A%80/"/>
    
    
    <category term="搜索引擎（ES）" scheme="https://xu-hardy.github.io/tags/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%EF%BC%88ES%EF%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>Gemini-cli 踩坑机：国内环境 , 用过 Google Cloud 如何设置？</title>
    <link href="https://xu-hardy.github.io/gemini-cli-%E8%B8%A9%E5%9D%91%E6%9C%BA%EF%BC%9A%E5%9B%BD%E5%86%85%E7%8E%AF%E5%A2%83-%E7%94%A8%E8%BF%87-google-cloud-%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AE%EF%BC%9F/"/>
    <id>https://xu-hardy.github.io/gemini-cli-%E8%B8%A9%E5%9D%91%E6%9C%BA%EF%BC%9A%E5%9B%BD%E5%86%85%E7%8E%AF%E5%A2%83-%E7%94%A8%E8%BF%87-google-cloud-%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AE%EF%BC%9F/</id>
    <published>2025-07-01T16:00:00.000Z</published>
    <updated>2025-06-30T14:36:55.863Z</updated>
    
    <content type="html"><![CDATA[<p>Gemini 也发布了类似的 AI 编程产品 Gemini Cli - 开源命令行 AI 工具</p><p>而且个人谷歌账号登录就能免费用！</p><p>免费额度为每分钟 60 次请求、每天 1000 次请求，是业内最高的免费额度，几乎不会遇到限制。</p><ul><li>支持 Google 搜索实时联网，为模型提供外部上下文。</li><li>支持 MCP 和扩展，便于功能拓展。</li><li>可自定义提示词和指令，适应个人或团队工作流。</li><li>可在脚本中非交互式调用，实现自动化和集成。</li></ul><span id="more"></span><h3 id="安装-gemini-cli"><a href="#安装-gemini-cli" class="headerlink" title="安装 gemini-cli"></a>安装 gemini-cli</h3><p>先来安装 gemini-cli，其实就是一个 NPM 包。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @google/gemini-cli</span><br><span class="line">gemini</span><br></pre></td></tr></table></figure><p>如果不出意外的话，执行之后会闪退。网上说需要设置 TUN 代理，甚至连命令行 export 环境变量也不行。</p><hr><h3 id="登录-Google-SSO-后仍无法使用"><a href="#登录-Google-SSO-后仍无法使用" class="headerlink" title="登录 Google SSO 后仍无法使用"></a>登录 Google SSO 后仍无法使用</h3><p>然后登录 Google SSO 验证，页面会显示 Gemini Code Assist 已获得访问您账号的授权。但是其实还是不行。我们继续看。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/de7757ea56e0bf2d668093ee788b240a.png" alt="de7757ea56e0bf2d668093ee788b240a"></p><p>命令行还是会得到这个报错：</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250626075949247.png" alt="image-20250626075949247"></p><hr><h3 id="设置-GOOGLE-CLOUD-PROJECT-环境变量"><a href="#设置-GOOGLE-CLOUD-PROJECT-环境变量" class="headerlink" title="设置 GOOGLE_CLOUD_PROJECT 环境变量"></a>设置 GOOGLE_CLOUD_PROJECT 环境变量</h3><p>网上基本有这个教程：</p><blockquote><p>用过谷歌云或者 ai studio 的，使用 gemini cli 登陆时可能会有些麻烦，可能要打开 console.cloud.google.com，找到你的 project id，然后设置 GOOGLE_CLOUD_PROJECT 环境变量，使用这种方式打开 gemini cli，就可以用了</p></blockquote><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250626080352544.png" alt="image-20250626080352544"></p><p>然后执行这句，这是环境变量。(临时设置, 仅当前会话有效）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export GOOGLE_CLOUD_PROJECT=&quot;your-project-id&quot;</span><br></pre></td></tr></table></figure><p>如果你想让这个永久生效的话：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;export GOOGLE_CLOUD_PROJECT=&quot;your-project-id&quot;&#x27; &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure><p>然后 source ～&#x2F;.zshrc 就可以了。</p><hr><h3 id="报错：API-未启用"><a href="#报错：API-未启用" class="headerlink" title="报错：API 未启用"></a>报错：API 未启用</h3><p>有发现新的错，</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span>API Error<span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;error&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">     <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">403</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Gemini for Google Cloud API has not been used in project xxxxx before or it is disabled. Enable it by visiting</span></span><br><span class="line"><span class="string"> https://console.developers.google.com/apis/api/cloudaicompanion.googleapis.com/overview?project=xxxxxx then retry. If you enabled this API recently, wait a few minutes for the action to propagate to our</span></span><br><span class="line"><span class="string"> systems and retry.&quot;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;errors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">       <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Gemini for Google Cloud API has not been used in project xxxx before or it is disabled. Enable it by visiting</span></span><br><span class="line"><span class="string"> https://console.developers.google.com/apis/api/cloudaicompanion.googleapis.com/overview?project=xxxx then retry. If you enabled this API recently, wait a few minutes for the action to propagate to our</span></span><br><span class="line"><span class="string"> systems and retry.&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;domain&quot;</span><span class="punctuation">:</span> <span class="string">&quot;usageLimits&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;reason&quot;</span><span class="punctuation">:</span> <span class="string">&quot;accessNotConfigured&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;extendedHelp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://console.developers.google.com&quot;</span></span><br><span class="line">       <span class="punctuation">&#125;</span></span><br><span class="line">     <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="string">&quot;PERMISSION_DENIED&quot;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;details&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">       <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;type.googleapis.com/google.rpc.ErrorInfo&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;reason&quot;</span><span class="punctuation">:</span> <span class="string">&quot;SERVICE_DISABLED&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;domain&quot;</span><span class="punctuation">:</span> <span class="string">&quot;googleapis.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;metadata&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">           <span class="attr">&quot;activationUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://console.developers.google.com/apis/api/cloudaicompanion.googleapis.com/overview?project=xxxx&quot;</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;containerInfo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxxx&quot;</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;consumer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;projects/xxxx&quot;</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;service&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cloudaicompanion.googleapis.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;serviceTitle&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Gemini for Google Cloud API&quot;</span></span><br><span class="line">         <span class="punctuation">&#125;</span></span><br><span class="line">       <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">       <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;type.googleapis.com/google.rpc.LocalizedMessage&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;locale&quot;</span><span class="punctuation">:</span> <span class="string">&quot;en-US&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Gemini for Google Cloud API has not been used in project xxxx before or it is disabled. Enable it by visiting</span></span><br><span class="line"><span class="string"> https://console.developers.google.com/apis/api/cloudaicompanion.googleapis.com/overview?project=xxxx then retry. If you enabled this API recently, wait a few minutes for the action to propagate to our</span></span><br><span class="line"><span class="string"> systems and retry.&quot;</span></span><br><span class="line">       <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">       <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;type.googleapis.com/google.rpc.Help&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;links&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">           <span class="punctuation">&#123;</span></span><br><span class="line">             <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Google developers console API activation&quot;</span><span class="punctuation">,</span></span><br><span class="line">             <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://console.developers.google.com/apis/api/cloudaicompanion.googleapis.com/overview?project=xxxx&quot;</span></span><br><span class="line">           <span class="punctuation">&#125;</span></span><br><span class="line">         <span class="punctuation">]</span></span><br><span class="line">       <span class="punctuation">&#125;</span></span><br><span class="line">     <span class="punctuation">]</span></span><br><span class="line">   <span class="punctuation">&#125;</span></span><br><span class="line"> <span class="punctuation">&#125;</span></span><br><span class="line"> <span class="punctuation">]</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>打开报错了的网页 <a href="https://console.developers.google.com/apis/api/cloudaicompanion.googleapis.com/overview?project=xxxxxx%EF%BC%8C%E6%AF%94%E5%A6%82%E8%BF%99%E4%B8%AA%EF%BC%8C%E8%BF%99%E4%B8%AA%E7%BD%91%E9%A1%B5%E6%98%AF%E5%92%8C%E4%BD%A0%E7%9A%84">https://console.developers.google.com/apis/api/cloudaicompanion.googleapis.com/overview?project=xxxxxx，比如这个，这个网页是和你的</a> ID 相关的，然后点击启用。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/d94297cbdd8e54f2d75d126f07f09bcb.png" alt="d94297cbdd8e54f2d75d126f07f09bcb"></p><hr><h3 id="成功运行！"><a href="#成功运行！" class="headerlink" title="成功运行！"></a>成功运行！</h3><p>终于可以用了不容易。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250626075518890.png" alt="image-20250626075518890"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Gemini 也发布了类似的 AI 编程产品 Gemini Cli - 开源命令行 AI 工具&lt;/p&gt;
&lt;p&gt;而且个人谷歌账号登录就能免费用！&lt;/p&gt;
&lt;p&gt;免费额度为每分钟 60 次请求、每天 1000 次请求，是业内最高的免费额度，几乎不会遇到限制。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持 Google 搜索实时联网，为模型提供外部上下文。&lt;/li&gt;
&lt;li&gt;支持 MCP 和扩展，便于功能拓展。&lt;/li&gt;
&lt;li&gt;可自定义提示词和指令，适应个人或团队工作流。&lt;/li&gt;
&lt;li&gt;可在脚本中非交互式调用，实现自动化和集成。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="LLM" scheme="https://xu-hardy.github.io/categories/LLM/"/>
    
    
    <category term="LLM" scheme="https://xu-hardy.github.io/tags/LLM/"/>
    
  </entry>
  
  <entry>
    <title>组队参加 Amazon Q Idea 1000，我们的作品上了 AWS 峰会</title>
    <link href="https://xu-hardy.github.io/%E7%BB%84%E9%98%9F%E5%8F%82%E5%8A%A0-amazon-q-idea-1000%EF%BC%8C%E6%88%91%E4%BB%AC%E7%9A%84%E4%BD%9C%E5%93%81%E4%B8%8A%E4%BA%86-aws-%E5%B3%B0%E4%BC%9A/"/>
    <id>https://xu-hardy.github.io/%E7%BB%84%E9%98%9F%E5%8F%82%E5%8A%A0-amazon-q-idea-1000%EF%BC%8C%E6%88%91%E4%BB%AC%E7%9A%84%E4%BD%9C%E5%93%81%E4%B8%8A%E4%BA%86-aws-%E5%B3%B0%E4%BC%9A/</id>
    <published>2025-07-01T16:00:00.000Z</published>
    <updated>2025-06-30T14:36:55.863Z</updated>
    
    <content type="html"><![CDATA[<p>最近生成式 AI 的比赛很多，也报名了 AWS Idea1000 的比赛，作品登录上了 AWS 的峰会。</p><p>我们的产品名称是“拍立懂”，团队名称是 “凌晨三点的夜”。主要是<strong>拍照识别</strong>商品成分、品牌资质，分析价格合理性，为老年人提供购买决策建议；通过<strong>实时语音聊天交互</strong>，<strong>亲人语音陪伴</strong>老年人购物，满足空巢老人的情感空缺。</p><p>我们的项目团队汇聚了文化创意创业者、资深互联网产品经理、互联网技术博主与 AI 前端工程师等多元背景，形成从商业策略到产品落地的完整闭环。团队成员对创新技术和用户价值怀有共同的热情，彼此协作、优势互补，致力于在商业模式和技术实现上持续突破，为项目注入持久动力。</p><span id="more"></span><p>说人话版本:</p><blockquote><p><strong>“拍立懂”首页：先定位、再拍照、还可语音，一站式搞定逛超市！</strong><br>进入小程序，系统会自动识别你所在的门店，保证每一次推荐都“本地有货”。</p><ul><li>对准商品“拍一拍”，AI 秒识品牌与规格，为你生成成分&#x2F;营养解析；</li><li>打开语音助手，直接问“这款油健康吗？”，即时语音作答；</li><li>想逛逛热卖？下拉切换「日用食品 &#x2F; 零食饮料 &#x2F; 时令食材」，AI 列出今日在售优质清单。<br><strong>拍照 + 语音 + 实时库存</strong>，让你逛超市不再纠结，用 AI 把复杂信息说得清清楚楚。</li></ul></blockquote><p>架构图如下：</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/0f723804988ba318ff6ab24970dfc023.png" alt="0f723804988ba318ff6ab24970dfc023"></p><ol><li><strong>域名与流量入口</strong><ul><li>Route 53 购买域名以及负责域名解析</li><li>ALB 负载均衡 &amp; HTTPS 卸载</li></ul></li><li><strong>应用与模型服务</strong><ul><li><strong>Next.js</strong> (前端+SSR)</li><li><strong>Flask (语音识别、图像识别、流式对题) + FastAPI （OpenAI realtime 代理）</strong></li></ul></li><li><strong>数据与存储</strong><ul><li>S3 存音频&#x2F;图片</li><li><strong>Milvus (Zilliz Cloud on GCP)</strong> 向量检索做 RAG</li></ul></li><li><strong>多模态交互</strong><ul><li>OpenAI Vision + Realtime 实时对话</li></ul></li><li><strong>环境 &amp; CI&#x2F;CD</strong><ul><li>Lightsail 做 POC，懒猫微服异地组网调试</li><li>GitHub Actions 一件打包到 Dockerhub</li><li>Docker-compose 一键部署</li></ul></li></ol><p>这个是最初的设计。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250620102357142.png"></p><ul><li><strong>门店定位（顶部）</strong><ul><li>自动显示 _“上海市黄浦区马当路富民超市”_，说明系统已精准锁定当前购物地点，为后续推荐做铺垫。</li></ul></li><li><strong>商品识别卡片（居中大框）</strong><ul><li>灰阶渐变 + 相机图标，文案 _“对准商品 拍一拍”_。</li><li>点击即可拍照识别商品，进入智能解析流程，是整套体验的“入口 1”。</li></ul></li><li><strong>语音购物助手按钮（绿色条形）</strong><ul><li>显眼的绿色按钮 _“打开语音购物助手”_。</li><li>用户只需轻触，便可与 AI 语音对话，实现“入口 2”。</li></ul></li><li><strong>AI 推荐栏目（下方列表）</strong><ul><li>栏目标题 _“AI 帮你聪明买”_，右侧分类下拉框默认 _“日用食品”_。</li><li>下拉可切换 <em>“零食饮料 &#x2F; 时令食材”</em> 等，列表随之刷新“今日在售”优选商品。</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/f6f98cd0-65ec-41fa-ab5b-1d43b75504b5.png" alt="f6f98cd0-65ec-41fa-ab5b-1d43b75504b5"></p><ul><li><strong>拍一下，AI 帮你把配料表翻译成人话！</strong><br>识别完成后，只需点开「成分分析」，AI 会：<ol><li>精准列出主要成分、配料比例；</li><li>提醒潜在风险（如高糖、高钠或人工添加）；</li><li>结合膳食指南，给出健康建议。<br>如果想进一步了解热量、矿物质等信息，切换到「营养价值」即可；想知道同类好物怎么选？点「选购建议」一键获得。<br><strong>拍立懂，让任何瓶瓶罐罐都不再是“天书”，分分钟看懂喝得放心！</strong></li></ol></li></ul><blockquote><p>“拍一下成分表，让 AI 帮你读懂配料、评估健康影响，真正做到买得安心、喝得放心。”</p></blockquote><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/0375561d-e43e-4618-94be-66439460d91c.png" alt="0375561d-e43e-4618-94be-66439460d91c"></p><blockquote><p><strong>“坚果零食好不好？拍立懂 3 秒告诉你！”</strong><br>拍照上传后，AI 自动识别到「烤坚果夹片 145 g × 24 片」，并细致解析：</p><ul><li><strong>坚果种类</strong>、<strong>外层配料</strong>、<strong>甜味剂 &#x2F; 添加剂</strong> 全部列出；</li><li>逐项点评对心血管、体重管理、过敏风险的影响；</li><li>支持一键切换到「营养价值」查看热量、蛋白质等详细数据，或点「选购建议」获取更健康替代品。<br><strong>拍立懂</strong> —— 把复杂配料表翻译成人话，让零食的健康度一眼可见！</li></ul></blockquote><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250620134244888.png" alt="image-20250620134244888"></p><ul><li><strong>一句话上手语音购物助手</strong><br>点一下麦克风，不用输入、不用切页面，直接对 AI 说：“这款牛奶适合减肥吗？”——拍立懂立刻回答，让逛超市像跟朋友聊天一样简单。<ul><li><strong>极速连接</strong>：3 秒内完成网络 &amp; 麦克风检测</li><li><strong>实时反馈</strong>：对话状态一目了然，杜绝“说了没听见”</li><li><strong>智能引导</strong>：AI 主动提问，帮你快速聚焦购物痛点<br>语音 + AI，让信息检索更高效，让购物决策更轻松！</li></ul></li></ul><blockquote><p>“无需打字，长按语音键即可提问。拍立懂即刻为你解惑，让购物沟通更流畅。”</p></blockquote><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/f5cd2824-be07-4152-8bc9-91bc6ddc6735.jpeg" alt="f5cd2824-be07-4152-8bc9-91bc6ddc6735"></p><ul><li><strong>商业计划书</strong><br><a href="https://edwqcun7v5.feishu.cn/docx/VBtWdFMB3omZxhxT2FGco73MnIe">https://edwqcun7v5.feishu.cn/docx/VBtWdFMB3omZxhxT2FGco73MnIe</a></li><li><strong>产品演示文档</strong><br><a href="https://edwqcun7v5.feishu.cn/docx/RNvldJCQVoU1nixqHjrcZ2TNnfc">https://edwqcun7v5.feishu.cn/docx/RNvldJCQVoU1nixqHjrcZ2TNnfc</a></li></ul><hr><blockquote><p>⏰ <strong>凌晨三点的夜</strong> 还在码字、调参，但有热情就不困。<br><strong>拍立懂</strong>，让爸妈“拍一拍就懂”，也让我们更懂爸妈。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近生成式 AI 的比赛很多，也报名了 AWS Idea1000 的比赛，作品登录上了 AWS 的峰会。&lt;/p&gt;
&lt;p&gt;我们的产品名称是“拍立懂”，团队名称是 “凌晨三点的夜”。主要是&lt;strong&gt;拍照识别&lt;/strong&gt;商品成分、品牌资质，分析价格合理性，为老年人提供购买决策建议；通过&lt;strong&gt;实时语音聊天交互&lt;/strong&gt;，&lt;strong&gt;亲人语音陪伴&lt;/strong&gt;老年人购物，满足空巢老人的情感空缺。&lt;/p&gt;
&lt;p&gt;我们的项目团队汇聚了文化创意创业者、资深互联网产品经理、互联网技术博主与 AI 前端工程师等多元背景，形成从商业策略到产品落地的完整闭环。团队成员对创新技术和用户价值怀有共同的热情，彼此协作、优势互补，致力于在商业模式和技术实现上持续突破，为项目注入持久动力。&lt;/p&gt;</summary>
    
    
    
    <category term="AWS" scheme="https://xu-hardy.github.io/categories/AWS/"/>
    
    
    <category term="AWS" scheme="https://xu-hardy.github.io/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>懒猫微服入门篇（零）：开箱初探，硬件亮相</title>
    <link href="https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%85%A5%E9%97%A8%E7%AF%87%EF%BC%88%E9%9B%B6%EF%BC%89%EF%BC%9A%E5%BC%80%E7%AE%B1%E5%88%9D%E6%8E%A2%EF%BC%8C%E7%A1%AC%E4%BB%B6%E4%BA%AE%E7%9B%B8/"/>
    <id>https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%85%A5%E9%97%A8%E7%AF%87%EF%BC%88%E9%9B%B6%EF%BC%89%EF%BC%9A%E5%BC%80%E7%AE%B1%E5%88%9D%E6%8E%A2%EF%BC%8C%E7%A1%AC%E4%BB%B6%E4%BA%AE%E7%9B%B8/</id>
    <published>2025-07-01T16:00:00.000Z</published>
    <updated>2025-06-30T14:36:55.856Z</updated>
    
    <content type="html"><![CDATA[<p>用了一个半月的懒猫微服，来写一个伪开箱。机甲风格外壳也得值个几百块，这个外壳还支持拆机之后全身水洗。在桌面上确实颜值很高，在各个小主机都是塑料外壳的时代，属于用心良苦了。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250619161920055.png" alt="image-20250619161920055"></p><p>这张图是创始人在用户群里发的实拍图：</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/6c54b4ac4c8d437375149b66ca7d6aee.jpg" alt="6c54b4ac4c8d437375149b66ca7d6aee"></p><p>据群友们聊天说，这台机器已经经过了多个版本迭代，最后定型为现在这个样子。以后不要再用鞋盒了。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/6356f1ef9911435c101dc8d9c4eec591.png" alt="6356f1ef9911435c101dc8d9c4eec591"></p><hr><span id="more"></span><h3 id="系统与配置"><a href="#系统与配置" class="headerlink" title="系统与配置"></a>系统与配置</h3><p>通过 <code>neofetch</code> 可以看到，这台机器预装的是 Debian 12，实际系统也做了不少魔改优化。核心配置如下：</p><ul><li><strong>CPU</strong>：Intel Core i5-1155G7 @ 4.5GHz（4 核心 8 线程），相当于现在主流的 N305 强了很多。</li><li><strong>内存</strong>：笔记本内存 DDR4，最大可扩展至 32GB，3200MHZ （买的时候可以谈从 16G 升级到 32G）</li><li><strong>显卡</strong>：Intel Iris Xe Graphics，英特尔最强核显，核显频率最高 1.35GHz，支持 4K 高清输出与 H.265 视频硬解</li><li><strong>存储</strong>：<ul><li>系统盘：512GB PCIe 4.0 NVMe，用于运行系统组件和保存根目录文件。</li><li>数据盘：两个 2.5 寸 SATA 盘位，可以组 RAID0 或者 RAID1。SSD 或者 HDD 不限。</li></ul></li><li><strong>主板</strong>：看上是自己做的，叫做 YENTEK LC2580，启动热键是 F11，进入 BIOS 的按键是 <code>&lt;DEL&gt;</code> 。 没有锁 BIOS，也支持刷成其他的系统。</li></ul><p>运行 <code>dmidecode</code> 可见内存状态如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> dmidecode -t memory | grep -e <span class="string">&quot;Size&quot;</span> -e <span class="string">&quot;Form Factor&quot;</span> -e <span class="string">&quot;Locator&quot;</span></span><br><span class="line">        Size: No Module Installed</span><br><span class="line">        Form Factor: Unknown</span><br><span class="line">        Locator: Controller1-ChannelA-DIMM0</span><br><span class="line">        Bank Locator: BANK 0</span><br><span class="line">        Size: 32 GB</span><br><span class="line">        Form Factor: SODIMM</span><br><span class="line">        Locator: Controller0-ChannelA-DIMM0</span><br><span class="line">        Bank Locator: BANK 0</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure><hr><h3 id="网络性能"><a href="#网络性能" class="headerlink" title="网络性能"></a>网络性能</h3><p>网络配置方面也比较主流：</p><ul><li><strong>有线</strong>：2.5G 单网口，可惜我的路由器还是千兆不能完全发挥其能力</li><li><strong>无线</strong>：Intel AX210，支持 WiFi 6 可以跑满千兆。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(base) lzcbox-029c588e ~ <span class="comment"># dmesg | grep -i ethernet</span></span><br><span class="line">[    2.946824] Intel(R) 2.5G Ethernet Linux Driver</span><br><span class="line">[    9.157839] Bluetooth: BNEP (Ethernet Emulation) ver 1.3</span><br><span class="line">(base) lzcbox-029c588e ~ <span class="comment"># lspci | grep -i network</span></span><br><span class="line">04:00.0 Network controller: Intel Corporation Wi-Fi 6 AX210/AX211/AX411 160MHz (rev 1a)</span><br></pre></td></tr></table></figure><p>于 WIFI6 来说协商速率一般是 2402Mbps，所以就算达到协商速率的一般的话，也就是差不多千兆，加上很多家用路由也仅仅是千兆，我为了 POE 供电所以牺牲了部分内网带宽，所以没有跑满。如果你有 2.5G 的机器和交换机，那么一定可以跑的很舒服，基本就到机械硬盘的上限了。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250619213746613.png" alt="image-20250619213746613"></p><hr><h3 id="CPU-性跑分"><a href="#CPU-性跑分" class="headerlink" title="CPU 性跑分"></a>CPU 性跑分</h3><p>跑了几次 geekbench6，能够看到单核心的性能有 1700+，由于测速的同时还在运行很多系统应用，所以实际的数值比这个还要大一些。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250619215814429.png" alt="image-20250619215814429"></p><p>后面用了 EndeavourOS KDE 的随身碟，能够看到单核心分数还能再提升。这个 CPU 跑 docker，K8S 甚至虚拟机都没啥问题了。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250619215631160.png" alt="image-20250619215631160"></p><hr><h3 id="外部接口"><a href="#外部接口" class="headerlink" title="外部接口"></a>外部接口</h3><p>机器背部接口一览，我这边插了一张采集卡，非常实用：</p><p>接口方面也非常丰富：</p><ul><li><strong>USB</strong>：USB 3.0 x3</li><li><strong>Type-C</strong>：USB 3.2 Type-C x2，支持反冲保护</li><li><strong>视频输出</strong>：HDMI 2.1 x1，支持 4K 输出、多声道音频</li><li><strong>音频接口</strong>：3.5mm 耳机口，支持高阻抗耳机</li><li><strong>电源接口</strong>：DC 5525</li></ul><blockquote><p>整机搭载一枚 17mm 涡轮静音风扇，结合滚珠轴承与自研调速算法，实际体验确实安静，确实没有 3.5 寸硬盘那种炒豆子的声音了。</p></blockquote><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/15b358f335c93c896b98292e49ee0bf6.jpg" alt="15b358f335c93c896b98292e49ee0bf6"></p><p>可以看到 Deepin 的 团队出来做产品的能力还是挺强的，从主板到 OS 的深度定制，技术功底可见一斑。</p><p>下面是群友的发的效果图，实物质感确实很棒，欢迎找我下单体验！</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/cd96e69cd34841430873db544aae96a4.png" alt="cd96e69cd34841430873db544aae96a4"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;用了一个半月的懒猫微服，来写一个伪开箱。机甲风格外壳也得值个几百块，这个外壳还支持拆机之后全身水洗。在桌面上确实颜值很高，在各个小主机都是塑料外壳的时代，属于用心良苦了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250619161920055.png&quot; alt=&quot;image-20250619161920055&quot;&gt;&lt;/p&gt;
&lt;p&gt;这张图是创始人在用户群里发的实拍图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/6c54b4ac4c8d437375149b66ca7d6aee.jpg&quot; alt=&quot;6c54b4ac4c8d437375149b66ca7d6aee&quot;&gt;&lt;/p&gt;
&lt;p&gt;据群友们聊天说，这台机器已经经过了多个版本迭代，最后定型为现在这个样子。以后不要再用鞋盒了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/6356f1ef9911435c101dc8d9c4eec591.png&quot; alt=&quot;6356f1ef9911435c101dc8d9c4eec591&quot;&gt;&lt;/p&gt;
&lt;hr&gt;</summary>
    
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/categories/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
    
    <category term="硬件与外设" scheme="https://xu-hardy.github.io/tags/%E7%A1%AC%E4%BB%B6%E4%B8%8E%E5%A4%96%E8%AE%BE/"/>
    
  </entry>
  
  <entry>
    <title>懒猫微服实战入门（一）： 从开启SSH到免密登录，一步步教你搞定远程管理</title>
    <link href="https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A-%E4%BB%8E%E5%BC%80%E5%90%AFssh%E5%88%B0%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95%EF%BC%8C%E4%B8%80%E6%AD%A5%E6%AD%A5%E6%95%99%E4%BD%A0%E6%90%9E%E5%AE%9A%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
    <id>https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A-%E4%BB%8E%E5%BC%80%E5%90%AFssh%E5%88%B0%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95%EF%BC%8C%E4%B8%80%E6%AD%A5%E6%AD%A5%E6%95%99%E4%BD%A0%E6%90%9E%E5%AE%9A%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86/</id>
    <published>2025-07-01T16:00:00.000Z</published>
    <updated>2025-06-30T14:36:55.856Z</updated>
    
    <content type="html"><![CDATA[<p>对于很多资深的 NAS 玩家来说，拿到一台机器首先要配置远程登录和环境依赖。懒猫上其实可以实现云计算讲的 Iass - Pass -Sass 这三个层级，不过对于资深玩家而言，肯定是要从 Infra 这个级别入手的。</p><p>官方文档如下：<br><a href="https://developer.lazycat.cloud/ssh.html">https://developer.lazycat.cloud/ssh.html</a></p><p>安装懒猫开发者工具，然后再右上角能够看到 sshd 服务的状态。<br>然后点击开启，之后我们才可以使用 ssh 登录，在写这篇文章测试的时候，我关闭了这个按钮，再去 ssh 直接就报错了。</p><p><img src="https://lzc-playground-1301583638.cos.ap-chengdu.myqcloud.com/guidelines/459/823b1afe-fb70-4866-8303-aa051e9b65bc.png" alt="image.png" title="image.png"></p><p>默认是 root 身份登录，密码在开发者工具里启动的时候设置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@&lt;your-service-name&gt;.heiyu.space</span><br></pre></td></tr></table></figure><p>如果觉得密码麻烦，也可以导入密钥，更加安全：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id -i ~/.ssh/id_ed25519 root@xxxxx.heiyu.space</span><br></pre></td></tr></table></figure><span id="more"></span><p>输出如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: &quot;/Users/xu/.ssh/id_ed25519.pub&quot;</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys</span><br><span class="line">root@micro.heiyu.space&#x27;s password:</span><br><span class="line"></span><br><span class="line">Number of key(s) added:        1</span><br><span class="line"></span><br><span class="line">Now try logging into the machine, with: &quot;ssh -i /.ssh/id_ed25519 &#x27;root@xxxx.heiyu.space&#x27;&quot;</span><br><span class="line">and check to make sure that only the key(s) you wanted were added.</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果觉得 root 用户不安全的话，可以新建一个日常用户，然后加到 docker 组里面，也能正常使用 docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> useradd -m -s /bin/bash user1</span><br><span class="line"></span><br><span class="line">usermod -aG docker user1</span><br><span class="line"></span><br><span class="line">usermod -aG <span class="built_in">sudo</span> user1</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://lzc-playground-1301583638.cos.ap-chengdu.myqcloud.com/guidelines/459/e40ad428-93be-487e-880c-d37c76f27fc1.png" alt="image.png" title="image.png"></p><p>如果遇到到 root 组会有无法使用 sudo 的问题，请独立安装，sudo 是单独的软件包,需要安装才有.并不是所有 Linux 都有 sudo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt update &amp;&amp; apt install <span class="built_in">sudo</span></span><br></pre></td></tr></table></figure><p>注意：要开着懒猫微服 APP ，否则无法使用 heiyu.space 提供的穿透服务。</p><p><img src="https://lzc-playground-1301583638.cos.ap-chengdu.myqcloud.com/guidelines/459/a303adbb-d3f5-4fa2-9a6d-6d3b25abbe34.png" alt="image.png" title="image.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;对于很多资深的 NAS 玩家来说，拿到一台机器首先要配置远程登录和环境依赖。懒猫上其实可以实现云计算讲的 Iass - Pass -Sass 这三个层级，不过对于资深玩家而言，肯定是要从 Infra 这个级别入手的。&lt;/p&gt;
&lt;p&gt;官方文档如下：&lt;br&gt;&lt;a href=&quot;https://developer.lazycat.cloud/ssh.html&quot;&gt;https://developer.lazycat.cloud/ssh.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;安装懒猫开发者工具，然后再右上角能够看到 sshd 服务的状态。&lt;br&gt;然后点击开启，之后我们才可以使用 ssh 登录，在写这篇文章测试的时候，我关闭了这个按钮，再去 ssh 直接就报错了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lzc-playground-1301583638.cos.ap-chengdu.myqcloud.com/guidelines/459/823b1afe-fb70-4866-8303-aa051e9b65bc.png&quot; alt=&quot;image.png&quot; title=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;默认是 root 身份登录，密码在开发者工具里启动的时候设置：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ssh root@&amp;lt;your-service-name&amp;gt;.heiyu.space&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;如果觉得密码麻烦，也可以导入密钥，更加安全：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ssh-copy-id -i ~/.ssh/id_ed25519 root@xxxxx.heiyu.space&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/categories/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/tags/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
  </entry>
  
  <entry>
    <title>懒猫微服实战入门（十）：通过 nmtui 设置静态 IP，接入旁路由实现科学上网</title>
    <link href="https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E5%8D%81%EF%BC%89%EF%BC%9A%E9%80%9A%E8%BF%87-nmtui-%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81-ip%EF%BC%8C%E6%8E%A5%E5%85%A5%E6%97%81%E8%B7%AF%E7%94%B1%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    <id>https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E5%8D%81%EF%BC%89%EF%BC%9A%E9%80%9A%E8%BF%87-nmtui-%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81-ip%EF%BC%8C%E6%8E%A5%E5%85%A5%E6%97%81%E8%B7%AF%E7%94%B1%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</id>
    <published>2025-07-01T16:00:00.000Z</published>
    <updated>2025-06-30T14:36:55.856Z</updated>
    
    <content type="html"><![CDATA[<p>日常开发中，我主要使用的是 <strong>MacBook</strong> 作为主力机。但有些软件、驱动或容器服务必须在 <strong>X86 架构环境下测试</strong>，这时懒猫微服就是一个很好的辅助平台。然而在一些网络场景下，为了访问特定服务，还需要将这台设备接入旁路由中。</p><p>不然我访问 Dockerhub 是这样的，经常会超时，只能用不是很全的镜像站。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250530113416141.png" alt="image-20250530113416141"></p><p>群晖等设备提供的图形化网络面板，懒猫微服这类轻量系统没有 GUI，只能使用命令行工具。NetworkManager 提供了一个非常好用的文本界面工具：<code>nmtui</code>。</p><h2 id="什么是-nmtui"><a href="#什么是-nmtui" class="headerlink" title="什么是 nmtui"></a>什么是 <code>nmtui</code></h2><p><code>nmtui</code> 是 NetworkManager 的 TUI（Text-based User Interface）组件，界面类似简化版 GUI，操作简单，功能却很强大。通过它，我们可以方便地完成以下配置：</p><ul><li>选择并连接网络设备（有线或无线）</li><li>设置 <strong>手动 IP 地址</strong></li><li>指定 <strong>网关</strong>、<strong>DNS 服务器</strong></li><li>管理 <strong>路由策略</strong></li><li>开启或关闭 DHCP 自动获取功能<span id="more"></span>命令如下：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmtui</span><br></pre></td></tr></table></figure><hr><h2 id="设置静态-IP-接入旁路由"><a href="#设置静态-IP-接入旁路由" class="headerlink" title="设置静态 IP 接入旁路由"></a>设置静态 IP 接入旁路由</h2><p>打开 <code>nmtui</code> 后，进入“Edit a connection”，编辑你连接的网卡（如 <code>enp2s0</code>），手动设置 IP 地址、网关和 DNS。如下图所示，我将所有网络解析都指向了旁路由（比如是 OpenWrt 或其他带翻墙能力的设备）：</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250530113654399.png" alt="nmtui IPv4 设置"></p><p>确保设置完成后，运行以下命令重新应用配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmcli device reapply enp2s0</span><br></pre></td></tr></table></figure><p>如果配置无误，网络将立即切换到静态 IP 并走旁路由的网关。</p><hr><h2 id="验证效果"><a href="#验证效果" class="headerlink" title="验证效果"></a>验证效果</h2><p>这样子终端就能下载 Docker image 了，其实到这一步已经完成了。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250530113410246.png" alt="Google 搜索页面"></p><p>接下来，可以通过懒猫微服中安装的浏览器测试网络是否生效。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250530113238801.png" alt="YouTube 套娃"></p><p>继续打开 YouTube 首页，也能顺利访问并加载视频页面：</p><p>你没看错，这是 <strong>浏览器里的浏览器</strong>，实现了一个“浏览器套娃”的效果。😂</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250530112240064.png" alt="image-20250530112240064"></p><p>最终，我播放了银临的《牵丝戏》，人美歌也好听～</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250530112250228.png" alt="银临《牵丝戏》"></p><p><img src="https://lzc-playground-1301583638.cos.ap-chengdu.myqcloud.com/guidelines/459/59ab31d4-adf8-4c8e-9775-1b37710f570a.png" alt="77dea8a6a38817c503c379dd946fc9e4.png" title="77dea8a6a38817c503c379dd946fc9e4.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;日常开发中，我主要使用的是 &lt;strong&gt;MacBook&lt;/strong&gt; 作为主力机。但有些软件、驱动或容器服务必须在 &lt;strong&gt;X86 架构环境下测试&lt;/strong&gt;，这时懒猫微服就是一个很好的辅助平台。然而在一些网络场景下，为了访问特定服务，还需要将这台设备接入旁路由中。&lt;/p&gt;
&lt;p&gt;不然我访问 Dockerhub 是这样的，经常会超时，只能用不是很全的镜像站。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250530113416141.png&quot; alt=&quot;image-20250530113416141&quot;&gt;&lt;/p&gt;
&lt;p&gt;群晖等设备提供的图形化网络面板，懒猫微服这类轻量系统没有 GUI，只能使用命令行工具。NetworkManager 提供了一个非常好用的文本界面工具：&lt;code&gt;nmtui&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;什么是-nmtui&quot;&gt;&lt;a href=&quot;#什么是-nmtui&quot; class=&quot;headerlink&quot; title=&quot;什么是 nmtui&quot;&gt;&lt;/a&gt;什么是 &lt;code&gt;nmtui&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;nmtui&lt;/code&gt; 是 NetworkManager 的 TUI（Text-based User Interface）组件，界面类似简化版 GUI，操作简单，功能却很强大。通过它，我们可以方便地完成以下配置：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选择并连接网络设备（有线或无线）&lt;/li&gt;
&lt;li&gt;设置 &lt;strong&gt;手动 IP 地址&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;指定 &lt;strong&gt;网关&lt;/strong&gt;、&lt;strong&gt;DNS 服务器&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;管理 &lt;strong&gt;路由策略&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;开启或关闭 DHCP 自动获取功能</summary>
    
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/categories/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
    
    <category term="代理" scheme="https://xu-hardy.github.io/tags/%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>懒猫微服实战入门（十一）：一键换源指南：用 chsrc 开启丝滑体验</title>
    <link href="https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%EF%BC%9A%E4%B8%80%E9%94%AE%E6%8D%A2%E6%BA%90%E6%8C%87%E5%8D%97%EF%BC%9A%E7%94%A8-chsrc-%E5%BC%80%E5%90%AF%E4%B8%9D%E6%BB%91%E4%BD%93%E9%AA%8C/"/>
    <id>https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%EF%BC%9A%E4%B8%80%E9%94%AE%E6%8D%A2%E6%BA%90%E6%8C%87%E5%8D%97%EF%BC%9A%E7%94%A8-chsrc-%E5%BC%80%E5%90%AF%E4%B8%9D%E6%BB%91%E4%BD%93%E9%AA%8C/</id>
    <published>2025-07-01T16:00:00.000Z</published>
    <updated>2025-06-30T14:36:55.856Z</updated>
    
    <content type="html"><![CDATA[<p>最近懒猫微服的系统固件进行了更新，默认的软件源重新指向了国际源。估计是为了方便海外用户，但对于国内开发者来说，访问速度顿时大打折扣，软件安装和更新频繁卡在连接阶段，着实是一个问题。</p><p>正巧群友推荐了一个神器 —— <a href="https://gitee.com/RubyMetric/chsrc"><code>chsrc</code></a>。这个工具支持一键切换系统、Python、conda 等多个主流组件的源，简洁高效，非常适合懒猫微服这样的轻量环境使用。</p><h2 id="下载并安装-chsrc"><a href="#下载并安装-chsrc" class="headerlink" title="下载并安装 chsrc"></a>下载并安装 chsrc</h2><p>chsrc 项目在 Gitee 上提供了预编译的可执行文件，适用于不同架构的 Linux 设备。我当前使用的是 x86_64 架构，因此只需运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://gitee.com/RubyMetric/chsrc/releases/download/pre/chsrc-x64-linux -o chsrc</span><br><span class="line"><span class="built_in">chmod</span> +x ./chsrc</span><br></pre></td></tr></table></figure><p>下载后，为了方便使用，我们通常会把它加入环境变量。但懒猫微服的一个特殊机制是：<strong>除了 <code>/root</code> 目录，其他目录在每次重启后都会被重置</strong>。这意味着如果你将 chsrc 放在 <code>/home</code> 或 <code>/usr/local/bin</code> 之类的目录，它在下次重启后可能就不见了。</p><span id="more"></span><p>所以我将 chsrc 的二进制文件移动到了 <code>/root/app</code> 下（可以新建这个目录），并在 <code>~/.bashrc</code> 中手动追加了环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=/root/app:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>这样每次打开 shell 时，系统就会自动把 chsrc 所在路径加入 <code>$PATH</code>，确保我们可以直接使用 <code>chsrc</code> 命令。</p><h2 id="一键更换-Debian-软件源"><a href="#一键更换-Debian-软件源" class="headerlink" title="一键更换 Debian 软件源"></a>一键更换 Debian 软件源</h2><p>懒猫微服是基于 Debian 的发行版，因此可以直接运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsrc <span class="built_in">set</span> debian</span><br></pre></td></tr></table></figure><p>运行后，工具会先检测系统当前源格式（支持新版 <code>deb822</code>），然后测速多个国内镜像源（如清华、中科大、阿里等），自动选择最快的源进行替换，整个过程完全自动化，再也不用去网上搜帖子找各种源了。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250530201828165.png" alt="换源截图"></p><h2 id="更换-Python-镜像源"><a href="#更换-Python-镜像源" class="headerlink" title="更换 Python 镜像源"></a>更换 Python 镜像源</h2><p>除了操作系统本身的源之外，也能更换 Python，node 这样的源。</p><p>我制作了一个 Miniconda 的一键安装脚本，用来替代系统自带的 Python3.11，用 conda 虚拟环境管理起来很方便。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 下载最新 Miniconda 安装脚本</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;📥 正在下载 Miniconda 安装器...&quot;</span></span><br><span class="line">MINICONDA=Miniconda3-latest-Linux-x86_64.sh</span><br><span class="line">wget https://repo.anaconda.com/miniconda/<span class="variable">$MINICONDA</span> -O /tmp/<span class="variable">$MINICONDA</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 静默安装到 ~/miniconda3</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;⚙️ 正在静默安装到 ~/miniconda3...&quot;</span></span><br><span class="line">bash /tmp/<span class="variable">$MINICONDA</span> -b -p <span class="variable">$HOME</span>/miniconda3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 添加到 PATH（写入 .bashrc）</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;🔧 正在将 Miniconda 添加到 PATH...&quot;</span></span><br><span class="line">CONDA_INIT=<span class="string">&#x27;export PATH=&quot;$HOME/miniconda3/bin:$PATH&quot;&#x27;</span></span><br><span class="line"><span class="keyword">if</span> ! grep -q <span class="string">&quot;<span class="variable">$CONDA_INIT</span>&quot;</span> ~/.bashrc; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$CONDA_INIT</span>&quot;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 初始化 conda（非交互式）</span></span><br><span class="line"><span class="variable">$HOME</span>/miniconda3/bin/conda init bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 提示用户刷新 shell</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;✅ 安装完成！请运行以下命令以立即生效：&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;  source ~/.bashrc&quot;</span></span><br></pre></td></tr></table></figure><p>这个脚本的好处是全程自动化，不需要你动手点选目录，也不必一步步设置环境变量，适合懒猫开发者在新设备或系统还原后快速恢复工作环境。</p><p>安装好 Miniconda 之后，就可以利用 <code>chsrc</code> 来更换 pip 源了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsrc <span class="built_in">set</span> python</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/449f7b0d2e26f4247caf0ce47b4c1622.png" alt="chsrc 设置 Python 源"></p><p>此命令会将 pip 的默认源改为清华源或豆瓣源等国内镜像，提高模块下载速度，彻底告别“卡在安装 xx 模块”的窘境。</p><p>最后一步，把 conda 的源也换成国内的。直接执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsrc <span class="built_in">set</span> conda</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250530204151317.png" alt="换源成功"></p><p>然后需要手动更新 <code>.condarc</code> 配置文件。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>这次我体验了 <code>chsrc</code> 在懒猫微服上的完整使用链路，感受可以总结为三句话：</p><ul><li><strong>能跑就行？不，要跑得快。</strong></li><li><strong>别用默认源，懒人换源有奇效。</strong></li><li><strong>系统、Python、Conda，一条龙解决卡顿。</strong></li></ul><p>如果你也在用懒猫微服、或者在其他 Debian 系的轻量服务器上摸索开发环境，强烈推荐你试试这个工具和脚本组合。毕竟，“懒得配置”不应该成为“卡在配置”的理由。</p><p><img src="https://lzc-playground-1301583638.cos.ap-chengdu.myqcloud.com/guidelines/459/e5fc8b99-2220-4a5a-8327-38da7b93456f.png" alt="image.png" title="image.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近懒猫微服的系统固件进行了更新，默认的软件源重新指向了国际源。估计是为了方便海外用户，但对于国内开发者来说，访问速度顿时大打折扣，软件安装和更新频繁卡在连接阶段，着实是一个问题。&lt;/p&gt;
&lt;p&gt;正巧群友推荐了一个神器 —— &lt;a href=&quot;https://gitee.com/RubyMetric/chsrc&quot;&gt;&lt;code&gt;chsrc&lt;/code&gt;&lt;/a&gt;。这个工具支持一键切换系统、Python、conda 等多个主流组件的源，简洁高效，非常适合懒猫微服这样的轻量环境使用。&lt;/p&gt;
&lt;h2 id=&quot;下载并安装-chsrc&quot;&gt;&lt;a href=&quot;#下载并安装-chsrc&quot; class=&quot;headerlink&quot; title=&quot;下载并安装 chsrc&quot;&gt;&lt;/a&gt;下载并安装 chsrc&lt;/h2&gt;&lt;p&gt;chsrc 项目在 Gitee 上提供了预编译的可执行文件，适用于不同架构的 Linux 设备。我当前使用的是 x86_64 架构，因此只需运行以下命令：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;curl -L https://gitee.com/RubyMetric/chsrc/releases/download/pre/chsrc-x64-linux -o chsrc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;chmod&lt;/span&gt; +x ./chsrc&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;下载后，为了方便使用，我们通常会把它加入环境变量。但懒猫微服的一个特殊机制是：&lt;strong&gt;除了 &lt;code&gt;/root&lt;/code&gt; 目录，其他目录在每次重启后都会被重置&lt;/strong&gt;。这意味着如果你将 chsrc 放在 &lt;code&gt;/home&lt;/code&gt; 或 &lt;code&gt;/usr/local/bin&lt;/code&gt; 之类的目录，它在下次重启后可能就不见了。&lt;/p&gt;</summary>
    
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/categories/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/tags/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
  </entry>
  
  <entry>
    <title>懒猫微服实战入门（十二）：用 iVentoy 打造你的 PXE 服务器</title>
    <link href="https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89%EF%BC%9A%E7%94%A8-iventoy-%E6%89%93%E9%80%A0%E4%BD%A0%E7%9A%84-pxe-%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89%EF%BC%9A%E7%94%A8-iventoy-%E6%89%93%E9%80%A0%E4%BD%A0%E7%9A%84-pxe-%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2025-07-01T16:00:00.000Z</published>
    <updated>2025-06-30T14:36:55.856Z</updated>
    
    <content type="html"><![CDATA[<p>很多介绍 Linux 的书籍都会在结尾推荐 PXE 装机方式，尤其是经典的 TFTP + Kickstart 自动部署方案。但在普通家庭或轻量办公环境中，这种方式显得有些繁琐。在 U 盘装机的环境中，我一般使用的 <strong>Ventoy</strong>多合一 。不过 Ventoy 团队又推出了一个支持 PXE 的装机版本，名为 <strong>iVentoy</strong>，和 WDS 类似，不过更加省心，这个应用已经上架懒猫微服的应用商店，非常适合内网多机装系统的场景。终于不用再琢磨 WDS 了。还有就是之前不小心用店家带的 U 盘把主机的所有数据都格式化了，这种手残也一去不复返了。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250601202019460.png" alt="iVentoy商店界面"></p><h3 id="什么是-PXE-无盘装机？"><a href="#什么是-PXE-无盘装机？" class="headerlink" title="什么是 PXE 无盘装机？"></a>什么是 PXE 无盘装机？</h3><p>PXE，全称 <strong>Preboot eXecution Environment</strong>，是一种允许电脑在没有本地操作系统、光盘或 U 盘的情况下，通过网络从服务器下载引导程序并完成系统安装的机制。</p><span id="more"></span><p><strong>PXE 装机简化流程如下：</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1. 开机 → BIOS/UEFI 设置为从网卡启动（PXE Boot）</span><br><span class="line">       ↓</span><br><span class="line">2. 客户端通过网卡发出 DHCP 请求 → 获取 IP 和引导文件地址</span><br><span class="line">       ↓</span><br><span class="line">3. 通过 TFTP 下载启动文件（如 pxelinux.0 或 iPXE）</span><br><span class="line">       ↓</span><br><span class="line">4. 加载内核（vmlinuz）和安装器（initrd.img）</span><br><span class="line">       ↓</span><br><span class="line">5. 进入图形界面或执行自动化系统安装</span><br></pre></td></tr></table></figure><hr><h4 id="PXE-装机适用场景"><a href="#PXE-装机适用场景" class="headerlink" title="PXE 装机适用场景"></a>PXE 装机适用场景</h4><ul><li>大量办公电脑或服务器的系统部署</li><li>设备没有 USB 接口或启动盘时</li><li>多系统测试、系统重装、快速恢复环境</li><li>各类 PE 工具、Linux Live 系统启动</li></ul><hr><h3 id="懒猫微服-上-iVentoy-装机体验"><a href="#懒猫微服-上-iVentoy-装机体验" class="headerlink" title="懒猫微服 上 iVentoy 装机体验"></a>懒猫微服 上 iVentoy 装机体验</h3><p>以下是我在懒猫微服环境中使用 iVentoy 的全过程：</p><h4 id="1-上传系统镜像"><a href="#1-上传系统镜像" class="headerlink" title="1. 上传系统镜像"></a>1. 上传系统镜像</h4><p>进入懒猫的应用数据目录：<br><code>应用数据 - Iventoy - ISO</code><br>将你准备好的 Windows &#x2F; Linux ISO 文件上传到此路径。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250601203151865.png" alt="上传 ISO 镜像"></p><h4 id="2-启动-iVentoy，配置网络"><a href="#2-启动-iVentoy，配置网络" class="headerlink" title="2. 启动 iVentoy，配置网络"></a>2. 启动 iVentoy，配置网络</h4><p>确保机器在内网下有一个 <strong>有效的 IPv4 地址</strong>，然后启动 iVentoy。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250601202427884.png" alt="iVentoy 主界面"></p><h4 id="3-BIOS-设置启用-PXE"><a href="#3-BIOS-设置启用-PXE" class="headerlink" title="3. BIOS 设置启用 PXE"></a>3. BIOS 设置启用 PXE</h4><p>进入待装机设备的 BIOS，确保启用 <strong>PXE Boot &#x2F; 网络启动功能</strong>。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250601202741281.png" alt="开启 PXE 支持"></p><h4 id="4-插网线，选择-PXE-启动"><a href="#4-插网线，选择-PXE-启动" class="headerlink" title="4. 插网线，选择 PXE 启动"></a>4. 插网线，选择 PXE 启动</h4><p>启动设备，确保插入网线（无线网卡 PXE 启动通常不被支持），从网卡启动。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250601202303737.png" alt="从网络启动"></p><h4 id="5-自动进入-iVentoy-引导菜单"><a href="#5-自动进入-iVentoy-引导菜单" class="headerlink" title="5. 自动进入 iVentoy 引导菜单"></a>5. 自动进入 iVentoy 引导菜单</h4><p>如果网络配置无误，设备会自动弹出引导菜单，可以看到之前上传的 ISO 镜像。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/78714275c7adc030420ccf77b479955b.jpg" alt="iVentoy 引导界面"></p><p>选择一个系统镜像，回车进入即可，相当于将 ISO 当成 LiveCD 使用。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/4488415be27c9e56412883cc35e95ce7.jpg" alt="选择 ISO 启动"></p><h3 id="6-成功进入桌面系统"><a href="#6-成功进入桌面系统" class="headerlink" title="6. 成功进入桌面系统"></a>6. 成功进入桌面系统</h3><p>以 Pop!_OS 为例，系统已经顺利启动，无需任何 U 盘！</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/8a1dc12c14c27fdc02a39db103994f5a.jpg" alt="成功进入系统桌面"></p><hr><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>这个办法还是适合炫技，把电脑接上网线，然后不用 U 盘，凭空装好系统，不过还是没有 U 盘那么丝滑，有时候不能打满千兆带宽。不过假如手头 U 盘不够用，或者要在多个系统反复装机测试就很方便了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;很多介绍 Linux 的书籍都会在结尾推荐 PXE 装机方式，尤其是经典的 TFTP + Kickstart 自动部署方案。但在普通家庭或轻量办公环境中，这种方式显得有些繁琐。在 U 盘装机的环境中，我一般使用的 &lt;strong&gt;Ventoy&lt;/strong&gt;多合一 。不过 Ventoy 团队又推出了一个支持 PXE 的装机版本，名为 &lt;strong&gt;iVentoy&lt;/strong&gt;，和 WDS 类似，不过更加省心，这个应用已经上架懒猫微服的应用商店，非常适合内网多机装系统的场景。终于不用再琢磨 WDS 了。还有就是之前不小心用店家带的 U 盘把主机的所有数据都格式化了，这种手残也一去不复返了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250601202019460.png&quot; alt=&quot;iVentoy商店界面&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;什么是-PXE-无盘装机？&quot;&gt;&lt;a href=&quot;#什么是-PXE-无盘装机？&quot; class=&quot;headerlink&quot; title=&quot;什么是 PXE 无盘装机？&quot;&gt;&lt;/a&gt;什么是 PXE 无盘装机？&lt;/h3&gt;&lt;p&gt;PXE，全称 &lt;strong&gt;Preboot eXecution Environment&lt;/strong&gt;，是一种允许电脑在没有本地操作系统、光盘或 U 盘的情况下，通过网络从服务器下载引导程序并完成系统安装的机制。&lt;/p&gt;</summary>
    
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/categories/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/tags/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
  </entry>
  
  <entry>
    <title>懒猫微服实战入门（十三）：懒猫穿透不只图形化，纯命令行服务器也可以</title>
    <link href="https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89%EF%BC%9A%E6%87%92%E7%8C%AB%E7%A9%BF%E9%80%8F%E4%B8%8D%E5%8F%AA%E5%9B%BE%E5%BD%A2%E5%8C%96%EF%BC%8C%E7%BA%AF%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B9%9F%E5%8F%AF%E4%BB%A5/"/>
    <id>https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89%EF%BC%9A%E6%87%92%E7%8C%AB%E7%A9%BF%E9%80%8F%E4%B8%8D%E5%8F%AA%E5%9B%BE%E5%BD%A2%E5%8C%96%EF%BC%8C%E7%BA%AF%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B9%9F%E5%8F%AF%E4%BB%A5/</id>
    <published>2025-07-01T16:00:00.000Z</published>
    <updated>2025-06-30T14:36:55.856Z</updated>
    
    <content type="html"><![CDATA[<p>需要解析 <code>heiyu.space</code> 这个域名就得安装客户端，突然发现懒猫微服的客户端都是图形化界面。对于服务器环境，特别是没有图形界面的服务器，我们需要纯命令行解决方案。</p><p>随着公网 IPv4 地址即将枯竭，许多云厂商的学生机也不再提供公网 IP，这迫使开发者寻找异地组网方案。虽然 Tailscale 是一个可选方案，但作为懒猫微服用户，我更希望利用懒猫自带的组网功能实现这一需求。</p><p>在 VIP 群咨询后，获得了服务端组网工具：<br><a href="https://gitee.com/lazycatcloud/hclient-cli">https://gitee.com/lazycatcloud/hclient-cli</a></p><p>和花生壳的 CLI 类似，但是比花生壳省心多了。（这里不再过多吐槽花生壳系列了）</p><h3 id="安装与配置"><a href="#安装与配置" class="headerlink" title="安装与配置"></a>安装与配置</h3><h4 id="1-下载与初始运行"><a href="#1-下载与初始运行" class="headerlink" title="1. 下载与初始运行"></a>1. 下载与初始运行</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x ./hclient-cli-<span class="variable">$arch</span> <span class="comment"># 首次启动需要添加可执行权限</span></span><br><span class="line">./hclient-cli-<span class="variable">$arch</span></span><br></pre></td></tr></table></figure><span id="more"></span><p>初始运行会提示：<br><strong>当前为非 tun 模式,仅支持通过 http 代理访问微服或其他设备资源</strong></p><p>然后就会提示<strong>当前为非 tun 模式,仅支持通过 http 代理访问微服或其他设备资源</strong>，也就是说现在是单项的组网，这肯定不是我的要求，然后 GPT O3 给了我一个答案。</p><h4 id="2-启用-TUN-模式"><a href="#2-启用-TUN-模式" class="headerlink" title="2. 启用 TUN 模式"></a>2. 启用 TUN 模式</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> ./hclient-cli-<span class="variable">$arch</span> -tun <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>再启动之后，就没有那个 TUN 模式的提示了。如下</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250602191812289.png" alt="hclient-cli启动界面"></p><h4 id="3-常用命令"><a href="#3-常用命令" class="headerlink" title="3. 常用命令"></a>3. 常用命令</h4><p>然后需要使用命令添加，bname 是机器的名字，uid 和 password 是用户名和密码，这样就保证了全球唯一性质，执行完第一步的时候已有的客户端会弹出验证码，执行完第二步就会消失。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/1187b6cb50dd4eab5c211f927f5bbbd6.png" alt="1187b6cb50dd4eab5c211f927f5bbbd6"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加微服</span></span><br><span class="line">curl -X POST <span class="string">&#x27;http://127.0.0.1:7777/add_box?bname=%s&amp;uid=%s&amp;password=%s&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置TFA Code（两步验证码）</span></span><br><span class="line">curl -X POST <span class="string">&#x27;http://127.0.0.1:7777/add_tfa?bname=%s&amp;tfa=%s&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列举微服</span></span><br><span class="line">curl <span class="string">&#x27;http://127.0.0.1:7777/box_list&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除微服</span></span><br><span class="line">curl -X DELETE <span class="string">&#x27;http://127.0.0.1:7777/del_box?bname=%s&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前客户端信息</span></span><br><span class="line">curl <span class="string">&#x27;http://127.0.0.1:7777/client_info&#x27;</span></span><br></pre></td></tr></table></figure><p>在<strong>懒猫微服设备监控</strong>中可以看到加入的设备。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250602191830359.png" alt="设备监控界面"></p><h3 id="2-访问验证"><a href="#2-访问验证" class="headerlink" title="2. 访问验证"></a>2. 访问验证</h3><p>一开始去访问我写的面食比例计算机，发现了重定向了，才想到懒猫默认给所有的应用加了一个认证。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag">  <span class="attr">href</span>=<span class="string">&quot;https://micro.heiyu.space/sys/login?redirect=https%3A%2F%2Fflour-calc.name.heiyu.space%2F&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span>Temporary Redirect&lt;/a</span><br><span class="line">&gt;.</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250602202752227.png" alt="认证界面"></p><h3 id="3-双向访问测试"><a href="#3-双向访问测试" class="headerlink" title="3. 双向访问测试"></a>3. 双向访问测试</h3><p>商店里的 elasticsearch 放行了所有路由，这样我们在终端和 SDK 就不再需要走那个 web 的验证了，不然只能在请求头里面硬塞 cookie，但是如果是多层认证就非常的难搞。从图片中可以看到，我们从云服务器可以成功访问到家里的懒猫微服了。这个代表从云服务回到家里时没有问题的。<br><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/ab21f6aafea87f704df434047a587c37.png" alt="云服务器访问家庭网络"></p><h3 id="4-SSH-访问测试"><a href="#4-SSH-访问测试" class="headerlink" title="4. SSH 访问测试"></a>4. SSH 访问测试</h3><p>其实更多的时候我们的异地组网是为了能够在没有公网 IP 的情况下访问节点，查一下监控设备中的域名，然后 ssh 访问进去，发现基本没什么问题。所以就能够双向访问了，这样我们组网的目的就达到了。<br><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/e5316a84db1f258801b864c5bd18eef2.png" alt="SSH连接成功"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过懒猫微服的 CLI 工具，我们成功实现了：</p><ol><li>无图形界面服务器的穿透接入</li><li>双向网络访问</li></ol><p><img src="https://lzc-playground-1301583638.cos.ap-chengdu.myqcloud.com/guidelines/459/06da8512-7447-496c-a5f1-669059d134cf.png" alt="77dea8a6a38817c503c379dd946fc9e4.png" title="77dea8a6a38817c503c379dd946fc9e4.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;需要解析 &lt;code&gt;heiyu.space&lt;/code&gt; 这个域名就得安装客户端，突然发现懒猫微服的客户端都是图形化界面。对于服务器环境，特别是没有图形界面的服务器，我们需要纯命令行解决方案。&lt;/p&gt;
&lt;p&gt;随着公网 IPv4 地址即将枯竭，许多云厂商的学生机也不再提供公网 IP，这迫使开发者寻找异地组网方案。虽然 Tailscale 是一个可选方案，但作为懒猫微服用户，我更希望利用懒猫自带的组网功能实现这一需求。&lt;/p&gt;
&lt;p&gt;在 VIP 群咨询后，获得了服务端组网工具：&lt;br&gt;&lt;a href=&quot;https://gitee.com/lazycatcloud/hclient-cli&quot;&gt;https://gitee.com/lazycatcloud/hclient-cli&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;和花生壳的 CLI 类似，但是比花生壳省心多了。（这里不再过多吐槽花生壳系列了）&lt;/p&gt;
&lt;h3 id=&quot;安装与配置&quot;&gt;&lt;a href=&quot;#安装与配置&quot; class=&quot;headerlink&quot; title=&quot;安装与配置&quot;&gt;&lt;/a&gt;安装与配置&lt;/h3&gt;&lt;h4 id=&quot;1-下载与初始运行&quot;&gt;&lt;a href=&quot;#1-下载与初始运行&quot; class=&quot;headerlink&quot; title=&quot;1. 下载与初始运行&quot;&gt;&lt;/a&gt;1. 下载与初始运行&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;chmod&lt;/span&gt; +x ./hclient-cli-&lt;span class=&quot;variable&quot;&gt;$arch&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# 首次启动需要添加可执行权限&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;./hclient-cli-&lt;span class=&quot;variable&quot;&gt;$arch&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/categories/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/tags/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
  </entry>
  
  <entry>
    <title>懒猫微服实战入门（十四）：不登录客户端，如何用 Samba 挂载懒猫微服网盘？</title>
    <link href="https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89%EF%BC%9A%E4%B8%8D%E7%99%BB%E5%BD%95%E5%AE%A2%E6%88%B7%E7%AB%AF%EF%BC%8C%E5%A6%82%E4%BD%95%E7%94%A8-samba-%E6%8C%82%E8%BD%BD%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E7%BD%91%E7%9B%98%EF%BC%9F/"/>
    <id>https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89%EF%BC%9A%E4%B8%8D%E7%99%BB%E5%BD%95%E5%AE%A2%E6%88%B7%E7%AB%AF%EF%BC%8C%E5%A6%82%E4%BD%95%E7%94%A8-samba-%E6%8C%82%E8%BD%BD%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E7%BD%91%E7%9B%98%EF%BC%9F/</id>
    <published>2025-07-01T16:00:00.000Z</published>
    <updated>2025-06-30T14:36:55.856Z</updated>
    
    <content type="html"><![CDATA[<p>懒猫微服网盘自带自动挂载 Samba 功能，但如果<strong>不登录客户端</strong>，也可以手动通过微服的私有地址来挂载，实现访问和高速传输。</p><p>由于懒猫网盘采用<strong>多租户架构</strong>，每位用户的数据是隔离的。因此，访问路径通常为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smb://&lt;ip&gt;/&lt;用户名&gt;</span><br></pre></td></tr></table></figure><h2 id="🧩-步骤一：开启内网访问服务"><a href="#🧩-步骤一：开启内网访问服务" class="headerlink" title="🧩 步骤一：开启内网访问服务"></a>🧩 步骤一：开启内网访问服务</h2><p>在开始挂载前，<strong>请确保你已在懒猫微服后台开启了“内网访问服务”</strong>，否则 SMB 连接会被拒绝。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250621230834943.png" alt="image-20250621230834943"></p><hr><span id="more"></span><h2 id="💡-回忆一波上机考试的方式"><a href="#💡-回忆一波上机考试的方式" class="headerlink" title="💡 回忆一波上机考试的方式"></a>💡 回忆一波上机考试的方式</h2><p>以前在上机考试时，老师会将题目放在服务器共享目录中，我们用 <code>Win + R</code> 输入 <code>\\IP地址</code> 来下载资料，当时还觉得这操作很高端。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250621224004995.png" alt="image-20250621224004995"></p><p><strong>解释：</strong><br>这是通过 <code>Win + R</code> 快捷键打开“运行”窗口，输入 <code>\\&lt;IP&gt;</code> 快速访问局域网 SMB 共享目录。通常用于临时打开文件夹，不做映射。</p><hr><h2 id="🐧-macOS-Linux-挂载方式（CLI）"><a href="#🐧-macOS-Linux-挂载方式（CLI）" class="headerlink" title="🐧 macOS&#x2F;Linux 挂载方式（CLI）"></a>🐧 macOS&#x2F;Linux 挂载方式（CLI）</h2><p>在 Linux 或 macOS 上，可以直接用以下地址挂载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smb://&lt;ip&gt;/Download</span><br></pre></td></tr></table></figure><p>或者通过 <code>mount.cifs</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> mount -t cifs //192.168.1.100/your-username /mnt/share -o user=your-username,password=your-password</span><br></pre></td></tr></table></figure><hr><h2 id="🪟-Windows-上手动挂载-SMB-网盘"><a href="#🪟-Windows-上手动挂载-SMB-网盘" class="headerlink" title="🪟 Windows 上手动挂载 SMB 网盘"></a>🪟 Windows 上手动挂载 SMB 网盘</h2><p>在 Windows 中，需要通过图形界面手动挂载为本地磁盘，操作如下：</p><h3 id="第一步：右键“此电脑”-→-映射网络驱动器"><a href="#第一步：右键“此电脑”-→-映射网络驱动器" class="headerlink" title="第一步：右键“此电脑” → 映射网络驱动器"></a>第一步：右键“此电脑” → <strong>映射网络驱动器</strong></h3><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250621224142450.png" alt="image-20250621224142450"></p><p><strong>解释：</strong><br>在这里你可以：</p><ul><li>选择盘符（建议使用末尾的 <code>Z:</code>, <code>Y:</code>, <code>X:</code> 等）；</li><li>输入共享路径（例如 <code>\\192.168.1.100\your-username</code>）；</li><li>可勾选“使用其他凭据连接”等选项。</li></ul><hr><h3 id="第二步：确认挂载路径并验证身份"><a href="#第二步：确认挂载路径并验证身份" class="headerlink" title="第二步：确认挂载路径并验证身份"></a>第二步：确认挂载路径并验证身份</h3><p>系统将提示输入用户名和密码：</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250621224120769.png" alt="image-20250621224120769"></p><hr><h3 id="第三步：挂载成功，查看-Z-盘内容"><a href="#第三步：挂载成功，查看-Z-盘内容" class="headerlink" title="第三步：挂载成功，查看 Z 盘内容"></a>第三步：挂载成功，查看 Z 盘内容</h3><p>成功后，可以在“此电脑”中看到挂载好的 SMB 网络盘：</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250621230132415.png" alt="image-20250621230132415"></p><p>你可以像操作本地硬盘一样打开、拖拽、复制文件。</p><hr><h3 id="打开挂载目录后的界面如下："><a href="#打开挂载目录后的界面如下：" class="headerlink" title="打开挂载目录后的界面如下："></a>打开挂载目录后的界面如下：</h3><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250621230747150.png" alt="image-20250621230747150"></p><hr><h2 id="🚀-实测传输速度：约-500MB-s"><a href="#🚀-实测传输速度：约-500MB-s" class="headerlink" title="🚀 实测传输速度：约 500MB&#x2F;s"></a>🚀 实测传输速度：约 500MB&#x2F;s</h2><p>我测试了一下，将文件从 SMB 网盘拖入 PVE 虚拟机，传输速度稳定在 <strong>500MB&#x2F;s</strong>，表现不错。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/bed30da7272c40a1203b34b834269b13.png" alt="bed30da7272c40a1203b34b834269b13"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;懒猫微服网盘自带自动挂载 Samba 功能，但如果&lt;strong&gt;不登录客户端&lt;/strong&gt;，也可以手动通过微服的私有地址来挂载，实现访问和高速传输。&lt;/p&gt;
&lt;p&gt;由于懒猫网盘采用&lt;strong&gt;多租户架构&lt;/strong&gt;，每位用户的数据是隔离的。因此，访问路径通常为：&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;smb://&amp;lt;ip&amp;gt;/&amp;lt;用户名&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;🧩-步骤一：开启内网访问服务&quot;&gt;&lt;a href=&quot;#🧩-步骤一：开启内网访问服务&quot; class=&quot;headerlink&quot; title=&quot;🧩 步骤一：开启内网访问服务&quot;&gt;&lt;/a&gt;🧩 步骤一：开启内网访问服务&lt;/h2&gt;&lt;p&gt;在开始挂载前，&lt;strong&gt;请确保你已在懒猫微服后台开启了“内网访问服务”&lt;/strong&gt;，否则 SMB 连接会被拒绝。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250621230834943.png&quot; alt=&quot;image-20250621230834943&quot;&gt;&lt;/p&gt;
&lt;hr&gt;</summary>
    
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/categories/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
    
    <category term="NAS" scheme="https://xu-hardy.github.io/tags/NAS/"/>
    
  </entry>
  
  <entry>
    <title>懒猫微服实战入门（十五）：大疆Pocket3 素材导入懒猫网盘</title>
    <link href="https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E5%8D%81%E4%BA%94%EF%BC%89%EF%BC%9A%E5%A4%A7%E7%96%86pocket3-%E7%B4%A0%E6%9D%90%E5%AF%BC%E5%85%A5%E6%87%92%E7%8C%AB%E7%BD%91%E7%9B%98/"/>
    <id>https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E5%8D%81%E4%BA%94%EF%BC%89%EF%BC%9A%E5%A4%A7%E7%96%86pocket3-%E7%B4%A0%E6%9D%90%E5%AF%BC%E5%85%A5%E6%87%92%E7%8C%AB%E7%BD%91%E7%9B%98/</id>
    <published>2025-07-01T16:00:00.000Z</published>
    <updated>2025-06-30T14:36:55.856Z</updated>
    
    <content type="html"><![CDATA[<p>日常使用 Pocket3 拍摄视频，就是共享比较麻烦，不然就得每个手机安装一个 app，然后再导出。突发奇想可以把素材传到懒猫网盘中，这样就解决了这个痛点。</p><p>大疆的机器每次连接都要走这个流程，不得不说真的很麻烦。这个 Wi-Fi 的记忆功能比较鸡肋。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250624122938093.png" alt="image-20250624122938093"></p><p>连接之后需要右上角先把视频下载到手机本地，然后点击分享。</p><span id="more"></span><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250624123556578.png" alt="image-20250624123556578"></p><p>这里可以选各种软件，比如 airdrop，微信，邮件。我这里选懒猫微服，点击之后就会跳转到懒猫网盘。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250624123606895.png" alt="image-20250624123606895"></p><p>第一次传输我发现速度慢的离谱。询问了售后才发现 ios 会默认在 wifi 网络不好时走流量的。</p><p>因为大疆的 pocket3 传输需要连接相机的 Wi-Fi。所以手机是整个一断网额的状态。这流量也不快。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250624123055526.png" alt="image-20250624123055526"></p><p>偷偷跑流量是手机和运行商的传统了，那么在蜂窝网络里给他关掉。关掉无线局域网助理。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250624123117094.png" alt="image-20250624123117094"></p><p>关了之后，再重复上边的操作，就发现懒猫网盘打不开了，嗯 这就是预期的行为了，不会偷偷的用网了。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250624123004993.png" alt="image-20250624123004993"></p><p>于是询问大疆额售后能不能让机器连接家里的网，得到的回答是不行。只能手动切换 Wi-Fi。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250624123022647.png" alt="image-20250624123022647"></p><p>换了网之后再传输，这个速度就舒服多了，虽然没跑满千兆，但是也能够看了。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250624123032634.png" alt="image-20250624123032634"></p><p>然后把上一步的视频文件夹共享出来，以后把素材都发到这个文件夹里。再共享给其他的懒猫用户，就很方便了。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250624123207647.png" alt="image-20250624123207647"></p><blockquote><p>两个很想吐槽的地方</p><ol><li>大疆 pocket3 不能直接连家里 Wi-Fi，传文件到网盘必须换网</li><li>Apple 的 lighting 原生不支持 OTG，需要买转接头。</li></ol></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;日常使用 Pocket3 拍摄视频，就是共享比较麻烦，不然就得每个手机安装一个 app，然后再导出。突发奇想可以把素材传到懒猫网盘中，这样就解决了这个痛点。&lt;/p&gt;
&lt;p&gt;大疆的机器每次连接都要走这个流程，不得不说真的很麻烦。这个 Wi-Fi 的记忆功能比较鸡肋。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250624122938093.png&quot; alt=&quot;image-20250624122938093&quot;&gt;&lt;/p&gt;
&lt;p&gt;连接之后需要右上角先把视频下载到手机本地，然后点击分享。&lt;/p&gt;</summary>
    
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/categories/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/tags/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
  </entry>
  
  <entry>
    <title>懒猫微服实战入门（十六）：把懒猫微服当作 24 × 7 在线开发机</title>
    <link href="https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E5%8D%81%E5%85%AD%EF%BC%89%EF%BC%9A%E6%8A%8A%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%BD%93%E4%BD%9C-24-%C3%97-7-%E5%9C%A8%E7%BA%BF%E5%BC%80%E5%8F%91%E6%9C%BA/"/>
    <id>https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E5%8D%81%E5%85%AD%EF%BC%89%EF%BC%9A%E6%8A%8A%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%BD%93%E4%BD%9C-24-%C3%97-7-%E5%9C%A8%E7%BA%BF%E5%BC%80%E5%8F%91%E6%9C%BA/</id>
    <published>2025-07-01T16:00:00.000Z</published>
    <updated>2025-06-30T14:36:55.856Z</updated>
    
    <content type="html"><![CDATA[<p>最近和极限科技沟通，将 <strong>INFINI Console</strong> 上架到懒猫微服。可以当作随时可用、不关机的 <strong>远程开发机</strong>。比如连接自己部署的 ES，中间件，数据库什么的。</p><h2 id="1-应用商店一键安装-INFINI-Console"><a href="#1-应用商店一键安装-INFINI-Console" class="headerlink" title="1. 应用商店一键安装 INFINI Console"></a>1. 应用商店一键安装 INFINI Console</h2><p>从懒猫微服应用商店搜索 <strong>Console</strong>，点击“安装”即可：</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/a8de38c1a8d6cb8bf34ae697256ad230.png" alt="应用商店界面"></p><h2 id="2-初始化与登录"><a href="#2-初始化与登录" class="headerlink" title="2. 初始化与登录"></a>2. 初始化与登录</h2><p>初始化之后登录：</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/Snipaste_2025-06-24_13-16-34.png" alt="登录页面"></p><span id="more"></span><p>首次登录后台，左侧侧边栏包含 <strong>Dashboard、Agents、Settings</strong> 等模块：</p><ul><li>Dashboard 默认展示 CPU &#x2F; 内存 &#x2F; 磁盘实时曲线。</li><li>顶栏可切换“明暗主题”并显示当前工作区 ID。</li><li>右下角有“检查更新”按钮，提示有新版时可一键升级。</li></ul><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/Snipaste_2025-06-24_13-16-57.png" alt="控制台主界面"></p><h2 id="3-用-Dockge-安装-Easysearch"><a href="#3-用-Dockge-安装-Easysearch" class="headerlink" title="3. 用 Dockge 安装 Easysearch"></a>3. 用 Dockge 安装 Easysearch</h2><p>ES 的话，我是直接用 Dockge 安装的，如果你需要啥中间价，数据库都可以用这个安装。</p><p>前提需要用 lzc-cli appstore copy-image 来获取国内的镜像源：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将官方镜像复制到懒猫内网仓库</span></span><br><span class="line">lzc-cli appstore copy-image infinilabs/easysearch:1.13.0-2159</span><br></pre></td></tr></table></figure><p>然后把 <code>docker run</code> 或 <code>docker-compose.yml</code> 中的镜像地址替换成上一步生成的私有 registry 地址即可。全部容器由 <strong>Dockge</strong> 图形化管理：<br>（截图信息要点）</p><ul><li>Dockge 左侧列出所有 Stack，右侧显示 Easysearch 服务状态为 <code>Running</code>。</li><li>端口 9200 已自动映射，重启、查看日志，都能一键完成。</li></ul><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250624164746305.png" alt="Dockge 管理界面"></p><h2 id="4-为什么说它适合做开发机？"><a href="#4-为什么说它适合做开发机？" class="headerlink" title="4. 为什么说它适合做开发机？"></a>4. 为什么说它适合做开发机？</h2><table><thead><tr><th>需求</th><th>懒猫微服能力</th><th>体验亮点</th></tr></thead><tbody><tr><td><strong>24 × 7 在线</strong></td><td>独立云主机，自动重启、监控告警</td><td>关掉本地电脑，服务仍在运行</td></tr><tr><td><strong>x86 架构</strong></td><td>后端统一使用 x86 节点</td><td>对 <strong>Mac M 系列（ARM）用户</strong>，可避免本地编译兼容性问题</td></tr><tr><td><strong>多端远程开发</strong></td><td>内置 Web Shell、端口映射、域名分配</td><td>VS Code Remote &#x2F; JetBrains Gateway 秒连接</td></tr><tr><td><strong>镜像同步</strong></td><td><code>lzc-cli appstore copy-image</code></td><td>国内网络下拉镜像不超时</td></tr><tr><td><strong>中间件生态</strong></td><td>Dockge + Compose</td><td>RabbitMQ、Redis、Postgres 都能一键启动</td></tr><tr><td><strong>环境变量管理</strong></td><td>UI + <code>.env</code> 托管</td><td>私密信息集中维护，避免泄漏</td></tr></tbody></table><p>总结下来，把懒猫微服当作一个可远程访问的轻量开发机还是挺合适的：</p><ol><li>不用担心公网 IP 和端口映射</li><li>应用商店部署方便快捷</li><li>支持命令行部署、私有镜像同步</li><li>用 Dockge 管理一套中间件生态完全没问题</li></ol><p>适合：<br>👉 想要随时随地调试项目的开发者<br>👉 不想在本地装一堆环境的轻量用户<br>👉 有多端共享、协作需求的远程开发场景</p><p>整套流程走下来，你只需一台浏览器，就能获得 <strong>24 × 7 不关机的云端开发环境</strong>。如果你也是 Mac M-芯片用户、经常出差或需要多端协作，不妨试试用懒猫微服托管自己的 DevBox。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近和极限科技沟通，将 &lt;strong&gt;INFINI Console&lt;/strong&gt; 上架到懒猫微服。可以当作随时可用、不关机的 &lt;strong&gt;远程开发机&lt;/strong&gt;。比如连接自己部署的 ES，中间件，数据库什么的。&lt;/p&gt;
&lt;h2 id=&quot;1-应用商店一键安装-INFINI-Console&quot;&gt;&lt;a href=&quot;#1-应用商店一键安装-INFINI-Console&quot; class=&quot;headerlink&quot; title=&quot;1. 应用商店一键安装 INFINI Console&quot;&gt;&lt;/a&gt;1. 应用商店一键安装 INFINI Console&lt;/h2&gt;&lt;p&gt;从懒猫微服应用商店搜索 &lt;strong&gt;Console&lt;/strong&gt;，点击“安装”即可：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/a8de38c1a8d6cb8bf34ae697256ad230.png&quot; alt=&quot;应用商店界面&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;2-初始化与登录&quot;&gt;&lt;a href=&quot;#2-初始化与登录&quot; class=&quot;headerlink&quot; title=&quot;2. 初始化与登录&quot;&gt;&lt;/a&gt;2. 初始化与登录&lt;/h2&gt;&lt;p&gt;初始化之后登录：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/Snipaste_2025-06-24_13-16-34.png&quot; alt=&quot;登录页面&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/categories/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/tags/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
  </entry>
  
  <entry>
    <title>懒猫微服实战入门（十七）：把 Steam 游戏存到懒猫网盘</title>
    <link href="https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E5%8D%81%E4%B8%83%EF%BC%89%EF%BC%9A%E6%8A%8A-steam-%E6%B8%B8%E6%88%8F%E5%AD%98%E5%88%B0%E6%87%92%E7%8C%AB%E7%BD%91%E7%9B%98/"/>
    <id>https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E5%8D%81%E4%B8%83%EF%BC%89%EF%BC%9A%E6%8A%8A-steam-%E6%B8%B8%E6%88%8F%E5%AD%98%E5%88%B0%E6%87%92%E7%8C%AB%E7%BD%91%E7%9B%98/</id>
    <published>2025-07-01T16:00:00.000Z</published>
    <updated>2025-06-30T14:36:55.856Z</updated>
    
    <content type="html"><![CDATA[<p>懒猫微服的网盘基本可以替代一些公有的网盘，还有一个好处是可以自动挂载，只要打开懒猫微服的客户端，然后自动把网盘就能自动挂载到 Finder，十分方便。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250627201448767.png" alt="image-20250627201448767"></p><p>网盘的挂载是支持了 WebDAV 和 Sambda。这是常见的两种远程访问的协议。</p><p><strong>WebDAV（Web Distributed Authoring and Versioning）</strong>主要用于 <strong>HTTP&#x2F;HTTPS 协议</strong> 的文件共享，适合 <strong>远程访问、云存储</strong>。基于 HTTP&#x2F;HTTPS<strong>，可在浏览器中直接访问（如 <code>http://server/webdav</code>）。</strong></p><p>SMB（Server Message Block）&#x2F; Samba 主要用于 <strong>局域网文件共享</strong>（如 Windows 共享文件夹、NAS、企业内网存储）。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250627211645046.png" alt="image-20250627211645046"></p><span id="more"></span><p>通过 mount 命令可以看到，懒猫微服客户端默认使用的是 SMB 协议挂载：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//xu-automount@file.micro.heiyu.space/xu-automount on /Users/xu/lazycat_automount/micro (smbfs, nodev, nosuid, mounted by xu)</span><br><span class="line">//xu-automount@file.micro.heiyu.space/xu on /Volumes/xu (smbfs, nodev, nosuid, mounted by xu)</span><br></pre></td></tr></table></figure><p>默认有两个文件夹，其实都是指向网盘根目录的软连接。两者内容完全一样。</p><blockquote><p>&lt;用户名&gt;-automount：这个应该不是自动挂载到文件管理器的目录</p><p>&lt;用户名&gt;: 这个是网盘多租户的目录</p></blockquote><p>所以在 Steam 里我们直接添加驱动器就好：</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/a1a7bbcb4236bc63c91151d9dc3a53b6.png" alt="a1a7bbcb4236bc63c91151d9dc3a53b6"></p><p>然后可以选择这两个文件目录，就像前面介绍的，这两个选择哪个都行：</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/ff20f0dc7b36ba7e27ad18ce45b2c378.png" alt="ff20f0dc7b36ba7e27ad18ce45b2c378"></p><p>然后这个时候会弹出来这个提示。我们选择允许。这样 Steam 才能有写入懒猫网盘的权限。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/b90bea03eed9f716a64f52ae16a2526f.png" alt="b90bea03eed9f716a64f52ae16a2526f"></p><p>然后选择下载之后，我们发现网盘里多了一个 SteamLibrary 的目录。所有的游戏都存在这里。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/7733bdd613320011b0de6ad55032cc19.png" alt="7733bdd613320011b0de6ad55032cc19"></p><p>如果你比较习惯网盘的页面，也可以在网盘里找到 SteamLibrary 的目录</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250627202118461.png" alt="image-20250627202118461"></p><p>如果哪天不再需要写入懒猫网盘，用这个办法删除。网上吐槽挺多的。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/788d94c0cb77ec7c66aa3de73f414462.png" alt="788d94c0cb77ec7c66aa3de73f414462"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;懒猫微服的网盘基本可以替代一些公有的网盘，还有一个好处是可以自动挂载，只要打开懒猫微服的客户端，然后自动把网盘就能自动挂载到 Finder，十分方便。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250627201448767.png&quot; alt=&quot;image-20250627201448767&quot;&gt;&lt;/p&gt;
&lt;p&gt;网盘的挂载是支持了 WebDAV 和 Sambda。这是常见的两种远程访问的协议。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;WebDAV（Web Distributed Authoring and Versioning）&lt;/strong&gt;主要用于 &lt;strong&gt;HTTP&amp;#x2F;HTTPS 协议&lt;/strong&gt; 的文件共享，适合 &lt;strong&gt;远程访问、云存储&lt;/strong&gt;。基于 HTTP&amp;#x2F;HTTPS&lt;strong&gt;，可在浏览器中直接访问（如 &lt;code&gt;http://server/webdav&lt;/code&gt;）。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;SMB（Server Message Block）&amp;#x2F; Samba 主要用于 &lt;strong&gt;局域网文件共享&lt;/strong&gt;（如 Windows 共享文件夹、NAS、企业内网存储）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250627211645046.png&quot; alt=&quot;image-20250627211645046&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/categories/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/tags/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
  </entry>
  
  <entry>
    <title>懒猫微服实战入门（二）：打造多人协作环境,权限控制+数据隔离一步到位.md</title>
    <link href="https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E6%89%93%E9%80%A0%E5%A4%9A%E4%BA%BA%E5%8D%8F%E4%BD%9C%E7%8E%AF%E5%A2%83-%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6-%E6%95%B0%E6%8D%AE%E9%9A%94%E7%A6%BB%E4%B8%80%E6%AD%A5%E5%88%B0%E4%BD%8D-md/"/>
    <id>https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E6%89%93%E9%80%A0%E5%A4%9A%E4%BA%BA%E5%8D%8F%E4%BD%9C%E7%8E%AF%E5%A2%83-%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6-%E6%95%B0%E6%8D%AE%E9%9A%94%E7%A6%BB%E4%B8%80%E6%AD%A5%E5%88%B0%E4%BD%8D-md/</id>
    <published>2025-07-01T16:00:00.000Z</published>
    <updated>2025-06-30T14:36:55.857Z</updated>
    
    <content type="html"><![CDATA[<p>最近在懒猫微服上架了一些应用，正好分享给家里人用。这个实现起来很简单，在懒猫微服上开一个新的用户，然后控制这个用户是否可以安装软件，可以使用什么软件，这样不同用户之间的数据就隔离开了，比如每个人的懒猫网盘和懒猫清单是独立的，互相不会产生干扰。</p><p>下面就以实际操作为例，教大家新建用户，并且了解这些自带的安全机制。</p><h2 id="新建用户"><a href="#新建用户" class="headerlink" title="新建用户"></a>新建用户</h2><p><strong>设置</strong> - <strong>用户管理</strong>，这里可以看到现存的账户，第一次激活的时候会提示注册一个管理员账户，后面可以右上角点击邀请成员，然后会得到弹出一个二维码，新的客户端需要下载懒猫客户端，然后客户端扫码添加输入信息即可。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250510111411166.png" alt="image-20250510111411166"></p><p>扫码后可以为新用户设置用户名和密码。客户端下载地址：<br>👉 <a href="https://lazycat.cloud/download">https://lazycat.cloud/download</a></p><span id="more"></span><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250510112156501.png" alt="image-20250510112156501"></p><p>注册完成后，新成员就可以使用自己的账号登录懒猫微服啦。默认是“非管理员权限”，更安全。</p><h2 id="用户权限控制"><a href="#用户权限控制" class="headerlink" title="用户权限控制"></a>用户权限控制</h2><p>新建之后，我对这个新用户的画像是用户而不是管理者，所以只需要登录之后看到应用白名单就可以了。</p><p>点击新建用户的头像，可以设置用户可以看见应用的白名单。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250510114715784.png" alt="image-20250510114715784"></p><p>比如，我只授权了家庭成员使用懒猫网盘、懒猫清单等基础工具。于是使用手机端登录新的账户，可以看到在<strong>我的应用</strong>中只有刚刚选中那些，这对于日常使用来说刚刚好，这个页面相对于安装了几十个 app 的管理页面来说，实在是清爽。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250510114840299.png" alt="image-20250510114840299"></p><h3 id="登录的二次验证"><a href="#登录的二次验证" class="headerlink" title="登录的二次验证"></a>登录的二次验证</h3><p>在此之前我们先来介绍多因子验证（MFA），通俗来讲我们在使用用户名密码登录的时候有时候还要接收一个验证码，有时候是发到邮箱的，有的是手机短信，还有个需要安装特定的 APP 来查看，比如 Authy，Google Authenticator。</p><p>而懒猫微服在 APP 中内置了 MFA 接收验证码的功能，新设备登录的时候会有如下提示：</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250510120716665.png" alt="image-20250510120716665"></p><p>在一台新的设备登录懒猫账户的时候，已经登录这个账户的设备就会弹出这个提示，这个时候我一般是提前打开懒猫微服 APP。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250510115337692.png" alt="image-20250510115337692"></p><p>当然如果没有提前打开或者登录呢，也可以在「微服管理 - 安全码」来查看，比如这样，这个方式很 Apple 但是用着比 Apple 的提示舒服多了。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250510115726710.png" alt="image-20250510115726710"></p><p>那么什么时候才会触发这个 MFA 呢？经过不完全测试，主要还是在这里设备管理这里有一个云端白名单，在这里的设备可以就可以免去 MFA 的验证，如果删除某个设备之后，这个设备会马上注销登录，并且在此登录的时候还需要 MFA 验证。这个操作，极大了降低了被黑客攻击的可能性。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250510115805192.png" alt="image-20250510115805192"></p><p>当然如果你觉得 MFA 比较麻烦，那么也可以使用手机号码的方式进行登录，绑定手机号，然后用收验证码的方式进行登录,比如这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">【懒猫微服】验证码：0000，5分钟内有效！请勿转发或泄漏。</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250510120805601.png" alt="image-20250510120805601"></p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>以前用过很多 NAS，一直苦于怕黑客攻击而没有监管 NAS 放在互联网，而一套完整的登录机制也要花费很大的精力去维护，拓展。期间也选择过蒲公英这样的异地组网设备，虽然可以达到目的，但是过程不尽如人意，对于很多国产生态来说，售后一直是缺失的很重要的一环。而懒猫微服恰好弥补了这样的短板，让懂技术的人从繁杂的维护设备中解放出来，像使用公有云一样的使用 NAS。</p><p><img src="https://lzc-playground-1301583638.cos.ap-chengdu.myqcloud.com/guidelines/459/fec2fe20-307a-49d2-8cc5-a5ec370d31c5.png" alt="image.png" title="image.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近在懒猫微服上架了一些应用，正好分享给家里人用。这个实现起来很简单，在懒猫微服上开一个新的用户，然后控制这个用户是否可以安装软件，可以使用什么软件，这样不同用户之间的数据就隔离开了，比如每个人的懒猫网盘和懒猫清单是独立的，互相不会产生干扰。&lt;/p&gt;
&lt;p&gt;下面就以实际操作为例，教大家新建用户，并且了解这些自带的安全机制。&lt;/p&gt;
&lt;h2 id=&quot;新建用户&quot;&gt;&lt;a href=&quot;#新建用户&quot; class=&quot;headerlink&quot; title=&quot;新建用户&quot;&gt;&lt;/a&gt;新建用户&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;设置&lt;/strong&gt; - &lt;strong&gt;用户管理&lt;/strong&gt;，这里可以看到现存的账户，第一次激活的时候会提示注册一个管理员账户，后面可以右上角点击邀请成员，然后会得到弹出一个二维码，新的客户端需要下载懒猫客户端，然后客户端扫码添加输入信息即可。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250510111411166.png&quot; alt=&quot;image-20250510111411166&quot;&gt;&lt;/p&gt;
&lt;p&gt;扫码后可以为新用户设置用户名和密码。客户端下载地址：&lt;br&gt;👉 &lt;a href=&quot;https://lazycat.cloud/download&quot;&gt;https://lazycat.cloud/download&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/categories/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
    
    <category term="MFA" scheme="https://xu-hardy.github.io/tags/MFA/"/>
    
  </entry>
  
  <entry>
    <title>懒猫微服实战入门（三）:懒猫智慧屏，以为是地表最强电视盒子，结果是闺蜜机</title>
    <link href="https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%89%EF%BC%89-%E6%87%92%E7%8C%AB%E6%99%BA%E6%85%A7%E5%B1%8F%EF%BC%8C%E4%BB%A5%E4%B8%BA%E6%98%AF%E5%9C%B0%E8%A1%A8%E6%9C%80%E5%BC%BA%E7%94%B5%E8%A7%86%E7%9B%92%E5%AD%90%EF%BC%8C%E7%BB%93%E6%9E%9C%E6%98%AF%E9%97%BA%E8%9C%9C%E6%9C%BA/"/>
    <id>https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%89%EF%BC%89-%E6%87%92%E7%8C%AB%E6%99%BA%E6%85%A7%E5%B1%8F%EF%BC%8C%E4%BB%A5%E4%B8%BA%E6%98%AF%E5%9C%B0%E8%A1%A8%E6%9C%80%E5%BC%BA%E7%94%B5%E8%A7%86%E7%9B%92%E5%AD%90%EF%BC%8C%E7%BB%93%E6%9E%9C%E6%98%AF%E9%97%BA%E8%9C%9C%E6%9C%BA/</id>
    <published>2025-07-01T16:00:00.000Z</published>
    <updated>2025-06-30T14:36:55.857Z</updated>
    
    <content type="html"><![CDATA[<p>过年那阵子，为了看春晚不卡顿，打算换一个当贝盒子，尽管这些年刷过矿机当盒子或者 Armbian，但是仍然对当贝系列情有独钟，而时过境迁，最后发现在当年风靡市场的网红盒子，不过 RK3566 而已，根据不同的 RAM+ROM 的组合来卖到更高的价格，实在是没有什么性价比。</p><p>于是想到 X86 能性能会更加好一些，比如 Android TV 这种固件，不过这种基本都是海外版本，纯净的基本什么都要自己捣鼓，而 B 站评论的第三方链接又很担心安全问题。</p><p>这问题一直持续到我购买了懒猫微服，高性能的 X86 主机，还带 HDMI（目前 Typec 不支持供电和视频传输），和飞牛的原生 Gnome 输出不同的是懒猫智慧屏其实是商店里面一个独立的 APP，本质上相当于客户端，需要手机扫码授权才能使用</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250512090024831.png" alt="image-20250512090024831"></p><p>登录之后是这样的，其实就是在原来 APP 的基础上加了一个 Chrome 浏览器，然后其他的应用也能在显示器上打开。右上角依次是搜索栏，软件商店和登出按钮。接下来就是可以愉快的观影了，个人体验新开一个账户，然后设置应用白名单体验会更加的好～（但是用手机遥控的时候会提示，智慧屏正在被其他用户使用是否停止 hhhh）</p><span id="more"></span><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250512090050827.png" alt="image-20250512090050827"></p><h4 id="我尝试的观影流程如下："><a href="#我尝试的观影流程如下：" class="headerlink" title="我尝试的观影流程如下："></a>我尝试的观影流程如下：</h4><ol><li>把视频传输到<strong>懒猫网盘</strong>（拖拽上传或者 Samba）</li><li>打开<strong>视频播放器</strong>（其他播放器也可）</li><li>然后选中网盘文件就可以播放啦</li></ol><p>目前支持手机端遥控，类似市面上的盒子助手， 我连接了 Action III ，能够愉快的观影了。<img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250512110003104.png" alt="image-20250512110003104"></p><p>由于是内置的应用，所以不存在电视盒子广告乱象的问题，11 代 I5 拿来观看 4K 也是轻松秒杀，需要什么就往网盘传什么。高端的需求只需要简单的办法。感觉不用买 Apple TV 了，如果需要其他软件比如 jellyfin 啥的也可以自己部署～。</p><p>机器有 USB 还能插键鼠，接好外设的时候记得重启一下，应该是容器部署的原因，让容器在启动的时候再读一遍&#x2F;dev&#x2F;bus&#x2F;usb 下的设备。除了观影，接会议室的演示大屏幕也不错～</p><p>毕竟这个页面，连 debian 虚拟机都能使用，其他的应用也不在话下。想用 X86 安卓的话，直接安装到虚拟机里～</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250512103811587.png" alt="image-20250512103811587"></p><p><strong>为啥说可以成为闺蜜机呢？</strong></p><p><strong>为啥说可以成为闺蜜机呢？</strong></p><p>某天在商场的时候看到一个大大的带支架的还可以随时移动的平板叫做闺蜜机。</p><p>那么懒猫微服 + HDMI 投屏器&#x2F;毫米波投屏器 + 可移动支架，是不是很像？</p><p>某宝上还有这样的改装套餐，解决显示器供电看来就 OK。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250512095959092.png" alt="image-20250512095959092"></p><ol><li>市面上没有好用的电视盒子？选懒猫！</li><li>市面上没有良心的在线网盘？选懒猫！</li><li>市面上没有便宜的闺蜜专机？选懒猫！</li></ol><p>市面上的闺蜜机动辄大几千，配置又差强人意，还不如买懒猫微服，还有专业的售后陪玩，探索无限可能！</p><p>什么？你说闺蜜机还得有语音助手， AI 美颜，娱乐互动？快登懒猫微服用 Docker 来部署吧，还有机会上架懒猫商店哦～</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;过年那阵子，为了看春晚不卡顿，打算换一个当贝盒子，尽管这些年刷过矿机当盒子或者 Armbian，但是仍然对当贝系列情有独钟，而时过境迁，最后发现在当年风靡市场的网红盒子，不过 RK3566 而已，根据不同的 RAM+ROM 的组合来卖到更高的价格，实在是没有什么性价比。&lt;/p&gt;
&lt;p&gt;于是想到 X86 能性能会更加好一些，比如 Android TV 这种固件，不过这种基本都是海外版本，纯净的基本什么都要自己捣鼓，而 B 站评论的第三方链接又很担心安全问题。&lt;/p&gt;
&lt;p&gt;这问题一直持续到我购买了懒猫微服，高性能的 X86 主机，还带 HDMI（目前 Typec 不支持供电和视频传输），和飞牛的原生 Gnome 输出不同的是懒猫智慧屏其实是商店里面一个独立的 APP，本质上相当于客户端，需要手机扫码授权才能使用&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250512090024831.png&quot; alt=&quot;image-20250512090024831&quot;&gt;&lt;/p&gt;
&lt;p&gt;登录之后是这样的，其实就是在原来 APP 的基础上加了一个 Chrome 浏览器，然后其他的应用也能在显示器上打开。右上角依次是搜索栏，软件商店和登出按钮。接下来就是可以愉快的观影了，个人体验新开一个账户，然后设置应用白名单体验会更加的好～（但是用手机遥控的时候会提示，智慧屏正在被其他用户使用是否停止 hhhh）&lt;/p&gt;</summary>
    
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/categories/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/tags/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
  </entry>
  
  <entry>
    <title>懒猫微服实战入门（四）：完全DNS访问，和本地代理冲突了怎么办？</title>
    <link href="https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E5%AE%8C%E5%85%A8dns%E8%AE%BF%E9%97%AE%EF%BC%8C%E5%92%8C%E6%9C%AC%E5%9C%B0%E4%BB%A3%E7%90%86%E5%86%B2%E7%AA%81%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E%EF%BC%9F/"/>
    <id>https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E5%AE%8C%E5%85%A8dns%E8%AE%BF%E9%97%AE%EF%BC%8C%E5%92%8C%E6%9C%AC%E5%9C%B0%E4%BB%A3%E7%90%86%E5%86%B2%E7%AA%81%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E%EF%BC%9F/</id>
    <published>2025-07-01T16:00:00.000Z</published>
    <updated>2025-06-30T14:36:55.857Z</updated>
    
    <content type="html"><![CDATA[<p>刚拿到懒猫微服的时候，了解到这个机器完全使用 DNS 来访问是很吃惊的。拒不完全使用经验，大概是机器里部署了一套私有的 DNS server，然后广播到整个局域网。而公网上的则是 heiyu.space，通过 whois 查看，公网的 domain 是在腾讯云购买的。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250513092022572.png" alt="image-20250513092022572"></p><p>所以应该是两套的解析结构，局域网访问的时候，就先用机器部署的私有 domain 进行解析，如果使用流量或者在外边，就是走互联网上 DNSPod 的解析记录。这个结论属于猜测，因为很多公有云也确实四这么做的，一个公开托管的 domain 用来互联网解析，一个 VPC 内的 private domain 用来解析 VPC 内部的地址。</p><p>懒猫微服和传统的 NAS 又很大的不同，如果作为小白玩家可以很快上手，当做 Sass 服务来用。但对于专业玩家，总有一种技术的强迫症，总用抽丝剥茧，从 Saas 一点点解析到 Iass，然后一点把懒猫编程能够公开访问的私有云。</p><p>比如网络。可以通过 dig 或者 nslookup 来解析</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dig xxx.heiyu.space +short</span><br><span class="line">dig xxx.heiyu.space AAAA +short</span><br></pre></td></tr></table></figure><p>但是，DNS 解析这里慢慢就出现问题了。在某次上传文件到懒猫网盘的时候，我发现速度慢的可怜，几乎是走了公网。在 VIP 答疑群里得知，流量应该是从代理转了一圈，然后回来的，所以慢，剩下的就是解决这个问题了。</p><p>那么办法就是放行白名单，不让他走代理，由于是 DNS 访问，而很多代理的规则是根据域名匹配的，所以要去改这个匹配规则。当然如果你用 nmtui 配置静态 IP 地址的话，那么内网访问也是没有问题了，直接走上级路由的默认路由表即可。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250513094205439.png" alt="image-20250513094205439"></p><p>而白名单主要是放行， _.heiyu.space 和 _.lazycat.cloud 这两个域名，heiyu.space 是穿透服务，lazycat.cloud 是官网和论坛。</p><p>不同的软件有不同的设置办法，比如说用 DOMAIN-SUFFIX 来替代域名的泛解析，所以放行的时候 heiyu.space 这这样子就好。我在修改配置文件的时候用 DOMAIN-SUFFIX 匹配*.heiyu.space 不生效，花了不少的时间。实际不需要再写一次 * 号。</p><p><img src="https://dl.playground.lazycat.cloud/guidelines/459/9ed1bbce-73b0-4ce9-8e22-fb20d6c8b21c.png" alt="image.png"></p><p>而最终落到配置文件上就是这样的。（之前写 DOMAIN-SUFFIX,*.lazycat.cloud,DIRECT）一直不生效。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rules:</span><br><span class="line">- DOMAIN-SUFFIX,lazycat.cloud,DIRECT</span><br><span class="line">- DOMAIN-SUFFIX,heiyu.space,DIRECT</span><br><span class="line">- DOMAIN-SUFFIX,deepseek.com,DIRECT</span><br></pre></td></tr></table></figure><p>也总结一下其他规则吧，最常见的类型有这些：</p><h3 id="1）DOMAIN"><a href="#1）DOMAIN" class="headerlink" title="1）DOMAIN"></a>1）DOMAIN</h3><ul><li>只匹配<strong>某个域名本身</strong>。</li><li>举例：<code>gs.apple.com</code> → 只有访问 <code>gs.apple.com</code> 才会命中。</li></ul><h3 id="2）DOMAIN-SUFFIX"><a href="#2）DOMAIN-SUFFIX" class="headerlink" title="2）DOMAIN-SUFFIX"></a>2）DOMAIN-SUFFIX</h3><ul><li>匹配<strong>所有以这个后缀结尾的域名</strong>。</li><li>举例：<code>apple.com</code> → <code>gs.apple.com</code>、<code>itunes.apple.com</code> 都会命中。</li></ul><h3 id="3）DOMAIN-KEYWORD"><a href="#3）DOMAIN-KEYWORD" class="headerlink" title="3）DOMAIN-KEYWORD"></a>3）DOMAIN-KEYWORD</h3><ul><li>匹配<strong>包含某个关键词的所有域名</strong>。</li><li>举例：<code>apple</code> → <code>apple.com</code>、<code>gs.apple.com</code>、<code>appleabc.xyz</code> 都会命中。</li></ul><h3 id="4）IP-CIDR"><a href="#4）IP-CIDR" class="headerlink" title="4）IP-CIDR"></a>4）IP-CIDR</h3><ul><li>匹配<strong>某个 IP 地址段</strong>。</li><li>举例：<code>192.168.0.0/16</code> → 匹配 192.168 开头的所有 IP。</li></ul><blockquote><p>这些是规则写法里最基本的几种，掌握了就能应对绝大多数情况。</p></blockquote><p><img src="https://lzc-playground-1301583638.cos.ap-chengdu.myqcloud.com/guidelines/459/ae810d7f-7410-489c-9017-987a12234160.png" alt="image.png" title="image.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;刚拿到懒猫微服的时候，了解到这个机器完全使用 DNS 来访问是很吃惊的。拒不完全使用经验，大概是机器里部署了一套私有的 DNS server，然后广播到整个局域网。而公网上的则是 heiyu.space，通过 whois 查看，公网的 domain 是在腾讯云购买的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250513092022572.png&quot; alt=&quot;image-20250513092022572&quot;&gt;&lt;/p&gt;
&lt;p&gt;所以应该是两套的解析结构，局域网访问的时候，就先用机器部署的私有 domain 进行解析，如果使用流量或者在外边，就是走互联网上 DNSPod 的解析记录。这个结论属于猜测，因为很多公有云也确实四这么做的，一个公开托管的 domain 用来互联网解析，一个 VPC 内的 private domain 用来解析 VPC 内部的地址。&lt;/p&gt;
&lt;p&gt;懒猫微服和传统的 NAS 又很大的不同，如果作为小白玩家可以很快上手，当做 Sass 服务来用。但对于专业玩家，总有一种技术的强迫症，总用抽丝剥茧，从 Saas 一点点解析到 Iass，然后一点把懒猫编程能够公开访问的私有云。&lt;/p&gt;
&lt;p&gt;比如网络。可以通过 dig 或者 nslookup 来解析&lt;/p&gt;</summary>
    
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/categories/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
    
    <category term="代理" scheme="https://xu-hardy.github.io/tags/%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>懒猫微服实战入门（五）：文件上传到懒猫网盘，SMB 电视盒子观影</title>
    <link href="https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%88%B0%E6%87%92%E7%8C%AB%E7%BD%91%E7%9B%98%EF%BC%8Csmb-%E7%94%B5%E8%A7%86%E7%9B%92%E5%AD%90%E8%A7%82%E5%BD%B1/"/>
    <id>https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%88%B0%E6%87%92%E7%8C%AB%E7%BD%91%E7%9B%98%EF%BC%8Csmb-%E7%94%B5%E8%A7%86%E7%9B%92%E5%AD%90%E8%A7%82%E5%BD%B1/</id>
    <published>2025-07-01T16:00:00.000Z</published>
    <updated>2025-06-30T14:36:55.857Z</updated>
    
    <content type="html"><![CDATA[<p>作为一个合格的 NAS，肯定要有文件共享的功能，一般我们常用的是 SMB，NFS 和 WebDav 这三种，然后需要设置共享目录和用户权限。</p><p>懒猫网盘提供了一个开箱即用的方案，直接通过 APP 把网盘的文件夹映射自动挂载到本地，不需要像 Linux 那样 mount，也不需像 window 一样新建磁盘映射：</p><p>我们看看以前要挂载一个盘有多麻烦:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Debian/Ubuntu</span><br><span class="line">sudo apt install cifs-utils</span><br><span class="line">sudo mkdir /mnt/smb_share</span><br><span class="line">sudo mount -t cifs //SERVER_IP_OR_NAME/SHARE_NAME /mnt/smb_share -o username=SMB_USER,password=SMB_PASSWORD,domain=WORKGROUP</span><br><span class="line"></span><br></pre></td></tr></table></figure><span id="more"></span><p>如果需要开机自动挂载，还得改&#x2F;etc&#x2F;fstab 里面的条目。但是，懒猫网盘可以开箱即用，不管你是用浏览器，APP，还是用访达挂载 SMB 都访问都可以。属实是解放了 Mac 党的电脑空间。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250514104946937.png" alt="image-20250514104946937"></p><p>在网盘中点击自己的头像，然后<strong>设置</strong> - <strong>网络服务</strong>这里，可以看到设置。甚至点击起开内网服务，还会给一个 IP 地址的 SMB 地址：</p><p><code>smb://ip/user-name</code>，电视盒子不能安装懒猫 app，但是有了 IP 地址之后就可以连接 SMB 了～</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250514105241675.png"></p><p>然后就是当贝盒子这里啦，如果你是小米盒子或者其他的盒子，只要文件管理器支持 SMB 就 OK</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250514113806260.png" alt="image-20250514113806260"></p><p>进入文件管理器，选择 <strong>局域网共享连接</strong>。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250514113737029.png" alt="image-20250514113737029"></p><p>然后输入懒猫微服的 IP 地址，用户名密码就是微服 APP 的， 这一套有点 AD 域的感觉了。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250514113708677.png" alt="image-20250514113708677"></p><p>如果你的文件管理器默认没有 SMB 也没有关系，还可以使用第三方应用进行 SMB 连接，比如这个 Github 项目，可以从 release 中下载 APK 进行安装。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250514113634937.png" alt="image-20250514113634937"></p><p>连接成功后，可对文件进行扫描和管理。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250514113612422.png" alt="图片"></p><p>通过以上配置，就可以在电视盒子上通过 SMB 连接 NAS，开心的观看的 4K 电影了。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250514113307833.png" alt="image-20250514113307833"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;作为一个合格的 NAS，肯定要有文件共享的功能，一般我们常用的是 SMB，NFS 和 WebDav 这三种，然后需要设置共享目录和用户权限。&lt;/p&gt;
&lt;p&gt;懒猫网盘提供了一个开箱即用的方案，直接通过 APP 把网盘的文件夹映射自动挂载到本地，不需要像 Linux 那样 mount，也不需像 window 一样新建磁盘映射：&lt;/p&gt;
&lt;p&gt;我们看看以前要挂载一个盘有多麻烦:&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# Debian/Ubuntu&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt install cifs-utils&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo mkdir /mnt/smb_share&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo mount -t cifs //SERVER_IP_OR_NAME/SHARE_NAME /mnt/smb_share -o username=SMB_USER,password=SMB_PASSWORD,domain=WORKGROUP&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/categories/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/tags/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
  </entry>
  
  <entry>
    <title>懒猫微服实战入门（六）：使用2fauth共享你的MFA</title>
    <link href="https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9A%E4%BD%BF%E7%94%A82fauth%E5%85%B1%E4%BA%AB%E4%BD%A0%E7%9A%84mfa/"/>
    <id>https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9A%E4%BD%BF%E7%94%A82fauth%E5%85%B1%E4%BA%AB%E4%BD%A0%E7%9A%84mfa/</id>
    <published>2025-07-01T16:00:00.000Z</published>
    <updated>2025-06-30T14:36:55.857Z</updated>
    
    <content type="html"><![CDATA[<p>标题有点绕口，甚至听起来有点反直觉。</p><p>故事的背景是这样的，去参加了 AWS 的活动给的账户强制开 MFA，但是我们还想团队内部 share 使用，于是产生了这个需求。</p><p>登录到 AWS 的控制台强制开了 MFA，而且在第一次注册的时候强制绑定多因子验证。这也就意味着，其他人如果想登录这个账户就得随时 call 我，然后我去发给他数据验证码，这实在很不方便，所以想到了共享的 MFA 的需求。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250516164159950.png" alt="image-20250516164159950"></p><p>头几天逛商店看到的，觉得项目有点意思就下载了，没想到这么快用到了。懒猫商店，一键部署很方便，当成 Saas 服务来用，完全不考虑部署运维的事情。</p><span id="more"></span><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250516163824579.png" alt="image-20250516163824579"></p><p>之前给小伙伴开了懒猫微服的账户，共享了 planka 来看项目进度，这次把 2fauth 的权限也添加给他。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250516163911970.png" alt="image-20250516163911970"></p><p>首先我这边先注册管理员的账户，默认是登录页面，需要切换一下。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250516164749502.png" alt="image-20250516164749502"></p><p>登录之后会提示绑定一下这个账户的 MFA，我就是为了不在手机上安装 MFA 软件才用这个的，就不要套娃了。反正外面还有懒猫的验证系统，那个还有 TLS 加密，安全码验证。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250516164845425.png" alt="image-20250516164845425"></p><p>选择不绑定设备之后，在这里导入需要设置的 MFA，这可以用摄像头或者导入二维码文件。我用的电脑端，所以直接在应用处截图，然后导入到这里了。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250516164821161.png" alt="image-20250516164821161"></p><p>点击最下面的导入，然后选择二维码 - 上传 就可以了。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250516165311672.png" alt="image-20250516165311672"></p><p>导入之后是这样的，可以二次确认签发机构。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250516165259782.png" alt="image-20250516165259782"></p><p>然后把生成的 6 位数字填写到 aws 控制台上，就可以成功验证了。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250516165435265.png" alt="image-20250516165435265"></p><p>在 2fauth 控制台上是这样的，点开就可以查看 6 位数字验证码。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250516165711375.png" alt="image-20250516165711375"></p><p>那么回到一开始的话题，怎么共享给其他账户呢？点击下方 - 管理员 - 用户 ，然后我们来新建一个普通用户。步骤基本和前面的一致。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250516165543137.png" alt="image-20250516165543137"></p><p>本来以为有用户组一类的概念，把两个用户和 MFA 放在一个组里达到 share 的目的，结果发现这个分组完全是用来区分的 TAG。也没有找到把用户加到组里的操作。那就从管理员导出，再从下一个用户导入吧。</p><p>首先试了二维码，但是导入的时候就提示 server error。于是查了了 wiki，都是其他 MFA 软件导入 2fauth 的。无奈只能只能导出配置文件。名字叫做 2fauth_export.json</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250516170143799.png" alt="image-20250516170143799"></p><p>登录新用户的时候新建，然后选择文本文件。导入刚才的配置文件就可以了。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250516165311672.png" alt="image-20250516165311672"></p><p>配置文件基本长这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;app&quot;: &quot;2fauth_v5.3.2&quot;,</span><br><span class="line">  &quot;schema&quot;: 1,</span><br><span class="line">  &quot;datetime&quot;: &quot;2025-05-16T08:35:07.676665Z&quot;,</span><br><span class="line">  &quot;data&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;otp_type&quot;: &quot;totp&quot;,</span><br><span class="line">      &quot;account&quot;: &quot;Q&quot;,</span><br><span class="line">      &quot;service&quot;: &quot;AWS SSO&quot;,</span><br><span class="line">      &quot;icon&quot;: null,</span><br><span class="line">      &quot;icon_mime&quot;: null,</span><br><span class="line">      &quot;icon_file&quot;: null,</span><br><span class="line">      &quot;secret&quot;: &quot;secretsss&quot;,</span><br><span class="line">      &quot;digits&quot;: 6,</span><br><span class="line">      &quot;algorithm&quot;: &quot;sha1&quot;,</span><br><span class="line">      &quot;period&quot;: 30,</span><br><span class="line">      &quot;counter&quot;: null,</span><br><span class="line">      &quot;legacy_uri&quot;: &quot;otpauth://totp/&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整个过程有点绕，有人说每个人手机安装 google authenticator 扫一下不就好了吗？</p><p><strong>为什么采取这个方案？</strong></p><ol><li><p>之前用手机安装类似软件，每次去三里屯维修的时候都说返厂要把数据抹掉，下次还得重新绑定，还有一些软件只认 MFA 不认人。</p><p>这过程不光折腾的够呛，而且 Apple 本身的问题还要 MFA 来买单。</p></li><li><p>起初是想做一个类似于团队共享 MFA 的场景的，类似于 RBAC，控制起来很灵活，但是实际体验下来是没有达到的。</p></li><li><p>把最早的 MFA 二维码截图 share 出去也能扫，但是不确定有效时间。</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;标题有点绕口，甚至听起来有点反直觉。&lt;/p&gt;
&lt;p&gt;故事的背景是这样的，去参加了 AWS 的活动给的账户强制开 MFA，但是我们还想团队内部 share 使用，于是产生了这个需求。&lt;/p&gt;
&lt;p&gt;登录到 AWS 的控制台强制开了 MFA，而且在第一次注册的时候强制绑定多因子验证。这也就意味着，其他人如果想登录这个账户就得随时 call 我，然后我去发给他数据验证码，这实在很不方便，所以想到了共享的 MFA 的需求。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250516164159950.png&quot; alt=&quot;image-20250516164159950&quot;&gt;&lt;/p&gt;
&lt;p&gt;头几天逛商店看到的，觉得项目有点意思就下载了，没想到这么快用到了。懒猫商店，一键部署很方便，当成 Saas 服务来用，完全不考虑部署运维的事情。&lt;/p&gt;</summary>
    
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/categories/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/tags/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
  </entry>
  
  <entry>
    <title>懒猫微服实战入门（八）：懒猫微服 × SSH Remote：打造随时随地的云端开发环境</title>
    <link href="https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E5%85%AB%EF%BC%89%EF%BC%9A%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D-%C3%97-ssh-remote%EF%BC%9A%E6%89%93%E9%80%A0%E9%9A%8F%E6%97%B6%E9%9A%8F%E5%9C%B0%E7%9A%84%E4%BA%91%E7%AB%AF%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <id>https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E5%85%AB%EF%BC%89%EF%BC%9A%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D-%C3%97-ssh-remote%EF%BC%9A%E6%89%93%E9%80%A0%E9%9A%8F%E6%97%B6%E9%9A%8F%E5%9C%B0%E7%9A%84%E4%BA%91%E7%AB%AF%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</id>
    <published>2025-07-01T16:00:00.000Z</published>
    <updated>2025-06-30T14:36:55.857Z</updated>
    
    <content type="html"><![CDATA[<p>Apple 开始换了 ARM 芯片之后，我们还处于 X86 和 ARM 交叉的阶段。所以有时候还得有一台 X86 的开发环境来测试一些兼容性问题。一开始手里面只有低配置的软路由，后来入手了懒猫微服，这个 11 代 i5 的 CPU 终于能够编译一些重型的任务了。</p><p>下面演示如何把懒猫微服配置成一台云端开发机，并分别用 <strong>VS Code</strong> 与 <strong>PyCharm</strong> 进行远程开发。</p><p>虽然懒猫微服的商店已经上架了 code-sever 可以开箱即用，除此之外我们也来探索下其他的方案。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250529163903393.png" alt="image-20250529163903393"></p><hr><span id="more"></span><h2 id="1-·-准备-SSH-免密登录"><a href="#1-·-准备-SSH-免密登录" class="headerlink" title="1 · 准备 SSH 免密登录"></a>1 · 准备 SSH 免密登录</h2><p>修改 <code>~/.ssh/config</code>（若无自行创建）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Host lzc</span><br><span class="line">    HostName server.heiyu.space      # 服务器域名 / IP</span><br><span class="line">    User root                        # 默认用户名</span><br><span class="line">    IdentityFile ~/.ssh/id_ed25519   # 私钥路径</span><br><span class="line">    Port 22                          # 默认端口</span><br><span class="line">    ServerAliveInterval 60           # 60 秒保活</span><br><span class="line">    TCPKeepAlive yes                 # TCP 保持连接</span><br><span class="line">    ForwardAgent yes                 # 允许代理转发</span><br><span class="line">    IdentitiesOnly yes               # 只尝试显式钥匙</span><br></pre></td></tr></table></figure><p>终端测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh lzc          <span class="comment"># 应直接登录而不再提示密码</span></span><br></pre></td></tr></table></figure><hr><h2 id="2-·-VS-Code-：一键-Remote"><a href="#2-·-VS-Code-：一键-Remote" class="headerlink" title="2 · VS Code ：一键 Remote"></a>2 · VS Code ：一键 Remote</h2><blockquote><p>需要 <strong>Remote Development</strong> 三件套插件（SSH &#x2F; WSL &#x2F; Containers）。</p></blockquote><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250529161722643.png" alt="VS Code 插件"></p><ol><li>安装完成后，点击左下角 <strong>棕黄色</strong>的 Remote 图标。</li><li>VS Code 自动读取 <code>~/.ssh/config</code>，显示刚才的 <strong>lzc</strong> 主机。<br><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250529161700856.png" alt="选择主机"></li><li>选择需要打开的文件夹，我们是 root 登录，所以基本上所有的路径都有访问权限，由于懒猫微服的设置，除了 root 目录外，其他的目标可能会被清空，所以我们尽量把代码留在 root 目录下就好。<br><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250529162340274.png" alt="选择目录"></li><li>打开之后我们就可以看到代码了，剩下的就和本地差不多了，这也就是偷懒不学 VIM 的原因吧。<br><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250529161829107.png" alt="远程工作区"></li></ol><hr><h2 id="3-·-PyCharm-：Gateway-秒连"><a href="#3-·-PyCharm-：Gateway-秒连" class="headerlink" title="3 · PyCharm ：Gateway 秒连"></a>3 · PyCharm ：Gateway 秒连</h2><p>我们再来看 Pycharm，默认提供了远程开发的功能。记得最早 Jetbrains 的是这么实现的，把本地代码推送到远端的&#x2F;tmp 文件夹然后调用远端编译器执行。现在用了 Gateway 基本可以达到实时的效果了。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250529161730354.png" alt="PyCharm Remote 入口"></p><ol><li>依次点击 <strong>New SSH Configuration → Add</strong>，填入主机、端口、用户名，并选择 <strong>私钥</strong> 或 <strong>密码</strong>。<br><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250529161741726.png" alt="配置 SSH"></li><li>连接成功后，选择需要打开的服务器目录（同样建议用 <code>/root/...</code>）。<br><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250529161748708.png" alt="选择工程目录"></li><li>首次连接时 PyCharm 会在服务器端安装一个 <strong>IDE Agent</strong>。<br><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250529163010706.png" alt="安装 Agent"></li><li>安装完毕即可像本地一样运行、调试、补全。<br><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250529161803751.png" alt="远程编辑器"></li></ol><hr><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>apple 的 M 芯片用来开发，而懒微服就作为上线环境之前的测试环境，当需要 X86 环境的时候，随时切换过去。</p><p><img src="https://lzc-playground-1301583638.cos.ap-chengdu.myqcloud.com/guidelines/459/31aa8fe0-4d90-4b1a-948f-c97288f47c64.png" alt="77dea8a6a38817c503c379dd946fc9e4.png" title="77dea8a6a38817c503c379dd946fc9e4.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Apple 开始换了 ARM 芯片之后，我们还处于 X86 和 ARM 交叉的阶段。所以有时候还得有一台 X86 的开发环境来测试一些兼容性问题。一开始手里面只有低配置的软路由，后来入手了懒猫微服，这个 11 代 i5 的 CPU 终于能够编译一些重型的任务了。&lt;/p&gt;
&lt;p&gt;下面演示如何把懒猫微服配置成一台云端开发机，并分别用 &lt;strong&gt;VS Code&lt;/strong&gt; 与 &lt;strong&gt;PyCharm&lt;/strong&gt; 进行远程开发。&lt;/p&gt;
&lt;p&gt;虽然懒猫微服的商店已经上架了 code-sever 可以开箱即用，除此之外我们也来探索下其他的方案。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250529163903393.png&quot; alt=&quot;image-20250529163903393&quot;&gt;&lt;/p&gt;
&lt;hr&gt;</summary>
    
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/categories/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/tags/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
  </entry>
  
</feed>
