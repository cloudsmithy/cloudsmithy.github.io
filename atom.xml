<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>镜湖</title>
  
  
  <link href="https://xu-hardy.github.io/atom.xml" rel="self"/>
  
  <link href="https://xu-hardy.github.io/"/>
  <updated>2025-07-03T06:34:24.706Z</updated>
  <id>https://xu-hardy.github.io/</id>
  
  <author>
    <name>Xu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>懒猫微服开发篇（四）：懒猫微服如何使用 OpenID Connect （OIDC）？（上）</title>
    <link href="https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%BC%80%E5%8F%91%E7%AF%87%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-openid-connect-%EF%BC%88oidc%EF%BC%89%EF%BC%9F%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
    <id>https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%BC%80%E5%8F%91%E7%AF%87%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-openid-connect-%EF%BC%88oidc%EF%BC%89%EF%BC%9F%EF%BC%88%E4%B8%8A%EF%BC%89/</id>
    <published>2025-07-08T16:00:00.000Z</published>
    <updated>2025-07-03T06:34:24.706Z</updated>
    
    <content type="html"><![CDATA[<p>OpenID Connect（OIDC）是一个基于 <strong>OAuth 2.0</strong> 的身份认证协议，允许用户使用一个账号（如 Google、微信、Microsoft 账号）登录多个不同的网站或应用，而无需重复注册。我们经常把他和<strong>OAuth 2.0</strong> 混为一谈，</p><p>它主要用于 <strong>身份认证（Authentication）</strong>，而 OAuth 2.0 主要用于 <strong>授权（Authorization）</strong>。简单来说：</p><ul><li><strong>OAuth 2.0</strong> → 让应用能访问你的数据（如获取微信头像），还要自己做用户管理。</li><li><strong>OIDC</strong> → 让应用能确认“你是谁”（如用微信账号登录）</li></ul><p>下面以我的懒猫 ENV 查看器为例，来讲解这个登录流程。</p><p>当你在应用处点击登录就会重定向到登录中心，我们通常管这个叫做身份提供商（IDP），如果是其他的软件有可能是 <strong>“使用 Google 登录”</strong> 或 <strong>“微信登录”</strong> 。</p><span id="more"></span><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250702210408529.png" alt="image-20250702210408529"></p><p>跳转到认证中心，一般都会提示你是否确认登录，某某应用将要获取登录的权限，查看你的信息。在懒猫微服里这直接点击 Grant Access 即可。在其他的 IDP 中，会让你输入账号密码登录，并同意授权该网站访问你的基本信息（如邮箱、昵称）。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250702210333539.png" alt="image-20250702210333539"></p><p>当 IDP 验证完的身份后，返回一个 <strong>JWT（JSON Web Token）</strong>，其中包含你的身份信息。当网站验证 JWT 后，确认你的身份，并让你登录成功。我们也可以在 jwt.io 和 jwt.ms 这个网站去做解码。</p><p>我解码了其中一个 token，我们可以看到里面的信息，可以看到加密算法，颁发机构，过期时间，用户信息什么的，</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250702212449226.png" alt="image-20250702212449226"></p><p>这个是一般登录的流程，比如首次用户名和密码登录成功之后会返回一个 JWT，然后后续把这个 JWT 当做 bear token 来请求后面的资源。我们的 OIDC 和这个原理类似，只不过稍微复杂一些。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/7aed62612920d1042f175cb87c1f049e.png" alt="7aed62612920d1042f175cb87c1f049e"></p><p>在 <code>OIDC</code> 协议中，会遇到三种 Token: <code>id_token</code>, <code>access_token</code> 和 <code>refresh_token</code>。</p><ol><li><p>Access Token 用于基于 Token 的认证模式，允许应用访问一个资源 API。用户认证授权成功后，Authing 会签发 Access Token 给应用。应用后面就带着这个** Access Token** 访问资源 API。</p></li><li><p>ID Token 相当于用户的身份凭证，开发者的前端访问后端接口时可以携带 <strong>ID Token</strong>，<strong>开发者服务器</strong>可以校验用户的 <strong>ID Token</strong> 以确定用户身份，<a href="https://docs.authing.cn/v2/guides/faqs/how-to-validate-user-token.html">验证</a>通过后返回相关资源。</p></li></ol><p>AccessToken 和 IdToken 都是 JWT，<strong>有效时间</strong>通常较短。通常用户在获取资源的时候需要携带 AccessToken，当 AccessToken 过期后，用户需要获取一个新的 AccessToken。</p><ol start="3"><li>Refresh Token 用于获取新的 AccessToken。这样可以缩短 AccessToken 的过期时间保证安全，同时又不会因为频繁过期重新要求用户登录。用户在初次认证时，Refresh Token 会和 AccessToken、IdToken 一起返回。应用携带 Refresh Token 向 Token 端点发起请求时，这个时候会续签 AccessToken 和 IdToken 与 ID token。</li></ol><p>所以我们一般说的 JWT 就是 Access Token 的部分用于授权。而<strong>ID Token</strong> 用户标注用户信息，Refresh Token 用来续签 Access Token 。</p><p>在懒猫微服上使用 OIDC 有一个好处就是，不用在 IDP 上填写申请信息，在程序运行过程中可以直接注入相应的环境变量，这样我们直接用就可以了。相当于传统 IDP 需要填写应用名称，做分组控制而言，这个自动注入的 OIDC 开箱即用很方便。</p><p>一般是有这几个信息：</p><ol><li>CLIENT_ID：从我的 app 来看，这个就是包名</li><li>CLIENT_SECRET： 这个是随机的</li><li>ISSUER_URI：https:&#x2F;&#x2F;微服域名&#x2F;sys&#x2F;oauth</li><li>TOKEN_URI：https:&#x2F;&#x2F;微服域名&#x2F;sys&#x2F;oauth&#x2F;token</li><li>USERINFO_URI：https:&#x2F;&#x2F;微服域名&#x2F;sys&#x2F;oauth&#x2F;userinfo</li></ol><p>先说 ISSUER_URI，这个是 OIDC 的入口，其中.well-known&#x2F;openid-configuration 里可以拿到各种 URL，算是 OIDC 的入口，即使环境变量中没给信息我们也可以在这里查看。比如用来校验 JWT 的 jwks_uri。</p><p>GET https:&#x2F;&#x2F;&lt;微服域名&gt;&#x2F;sys&#x2F;oauth&#x2F;.well-known&#x2F;openid-configuration 结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;issuer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://&lt;name&gt;.heiyu.space/sys/oauth&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;authorization_endpoint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://&lt;name&gt;.heiyu.space/sys/oauth/auth&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;token_endpoint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://&lt;name&gt;.heiyu.space/sys/oauth/token&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;jwks_uri&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://&lt;name&gt;.heiyu.space/sys/oauth/keys&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;userinfo_endpoint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://&lt;name&gt;.heiyu.space/sys/oauth/userinfo&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;device_authorization_endpoint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://&lt;name&gt;.heiyu.space/sys/oauth/device/code&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;introspection_endpoint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://&lt;name&gt;.heiyu.space/sys/oauth/token/introspect&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;grant_types_supported&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;authorization_code&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;refresh_token&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;urn:ietf:params:oauth:grant-type:device_code&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;urn:ietf:params:oauth:grant-type:token-exchange&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;response_types_supported&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;code&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;subject_types_supported&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;public&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;id_token_signing_alg_values_supported&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;RS256&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;code_challenge_methods_supported&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;S256&quot;</span><span class="punctuation">,</span> <span class="string">&quot;plain&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scopes_supported&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;openid&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;email&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;groups&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;profile&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;offline_access&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;token_endpoint_auth_methods_supported&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;client_secret_basic&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;client_secret_post&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;claims_supported&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;iss&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;sub&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;aud&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;iat&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;exp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;email&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;email_verified&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;locale&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;name&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;preferred_username&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;at_hash&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>至于回调 URL，这个是需要自己设置的部分。可能由于开发习惯导致每个应用的回调 URL 不一样。相对于在 IDP 中填写信息，在懒猫微服的 lzc-manifest.yml 中加这么一行即可。也只有设置了 application.oidc_redirect_path 之后，才能使用 OIDC 相关的环境变量。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">application.oidc_redirect_path:</span> <span class="string">/callback</span></span><br></pre></td></tr></table></figure><p>可以看看我的懒猫 ENV 查看器的设置。通过 oidc_redirect_path 设置回调地址，然后使用 environment 字段还这是需要的环境变量。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">lzc-sdk-version:</span> <span class="number">0.1</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">懒猫ENV查看器</span></span><br><span class="line"><span class="attr">package:</span> <span class="string">xu.deploy.env</span></span><br><span class="line"><span class="attr">version:</span> <span class="number">0.0</span><span class="number">.2</span></span><br><span class="line"><span class="attr">description:</span></span><br><span class="line"><span class="attr">license:</span> <span class="string">https://choosealicense.com/licenses/mit/</span></span><br><span class="line"><span class="attr">homepage:</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">xu</span></span><br><span class="line"><span class="attr">application:</span></span><br><span class="line">  <span class="attr">subdomain:</span> <span class="string">env</span></span><br><span class="line">  <span class="attr">oidc_redirect_path:</span> <span class="string">/callback</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/=exec://5005,./lzcapp/pkg/content/run.sh</span></span><br><span class="line">  <span class="attr">environment:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">LAZYCAT_AUTH_OIDC_CLIENT_ID=$&#123;LAZYCAT_AUTH_OIDC_CLIENT_ID&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">LAZYCAT_AUTH_OIDC_CLIENT_SECRET=$&#123;LAZYCAT_AUTH_OIDC_CLIENT_SECRET&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">LAZYCAT_AUTH_OIDC_AUTH_URI=$&#123;LAZYCAT_AUTH_OIDC_AUTH_URI&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">LAZYCAT_AUTH_OIDC_TOKEN_URI=$&#123;LAZYCAT_AUTH_OIDC_TOKEN_URI&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">LAZYCAT_AUTH_OIDC_USERINFO_URI=$&#123;LAZYCAT_AUTH_OIDC_USERINFO_URI&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">LAZYCAT_AUTH_OIDC_ISSUER_URI=$&#123;LAZYCAT_AUTH_OIDC_ISSUER_URI&#125;</span></span><br></pre></td></tr></table></figure><p>然后我们来看 OIDC 的几种授权模式。</p><table><thead><tr><th align="left">应用类型</th><th align="left">授权模式</th></tr></thead><tbody><tr><td align="left">有后端场景</td><td align="left">授权码模式</td></tr><tr><td align="left">SPA，无后端</td><td align="left">隐式模式</td></tr><tr><td align="left">应安全存储密钥</td><td align="left">密码模式</td></tr><tr><td align="left">服务器之间</td><td align="left">Client Credentials</td></tr></tbody></table><p>这个是 Authing 推荐的选择方式，不过据我的经验来讲，就 Web 开发而言大多还是选择隐式授权的居多。看的出来懒猫的 OIDC 也是用的这种。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/7c23a4d3-edef-4873-af13-ac75a1ab1094.png" alt="7c23a4d3-edef-4873-af13-ac75a1ab1094"></p><p>懒猫微服也是用的授权码模式, 所以跳转的时候我们抓浏览器请求会看到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://url/callback?code=xxxx</span><br></pre></td></tr></table></figure><p>其实一个良好的 OIDC 流程是这样的：</p><ol start="0"><li><p>当访问没有权限的路由的时候，在路由守卫中重定向到登录页面。</p></li><li><p>当用户登录的时候，跳转到对应的的 IDP 控制页面，然后输入用户凭证。这个时候会走 IDP 的认证。</p></li><li><p>认证之后会颁发一次性 code（授权码模式），如果是简单的密码模式，那么就会直接返回 Access Token，ID token 以及 refresh token。</p></li><li><p>使用授权码 code 换取 AccessToken、IdToken 以及 refresh token。授权码模式的好处是，把真正的令牌藏在后端交换，只暴露一次性 code，从而极大降低令牌泄露和被滥用的风险。</p></li><li><p>最后我们再用 AccessToken 来访问资源。</p></li></ol><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/98e71384-dfcb-426b-9f6e-3190f4e09701.png" alt="98e71384-dfcb-426b-9f6e-3190f4e09701"></p><p>以上是基于懒猫的 OpenID Connect （OIDC）的理论讲解的部分，后面我们会进行实操，手把手创建可以接入 OIDC 的应用。</p><p>备注：关于部分 OIDC 的图文来自 Authing 文档。</p><p><a href="https://docs.authing.cn/v2/concepts/oidc/choose-flow.html">https://docs.authing.cn/v2/concepts/oidc/choose-flow.html</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;OpenID Connect（OIDC）是一个基于 &lt;strong&gt;OAuth 2.0&lt;/strong&gt; 的身份认证协议，允许用户使用一个账号（如 Google、微信、Microsoft 账号）登录多个不同的网站或应用，而无需重复注册。我们经常把他和&lt;strong&gt;OAuth 2.0&lt;/strong&gt; 混为一谈，&lt;/p&gt;
&lt;p&gt;它主要用于 &lt;strong&gt;身份认证（Authentication）&lt;/strong&gt;，而 OAuth 2.0 主要用于 &lt;strong&gt;授权（Authorization）&lt;/strong&gt;。简单来说：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;OAuth 2.0&lt;/strong&gt; → 让应用能访问你的数据（如获取微信头像），还要自己做用户管理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;OIDC&lt;/strong&gt; → 让应用能确认“你是谁”（如用微信账号登录）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面以我的懒猫 ENV 查看器为例，来讲解这个登录流程。&lt;/p&gt;
&lt;p&gt;当你在应用处点击登录就会重定向到登录中心，我们通常管这个叫做身份提供商（IDP），如果是其他的软件有可能是 &lt;strong&gt;“使用 Google 登录”&lt;/strong&gt; 或 &lt;strong&gt;“微信登录”&lt;/strong&gt; 。&lt;/p&gt;</summary>
    
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/categories/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
    
    <category term="开发" scheme="https://xu-hardy.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>懒猫微服开发篇（三）：如何将已有 Docker Compose 应用移植到懒猫微服</title>
    <link href="https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%BC%80%E5%8F%91%E7%AF%87%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E5%A6%82%E4%BD%95%E5%B0%86%E5%B7%B2%E6%9C%89-docker-compose-%E5%BA%94%E7%94%A8%E7%A7%BB%E6%A4%8D%E5%88%B0%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    <id>https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%BC%80%E5%8F%91%E7%AF%87%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E5%A6%82%E4%BD%95%E5%B0%86%E5%B7%B2%E6%9C%89-docker-compose-%E5%BA%94%E7%94%A8%E7%A7%BB%E6%A4%8D%E5%88%B0%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/</id>
    <published>2025-07-07T16:00:00.000Z</published>
    <updated>2025-07-03T06:34:24.706Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文延续前两篇，演示如何把一个已经在本地运行良好的 Docker Compose 应用打包并上架到懒猫微服应用商店。以 Milvus 为例，逐步拆解 Manifest 配置、路由映射、数据卷绑定以及镜像加速等关键环节，帮助大家快速完成移植。</p></blockquote><h3 id="1-目录结构与核心文件"><a href="#1-目录结构与核心文件" class="headerlink" title="1. 目录结构与核心文件"></a>1. 目录结构与核心文件</h3><p>在懒猫微服中，一个最小可用的应用包仅需两个文件：</p><table><thead><tr><th>文件</th><th>作用</th></tr></thead><tbody><tr><td><code>lzc-build.yml</code></td><td>描述打包流程及应用图标。简单应用只需指定 <code>icon</code> 即可。</td></tr><tr><td><code>lzc-manifest.yml</code></td><td>定义应用元数据与服务编排，是移植的重点。</td></tr></tbody></table><p>本文主要关注 <code>lzc-manifest.yml</code> 的编写。</p><h3 id="2-lzc-manifest-yml-字段逐一解析"><a href="#2-lzc-manifest-yml-字段逐一解析" class="headerlink" title="2. lzc-manifest.yml 字段逐一解析"></a>2. <code>lzc-manifest.yml</code> 字段逐一解析</h3><p>现在有了懒猫应用查看器很方便，我们以商店里的 Milvus 的示例 Manifest 为例，并附带注释说明。</p><span id="more"></span><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250702125730816.png" alt="image-20250702125730816"></p><p>这个 lzc-mainfest.yml 解析是重点。主要是 subdomain，ingress，services 这几个字段。总体上还是延续了 Docker compose 的风格。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">lzc-sdk-version:</span> <span class="string">&quot;0.1&quot;</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">Milvus</span></span><br><span class="line"><span class="attr">package:</span> <span class="string">in.zhaoj.milvus</span></span><br><span class="line"><span class="attr">version:</span> <span class="number">2.5</span><span class="number">.8</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">milvus</span></span><br><span class="line"><span class="attr">application:</span></span><br><span class="line">  <span class="comment"># 子域名：应用上线后将访问 https://milvus.&lt;机器名&gt;.heiyu.space</span></span><br><span class="line">  <span class="attr">subdomain:</span> <span class="string">milvus</span></span><br><span class="line">  <span class="attr">background_task:</span> <span class="literal">false</span> <span class="comment"># 是否允许后台运行</span></span><br><span class="line">  <span class="attr">multi_instance:</span> <span class="literal">false</span> <span class="comment"># 是否允许多实例</span></span><br><span class="line">  <span class="attr">gpu_accel:</span> <span class="literal">false</span> <span class="comment"># 是否请求 GPU</span></span><br><span class="line">  <span class="attr">routes:</span> <span class="comment"># 七层（HTTP）路由</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/=http://attu.in.zhaoj.milvus.lzcapp:3000/</span></span><br><span class="line">  <span class="attr">ingress:</span> <span class="comment"># 四层（TCP）转发</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">tcp</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">19530</span></span><br><span class="line">      <span class="attr">service:</span> <span class="string">standalone</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">tcp</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">9091</span></span><br><span class="line">      <span class="attr">service:</span> <span class="string">standalone</span></span><br><span class="line"><span class="attr">services:</span> <span class="comment"># 以下基本等同于 docker‑compose 中的 services</span></span><br><span class="line">  <span class="attr">etcd:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">registry.lazycat.cloud/longixaoyi/milvusdb/etcd:v3.5.18</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ETCD_AUTO_COMPACTION_MODE=revision</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ETCD_AUTO_COMPACTION_RETENTION=1000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ETCD_QUOTA_BACKEND_BYTES=4294967296</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ETCD_SNAPSHOT_COUNT=50000</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">&gt;</span></span><br><span class="line"><span class="string">      etcd -advertise-client-urls=http://127.0.0.1:2379</span></span><br><span class="line"><span class="string">           -listen-client-urls http://0.0.0.0:2379</span></span><br><span class="line"><span class="string">           --data-dir /etcd</span></span><br><span class="line"><span class="string"></span>    <span class="attr">binds:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/lzcapp/var/etcd:/etcd</span></span><br><span class="line">  <span class="attr">minio:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">registry.lazycat.cloud/longixaoyi/milvusdb/minio:RELEASE.2023-03-20T20-16-18Z</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MINIO_ACCESS_KEY=minioadmin</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MINIO_SECRET_KEY=minioadmin</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">minio</span> <span class="string">server</span> <span class="string">/minio_data</span></span><br><span class="line">    <span class="attr">binds:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/lzcapp/var/minio_data:/minio_data</span></span><br><span class="line">    <span class="attr">health_check:</span></span><br><span class="line">      <span class="attr">test:</span> [<span class="string">&quot;CMD&quot;</span>, <span class="string">&quot;curl&quot;</span>, <span class="string">&quot;-f&quot;</span>, <span class="string">&quot;http://localhost:9000/minio/health/live&quot;</span>]</span><br><span class="line">  <span class="attr">standalone:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">registry.lazycat.cloud/longixaoyi/milvusdb/milvus:v2.6.0-rc1</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">milvus</span> <span class="string">run</span> <span class="string">standalone</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ETCD_ENDPOINTS=etcd:2379</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MINIO_ADDRESS=minio:9000</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">etcd</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">minio</span></span><br><span class="line">    <span class="attr">binds:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/lzcapp/var/milvus:/var/lib/milvus</span></span><br><span class="line">  <span class="attr">attu:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">registry.lazycat.cloud/longixaoyi/zilliz/attu:latest</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MILVUS_URL=standalone:19530</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">standalone</span></span><br></pre></td></tr></table></figure><h4 id="2-1-subdomain"><a href="#2-1-subdomain" class="headerlink" title="2.1 subdomain"></a>2.1 <code>subdomain</code></h4><p>subdomain 是应用程序上线的域名，例如上述配置上线后即为 <code>https://milvus.&lt;节点名&gt;.heiyu.space</code>。</p><h4 id="2-2-routes"><a href="#2-2-routes" class="headerlink" title="2.2 routes"></a>2.2 <code>routes</code></h4><p>route 来做七层的 HTTP 转发，类似 Nginx 的反向代理。规则格式为 <code>本地路径 = 目标 URL</code>。在示例中，根路径 <code>/</code> 被转发到前端服务 <code>attu</code> 的 3000 端口。</p><p>URL 规则：服务名.包名.lzcapp:端口。（包名随意起）</p><pre><code>- /=http://attu.in.zhaoj.milvus.lzcapp:3000/</code></pre><p>这里 attu 是服务名，端口是 3000，in.zhaoj.milvus 是包名。</p><h4 id="2-3-ingress"><a href="#2-3-ingress" class="headerlink" title="2.3 ingress"></a>2.3 <code>ingress</code></h4><p>用于四层直通转发，适用于非 HTTP 协议（数据库、SSH 等）。示例将 Milvus 的 gRPC (19530) 与 HTTP (9091) 端口暴露给外部。</p><h4 id="2-4-bind"><a href="#2-4-bind" class="headerlink" title="2.4 bind"></a>2.4 <code>bind</code></h4><p>Manifest 中的绑定路径以 <code>/lzcapp/var</code> 为前缀。发布后会被映射到宿主机的 <code>/data/app/var/&lt;package&gt;</code>，也算是为了简化程序移植和学习成本。和 Docker-compose 写绝对路径来说，这里的可移植性执行更好。</p><p>健康检查在这里不是必须的，因为打包的上架的时候服务会帮忙做这个事情。</p><h3 id="3-服务映射与-docker-compose-yml-对照"><a href="#3-服务映射与-docker-compose-yml-对照" class="headerlink" title="3. 服务映射与 docker-compose.yml 对照"></a>3. 服务映射与 <code>docker-compose.yml</code> 对照</h3><p>懒猫 Manifest 的 <code>services</code> 段几乎一一复刻了传统 Compose 配置，常用键均保持一致。以下列出了 Milvus 官方 <code>docker-compose.yml</code>，方便对照理解：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.5&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">etcd:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">milvus-etcd</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">quay.io/coreos/etcd:v3.5.18</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ETCD_AUTO_COMPACTION_MODE=revision</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ETCD_AUTO_COMPACTION_RETENTION=1000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ETCD_QUOTA_BACKEND_BYTES=4294967296</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ETCD_SNAPSHOT_COUNT=50000</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;DOCKER_VOLUME_DIRECTORY:-.&#125;/volumes/etcd:/etcd</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">etcd</span> <span class="string">-advertise-client-urls=http://etcd:2379</span> <span class="string">-listen-client-urls</span> <span class="string">http://0.0.0.0:2379</span> <span class="string">--data-dir</span> <span class="string">/etcd</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> [<span class="string">&quot;CMD&quot;</span>, <span class="string">&quot;etcdctl&quot;</span>, <span class="string">&quot;endpoint&quot;</span>, <span class="string">&quot;health&quot;</span>]</span><br><span class="line">      <span class="attr">interval:</span> <span class="string">30s</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">20s</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">minio:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">milvus-minio</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">minio/minio:RELEASE.2023-03-20T20-16-18Z</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MINIO_ACCESS_KEY:</span> <span class="string">minioadmin</span></span><br><span class="line">      <span class="attr">MINIO_SECRET_KEY:</span> <span class="string">minioadmin</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9001:9001&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9000:9000&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;DOCKER_VOLUME_DIRECTORY:-.&#125;/volumes/minio:/minio_data</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">minio</span> <span class="string">server</span> <span class="string">/minio_data</span> <span class="string">--console-address</span> <span class="string">&quot;:9001&quot;</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> [<span class="string">&quot;CMD&quot;</span>, <span class="string">&quot;curl&quot;</span>, <span class="string">&quot;-f&quot;</span>, <span class="string">&quot;http://localhost:9000/minio/health/live&quot;</span>]</span><br><span class="line">      <span class="attr">interval:</span> <span class="string">30s</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">20s</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">standalone:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">milvus-standalone</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">milvusdb/milvus:v2.6.0-rc1</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;milvus&quot;</span>, <span class="string">&quot;run&quot;</span>, <span class="string">&quot;standalone&quot;</span>]</span><br><span class="line">    <span class="attr">security_opt:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">seccomp:unconfined</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">ETCD_ENDPOINTS:</span> <span class="string">etcd:2379</span></span><br><span class="line">      <span class="attr">MINIO_ADDRESS:</span> <span class="string">minio:9000</span></span><br><span class="line">      <span class="attr">MQ_TYPE:</span> <span class="string">woodpecker</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;DOCKER_VOLUME_DIRECTORY:-.&#125;/volumes/milvus:/var/lib/milvus</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> [<span class="string">&quot;CMD&quot;</span>, <span class="string">&quot;curl&quot;</span>, <span class="string">&quot;-f&quot;</span>, <span class="string">&quot;http://localhost:9091/healthz&quot;</span>]</span><br><span class="line">      <span class="attr">interval:</span> <span class="string">30s</span></span><br><span class="line">      <span class="attr">start_period:</span> <span class="string">90s</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">20s</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">3</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;19530:19530&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9091:9091&quot;</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;etcd&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;minio&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">default:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">milvus</span></span><br></pre></td></tr></table></figure><p>差异点主要体现在：</p><ul><li>镜像源：建议通过 <code>lzc-cli appstore copy-image &lt;image&gt;</code> 把镜像同步到 <code>registry.lazycat.cloud</code>，解决国内网络拉取问题。</li><li>端口声明：在 Manifest 中，外部访问端口通过 <code>ingress</code>，不再使用 Compose 的 <code>ports</code>。</li><li>健康检查：懒猫平台会统一探测容器存活，可按需省略 <code>healthcheck</code>。</li></ul><h3 id="4-镜像加速实践"><a href="#4-镜像加速实践" class="headerlink" title="4. 镜像加速实践"></a>4. 镜像加速实践</h3><p>一条命令即可完成镜像复制并输出新的仓库地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">lzc-cli appstore copy-image nginx                                                                                                                           (base) 13:15:36</span><br><span class="line">Waiting ... ( copy nginx to lazycat offical registry)</span><br><span class="line">uploading</span><br><span class="line">23e05839: [####################################################################################################] 100%</span><br><span class="line">23e05839: [####################################################################################################] 100%</span><br><span class="line">23e05839: [####################################################################################################] 100%</span><br><span class="line">3da95a90: [####################################################################################################] 100%</span><br><span class="line">48670a58: [####################################################################################################] 100%</span><br><span class="line">6c8e51cf: [####################################################################################################] 100%</span><br><span class="line">9bbbd7ee: [####################################################################################################] 100%</span><br><span class="line">ce713206: [####################################################################################################] 100%</span><br><span class="line">ee95256d: [####################################################################################################] 100%</span><br><span class="line"></span><br><span class="line">uploaded:  registry.lazycat.cloud/u04123229/library/nginx:d037205fbaf7d60a</span><br></pre></td></tr></table></figure><p>将生成的地址替换到 Manifest 的 <code>image</code> 字段即可。</p><h3 id="5-小结"><a href="#5-小结" class="headerlink" title="5. 小结"></a>5. 小结</h3><ul><li>Manifest 为核心：<code>lzc-manifest.yml</code> 描述了全部运行时需求，移植时优先完善此文件。</li><li>路由分层：<code>routes</code> 管理 HTTP，<code>ingress</code> 管理 TCP，二者配合即可覆盖绝大多数场景。</li><li>统一数据目录：使用 <code>/lzcapp/var</code> 避免硬编码路径，便于跨节点迁移。</li><li>镜像国内托管：通过 <code>lzc-cli appstore copy-image</code> 自动同步到 LazyCat Registry，稳定又快速。</li></ul><p>至此，Milvus 的 Docker Compose 应用已成功移植到懒猫微服。更多进阶玩法，例如 OIDC、VNC 集成等，我们将在后续文章继续分享。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文延续前两篇，演示如何把一个已经在本地运行良好的 Docker Compose 应用打包并上架到懒猫微服应用商店。以 Milvus 为例，逐步拆解 Manifest 配置、路由映射、数据卷绑定以及镜像加速等关键环节，帮助大家快速完成移植。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;1-目录结构与核心文件&quot;&gt;&lt;a href=&quot;#1-目录结构与核心文件&quot; class=&quot;headerlink&quot; title=&quot;1. 目录结构与核心文件&quot;&gt;&lt;/a&gt;1. 目录结构与核心文件&lt;/h3&gt;&lt;p&gt;在懒猫微服中，一个最小可用的应用包仅需两个文件：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;文件&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;code&gt;lzc-build.yml&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;描述打包流程及应用图标。简单应用只需指定 &lt;code&gt;icon&lt;/code&gt; 即可。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;lzc-manifest.yml&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;定义应用元数据与服务编排，是移植的重点。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;本文主要关注 &lt;code&gt;lzc-manifest.yml&lt;/code&gt; 的编写。&lt;/p&gt;
&lt;h3 id=&quot;2-lzc-manifest-yml-字段逐一解析&quot;&gt;&lt;a href=&quot;#2-lzc-manifest-yml-字段逐一解析&quot; class=&quot;headerlink&quot; title=&quot;2. lzc-manifest.yml 字段逐一解析&quot;&gt;&lt;/a&gt;2. &lt;code&gt;lzc-manifest.yml&lt;/code&gt; 字段逐一解析&lt;/h3&gt;&lt;p&gt;现在有了懒猫应用查看器很方便，我们以商店里的 Milvus 的示例 Manifest 为例，并附带注释说明。&lt;/p&gt;</summary>
    
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/categories/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
    
    <category term="开发" scheme="https://xu-hardy.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>懒猫微服开发篇（二）：远程调试之 Devshell</title>
    <link href="https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%BC%80%E5%8F%91%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95%E4%B9%8B-devshell/"/>
    <id>https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%BC%80%E5%8F%91%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95%E4%B9%8B-devshell/</id>
    <published>2025-07-06T16:00:00.000Z</published>
    <updated>2025-07-03T06:34:24.706Z</updated>
    
    <content type="html"><![CDATA[<p>我们上一篇讲述了如何打包上架 APP，这期我们就来看如何远程调试即将上架的 APP。</p><p>简单来讲，这个 devshell 其实就是在微服上打开了一个虚拟机环境，然后我们可以进去里面测试我们的命令。非要说技术实现，那就是 docker exec 了。只不过是做成了本地和微服之间同步的样子。</p><p>输入微服的名字&#x2F;v2&#x2F;_catalog，可以看到微服里面 Docker 仓库存放的镜像，debug.bridge 开头的就是 devshell 的 image。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;repositories&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;debug.bridge/231ee20d4e4d8edbd2004e7609fd9c15&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;debug.bridge/ddc6dbf609125b7bd2c0efb0ed4254d1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;helloworld&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>在 lzc-build.yml 里定义了 devshell 的配置，这个的意思是就是安装 node 和 python 的环境，设置国内源，然后讲根目录转发到 5173，这个是 vue 的端口。所以我们可以推断，这个是一个 Vue+python 的全栈项目，所以我们可以开两个终端来进入 devshell，分别调试前后端。</p><span id="more"></span><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">devshell:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/=http://127.0.0.1:5173</span></span><br><span class="line">  <span class="attr">dependencies:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">nodejs</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">python3</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">py3-pip</span></span><br><span class="line">  <span class="attr">setupscript:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    export npm_config_registry=https://registry.npmmirror.com</span></span><br><span class="line"><span class="string">    export PIP_INDEX_URL=https://pypi.tuna.tsinghua.edu.cn/simple</span></span><br></pre></td></tr></table></figure><p>使用 lzc-cli project devshell -f 进入 devshell，可以看到这个使用了 registry.lazycat.cloud&#x2F;lzc-cli&#x2F;devshell 作为 base image，然后换源安装依赖。最后设置 setupscript 里面的 ENV。而 CMD [“sleep”, “infinity”]<code>会让容器启动后执行</code>sleep infinity&#96; 命令，即无限休眠。目的是防止容器因没有前台进程而自动退出（保持容器处于“运行”状态）。</p><p>这里有个问题，如果你在 lzc-manifest.yml 里指定了 routes 也同样会生效。如果你要跑一些初始化脚本，可以在使用这两个办法</p><ol><li>在 lzc-manifest.yml 文件中使用&#x2F;api&#x2F;&#x3D;exec:&#x2F;&#x2F;3000,.&#x2F;lzcapp&#x2F;pkg&#x2F;content&#x2F;backend&#x2F;run.sh</li><li>lzc-build.yml 中注入脚本 setupscript。</li></ol><p>如果你偷懒在 lzc-build.yml 里 routes 的执行&#x2F;api&#x2F;&#x3D;exec:&#x2F;&#x2F;3000,.&#x2F;lzcapp&#x2F;pkg&#x2F;cache&#x2F;backend&#x2F;run.sh，似乎也只能转发端口，不能运行脚本。</p><p>从日志看，也就是说还是安装了一个应用程序上去，只不过我们可以通过类似 ssh remote 的方式来动态调试。如果 APP 上架之后，能做的恐怕只有 lzc-docker exec 了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">跳过执行 buildscript</span><br><span class="line">跳过拷贝 contentdir 内容</span><br><span class="line"></span><br><span class="line">Dockerfile</span><br><span class="line">STEP 1/4: FROM registry.lazycat.cloud/lzc-cli/devshell:v0.0.5</span><br><span class="line">STEP 2/4: RUN sed -i &#x27;s/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g&#x27; /etc/apk/repositories</span><br><span class="line">--&gt; Using cache 2302149ded79afb639f9935a07e7ea0d63b5644b10e9890d49ad06786e7b31db</span><br><span class="line">--&gt; 2302149ded79</span><br><span class="line">STEP 3/4: RUN apk add --no-cache bash nodejs npm py3-pip python3   &amp;&amp; echo &quot;root:root&quot; | chpasswd</span><br><span class="line">--&gt; Using cache 9bb679fa2c9d10ab1a2433be4c59c852affb2a6844c62ecd9eb8d727505821fb</span><br><span class="line">--&gt; 9bb679fa2c9d</span><br><span class="line">STEP 4/4: CMD [&quot;sleep&quot;, &quot;infinity&quot;]</span><br><span class="line">--&gt; Using cache 5ed701af0e0f7040c3dc5409f547b271b4f4e792fd4fcbfc4af8a3abecf8d363</span><br><span class="line">COMMIT debug.bridge/ddc6dbf609125b7bd2c0efb0ed4254d1:latest</span><br><span class="line">--&gt; 5ed701af0e0f</span><br><span class="line">Successfully tagged debug.bridge/ddc6dbf609125b7bd2c0efb0ed4254d1:latest</span><br><span class="line">5ed701af0e0f7040c3dc5409f547b271b4f4e792fd4fcbfc4af8a3abecf8d363</span><br><span class="line">Getting image source signatures</span><br><span class="line">Copying blob sha256:c164879b06ca56693b742ec917059cce495320d4d8f6140bde7e875f53377ea1</span><br><span class="line">Copying blob sha256:69bc8c25bce956e4c34fdfee091c531ffa8660454526ea9f76c956f9b930c57b</span><br><span class="line">Copying blob sha256:98e60e58e2d093fd95b5d5d61ae6dac25bff89ba1b46d42395d480dfb75bddab</span><br><span class="line">Copying blob sha256:d4fc045c9e3a848011de66f34b81f052d4f2c15a17bb196d637e526349601820</span><br><span class="line">Copying blob sha256:b244bd08b327b00bfbbbbf4f424ade914ee891a52d9192a573dbe484e22d86ab</span><br><span class="line">Copying config sha256:5ed701af0e0f7040c3dc5409f547b271b4f4e792fd4fcbfc4af8a3abecf8d363</span><br><span class="line">Writing manifest to image destination</span><br><span class="line">输出lpk包 /Users/xu/Desktop/todolist-py-lzcapp-demo/cloud.lazycat.app.todolistpy-v0.0.1.lpk</span><br><span class="line">开始部署应用</span><br><span class="line">开始安装应用</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">安装成功！</span><br><span class="line">👉 请在浏览器中访问 https://todolistpy.dev.heiyu.space</span><br><span class="line">👉 并使用微服的用户名和密码登录</span><br><span class="line"></span><br><span class="line">+ export &#x27;npm_config_registry=https://registry.npmmirror.com&#x27;</span><br><span class="line">+ export &#x27;PIP_INDEX_URL=https://pypi.tuna.tsinghua.edu.cn/simple&#x27;</span><br><span class="line">+ set -e</span><br><span class="line">+ mkdir -p /lzcapp/cache/devshell</span><br><span class="line"></span><br><span class="line">+ cd /lzcapp/cache/devshell</span><br><span class="line">+ exec /bin/sh</span><br><span class="line">/lzcapp/cache/devshell #</span><br><span class="line">/lzcapp/cache/devshell # ls</span><br><span class="line">README.md         backend           build.sh          lzc-build.yml     lzc-icon.png      lzc-manifest.yml  ui</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们可以看到文件夹的内容已经被同步过来了，我们可以实时同步开发机文件的创建和修改。不过目前和移动，重命名相关的同步有点小问题，具体表现为</p><ol><li>本地删除旧的文件，但是 devshell 里不会同步删除</li><li>删除文件 a，但是把 b 重名为 a，devshell 不会同步更改（但是删除 a 重建可以）</li></ol><p>相信这两个小问题修好也只是时间问题，当然也有 workaround。</p><p>从&#x2F;data&#x2F;app&#x2F;cache&#x2F;包名这个目录删除 devshell 文件夹之后，然后重新执行 lzc-cli project devshell -f ，这样工作区就被清理干净了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(base) lzcbox-029c588e /data/app/cache/cloud.lazycat.app.todolistpy <span class="comment"># ls</span></span><br><span class="line">devshell</span><br><span class="line">(base) lzcbox-029c588e /data/app/cache/cloud.lazycat.app.todolistpy <span class="comment"># cd devshell/</span></span><br><span class="line">(base) lzcbox-029c588e /data/app/cache/cloud.lazycat.app.todolistpy/devshell <span class="comment"># ls</span></span><br><span class="line">1  1312  README.md  backend  build.sh  lzc-build.yml  lzc-icon.png  lzc-manifest.yml  ui</span><br></pre></td></tr></table></figure><p>另外，我们再通过 ssh 进入&#x2F;data&#x2F;app 这个目录，有两个子文件夹，一个叫做 cache，一个叫做 var。 cache 就是我们这个 devshell 的工作区。var 就是数据持久化的目录。如果在这里新建一个目录，那么就可以在网盘里实时看到。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/data/app/var/xu.deploy.lazycat-nav <span class="comment"># touch test</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250702063901802.png" alt="image-20250702063901802"></p><p>以上就是 devshell 的全部内容了，如果你需要借助微服的一些特性还进行开发，比如获取环境变量，OIDC 什么的，可以用这个方法来轻松调试。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;我们上一篇讲述了如何打包上架 APP，这期我们就来看如何远程调试即将上架的 APP。&lt;/p&gt;
&lt;p&gt;简单来讲，这个 devshell 其实就是在微服上打开了一个虚拟机环境，然后我们可以进去里面测试我们的命令。非要说技术实现，那就是 docker exec 了。只不过是做成了本地和微服之间同步的样子。&lt;/p&gt;
&lt;p&gt;输入微服的名字&amp;#x2F;v2&amp;#x2F;_catalog，可以看到微服里面 Docker 仓库存放的镜像，debug.bridge 开头的就是 devshell 的 image。&lt;/p&gt;
&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;punctuation&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&amp;quot;repositories&amp;quot;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;punctuation&quot;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&amp;quot;debug.bridge/231ee20d4e4d8edbd2004e7609fd9c15&amp;quot;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&amp;quot;debug.bridge/ddc6dbf609125b7bd2c0efb0ed4254d1&amp;quot;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&amp;quot;helloworld&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;punctuation&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在 lzc-build.yml 里定义了 devshell 的配置，这个的意思是就是安装 node 和 python 的环境，设置国内源，然后讲根目录转发到 5173，这个是 vue 的端口。所以我们可以推断，这个是一个 Vue+python 的全栈项目，所以我们可以开两个终端来进入 devshell，分别调试前后端。&lt;/p&gt;</summary>
    
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/categories/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
    
    <category term="开发" scheme="https://xu-hardy.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>关于速食我想说的话</title>
    <link href="https://xu-hardy.github.io/%E5%85%B3%E4%BA%8E%E9%80%9F%E9%A3%9F%E6%88%91%E6%83%B3%E8%AF%B4%E7%9A%84%E8%AF%9D/"/>
    <id>https://xu-hardy.github.io/%E5%85%B3%E4%BA%8E%E9%80%9F%E9%A3%9F%E6%88%91%E6%83%B3%E8%AF%B4%E7%9A%84%E8%AF%9D/</id>
    <published>2025-07-03T06:34:24.713Z</published>
    <updated>2025-07-03T06:34:24.713Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Soylent"><a href="#Soylent" class="headerlink" title="Soylent"></a>Soylent</h3><p>最早接触的速食是Soylent，准确的说应该是代餐，据说是一个程序员为了节约时间发明创造的产品，他那个时候没有AIGC时间都浪费在debug上了，所以从吃上来节省时间。无论是学生时代还是在帝都上班的时光里，这款产品的定位始终透露着吃不起的风格，而且国内一直没正规渠道卖过，只能海淘遂放弃。 <span id="more"></span></p><p><img src="https://raw.githubusercontent.com/Xu-Hardy/image-host/master/image-20240122185934506.png" alt="image-20240122185934506"></p><h3 id="若饭"><a href="#若饭" class="headerlink" title="若饭"></a>若饭</h3><p>海外的东西国内总有平替，这个叫做“若饭”，也曾疯狂追捧过，除了是为了腾出时间让老板过上更好的生活，要么就是外边的饭太难吃了。这个花样很多，固体的粉末的，还有其他口味以及能量棒什么的。总结下来就是真的吃不饱，起码两瓶才能保证没有饥饿感（好像也没有饱腹感），号称科学的添加了各种人体所需的营养，可以满足人体的需求。尽管这样，官方对他的定义仍然是建议每周保持几顿正常餐饮。不过在帝都，不吃几条街的馆子那就可惜了，遂放弃。</p><p><img src="https://raw.githubusercontent.com/Xu-Hardy/image-host/master/image-20240122190339605.png" alt="image-20240122190339605"></p><p>接下来是几款速食产品，单品不超过一顿饭的成本，按照时间顺序有蔡林记，阿宽，拉面说，牛肉河粉。至于速热米饭和自热锅，本来印象就不好，就不在这里再踩一遍了。</p><h3 id="蔡林记"><a href="#蔡林记" class="headerlink" title="蔡林记"></a>蔡林记</h3><p>京东购入，打折的时候不到10元一包，当初也是被公司附近的小馆子逼到只能网上买吃的，公司的饮水机的热水永远也泡不完两碗热干面，个人也不是很喜欢酸豆角，即使每顿两碗，这个能量还是供应不上学习时候的用脑过度。连着吃几天还是会感觉身体营养不良。</p><p><img src="https://raw.githubusercontent.com/Xu-Hardy/image-host/master/image-20240122192009706.png" alt="image-20240122192009706"></p><h3 id="阿宽"><a href="#阿宽" class="headerlink" title="阿宽"></a>阿宽</h3><p>小面味道不错，单价实惠，面皮吃了很上瘾，但是真的没啥能量，肚子饱了但是脑袋反应不过来，不能常吃，后来还是去同学家一口气吃了两三大碗米饭（排骨玉米汤）。</p><p><img src="https://raw.githubusercontent.com/Xu-Hardy/image-host/master/image-20240122191645690.png" alt="image-20240122191645690"></p><h3 id="拉面说"><a href="#拉面说" class="headerlink" title="拉面说"></a>拉面说</h3><p>拉面说似乎是这里最高档的面了，这个是半干半鲜面，一半都需要煮上6-8分钟，再用开水冲开里面的料包，所以这个不适合在办公室吃，汤面多一些，拌面少一些。配料应该是速食界的天花板了，但是也抵不住疫情期间每天吃过的厌倦，真的不会再买了。另外狠狠的吐槽下和府捞面，除了宣传的书房里的拉面，其他都是严重掉粉，量上价格贵又难吃系列，貌似现在店里也是这种预知的餐盘，但是卫生问题仍然不能保证，工作人员素质问题有待提高。</p><p><img src="https://raw.githubusercontent.com/Xu-Hardy/image-host/master/image-20240122192609007.png" alt="image-20240122192609007"></p><h3 id="五谷道场"><a href="#五谷道场" class="headerlink" title="五谷道场"></a>五谷道场</h3><p>本来方便面是不应该放在这里的，毕竟非油炸国产之光</p><p><img src="https://raw.githubusercontent.com/Xu-Hardy/image-host/master/IMG_5355.jpg"></p><p>个人心中的国产方便面排名：  五谷道场 &gt; 汤达人 &gt; 康师傅 &gt; 其他</p><p>五谷道场兰州牛肉面和线下兰州牛肉面味道一模一样，辣子的味道能品尝出大西北的粗犷</p><p><img src="https://raw.githubusercontent.com/Xu-Hardy/image-host/master/202405131558988.png"></p><h3 id="牛肉河粉"><a href="#牛肉河粉" class="headerlink" title="牛肉河粉"></a>牛肉河粉</h3><p>线下58一碗的河粉尽管可以免费续面，但是单价还是很贵，于是超市购入一箱火车头河粉，还是面饼+汤料的搭配，只是这个价格赶超拉面说还是让人觉得没有下次了。味道嘛，以后还是去吃线下吧，大不了再多续几碗嘛～</p><p><img src="https://raw.githubusercontent.com/Xu-Hardy/image-host/master/image-20240122193319038.png" alt="image-20240122193319038"></p><h3 id="羊肉泡馍"><a href="#羊肉泡馍" class="headerlink" title="羊肉泡馍"></a>羊肉泡馍</h3><p>女同事推荐的，山姆超市高档货，味道很浓郁，料包需要开水煮，我这砂锅煮了五六分钟打开看羊肉还有部分红血丝。不过味道不错，比上边同价位越南河粉好上不少。</p><p><img src="https://raw.githubusercontent.com/Xu-Hardy/image-host/master/IMG_5354.JPG"></p><h3 id="日清拉面"><a href="#日清拉面" class="headerlink" title="日清拉面"></a>日清拉面</h3><p>Youtube刷到了日清拉面创始人的故事，所以直接上网买了一堆，不过都没有青菜包，图片的肉片也是没有的，感觉还是拉王比较好吃，泡开了之后看起来很像日式拉面而是方便面，其他的泡开的和方便面没差。鸡汤拉面也很惊艳，用开水冲泡开就能直接收获一碗鸡汤面，生的面渣还能当作干脆面吃。出前一丁是日清的子品牌，其他都是杯面（基本上都是合味道），因为吃不饱就没有买。</p><p><img src="https://raw.githubusercontent.com/Xu-Hardy/image-host/master/88126071bfa5f3d0bf14c03fb37f71e0.JPG"></p><p>这个就是日清拉王泡开的效果了，基本上看不出是方便面，再加上空气炸锅烤的鸡蛋简直完美～</p><p><img src="https://raw.githubusercontent.com/Xu-Hardy/image-host/master/c7db3664b23b58459e10e6a49ad5dde2.JPG"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>价格上真的不值得，营养也不见得跟得上，还是好好吃饭吧～</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Soylent&quot;&gt;&lt;a href=&quot;#Soylent&quot; class=&quot;headerlink&quot; title=&quot;Soylent&quot;&gt;&lt;/a&gt;Soylent&lt;/h3&gt;&lt;p&gt;最早接触的速食是Soylent，准确的说应该是代餐，据说是一个程序员为了节约时间发明创造的产品，他那个时候没有AIGC时间都浪费在debug上了，所以从吃上来节省时间。无论是学生时代还是在帝都上班的时光里，这款产品的定位始终透露着吃不起的风格，而且国内一直没正规渠道卖过，只能海淘遂放弃。</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>好叶视频笔记</title>
    <link href="https://xu-hardy.github.io/%E5%A5%BD%E5%8F%B6%E8%A7%86%E9%A2%91%E7%AC%94%E8%AE%B0/"/>
    <id>https://xu-hardy.github.io/%E5%A5%BD%E5%8F%B6%E8%A7%86%E9%A2%91%E7%AC%94%E8%AE%B0/</id>
    <published>2025-07-03T06:34:24.712Z</published>
    <updated>2025-07-03T06:34:24.712Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>有明确目标，加速达成规划</p></li><li><p>目标不会不变（喜欢做的&#x2F;擅长的）、</p></li><li><p>成功不需要天赋（结合自己的技能&#x2F;技能优劣分类，找出5个）</p></li><li><p>好点子+简单策略，成就&#x3D;潜能&#x2F;方向（更高目标+要事优先+其他想法记录暂缓+成功健康共存），其他选择say no</p> <span id="more"></span></li><li><p>热情源自于成功，毁于挫败和标签。</p></li><li><p>创造热情的方法（创造，抢新潮流，整合自己的技能点）</p></li><li><p>悲观和负面评价只有悲观的结果（习得性无助）、</p></li><li><p>ABCDE（Adversity 挫折，Belief 信念，Consequence 后果，Disputation 争辩，Energization 获得能量）</p></li><li><p>不要在乎别人的负面评价。讨好别人只会碌碌无为，屈服于这个时代的暴力。</p></li><li><p>正面思维加强做事的活力，加速学东西，悲观思维会否定可能性。</p></li><li><p>正面思维的七个方法：</p><ol><li><p>观察想法</p></li><li><p>感恩日记</p></li><li><p>重塑思维（怎么可以达到</p></li><li><p>正面想法</p></li><li><p>给别人正面想法</p></li><li><p>注意想法：放弃受害者思维，清空不幸的想法</p></li><li><p>避免负面环境</p></li></ol></li><li><p>无法致富的四个观念（钱的罪恶感，对别人的话太敏感，保持现状，不愿意先付出，企业需要三五年后或者10年）</p></li><li><p>复利思维，每天进步一点点</p><ol><li><p>小事百分百对自己负责，完成小行动</p></li><li><p>做事会吸引相似的人和事</p></li><li><p>成为什么样的人有没有这个习惯，不习惯有没有这个习惯，习惯和核心价值观一致吗，习惯合理吗？</p></li></ol></li><li><p>视觉化和肯定</p><ol><li><p>视觉化过程而不是结果</p></li><li><p>联系自我肯定</p></li><li><p>不切实际的幻想可能反效果</p></li></ol></li><li><p>二八定律：20%的努力产生80%的结果，外包80%可替代的事情</p></li><li><p>帕金森定律：有限时间内占用时间会膨胀（限制&#x3D;高效）任务期限前移一半，尊重承诺，只做少数事情</p></li><li><p>恢复能量的方法：</p><ol><li><p>精力管理：</p><ol><li><p>间歇性休息：（52&#x2F;17）</p></li><li><p>睡眠：每天7-8H或者午休20min</p></li><li><p>甜食水果补充损失的意志力</p></li><li><p>运动加强专注力和记忆力，决定意志力</p></li></ol></li><li><p>操控意志力，给意志力奖励，自我对话激励意志力</p></li><li><p>记录微小决定待会再做：为大事保存能量</p></li><li><p>if -then机制：减少决策损耗的能量</p></li><li><p>控制工作环境，为工作做铺垫（霍桑效应：被监视的时候更有生产力</p></li></ol></li><li><p>5倍提升法：</p><ol><li><p>关闭手机通知，控制手机（6秒钟看手机，等于损失25min高效时间</p></li><li><p>隐藏工作关的APP（app放在不容易看见的地方</p></li><li><p>设置信息时间段（特定时间接收消息</p></li></ol></li><li><p>每天的能量循环：90&#x2F;20间歇：90分钟深度工作，20分钟休息，根据自身适当调节</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;有明确目标，加速达成规划&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;目标不会不变（喜欢做的&amp;#x2F;擅长的）、&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;成功不需要天赋（结合自己的技能&amp;#x2F;技能优劣分类，找出5个）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;好点子+简单策略，成就&amp;#x3D;潜能&amp;#x2F;方向（更高目标+要事优先+其他想法记录暂缓+成功健康共存），其他选择say no&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>雷电4传输</title>
    <link href="https://xu-hardy.github.io/%E9%9B%B7%E7%94%B54%E4%BC%A0%E8%BE%93/"/>
    <id>https://xu-hardy.github.io/%E9%9B%B7%E7%94%B54%E4%BC%A0%E8%BE%93/</id>
    <published>2025-07-03T06:34:24.712Z</published>
    <updated>2025-07-03T06:34:24.712Z</updated>
    
    <content type="html"><![CDATA[<p>市面上的对拷线总是没有称心如意的,做的最好的应该是绿联,</p><p>于是在ChatGPT上询问了相关事宜,大概意思就是一个把雷电设备虚拟成一张网卡,然后设置一个单独的网络通道,两台机器使用IP地址进行通讯,知乎上也有成功的雷电3案例,只是他们WebDav的速度是600MB&#x2F;S</p><span id="more"></span><p>而我的是雷电4也是这个结果,只是在NUC12识别时候总是不能满速识别.</p><p>咨询客服之后也没有得到满意的结果,不久前intel吧nuc业务线给华硕了,结果售后只是给排查方向,看BIOS有没有打开雷电开关之类的,或者就是等待十天半个月的返厂检测.</p><p><img src="https://raw.githubusercontent.com/Xu-Hardy/image-host/master/image-20240217205800438.png" alt="image-20240217205800438"></p><p>webdav:</p><p><img src="https://raw.githubusercontent.com/Xu-Hardy/image-host/master/image-20240217205733355.png" alt="image-20240217205733355"></p><p><img src="https://raw.githubusercontent.com/Xu-Hardy/image-host/master/Snipaste_2024-02-17_12-12-28.png"><br>window下显示</p><p><img src="https://raw.githubusercontent.com/Xu-Hardy/image-host/master/Snipaste_2024-02-17_12-36-44.png"></p><p>20G的虚拟网卡,在linux下也是如此</p><p><img src="https://raw.githubusercontent.com/Xu-Hardy/image-host/master/202402250826256.png"></p><p>设备管理器显示USB4而不是雷电4</p><p><img src="https://raw.githubusercontent.com/Xu-Hardy/image-host/master/202402250937502.png"></p><p>直连MBP两个雷电口:</p><p><img src="https://raw.githubusercontent.com/Xu-Hardy/image-host/master/image-20240217205707661.png" alt="image-20240217205707661"></p><p>popos 和MBP使用iperf3对打:</p><p><img src="https://raw.githubusercontent.com/Xu-Hardy/image-host/master/image-20240217205548641.png" alt="image-20240217205548641"></p><p>MacOS: 雷电4的线+40G硬盘盒</p><p><img src="https://raw.githubusercontent.com/Xu-Hardy/image-host/master/image-20240217205355588.png" alt="image-20240217205355588"></p><h4 id="40G硬盘盒原装测速"><a href="#40G硬盘盒原装测速" class="headerlink" title="40G硬盘盒原装测速"></a>40G硬盘盒原装测速</h4><p><img src="https://raw.githubusercontent.com/Xu-Hardy/image-host/master/image-20240217211032287.png" alt="image-20240217211032287"></p><p><img src="https://raw.githubusercontent.com/Xu-Hardy/image-host/master/image-20240217211041438.png" alt="image-20240217211041438"></p><p>win测速</p><p><img src="https://raw.githubusercontent.com/Xu-Hardy/image-host/master/Snipaste_2024-02-17_13-11-30.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;市面上的对拷线总是没有称心如意的,做的最好的应该是绿联,&lt;/p&gt;
&lt;p&gt;于是在ChatGPT上询问了相关事宜,大概意思就是一个把雷电设备虚拟成一张网卡,然后设置一个单独的网络通道,两台机器使用IP地址进行通讯,知乎上也有成功的雷电3案例,只是他们WebDav的速度是600MB&amp;#x2F;S&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>MacOS安装的软件无法打开</title>
    <link href="https://xu-hardy.github.io/macos%E5%AE%89%E8%A3%85%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80/"/>
    <id>https://xu-hardy.github.io/macos%E5%AE%89%E8%A3%85%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80/</id>
    <published>2025-07-03T06:34:24.711Z</published>
    <updated>2025-07-03T06:34:24.711Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/Xu-Hardy/image-host/master/20240225081805.png"></p> <span id="more"></span><p><img src="https://raw.githubusercontent.com/Xu-Hardy/image-host/master/20240225081826.png" alt="image.png"></p><p>因为 PicGo 没有签名，所以会被 macOS 的安全检查所拦下。</p><ol><li>安装后打开遇到「文件已损坏」的情况，请按如下方式操作：</li></ol><p>信任开发者，会要求输入密码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo spctl --master-disable</span><br></pre></td></tr></table></figure><p>然后放行 PicGo :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xattr -cr /Applications/PicGo.app</span><br></pre></td></tr></table></figure><p>然后就能正常打开。</p><p><a href="https://github.com/Molunerfinn/PicGo/blob/dev/FAQ.md">https://github.com/Molunerfinn/PicGo/blob/dev/FAQ.md</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Xu-Hardy/image-host/master/20240225081805.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>NFC复制卡写手机手环</title>
    <link href="https://xu-hardy.github.io/nfc%E5%A4%8D%E5%88%B6%E5%8D%A1%E5%86%99%E6%89%8B%E6%9C%BA%E6%89%8B%E7%8E%AF/"/>
    <id>https://xu-hardy.github.io/nfc%E5%A4%8D%E5%88%B6%E5%8D%A1%E5%86%99%E6%89%8B%E6%9C%BA%E6%89%8B%E7%8E%AF/</id>
    <published>2025-07-03T06:34:24.711Z</published>
    <updated>2025-07-03T06:34:24.711Z</updated>
    
    <content type="html"><![CDATA[<p>手机无法复制加密的IC卡,所以需要需要额外的方法来进行写入</p><h3 id="读原来的卡"><a href="#读原来的卡" class="headerlink" title="读原来的卡"></a>读原来的卡</h3> <span id="more"></span><p><img src="https://raw.githubusercontent.com/Xu-Hardy/image-host/master/20240225075543.png"></p><h3 id="仅复制卡号"><a href="#仅复制卡号" class="headerlink" title="仅复制卡号"></a>仅复制卡号</h3><p><img src="https://raw.githubusercontent.com/Xu-Hardy/image-host/master/20240225075512.png"></p><h3 id="创建空白卡"><a href="#创建空白卡" class="headerlink" title="创建空白卡"></a>创建空白卡</h3><p><img src="https://raw.githubusercontent.com/Xu-Hardy/image-host/master/202402250843204.png"></p><h3 id="仅复制卡片卡号"><a href="#仅复制卡片卡号" class="headerlink" title="仅复制卡片卡号"></a>仅复制卡片卡号</h3><p><img src="https://raw.githubusercontent.com/Xu-Hardy/image-host/master/IMG_4586.jpg"></p><p><img src="https://raw.githubusercontent.com/Xu-Hardy/image-host/master/20240225075428.png"></p><h3 id="写入数据"><a href="#写入数据" class="headerlink" title="写入数据"></a>写入数据</h3><p>接下来就是把手机&#x2F;手环放在机器进行写入</p><p><img src="https://raw.githubusercontent.com/Xu-Hardy/image-host/master/IMG_4588.JPG"></p><p><img src="https://raw.githubusercontent.com/Xu-Hardy/image-host/master/IMG_4587.JPG"></p><p>添加成功</p><p><img src="https://raw.githubusercontent.com/Xu-Hardy/image-host/master/20240225084428.png"></p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>NFC-PRO至尊双频版操作说明<br>读写卡操作视频:<br><a href="https://cloud.video.taobao.com/play/u/null/p/1/e/6/t/1/409421501065.mp4">https://cloud.video.taobao.com/play/u/null/p/1/e/6/t/1/409421501065.mp4</a><br>加密卡手机手环模拟操作视频:<br><a href="https://cloud.video.taobao.com/play/u/null/p/1/e/6/t/1/409017352153.mp4">https://cloud.video.taobao.com/play/u/null/p/1/e/6/t/1/409017352153.mp4</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;手机无法复制加密的IC卡,所以需要需要额外的方法来进行写入&lt;/p&gt;
&lt;h3 id=&quot;读原来的卡&quot;&gt;&lt;a href=&quot;#读原来的卡&quot; class=&quot;headerlink&quot; title=&quot;读原来的卡&quot;&gt;&lt;/a&gt;读原来的卡&lt;/h3&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>出远门带的电子产品</title>
    <link href="https://xu-hardy.github.io/%E5%87%BA%E8%BF%9C%E9%97%A8%E5%B8%A6%E7%9A%84%E7%94%B5%E5%AD%90%E4%BA%A7%E5%93%81/"/>
    <id>https://xu-hardy.github.io/%E5%87%BA%E8%BF%9C%E9%97%A8%E5%B8%A6%E7%9A%84%E7%94%B5%E5%AD%90%E4%BA%A7%E5%93%81/</id>
    <published>2025-07-03T06:34:24.711Z</published>
    <updated>2025-07-03T06:34:24.711Z</updated>
    
    <content type="html"><![CDATA[<ul><li>MacBook&#x2F;ipad&#x2F;iphone&#x2F;nuc12&#x2F;鼠标&#x2F;耳机</li><li>Gan&#x2F;移动电源&#x2F;type C电源</li><li>NFC复制器+空白卡</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;MacBook&amp;#x2F;ipad&amp;#x2F;iphone&amp;#x2F;nuc12&amp;#x2F;鼠标&amp;#x2F;耳机&lt;/li&gt;
&lt;li&gt;Gan&amp;#x2F;移动电源&amp;#x2F;type C电源&lt;/li&gt;
&lt;li&gt;NFC复制器+空白卡&lt;/li&gt;
&lt;/ul&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>办公外设篇</title>
    <link href="https://xu-hardy.github.io/%E5%8A%9E%E5%85%AC%E5%A4%96%E8%AE%BE%E7%AF%87/"/>
    <id>https://xu-hardy.github.io/%E5%8A%9E%E5%85%AC%E5%A4%96%E8%AE%BE%E7%AF%87/</id>
    <published>2025-07-03T06:34:24.711Z</published>
    <updated>2025-07-03T06:34:24.711Z</updated>
    
    <content type="html"><![CDATA[<h3 id="电脑外设"><a href="#电脑外设" class="headerlink" title="电脑外设"></a>电脑外设</h3><p><a href="../%E9%9B%B7%E7%94%B54%E4%BC%A0%E8%BE%93#40G%E7%A1%AC%E7%9B%98%E7%9B%92%E5%8E%9F%E8%A3%85%E6%B5%8B%E9%80%9F">40G硬盘盒盒雷电线</a></p><p><a href="%E7%94%B5%E5%AE%B9%E9%94%AE%E7%9B%98%E4%BD%93%E9%AA%8C">Niz键盘</a></p><h3 id="电脑"><a href="#电脑" class="headerlink" title="电脑"></a>电脑</h3><p><a href="%E9%9A%8F%E8%88%AA">Mac随航</a></p><p><a href="intel%2012%E4%BB%A3CPU">intel 12代CPU</a></p><span id="more"></span><h3 id="手机-路由以及其他"><a href="#手机-路由以及其他" class="headerlink" title="手机,路由以及其他"></a>手机,路由以及其他</h3><p><a href="%E8%AE%B0%E5%BD%95mokee%E5%88%B7%E6%9C%BA">小米8刷魔趣</a></p><p><a href="%E2%80%9C%E6%99%BA%E8%83%BD%E2%80%9D%E5%AE%B6%E5%B1%85%E7%9B%B8%E4%BC%B4%E7%9A%84%E6%97%A5%E5%AD%90">以前的智能家居,软路由和原生安卓</a></p><p><a href="%E5%87%BA%E8%BF%9C%E9%97%A8%E5%B8%A6%E7%9A%84%E7%94%B5%E5%AD%90%E4%BA%A7%E5%93%81">出远门带的电子产品</a></p><p><a href="%E6%89%93%E5%8D%B0%E6%9C%BA%E6%94%B9%E6%97%A0%E7%BA%BF">打印机改无线</a></p><p><a href="../%E5%B0%8F%E7%B1%B34A%E5%88%B7OpenWrt.md">小米4A刷OpenWrt</a></p><p><a href="%E5%B0%8F%E7%B1%B3Ax5400%E5%8F%8C%E5%AE%BD%E5%B8%A6%E5%8F%A0%E5%8A%A0.md">小米Ax5400双宽带叠加</a></p><h3 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h3><p><a href="%E5%A4%9A%E5%B9%B3%E5%8F%B0%E6%97%A5%E7%A8%8B%E5%90%8C%E6%AD%A5.md">多平台日程同步</a></p><h3 id="电工网工"><a href="#电工网工" class="headerlink" title="电工网工"></a>电工网工</h3><p><a href="%E7%94%B5%E5%B7%A5%E7%BD%91%E5%B7%A5%E5%B7%A5%E5%85%B7%E9%9B%86%E9%94%A6.md">电工网工工具集锦</a></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;电脑外设&quot;&gt;&lt;a href=&quot;#电脑外设&quot; class=&quot;headerlink&quot; title=&quot;电脑外设&quot;&gt;&lt;/a&gt;电脑外设&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;../%E9%9B%B7%E7%94%B54%E4%BC%A0%E8%BE%93#40G%E7%A1%AC%E7%9B%98%E7%9B%92%E5%8E%9F%E8%A3%85%E6%B5%8B%E9%80%9F&quot;&gt;40G硬盘盒盒雷电线&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;%E7%94%B5%E5%AE%B9%E9%94%AE%E7%9B%98%E4%BD%93%E9%AA%8C&quot;&gt;Niz键盘&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;电脑&quot;&gt;&lt;a href=&quot;#电脑&quot; class=&quot;headerlink&quot; title=&quot;电脑&quot;&gt;&lt;/a&gt;电脑&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;%E9%9A%8F%E8%88%AA&quot;&gt;Mac随航&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;intel%2012%E4%BB%A3CPU&quot;&gt;intel 12代CPU&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>写作大纲</title>
    <link href="https://xu-hardy.github.io/%E5%86%99%E4%BD%9C%E5%A4%A7%E7%BA%B2/"/>
    <id>https://xu-hardy.github.io/%E5%86%99%E4%BD%9C%E5%A4%A7%E7%BA%B2/</id>
    <published>2025-07-03T06:34:24.708Z</published>
    <updated>2025-07-03T06:34:24.708Z</updated>
    
    <content type="html"><![CDATA[<p>找回二十几年失去的东西，明明过活的那么认真，到头来却被伤的遍体鳞伤。从听话的孩子逐渐转向独立人格独立思想。以古为镜。</p><span id="more"></span><ol><li>朋友篇</li><li>恋爱篇</li><li>社会篇</li><li>职场篇</li><li>校园篇</li><li>游记篇</li><li>随感篇</li><li>历史篇</li><li>文化篇</li><li>金钱篇</li><li>律法篇</li><li>道德篇</li><li>领导篇</li><li>美食篇</li><li>文人篇</li></ol><p>为人处事，道德，杀伐决断</p><p>希望在自己耄耋之年，看淡这样的文字，不会觉得幼稚。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;找回二十几年失去的东西，明明过活的那么认真，到头来却被伤的遍体鳞伤。从听话的孩子逐渐转向独立人格独立思想。以古为镜。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>懒猫微服专栏汇总</title>
    <link href="https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E4%B8%93%E6%A0%8F%E6%B1%87%E6%80%BB/"/>
    <id>https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E4%B8%93%E6%A0%8F%E6%B1%87%E6%80%BB/</id>
    <published>2025-07-02T16:00:00.000Z</published>
    <updated>2025-07-03T06:34:24.705Z</updated>
    
    <content type="html"><![CDATA[<p>从朋友的推荐一点点变成懒猫专栏作家。</p><h3 id="入门篇"><a href="#入门篇" class="headerlink" title="入门篇"></a>入门篇</h3><ul><li><p><a href="https://mp.weixin.qq.com/s/-oXjW8jdiW2pUq-vGGqW-w">懒猫微服入门篇（零）：开箱初探，硬件亮相</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/n2OS1DH-REi-QbwboQMSNQ">懒猫微服实战入门（一）：从开启 SSH 到免密登录，一步步教你搞定远程管理</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/UIKNhguz1D0RC2cHaZF3vg">懒猫微服实战入门（二）: 打造多人协作环境：权限控制、数据隔离一步到位</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/s0FQCznwInn2IKukDL7Zpw">懒猫微服实战入门（三）: 懒猫智慧屏，我以为是地表最强电视盒子，结果竟然可以改装成闺蜜机？</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/VwlgC8VvjiEor-_Lp9AGRA">懒猫微服实战入门（四）：完全 DNS 访问，和本地代理冲突了怎么办？</a></p><span id="more"></span></li><li><p><a href="https://mp.weixin.qq.com/s/HZVPwfn8vjMyIYASd-2v_Q">懒猫微服实战入门（五）：文件上传到懒猫网盘，电视盒子挂载 SMB 观影</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/BPzhUPn6gOCvZPxLgv6P3w">懒猫微服实战入门（六）：使用 2fauth 共享你的 MFA</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/-krtwNjZirPNld3zD5btEA">懒猫微服实战入门（七）：超越蒲公英 SD-WAN，用懒猫转发服务，Ipad 随时远程家里 window，没有带宽和设备限制哦~</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/aHZh0U0fzvBK_OSu-KYUkQ">懒猫微服实战入门（八）：懒猫微服 × SSH Remote：打造随时随地的云端开发环境</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/FcfrxZ435cRAoBNqgL4EbA">懒猫微服实战入门（九）：给懒猫安装图形界面，使用 XRDP 实现远程桌面</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/mz6rGImGNSPmi8K7yWIs5Q">懒猫微服实战入门（十）：使用 nmtui 设置静态 IP，接入旁路由实现科学上网</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/oL007MgSLUegflQ9hDbi2w">懒猫微服实战入门（十一）：一键换源指南：用 chsrc 开启丝滑体验</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/cbNDmoDYcKnAiCXjC_po1A">懒猫微服实战入门（十二）：用 iVentoy 打造你的 PXE 服务器</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/23TmEqH4rAPpm0Gt5ZTRcg">懒猫微服实战入门（十三）：懒猫穿透不只图形化，纯命令行服务器也可以</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/Jc0zVlU_t3VZ3IIPMerE6Q">懒猫微服实战入门（十四）：不登录客户端，如何用 Samba 挂载懒猫微服网盘？</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/DtEgU5lSHpEDSzYXhKF3LA">懒猫微服实战入门（十五）：大疆 Pocket3 素材导入懒猫网盘</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/fGGf4Rx9bZpdtu54eMYE0g">懒猫微服实战入门（十六）：把懒猫微服当作 24 × 7 在线开发机</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/HsTwO6h4GBN-huZrIubjUg">懒猫微服实战入门（十七）： 用懒猫微服的网盘挂载功能存储 steam 游戏</a></p></li></ul><h3 id="进阶篇"><a href="#进阶篇" class="headerlink" title="进阶篇"></a>进阶篇</h3><ul><li><a href="https://mp.weixin.qq.com/s/BlOKc7Je5s0TY45Jluu2YQ">懒猫微服进阶心得（一）M 芯片移植懒猫应用构建 Docker 镜像的常见问题排查及解决方案</a></li><li><a href="https://mp.weixin.qq.com/s/_dXE0CxWvLgA5EX1sIft8Q">懒猫微服进阶心得（二）：一台机器跑三套 Docker？深入解析懒猫容器的共存机制（上）</a></li><li><a href="https://mp.weixin.qq.com/s/QP7g9t9B2AVtAD_6CeFryw">懒猫微服进阶心得（三）：一台机器跑三套 Docker？深入解析懒猫容器的共存机制（下）</a></li><li><a href="https://mp.weixin.qq.com/s/IrQdNiBBl6qfiamZnQrSHA">懒猫微服进阶心得（四）：每次重启都丢配置？用 systemctl –user 自动装回环境！</a></li><li><a href="https://mp.weixin.qq.com/s/IxIBDj9iG6K3xi_DSSOtqg">懒猫微服进阶心得（五）：使用懒猫微服做 Ventoy 启动盘</a></li><li><a href="https://mp.weixin.qq.com/s/-aVpOgYkIThn0Xd56g-F4Q">懒猫微服进阶心得（六）：以纸砚双拼为例，快速移植纯前端项目到懒猫微服</a></li><li><a href="https://mp.weixin.qq.com/s/TUoLCEazMT2TIYekUcOI5g">懒猫微服进阶心得（七）：懒猫的镜像仓库</a></li><li><a href="https://mp.weixin.qq.com/s/AwmL0PfMqk4tK1N3cPqChA">懒猫微服进阶心得（八）：如何在 ARM 机器上下载并运行 X86 Docker 镜像以及在 X86 上运行 ARM 架构 Docker</a></li><li><a href="https://mp.weixin.qq.com/s/4JwQzL_sCWlmQJsoASJlmQ">懒猫微服进阶心得（九）：商店 App 如何接管 Docker 引擎？</a></li><li><a href="https://mp.weixin.qq.com/s/DtEgU5lSHpEDSzYXhKF3LA">懒猫微服进阶心得（十）：本地开发，如何接入懒猫微服的 OpenID Connect (OIDC)？</a></li></ul><h3 id="炫技篇"><a href="#炫技篇" class="headerlink" title="炫技篇"></a>炫技篇</h3><ul><li><a href="https://mp.weixin.qq.com/s/8t8GETGI8XB0M9zTx0BThw">懒猫微服炫技篇（一）：使用懒猫微服的穿透服务，车机使用 DS music 远程听歌，黑群晖不用再洗白</a></li><li><a href="https://mp.weixin.qq.com/s/uwnkkRVbjBDpv6qbP_y-0g">懒猫微服炫技篇（二）：使用懒猫微服倒推停电时间</a></li></ul><h3 id="故事篇"><a href="#故事篇" class="headerlink" title="故事篇"></a>故事篇</h3><ul><li><a href="https://mp.weixin.qq.com/s/QFhTT-HGQ4If7jqrEeDwVA">懒猫微服故事篇（一）：服务器宕机之后，我和前端靠懒猫微服结对编程</a></li><li><a href="https://mp.weixin.qq.com/s/60qatSMkkKLnip19l-vCNQ">懒猫微服故事篇（二）：西湖邂逅后，我手把手教她玩转 NAS</a></li></ul><h3 id="开发篇"><a href="#开发篇" class="headerlink" title="开发篇"></a>开发篇</h3><ul><li><a href="https://mp.weixin.qq.com/s/XzNrCRHPpxqrnjD4YM3G4A">懒猫微服开发篇（零）：上架应用需要哪些知识</a></li><li><a href="https://mp.weixin.qq.com/s/0olr2XTAnmyg9Rs3LO5P2Q">懒猫微服开发篇（一）：懒猫微服全栈上架指南，一步打包，一键发布</a></li></ul><h3 id="番外篇"><a href="#番外篇" class="headerlink" title="番外篇"></a>番外篇</h3><ul><li><a href="https://mp.weixin.qq.com/s/4nN5NyYl0m5LS3V4wNhrMA">自带内网穿透,懒猫微服治好了我的 NAS 焦虑</a></li><li><a href="https://mp.weixin.qq.com/s/FmFbblqZlg2ToUymw8sB5g">快速检索懒猫商店 1000+应用，微服秒变 Mac 原生 APP</a></li><li><a href="https://mp.weixin.qq.com/s/fcUbP3EmtgmlOmZFy9Ix6w">轻松管理 ES 集群: 我把 Infinilabs Console 上架了懒猫微服，默认支持外网访问、TLS 加密和 OIDC 登录</a></li><li><a href="https://mp.weixin.qq.com/s/-5wqOQzbGmRDpA4mtiJ2rw">深度长文：NAS 大降价的年代，我为何接受溢价来购买懒猫微服（附送回本攻略）</a></li><li><a href="https://mp.weixin.qq.com/s/408CsSp5lPnIKgx-QIvR2A">我用 Amazon Q 写了一个 Docker 客户端，并上架了懒猫微服商店</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;从朋友的推荐一点点变成懒猫专栏作家。&lt;/p&gt;
&lt;h3 id=&quot;入门篇&quot;&gt;&lt;a href=&quot;#入门篇&quot; class=&quot;headerlink&quot; title=&quot;入门篇&quot;&gt;&lt;/a&gt;入门篇&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/-oXjW8jdiW2pUq-vGGqW-w&quot;&gt;懒猫微服入门篇（零）：开箱初探，硬件亮相&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/n2OS1DH-REi-QbwboQMSNQ&quot;&gt;懒猫微服实战入门（一）：从开启 SSH 到免密登录，一步步教你搞定远程管理&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/UIKNhguz1D0RC2cHaZF3vg&quot;&gt;懒猫微服实战入门（二）: 打造多人协作环境：权限控制、数据隔离一步到位&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/s0FQCznwInn2IKukDL7Zpw&quot;&gt;懒猫微服实战入门（三）: 懒猫智慧屏，我以为是地表最强电视盒子，结果竟然可以改装成闺蜜机？&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/VwlgC8VvjiEor-_Lp9AGRA&quot;&gt;懒猫微服实战入门（四）：完全 DNS 访问，和本地代理冲突了怎么办？&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/categories/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
    
    <category term="写作" scheme="https://xu-hardy.github.io/tags/%E5%86%99%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>记年初的武汉游记</title>
    <link href="https://xu-hardy.github.io/%E8%AE%B0%E5%B9%B4%E5%88%9D%E7%9A%84%E6%AD%A6%E6%B1%89%E6%B8%B8%E8%AE%B0/"/>
    <id>https://xu-hardy.github.io/%E8%AE%B0%E5%B9%B4%E5%88%9D%E7%9A%84%E6%AD%A6%E6%B1%89%E6%B8%B8%E8%AE%B0/</id>
    <published>2025-07-01T16:00:00.000Z</published>
    <updated>2025-07-03T06:34:24.708Z</updated>
    
    <content type="html"><![CDATA[<p>头一天在重庆机场过的夜，到达江汉路步行街已经快中午了。在附近的来菜吃的藕汤，在北京就很爱吃清水亭，有藕的 N 多种做法，那么来到湖北不可不吃。</p><p>主要还是特意找问当地的小伙伴要了攻略：</p><blockquote><p>推荐的专门吃东西的几条街是玫瑰街、粮道街、万松园、吉庆街这些。早餐小吃比较丰富，武汉的早餐文化特别浓厚，早餐种类特别丰富，很多碳水炸弹。</p><p>正餐可以考虑 来菜，是湖北菜，藕汤是湖北菜最具特色的。文章中下面的信息还是可靠的。</p><p>午餐：这个季节湖北的藕汤已经上市，基本上随便一家都很好喝，一定要选筒子骨藕汤，9 孔粉藕炖的那种。怕踩坑可以选一些连锁的，出品有保障，如刘胖子、老村长、艳阳天，不怕排队也可以去夏氏砂锅。</p><blockquote><p>武汉魅族魅友家：<a href="https://weibo.com/2709494027/4973440665388967">https://weibo.com/2709494027/4973440665388967</a> 这是小伙伴自己总结的</p></blockquote><p>武汉推崇藕汤一定要用粉藕，有炒菜的那种，也可以点干煸藕丝，那就是不同的味道了</p></blockquote><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/201b49619f36a1d8c8e0a2270f06ab55.jpg" alt="201b49619f36a1d8c8e0a2270f06ab55"></p><p>江汉路的风景不错，虽然是老城区，住宿条件差强人意。但总归风景和视野还是不错的，可以远眺长江，夜景也很美，楼下就是江汉路步行街。</p><blockquote><p>携程上酒店骂声一片，都是吐槽住宿添加太差的。如果介意的话可以选择住对面的武昌。去的时候爆满，其他地区送早餐给升级房间的桔子水晶都没有增值服务了。</p></blockquote><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/7516977ab7e5461589524d578417cda4.jpg" alt="7516977ab7e5461589524d578417cda4"></p><p>早上的江汉路是没什么人的，不过晚上到 12 点都很热闹。每天都是拖着走废的腿一瘸一拐的走回去的，青城山崴的脚，再经历重庆摧残，最后在武汉彻底残了。</p><p>武汉没有真正的市中心的概念，基本都是一个片区一个片区这样的。武汉本来就是三个城市合并来的，武昌重政治、汉口重经济、汉阳重工业。所以景区或者玩的地方相对也都比较分散。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/b8568bf78a3965faacbfa10417023350.jpg" alt="b8568bf78a3965faacbfa10417023350"></p><p>早餐可以选严老幺的三鲜豆皮和黑色麻将的热干面。那个新出的三鲜面就不要点了，毕竟不是苏州，三鲜面很难吃！！！</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/130d84f81d31f7cc57fc535cdfcecb27.jpg" alt="130d84f81d31f7cc57fc535cdfcecb27"></p><p>现做的三鲜豆皮，很多人排队，一定要现做现吃才好，这样外壳才是脆的。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/21157cd9bac75924716d70921cf13324.jpg" alt="21157cd9bac75924716d70921cf13324"></p><p>山海关路来过个不早的早，每个人拿一个小板凳，5 块钱的热干面，三块钱的藕粉汤，基本早上就吃饱了。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/918caab9550fd67c77a23bcba9fe92db.jpg" alt="918caab9550fd67c77a23bcba9fe92db"></p><p>第二天还是骑车到山海关路继续喝了藕汤，这家叫做金三角吊子煨汤。20 块钱一碗，有排骨有莲藕，总体来说比来菜吃的爽一点吧。算是在武汉吃到的第一个拉丝的藕。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/0e81da7c263f7121c2edf8a7edab12ec.jpg" alt="0e81da7c263f7121c2edf8a7edab12ec"></p><p>山海关路也吃了三鲜豆皮，和毛氏汽水包。不过是在吃不下了，据说这家牛肉面也不错。嗯，来自襄阳。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/cf93a9047c3a84453fa6bb337358b546.jpg" alt="cf93a9047c3a84453fa6bb337358b546"></p><p>这个是小伙伴的旅游攻略：</p><blockquote><p>1、黄鹤楼，现在应该在准备春晚分会场，闭园了<br>2、东湖有空可以看看，东湖绿道、或者磨山风景区也可以锻炼一下，都在东湖片区，哈哈<br>3、湖北省省博物馆离东湖也很近。越王勾践剑、曾侯乙编钟是镇馆之宝。<br>4、武汉大学凌波门不用去了，日出日落这个季节都不太合适。武大校园里面还行，建筑风格也很不错。<br>5、宝通寺、古德寺、归元寺是寺庙，长春观是道观。<br>6、黎黄陂路、昙华林是文艺青年打卡地。黎黄陂路有很多近代风格的建筑，适合拍照。昙华林有一些文创小礼品吧。<br>7、江汉路、楚河汉街、武商梦时代是商圈。江汉路建筑风格是近代租界风格，距离江滩近。楚河汉街有新开的 SKP，奢侈品应该相对多一些。武商梦时代是亚洲最大的单体商场。</p></blockquote><blockquote><p>武汉魅族魅友家：<a href="https://weibo.com/2709494027/4973440665388967">https://weibo.com/2709494027/4973440665388967</a></p></blockquote><p>武汉博物馆真的很大，需要留一天的时间来看。越王勾践剑需要排队很久。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/DJI_20250112122305_0393_D.JPG" alt="DJI_20250112122305_0393_D"></p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/a0a512bd9715878984048cbd60b1fa55.jpg" alt="a0a512bd9715878984048cbd60b1fa55"></p><p>沿着东湖骑车，慢慢就天黑了，然后发现自己在湖中央凌乱。武大不让进，所以一路都在怀疑自己，一个人在外地，大晚上在人少的地方骑车干嘛。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/9baa45370097bb1d3d5b63ff546b6551.jpg" alt="9baa45370097bb1d3d5b63ff546b6551"></p><p>武汉玩的地方，可以考虑下湖北省博物馆，越王勾践剑和曾侯乙编钟（有时候会有编钟表演）。</p><p>东湖也还不错，比较大，春天有樱园，也可以在那边露营。这个季节不是特别推荐，风应该会比较大</p><p>江汉路步行街是商圈，仅临武汉江滩。江滩晚上可以看对岸的楼宇和大桥上的灯光表演，比较类似上次在杭州游船的风景</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/5c5e187b188dc8a92f05a31f52e406b4.jpg" alt="5c5e187b188dc8a92f05a31f52e406b4"></p><p>从东湖离开已经是这个点了。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/DJI_20250113180602_0522_D.JPG" alt="DJI_20250113180602_0522_D"></p><p>在楚河汉街，基本是本老武汉强行拉倒店里。说没有预制菜，藕汤保拉丝。于是大众点评 L6 送了一个价值 60+的藕汤，然后点了一个干煸藕丝。算是在武汉吃的性价比最高的一顿。果然，大众点评高等级在哪里都吃香。不过后来朋友去，据说是是不再送了。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/6fe23d79915042942958b4151d46c151.jpg"></p><p>干煸藕丝很酥脆，虽然说干炸的牛肉不多，但是味道简直无可挑剔。不过一个人吃俩大菜是在是太撑了，还是得找个女朋友一起才好。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/5c2c9e7a750fd7c700a8e266ffbbf9d4.jpg" alt="5c2c9e7a750fd7c700a8e266ffbbf9d4"></p><p>第二天又去了梨园。下午的东湖，美的不可方物。（没坐船，来回要七八十，而且要跟着船马上回来）</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/1fd49b438fdb3566e4d4ed8e26025101.jpg" alt="1fd49b438fdb3566e4d4ed8e26025101"></p><p>美的像一幅画。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/c2ca64c6ed0be78720ab8bfc8b943847.jpg" alt="c2ca64c6ed0be78720ab8bfc8b943847"></p><p>晚上去的夏氏砂锅，因为谈季加上人少，所以基本没排队。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/f3012d41985b79df5be270c5c8e4beb2.jpg" alt="f3012d41985b79df5be270c5c8e4beb2"></p><p>冬天点着炉火，喝着热气腾腾的藕汤，从上暖到下，还有这个藕是真拉丝呀～</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/7c816a7675cc82050067ed38f75c2244.jpg" alt="7c816a7675cc82050067ed38f75c2244"></p><p>徒步横跨长江大桥，属于又菜又还玩，危险指数 4 颗星，车在走桥在晃，小哥自行车在眼前飘过。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/7c2788dfd6818c79eabb230318e27ef7.jpg" alt="7c2788dfd6818c79eabb230318e27ef7"></p><p>用 Apple Watch 记录下这个过程。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/2dcf4cb81e2e41f2092d161693ee66e6.jpg" alt="2dcf4cb81e2e41f2092d161693ee66e6"></p><p>春晚彩排的原因，黄鹤楼进不去。只能在外边听见 1234567 的敲鼓声音，不过很多人也说黄鹤楼在外边看看就好了。</p><blockquote><p>文人的名楼情节，大概是拜崔颢的诗词所赐了。</p></blockquote><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/DJI_20250113200746_0529_D.JPG" alt="DJI_20250113200746_0529_D"></p><p>最后一天来参观国民政府办公厅，现在的南阳大楼被改成了酒店还是饭店一类的场所，只有三楼对外开放。电视剧里的政府办公厅和这个很像。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/89dd0edfb62f8bba4248bbe5c4fec999.jpg" alt="89dd0edfb62f8bba4248bbe5c4fec999"></p><p>请看大图 VCR：</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/2fd07bb791a4ff087c1958946045b86d.jpg" alt="2fd07bb791a4ff087c1958946045b86d"></p><p>还有江汉关博物馆的讲诉曾经的故事，近代的条约，租借等等。。。。</p><p>江汉路以及黎黄坡路的租借都改成了经典或者银行，但是我们仍然可以看到过去的岁月。</p><p>那，南京得什么样啊？</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/42b26aad3399283cd52922e826d9607d.jpg" alt="42b26aad3399283cd52922e826d9607d"></p><p>临走之前吃了，王记牛杂，生滚牛肉热干面，真心不错。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/5f9ab15dd51edde9e139fd1b1ea077e6.jpg" alt="5f9ab15dd51edde9e139fd1b1ea077e6"></p><p>回去写了三天四藕小记：</p><blockquote><p>如果用藕来比作爱情，来菜是初相识，幻想最初的美好，该是粉糯入口即化如亲吻红唇，而非迎合大众变节故作搔首，又道是重口难调。再三思虑下，你终究不是我的头牌。出来乍到幻想要轰轰烈烈的爱情，一次次的修改已不愿再等。</p><p>老武汉是路边的艳遇，你听我诉着苦， 又抚着上次的伤口，于是急切的来一场试探性的邀约，再经历试探，喧闹，繁华过后，你把新唤作老。清炖，油炸样样拉丝。本已无可挑剔，可惜你在灯红酒绿，不能常常如愿。</p><p>小吃街是日常，简单不精致，朴华粗糙，藕形状不一，大口啃着才舒服，细小的渣碎弃之不要。调侃着来往的路人以及同桌的游客，看着提高嗓门吆喝的店家。同时还能大快朵颐享受着放松而自在的瞬间，虽无钟鸣鼎食，处处诉说着平平淡淡。</p><p>夏氏的砂锅是醇厚的，就着炉火，半暗的灯光下，乘上一晚热气腾腾的汤，软糯的藕配着油花花的汤，可以散去一整天的疲惫，这家拉丝也是最多的，点着炉火，就好像无论多晚多累总归有人懂你，等你。汤一定要微烫入口，否则要重新加热到沸腾才行，锅气才是真实的人间烟火。</p></blockquote><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/609cab7b0092c2f91ee18062e5f1d10f.jpg" alt="609cab7b0092c2f91ee18062e5f1d10f"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;头一天在重庆机场过的夜，到达江汉路步行街已经快中午了。在附近的来菜吃的藕汤，在北京就很爱吃清水亭，有藕的 N 多种做法，那么来到湖北不可不吃。&lt;/p&gt;
&lt;p&gt;主要还是特意找问当地的小伙伴要了攻略：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;推荐的专门吃东西的几条街是玫瑰街、粮</summary>
      
    
    
    
    <category term="游记" scheme="https://xu-hardy.github.io/categories/%E6%B8%B8%E8%AE%B0/"/>
    
    
    <category term="游记" scheme="https://xu-hardy.github.io/tags/%E6%B8%B8%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>极限科技稿件数据</title>
    <link href="https://xu-hardy.github.io/%E6%9E%81%E9%99%90%E7%A7%91%E6%8A%80%E7%A8%BF%E4%BB%B6%E6%95%B0%E6%8D%AE/"/>
    <id>https://xu-hardy.github.io/%E6%9E%81%E9%99%90%E7%A7%91%E6%8A%80%E7%A8%BF%E4%BB%B6%E6%95%B0%E6%8D%AE/</id>
    <published>2025-07-01T16:00:00.000Z</published>
    <updated>2025-07-03T06:34:24.710Z</updated>
    
    <content type="html"><![CDATA[<h3 id="6-月数据"><a href="#6-月数据" class="headerlink" title="6 月数据"></a>6 月数据</h3><table><thead><tr><th>发布时间</th><th>文章标题</th><th>文章链接</th><th>阅读量</th><th>统计时间</th></tr></thead><tbody><tr><td>2025-06-25 22:00:50  ·</td><td><a href="https://blog.csdn.net/weixin_38781498/article/details/148908029">本地 RAG 实战：用 EasySearch + Ollama SDK 半小时搭建检索增强问答系统</a></td><td>1156 阅读 ·</td><td>2025-07-02</td><td></td></tr><tr><td>2025-06-24 16:39:01  ·</td><td><a href="https://blog.csdn.net/weixin_38781498/article/details/148874689">Easysearch 实战指南：修改索引主分片的三种方式（split &#x2F; shrink &#x2F; reindex</a></td><td>1251 阅读 ·</td><td>2025-07-02</td><td></td></tr><tr><td>2025-06-24 13:45:59  ·</td><td><a href="https://blog.csdn.net/weixin_38781498/article/details/148869923">Easysearch 索引关闭与重开全攻略：open&#x2F;close 操作、批量处理及防误操作配置</a></td><td>1001 阅读 ·</td><td>2025-07-02</td><td></td></tr></tbody></table><h3 id="5-月文章"><a href="#5-月文章" class="headerlink" title="5 月文章"></a>5 月文章</h3><table><thead><tr><th>发布时间</th><th>文章标题</th><th>文章链接</th><th>阅读量（CSDN）</th><th>统计时间</th><th>备注</th></tr></thead><tbody><tr><td>2025-05-09 13:19:39 ·</td><td>[轻松管理 ES 集群: 我把 Infinilabs Console 上架了懒猫微服，默认支持外网访问、TLS 加密和 OIDC 登录](轻松管理 ES 集群: 我把 Infinilabs Console 上架了懒猫微服，默认支持外网访问、TLS 加密和 OIDC 登录.md)</td><td>CSDN:<br><a href="https://blog.csdn.net/weixin_38781498/article/details/147819180">https://blog.csdn.net/weixin_38781498/article/details/147819180</a><br></td><td>2511 阅读 ·</td><td>2025-06-03</td><td></td></tr><tr><td>2025-05-05 15:28:09 ·</td><td><a href="MySQL%E6%95%B0%E6%8D%AE%E5%AE%9E%E6%97%B6%E6%8E%A5%E5%85%A5Easysearch%EF%BC%8C%E9%9B%B6%E4%BB%A3%E7%A0%81%E8%BF%81%E7%A7%BB%E5%85%A8%E6%B5%81%E7%A8%8B.md">MySQL 数据实时接入 Easysearch，零代码迁移全流程</a></td><td>CSDN:<br><a href="https://blog.csdn.net/weixin_38781498/article/details/147718262">https://blog.csdn.net/weixin_38781498/article/details/147718262</a><br></td><td>3218 阅读 ·</td><td>2025-06-03</td><td></td></tr></tbody></table><h3 id="4-月文章"><a href="#4-月文章" class="headerlink" title="4 月文章"></a>4 月文章</h3><table><thead><tr><th>发布时间</th><th>文章标题</th><th>文章链接</th><th>阅读量（CSDN）</th><th>统计时间</th><th>备注</th><th></th></tr></thead><tbody><tr><td>2025-04-24 17:37:45 ·</td><td>[从认证到透传：用 Nginx 为 EasySearch 构建一体化认证网关](从认证到透传：用 Nginx 为 EasySearch 构建一体化认证网关.md)</td><td>CSDN:<br><a href="https://blog.csdn.net/weixin_38781498/article/details/147484530">https://blog.csdn.net/weixin_38781498/article/details/147484530</a><br></td><td>1728 阅读 ·</td><td>2025-05-06</td><td></td><td></td></tr><tr><td>2025-04-25 15:54:34 ·</td><td>[Easysearch 基础运维扫盲指南：从 HTTP 到 HTTPS、认证与安全访问全解析](Easysearch 基础运维扫盲指南：从 HTTP 到 HTTPS、认证与安全访问全解析.md)</td><td>CSDN:<br><a href="https://blog.csdn.net/weixin_38781498/article/details/147514771">https://blog.csdn.net/weixin_38781498/article/details/147514771</a><br></td><td>1947 阅读 ·</td><td>2025-05-06</td><td></td><td></td></tr><tr><td>2025-04-23 18:12:08 ·</td><td>[Easysearch 服务昨天还好好的，为什么今天突然访问不了了？](Easysearch 服务昨天还好好的，为什么今天突然访问不了了？.md)</td><td>CSDN:<br><a href="https://blog.csdn.net/weixin_38781498/article/details/147460362">https://blog.csdn.net/weixin_38781498/article/details/147460362</a><br></td><td>1446 阅读 ·</td><td>2025-05-06</td><td></td><td></td></tr><tr><td>2025-04-17 22:05:49 ·</td><td>[零代码接入 Google Drive，让 Coco- AI 看懂你的资料库](零代码接入 Google Drive，让 Coco- AI 看懂你的资料库.md)</td><td>CSDN:<br><a href="https://blog.csdn.net/weixin_38781498/article/details/147314801">https://blog.csdn.net/weixin_38781498/article/details/147314801</a><br></td><td>2254 阅读 ·</td><td>2025-05-06</td><td></td><td></td></tr><tr><td>2025-04-17 20:10:35 ·</td><td>[Coco-AI 接入自定义数据源](Coco-AI 接入自定义数据源.md)</td><td>CSDN:<br><a href="https://blog.csdn.net/weixin_38781498/article/details/147312961">https://blog.csdn.net/weixin_38781498/article/details/147312961</a><br></td><td>1069 阅读 ·</td><td>2025-05-06</td><td></td><td></td></tr><tr><td>2025-04-17 19:04:29 ·</td><td>[Coco-AI 集成语雀作为语料库进行检索](Coco-AI 集成语雀作为语料库进行检索.md)</td><td>CSDN:<br><a href="https://blog.csdn.net/weixin_38781498/article/details/147311955">https://blog.csdn.net/weixin_38781498/article/details/147311955</a><br></td><td>1137 阅读 ·</td><td>2025-05-06</td><td></td><td></td></tr><tr><td>2025-04-03 21:32:39 ·</td><td>[Coco-AI 支持嵌入，让你的网站拥有 AI 搜索力](Coco-AI 支持嵌入，让你的网站拥有 AI 搜索力.md)</td><td>CSDN:<br><a href="https://blog.csdn.net/weixin_38781498/article/details/146989181">https://blog.csdn.net/weixin_38781498/article/details/146989181</a><br></td><td>1775 阅读 ·</td><td>2025-05-06</td><td></td><td></td></tr><tr><td>2025-03-24 18:39:29 ·</td><td>[Docker-Compose 部署 EasySearch 异常问题排查](Docker-Compose 部署 EasySearch 异常问题排查.md)</td><td>CSDN:<br><a href="https://blog.csdn.net/weixin_38781498/article/details/146483037">https://blog.csdn.net/weixin_38781498/article/details/146483037</a><br></td><td>1174 阅读 ·</td><td>2025-05-06</td><td></td><td></td></tr></tbody></table><h3 id="3-月文章"><a href="#3-月文章" class="headerlink" title="3 月文章"></a>3 月文章</h3><table><thead><tr><th>发布时间</th><th>文章标题</th><th>文章链接</th><th>阅读量（CSDN）</th><th>统计时间</th><th>备注</th></tr></thead><tbody><tr><td>2025-03-20 21:50:50 ·</td><td>[拓展 Coco AI 功能 - 智能检索 Hexo 博客](拓展 Coco AI 功能 - 智能检索 Hexo 博客.md)</td><td>CSDN:<br><a href="https://blog.csdn.net/weixin_38781498/article/details/146407174">https://blog.csdn.net/weixin_38781498/article/details/146407174</a><br></td><td>1485 阅读 ·</td><td>2025-04-01</td><td></td></tr><tr><td>2025-03-18 12:36:10 ·</td><td>[Coco AI 智能检索 Hugo Blog 集成指南](Coco AI 智能检索 Hugo Blog 集成指南.md)</td><td>CSDN:<br><a href="https://blog.csdn.net/weixin_38781498/article/details/146338445">https://blog.csdn.net/weixin_38781498/article/details/146338445</a><br></td><td>1541 阅读 ·</td><td>2025-04-01</td><td></td></tr><tr><td>2025-03-11 09:21:48 ·</td><td>[Coco AI 全新升级：全图形化 RAG 配置，一键开启智能知识管理！](Coco AI 全新升级：全图形化 RAG 配置，一键开启智能知识管理！.md)</td><td>CSDN:<br><a href="https://blog.csdn.net/weixin_38781498/article/details/146170047">https://blog.csdn.net/weixin_38781498/article/details/146170047</a><br></td><td>857 阅读 ·</td><td>2025-04-01</td><td></td></tr><tr><td>2025-03-09 17:15:36 ·</td><td>[Easysearch 使用 AWS S3 进行快照备份与还原：完整指南及常见错误排查](Easysearch 使用 AWS S3 进行快照备份与还原：完整指南及常见错误排查.md)</td><td>CSDN:<br><a href="https://blog.csdn.net/weixin_38781498/article/details/146135024">https://blog.csdn.net/weixin_38781498/article/details/146135024</a><br></td><td>1294 阅读 ·</td><td>2025-04-01</td><td></td></tr><tr><td>2025-03-09 11:03:08 ·</td><td>[Easysearch 中 PUT 和 POST 更新索引的区别及常见错误解析](Easysearch 中 PUT 和 POST 更新索引的区别及常见错误解析.md)</td><td>CSDN:<br><a href="https://blog.csdn.net/weixin_38781498/article/details/146128940">https://blog.csdn.net/weixin_38781498/article/details/146128940</a><br></td><td>1517 阅读 ·</td><td>2025-04-01</td><td></td></tr></tbody></table><h3 id="2-月文章"><a href="#2-月文章" class="headerlink" title="2 月文章"></a>2 月文章</h3><table><thead><tr><th>发布时间</th><th>文章标题</th><th>文章链接</th><th>阅读量（CSDN）</th><th>统计时间</th><th>备注</th></tr></thead><tbody><tr><td>2025-02-11</td><td><a href="Macbook%20Pro%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAEasysearch%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83.md">Macbook Pro 快速搭建 Easysearch 学习环境</a></td><td>CSDN:<br><a href="https://blog.csdn.net/weixin_38781498/article/details/14557411">https://blog.csdn.net/weixin_38781498/article/details/14557411</a><br><br>微信公众号: <br><a href="https://mp.weixin.qq.com/s/Q9DfNtarX7uwvrBKCoQqDA">https://mp.weixin.qq.com/s/Q9DfNtarX7uwvrBKCoQqDA</a><br></td><td>1037</td><td>2025-03-02</td><td></td></tr><tr><td>2025-02-16</td><td><a href="Coco%20AI%20APP%20%E5%88%9D%E4%BD%93%E9%AA%8C%EF%BC%9A%E5%BC%80%E5%90%AF%E6%99%BA%E8%83%BD%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E6%96%B0%E7%AF%87%E7%AB%A0.md">Coco AI APP 初体验：开启智能知识管理新篇章</a></td><td>CSDN:<br><a href="https://blog.csdn.net/weixin_38781498/article/details/145660517">https://blog.csdn.net/weixin_38781498/article/details/145660517</a><br><br>微信公众号: <br><a href="https://mp.weixin.qq.com/s/Q9DfNtarX7uwvrBKCoQqDA">https://mp.weixin.qq.com/s/Q9DfNtarX7uwvrBKCoQqDA</a><br></td><td>1331</td><td>2025-03-02</td><td></td></tr><tr><td>2025-02-17</td><td><a href="%E6%89%93%E9%80%A0%E6%99%BA%E8%83%BD%E8%AF%AD%E6%96%99%E5%BA%93%EF%BC%9A%E9%80%9A%E8%BF%87Coco%20AI%20Server%20%E5%AE%9E%E7%8E%B0%20Notion%20%E7%AC%94%E8%AE%B0%20RAG%20%E6%A3%80%E7%B4%A2%E5%8A%9F%E8%83%BD.md">打造智能语料库：通过 Coco AI Server 实现 Notion 笔记 RAG 检索功能</a></td><td>CSDN:<br><a href="https://blog.csdn.net/weixin_38781498/article/details/145692866">https://blog.csdn.net/weixin_38781498/article/details/145692866</a><br><br>微信公众号: <br><a href="https://mp.weixin.qq.com/s/E2wMtwF_qioqb1wwp8CZfg">https://mp.weixin.qq.com/s/E2wMtwF_qioqb1wwp8CZfg</a><br></td><td>1170</td><td>2025-03-02</td><td></td></tr><tr><td>2025-02-20</td><td><a href="%E6%8E%A8%E8%8D%90%E7%BB%99%20Easysearch%20%E6%96%B0%E7%94%A8%E6%88%B7%E7%9A%84%E5%87%A0%E4%B8%AA%20Elasticsearch%20%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B7%A5%E5%85%B7.md">推荐给 Easysearch 新用户的几个 Elasticsearch 可视化工具</a></td><td>CSDN:<br><a href="https://blog.csdn.net/weixin_38781498/article/details/145764424">https://blog.csdn.net/weixin_38781498/article/details/145764424</a><br><br>微信公众号: <br><a href="https://mp.weixin.qq.com/s/RaiDPtKJktssJpfd58Tehw">https://mp.weixin.qq.com/s/RaiDPtKJktssJpfd58Tehw</a><br></td><td>394</td><td>2025-03-02</td><td></td></tr><tr><td>2025-02-22</td><td><a href="%E5%AE%9E%E7%8E%B0%20INFINI%20Console%20%E4%B8%8E%20GitHub%20%E7%9A%84%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%E9%9B%86%E6%88%90%EF%BC%9A%E4%B8%80%E7%AB%99%E5%BC%8F%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.md">实现 INFINI Console 与 GitHub 的单点登录集成：一站式身份验证解决方案</a></td><td>CSDN:<br><a href="https://blog.csdn.net/weixin_38781498/article/details/145792720">https://blog.csdn.net/weixin_38781498/article/details/145792720</a><br><br>微信公众号: <br><br></td><td>1018</td><td>2025-03-02</td><td></td></tr><tr><td>2025-02-21</td><td><a href="%E4%BD%BF%E7%94%A8%20INFINI%20Console%20%E9%85%8D%E7%BD%AE%E9%9B%86%E7%BE%A4%E7%9B%91%E6%8E%A7%20Webhook%20%E9%80%9A%E7%9F%A5%E6%8C%87%E5%8D%97.md">使用 INFINI Console 配置集群监控 Webhook 通知指南</a></td><td>CSDN:<br><a href="https://blog.csdn.net/weixin_38781498/article/details/145787827">https://blog.csdn.net/weixin_38781498/article/details/145787827</a><br><br>微信公众号: <br><a href="https://mp.weixin.qq.com/s/5okVri7IOfNgtG17wXgH-g">https://mp.weixin.qq.com/s/5okVri7IOfNgtG17wXgH-g</a><br></td><td>706</td><td>2025-03-02</td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><table><thead><tr><th>发布时间</th><th>文章标题</th><th>文章链接</th><th>阅读量</th><th>统计时间</th><th>备注</th></tr></thead><tbody><tr><td>2025-12-01</td><td>xxx1</td><td>CSDN:<br><br><br>微信公众号: <br></td><td>666</td><td>2025-01-01</td><td></td></tr><tr><td>2025-12-12</td><td>xxx2</td><td></td><td>6666</td><td>2025-01-01</td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;6-月数据&quot;&gt;&lt;a href=&quot;#6-月数据&quot; class=&quot;headerlink&quot; title=&quot;6 月数据&quot;&gt;&lt;/a&gt;6 月数据&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;发布时间&lt;/th&gt;
&lt;th&gt;文章标题&lt;/th&gt;
&lt;th&gt;文章链接&lt;/th</summary>
      
    
    
    
    <category term="极限科技" scheme="https://xu-hardy.github.io/categories/%E6%9E%81%E9%99%90%E7%A7%91%E6%8A%80/"/>
    
    
    <category term="搜索引擎（ES）" scheme="https://xu-hardy.github.io/tags/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%EF%BC%88ES%EF%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>Gemini-cli 踩坑机：国内环境 , 用过 Google Cloud 如何设置？</title>
    <link href="https://xu-hardy.github.io/gemini-cli-%E8%B8%A9%E5%9D%91%E6%9C%BA%EF%BC%9A%E5%9B%BD%E5%86%85%E7%8E%AF%E5%A2%83-%E7%94%A8%E8%BF%87-google-cloud-%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AE%EF%BC%9F/"/>
    <id>https://xu-hardy.github.io/gemini-cli-%E8%B8%A9%E5%9D%91%E6%9C%BA%EF%BC%9A%E5%9B%BD%E5%86%85%E7%8E%AF%E5%A2%83-%E7%94%A8%E8%BF%87-google-cloud-%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AE%EF%BC%9F/</id>
    <published>2025-07-01T16:00:00.000Z</published>
    <updated>2025-07-03T06:34:24.712Z</updated>
    
    <content type="html"><![CDATA[<p>Gemini 也发布了类似的 AI 编程产品 Gemini Cli - 开源命令行 AI 工具</p><p>而且个人谷歌账号登录就能免费用！</p><p>免费额度为每分钟 60 次请求、每天 1000 次请求，是业内最高的免费额度，几乎不会遇到限制。</p><ul><li>支持 Google 搜索实时联网，为模型提供外部上下文。</li><li>支持 MCP 和扩展，便于功能拓展。</li><li>可自定义提示词和指令，适应个人或团队工作流。</li><li>可在脚本中非交互式调用，实现自动化和集成。</li></ul><span id="more"></span><h3 id="安装-gemini-cli"><a href="#安装-gemini-cli" class="headerlink" title="安装 gemini-cli"></a>安装 gemini-cli</h3><p>先来安装 gemini-cli，其实就是一个 NPM 包。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @google/gemini-cli</span><br><span class="line">gemini</span><br></pre></td></tr></table></figure><p>如果不出意外的话，执行之后会闪退。网上说需要设置 TUN 代理，甚至连命令行 export 环境变量也不行。</p><hr><h3 id="登录-Google-SSO-后仍无法使用"><a href="#登录-Google-SSO-后仍无法使用" class="headerlink" title="登录 Google SSO 后仍无法使用"></a>登录 Google SSO 后仍无法使用</h3><p>然后登录 Google SSO 验证，页面会显示 Gemini Code Assist 已获得访问您账号的授权。但是其实还是不行。我们继续看。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/de7757ea56e0bf2d668093ee788b240a.png" alt="de7757ea56e0bf2d668093ee788b240a"></p><p>命令行还是会得到这个报错：</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250626075949247.png" alt="image-20250626075949247"></p><hr><h3 id="设置-GOOGLE-CLOUD-PROJECT-环境变量"><a href="#设置-GOOGLE-CLOUD-PROJECT-环境变量" class="headerlink" title="设置 GOOGLE_CLOUD_PROJECT 环境变量"></a>设置 GOOGLE_CLOUD_PROJECT 环境变量</h3><p>网上基本有这个教程：</p><blockquote><p>用过谷歌云或者 ai studio 的，使用 gemini cli 登陆时可能会有些麻烦，可能要打开 console.cloud.google.com，找到你的 project id，然后设置 GOOGLE_CLOUD_PROJECT 环境变量，使用这种方式打开 gemini cli，就可以用了</p></blockquote><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250626080352544.png" alt="image-20250626080352544"></p><p>然后执行这句，这是环境变量。(临时设置, 仅当前会话有效）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export GOOGLE_CLOUD_PROJECT=&quot;your-project-id&quot;</span><br></pre></td></tr></table></figure><p>如果你想让这个永久生效的话：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;export GOOGLE_CLOUD_PROJECT=&quot;your-project-id&quot;&#x27; &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure><p>然后 source ～&#x2F;.zshrc 就可以了。</p><hr><h3 id="报错：API-未启用"><a href="#报错：API-未启用" class="headerlink" title="报错：API 未启用"></a>报错：API 未启用</h3><p>有发现新的错，</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span>API Error<span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;error&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">     <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">403</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Gemini for Google Cloud API has not been used in project xxxxx before or it is disabled. Enable it by visiting</span></span><br><span class="line"><span class="string"> https://console.developers.google.com/apis/api/cloudaicompanion.googleapis.com/overview?project=xxxxxx then retry. If you enabled this API recently, wait a few minutes for the action to propagate to our</span></span><br><span class="line"><span class="string"> systems and retry.&quot;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;errors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">       <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Gemini for Google Cloud API has not been used in project xxxx before or it is disabled. Enable it by visiting</span></span><br><span class="line"><span class="string"> https://console.developers.google.com/apis/api/cloudaicompanion.googleapis.com/overview?project=xxxx then retry. If you enabled this API recently, wait a few minutes for the action to propagate to our</span></span><br><span class="line"><span class="string"> systems and retry.&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;domain&quot;</span><span class="punctuation">:</span> <span class="string">&quot;usageLimits&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;reason&quot;</span><span class="punctuation">:</span> <span class="string">&quot;accessNotConfigured&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;extendedHelp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://console.developers.google.com&quot;</span></span><br><span class="line">       <span class="punctuation">&#125;</span></span><br><span class="line">     <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="string">&quot;PERMISSION_DENIED&quot;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;details&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">       <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;type.googleapis.com/google.rpc.ErrorInfo&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;reason&quot;</span><span class="punctuation">:</span> <span class="string">&quot;SERVICE_DISABLED&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;domain&quot;</span><span class="punctuation">:</span> <span class="string">&quot;googleapis.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;metadata&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">           <span class="attr">&quot;activationUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://console.developers.google.com/apis/api/cloudaicompanion.googleapis.com/overview?project=xxxx&quot;</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;containerInfo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxxx&quot;</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;consumer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;projects/xxxx&quot;</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;service&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cloudaicompanion.googleapis.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;serviceTitle&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Gemini for Google Cloud API&quot;</span></span><br><span class="line">         <span class="punctuation">&#125;</span></span><br><span class="line">       <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">       <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;type.googleapis.com/google.rpc.LocalizedMessage&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;locale&quot;</span><span class="punctuation">:</span> <span class="string">&quot;en-US&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Gemini for Google Cloud API has not been used in project xxxx before or it is disabled. Enable it by visiting</span></span><br><span class="line"><span class="string"> https://console.developers.google.com/apis/api/cloudaicompanion.googleapis.com/overview?project=xxxx then retry. If you enabled this API recently, wait a few minutes for the action to propagate to our</span></span><br><span class="line"><span class="string"> systems and retry.&quot;</span></span><br><span class="line">       <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">       <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;type.googleapis.com/google.rpc.Help&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;links&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">           <span class="punctuation">&#123;</span></span><br><span class="line">             <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Google developers console API activation&quot;</span><span class="punctuation">,</span></span><br><span class="line">             <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://console.developers.google.com/apis/api/cloudaicompanion.googleapis.com/overview?project=xxxx&quot;</span></span><br><span class="line">           <span class="punctuation">&#125;</span></span><br><span class="line">         <span class="punctuation">]</span></span><br><span class="line">       <span class="punctuation">&#125;</span></span><br><span class="line">     <span class="punctuation">]</span></span><br><span class="line">   <span class="punctuation">&#125;</span></span><br><span class="line"> <span class="punctuation">&#125;</span></span><br><span class="line"> <span class="punctuation">]</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>打开报错了的网页 <a href="https://console.developers.google.com/apis/api/cloudaicompanion.googleapis.com/overview?project=xxxxxx%EF%BC%8C%E6%AF%94%E5%A6%82%E8%BF%99%E4%B8%AA%EF%BC%8C%E8%BF%99%E4%B8%AA%E7%BD%91%E9%A1%B5%E6%98%AF%E5%92%8C%E4%BD%A0%E7%9A%84">https://console.developers.google.com/apis/api/cloudaicompanion.googleapis.com/overview?project=xxxxxx，比如这个，这个网页是和你的</a> ID 相关的，然后点击启用。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/d94297cbdd8e54f2d75d126f07f09bcb.png" alt="d94297cbdd8e54f2d75d126f07f09bcb"></p><hr><h3 id="成功运行！"><a href="#成功运行！" class="headerlink" title="成功运行！"></a>成功运行！</h3><p>终于可以用了不容易。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250626075518890.png" alt="image-20250626075518890"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Gemini 也发布了类似的 AI 编程产品 Gemini Cli - 开源命令行 AI 工具&lt;/p&gt;
&lt;p&gt;而且个人谷歌账号登录就能免费用！&lt;/p&gt;
&lt;p&gt;免费额度为每分钟 60 次请求、每天 1000 次请求，是业内最高的免费额度，几乎不会遇到限制。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持 Google 搜索实时联网，为模型提供外部上下文。&lt;/li&gt;
&lt;li&gt;支持 MCP 和扩展，便于功能拓展。&lt;/li&gt;
&lt;li&gt;可自定义提示词和指令，适应个人或团队工作流。&lt;/li&gt;
&lt;li&gt;可在脚本中非交互式调用，实现自动化和集成。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="LLM" scheme="https://xu-hardy.github.io/categories/LLM/"/>
    
    
    <category term="LLM" scheme="https://xu-hardy.github.io/tags/LLM/"/>
    
  </entry>
  
  <entry>
    <title>组队参加 Amazon Q Idea 1000，我们的作品上了 AWS 峰会</title>
    <link href="https://xu-hardy.github.io/%E7%BB%84%E9%98%9F%E5%8F%82%E5%8A%A0-amazon-q-idea-1000%EF%BC%8C%E6%88%91%E4%BB%AC%E7%9A%84%E4%BD%9C%E5%93%81%E4%B8%8A%E4%BA%86-aws-%E5%B3%B0%E4%BC%9A/"/>
    <id>https://xu-hardy.github.io/%E7%BB%84%E9%98%9F%E5%8F%82%E5%8A%A0-amazon-q-idea-1000%EF%BC%8C%E6%88%91%E4%BB%AC%E7%9A%84%E4%BD%9C%E5%93%81%E4%B8%8A%E4%BA%86-aws-%E5%B3%B0%E4%BC%9A/</id>
    <published>2025-07-01T16:00:00.000Z</published>
    <updated>2025-07-03T06:34:24.712Z</updated>
    
    <content type="html"><![CDATA[<p>最近生成式 AI 的比赛很多，也报名了 AWS Idea1000 的比赛，作品登录上了 AWS 的峰会。</p><p>我们的产品名称是“拍立懂”，团队名称是 “凌晨三点的夜”。主要是<strong>拍照识别</strong>商品成分、品牌资质，分析价格合理性，为老年人提供购买决策建议；通过<strong>实时语音聊天交互</strong>，<strong>亲人语音陪伴</strong>老年人购物，满足空巢老人的情感空缺。</p><p>我们的项目团队汇聚了文化创意创业者、资深互联网产品经理、互联网技术博主与 AI 前端工程师等多元背景，形成从商业策略到产品落地的完整闭环。团队成员对创新技术和用户价值怀有共同的热情，彼此协作、优势互补，致力于在商业模式和技术实现上持续突破，为项目注入持久动力。</p><span id="more"></span><p>说人话版本:</p><blockquote><p><strong>“拍立懂”首页：先定位、再拍照、还可语音，一站式搞定逛超市！</strong><br>进入小程序，系统会自动识别你所在的门店，保证每一次推荐都“本地有货”。</p><ul><li>对准商品“拍一拍”，AI 秒识品牌与规格，为你生成成分&#x2F;营养解析；</li><li>打开语音助手，直接问“这款油健康吗？”，即时语音作答；</li><li>想逛逛热卖？下拉切换「日用食品 &#x2F; 零食饮料 &#x2F; 时令食材」，AI 列出今日在售优质清单。<br><strong>拍照 + 语音 + 实时库存</strong>，让你逛超市不再纠结，用 AI 把复杂信息说得清清楚楚。</li></ul></blockquote><p>架构图如下：</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/0f723804988ba318ff6ab24970dfc023.png" alt="0f723804988ba318ff6ab24970dfc023"></p><ol><li><strong>域名与流量入口</strong><ul><li>Route 53 购买域名以及负责域名解析</li><li>ALB 负载均衡 &amp; HTTPS 卸载</li></ul></li><li><strong>应用与模型服务</strong><ul><li><strong>Next.js</strong> (前端+SSR)</li><li><strong>Flask (语音识别、图像识别、流式对题) + FastAPI （OpenAI realtime 代理）</strong></li></ul></li><li><strong>数据与存储</strong><ul><li>S3 存音频&#x2F;图片</li><li><strong>Milvus (Zilliz Cloud on GCP)</strong> 向量检索做 RAG</li></ul></li><li><strong>多模态交互</strong><ul><li>OpenAI Vision + Realtime 实时对话</li></ul></li><li><strong>环境 &amp; CI&#x2F;CD</strong><ul><li>Lightsail 做 POC，懒猫微服异地组网调试</li><li>GitHub Actions 一件打包到 Dockerhub</li><li>Docker-compose 一键部署</li></ul></li></ol><p>这个是最初的设计。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250620102357142.png"></p><ul><li><strong>门店定位（顶部）</strong><ul><li>自动显示 _“上海市黄浦区马当路富民超市”_，说明系统已精准锁定当前购物地点，为后续推荐做铺垫。</li></ul></li><li><strong>商品识别卡片（居中大框）</strong><ul><li>灰阶渐变 + 相机图标，文案 _“对准商品 拍一拍”_。</li><li>点击即可拍照识别商品，进入智能解析流程，是整套体验的“入口 1”。</li></ul></li><li><strong>语音购物助手按钮（绿色条形）</strong><ul><li>显眼的绿色按钮 _“打开语音购物助手”_。</li><li>用户只需轻触，便可与 AI 语音对话，实现“入口 2”。</li></ul></li><li><strong>AI 推荐栏目（下方列表）</strong><ul><li>栏目标题 _“AI 帮你聪明买”_，右侧分类下拉框默认 _“日用食品”_。</li><li>下拉可切换 <em>“零食饮料 &#x2F; 时令食材”</em> 等，列表随之刷新“今日在售”优选商品。</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/f6f98cd0-65ec-41fa-ab5b-1d43b75504b5.png" alt="f6f98cd0-65ec-41fa-ab5b-1d43b75504b5"></p><ul><li><strong>拍一下，AI 帮你把配料表翻译成人话！</strong><br>识别完成后，只需点开「成分分析」，AI 会：<ol><li>精准列出主要成分、配料比例；</li><li>提醒潜在风险（如高糖、高钠或人工添加）；</li><li>结合膳食指南，给出健康建议。<br>如果想进一步了解热量、矿物质等信息，切换到「营养价值」即可；想知道同类好物怎么选？点「选购建议」一键获得。<br><strong>拍立懂，让任何瓶瓶罐罐都不再是“天书”，分分钟看懂喝得放心！</strong></li></ol></li></ul><blockquote><p>“拍一下成分表，让 AI 帮你读懂配料、评估健康影响，真正做到买得安心、喝得放心。”</p></blockquote><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/0375561d-e43e-4618-94be-66439460d91c.png" alt="0375561d-e43e-4618-94be-66439460d91c"></p><blockquote><p><strong>“坚果零食好不好？拍立懂 3 秒告诉你！”</strong><br>拍照上传后，AI 自动识别到「烤坚果夹片 145 g × 24 片」，并细致解析：</p><ul><li><strong>坚果种类</strong>、<strong>外层配料</strong>、<strong>甜味剂 &#x2F; 添加剂</strong> 全部列出；</li><li>逐项点评对心血管、体重管理、过敏风险的影响；</li><li>支持一键切换到「营养价值」查看热量、蛋白质等详细数据，或点「选购建议」获取更健康替代品。<br><strong>拍立懂</strong> —— 把复杂配料表翻译成人话，让零食的健康度一眼可见！</li></ul></blockquote><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250620134244888.png" alt="image-20250620134244888"></p><ul><li><strong>一句话上手语音购物助手</strong><br>点一下麦克风，不用输入、不用切页面，直接对 AI 说：“这款牛奶适合减肥吗？”——拍立懂立刻回答，让逛超市像跟朋友聊天一样简单。<ul><li><strong>极速连接</strong>：3 秒内完成网络 &amp; 麦克风检测</li><li><strong>实时反馈</strong>：对话状态一目了然，杜绝“说了没听见”</li><li><strong>智能引导</strong>：AI 主动提问，帮你快速聚焦购物痛点<br>语音 + AI，让信息检索更高效，让购物决策更轻松！</li></ul></li></ul><blockquote><p>“无需打字，长按语音键即可提问。拍立懂即刻为你解惑，让购物沟通更流畅。”</p></blockquote><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/f5cd2824-be07-4152-8bc9-91bc6ddc6735.jpeg" alt="f5cd2824-be07-4152-8bc9-91bc6ddc6735"></p><ul><li><strong>商业计划书</strong><br><a href="https://edwqcun7v5.feishu.cn/docx/VBtWdFMB3omZxhxT2FGco73MnIe">https://edwqcun7v5.feishu.cn/docx/VBtWdFMB3omZxhxT2FGco73MnIe</a></li><li><strong>产品演示文档</strong><br><a href="https://edwqcun7v5.feishu.cn/docx/RNvldJCQVoU1nixqHjrcZ2TNnfc">https://edwqcun7v5.feishu.cn/docx/RNvldJCQVoU1nixqHjrcZ2TNnfc</a></li></ul><hr><blockquote><p>⏰ <strong>凌晨三点的夜</strong> 还在码字、调参，但有热情就不困。<br><strong>拍立懂</strong>，让爸妈“拍一拍就懂”，也让我们更懂爸妈。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近生成式 AI 的比赛很多，也报名了 AWS Idea1000 的比赛，作品登录上了 AWS 的峰会。&lt;/p&gt;
&lt;p&gt;我们的产品名称是“拍立懂”，团队名称是 “凌晨三点的夜”。主要是&lt;strong&gt;拍照识别&lt;/strong&gt;商品成分、品牌资质，分析价格合理性，为老年人提供购买决策建议；通过&lt;strong&gt;实时语音聊天交互&lt;/strong&gt;，&lt;strong&gt;亲人语音陪伴&lt;/strong&gt;老年人购物，满足空巢老人的情感空缺。&lt;/p&gt;
&lt;p&gt;我们的项目团队汇聚了文化创意创业者、资深互联网产品经理、互联网技术博主与 AI 前端工程师等多元背景，形成从商业策略到产品落地的完整闭环。团队成员对创新技术和用户价值怀有共同的热情，彼此协作、优势互补，致力于在商业模式和技术实现上持续突破，为项目注入持久动力。&lt;/p&gt;</summary>
    
    
    
    <category term="AWS" scheme="https://xu-hardy.github.io/categories/AWS/"/>
    
    
    <category term="AWS" scheme="https://xu-hardy.github.io/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>懒猫微服开发篇（一）：懒猫微服全栈上架指南，一步打包，一键发布</title>
    <link href="https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%BC%80%E5%8F%91%E7%AF%87%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%85%A8%E6%A0%88%E4%B8%8A%E6%9E%B6%E6%8C%87%E5%8D%97%EF%BC%8C%E4%B8%80%E6%AD%A5%E6%89%93%E5%8C%85%EF%BC%8C%E4%B8%80%E9%94%AE%E5%8F%91%E5%B8%83/"/>
    <id>https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%BC%80%E5%8F%91%E7%AF%87%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%85%A8%E6%A0%88%E4%B8%8A%E6%9E%B6%E6%8C%87%E5%8D%97%EF%BC%8C%E4%B8%80%E6%AD%A5%E6%89%93%E5%8C%85%EF%BC%8C%E4%B8%80%E9%94%AE%E5%8F%91%E5%B8%83/</id>
    <published>2025-07-01T16:00:00.000Z</published>
    <updated>2025-07-03T06:34:24.706Z</updated>
    
    <content type="html"><![CDATA[<p>懒猫应用离不开社区的力量，有了各位社区贡献者的支持让懒猫商店的应用越来越丰富。下面示范如何把自己的<strong>全栈应用</strong>上架到懒猫微服。</p><p>官网给出的示例里只有 <strong>3 个必备文件</strong>：<code>lzc-build.yml</code>、<code>lzc-icon.png</code>、<code>lzc-manifest.yml</code>。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250630173852407.png" alt="示例目录结构"></p><ul><li>**<code>lzc-icon.png</code>**：应用图标，必须为  PNG。</li><li>**<code>lzc-build.yml</code>**：定义打包脚本、输出路径与图标路径。</li><li>**<code>lzc-manifest.yml</code>**：应用清单，描述路由规则等。<span id="more"></span></li></ul><h3 id="lzc-build-yml-示例"><a href="#lzc-build-yml-示例" class="headerlink" title="lzc-build.yml 示例"></a><code>lzc-build.yml</code> 示例</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打包预处理，例子里是复制目录，打包前端文件</span></span><br><span class="line"><span class="comment"># 见build.sh这个文件</span></span><br><span class="line"><span class="comment"># rm -rf ./dist</span></span><br><span class="line"><span class="comment"># mkdir -p dist</span></span><br><span class="line"><span class="comment"># 构建后端二进制文件，因为后面写了contentdir是 dist 文件夹，</span></span><br><span class="line"><span class="comment"># 所以dist是打包的上下文</span></span><br><span class="line"><span class="comment"># cp -r backend dist/</span></span><br><span class="line"><span class="comment"># 构建前端，这里就是普通的前端打包命令，只是指定了输出文件夹</span></span><br><span class="line"><span class="comment"># cd ui &amp;&amp; npx vite build --emptyOutDir --outDir ../dist/web</span></span><br><span class="line"><span class="attr">buildscript:</span> <span class="string">sh</span> <span class="string">build.sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># manifest: 指定 lpk 包的 manifest.yml ，一般是这个名字不改</span></span><br><span class="line"><span class="attr">manifest:</span> <span class="string">./lzc-manifest.yml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># contentdir: 前面把前后端打包到这个目录还是。</span></span><br><span class="line"><span class="attr">contentdir:</span> <span class="string">./dist</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pkgout: lpk 包的输出路径</span></span><br><span class="line"><span class="attr">pkgout:</span> <span class="string">./</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># icon 指定 lpk 包 icon 的路径路径，如果不指定将会警告</span></span><br><span class="line"><span class="comment"># icon 仅仅允许 png 后缀的文件</span></span><br><span class="line"><span class="attr">icon:</span> <span class="string">./lzc-icon.png</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># dvshell 指定开发依赖的情况，这个我们后面专门来讲讲</span></span><br><span class="line"><span class="comment"># 这种情况下，选用 alpine:latest 作为基础镜像，在 dependencies 中添加所需要的开发依赖即可</span></span><br><span class="line"><span class="comment"># 如果 dependencies 和 build 同时存在，将会优先使用 dependencies</span></span><br><span class="line"><span class="attr">devshell:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/=http://127.0.0.1:5173</span></span><br><span class="line">  <span class="attr">dependencies:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">nodejs</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">python3</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">py3-pip</span></span><br><span class="line">  <span class="attr">setupscript:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    export npm_config_registry=https://registry.npmmirror.com</span></span><br><span class="line"><span class="string">    export PIP_INDEX_URL=https://pypi.tuna.tsinghua.edu.cn/simple</span></span><br></pre></td></tr></table></figure><p><code>build.sh</code> 执行完后目录结构大致如下：</p><ul><li><strong>dist&#x2F;backend</strong> →  后端（可执行&#x2F;脚本）</li><li><strong>dist&#x2F;web</strong> →  前端（静态文件）</li></ul><hr><h3 id="lzc-manifest-yml-示例"><a href="#lzc-manifest-yml-示例" class="headerlink" title="lzc-manifest.yml 示例"></a><code>lzc-manifest.yml</code> 示例</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">lzc-sdk-version:</span> <span class="number">0.1</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">代办清单Py</span></span><br><span class="line"><span class="attr">package:</span> <span class="string">cloud.lazycat.app.todolistpy</span></span><br><span class="line"><span class="attr">version:</span> <span class="number">0.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">description:</span></span><br><span class="line"><span class="attr">license:</span> <span class="string">https://choosealicense.com/licenses/mit/</span></span><br><span class="line"><span class="attr">homepage:</span></span><br><span class="line"><span class="attr">author:</span></span><br><span class="line"><span class="attr">application:</span></span><br><span class="line">  <span class="attr">subdomain:</span> <span class="string">todolistpy</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/=file:///lzcapp/pkg/content/web</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/api/=exec://3000,./lzcapp/pkg/content/backend/run.sh</span></span><br></pre></td></tr></table></figure><p>routes 这里有三种写法：</p><ol><li><strong>file</strong> 代表文件，一般是纯静态文件，比如打包后的前端文件，在 build.sh 打包的前端问题件，我们前面制定了 content 就是&#x2F;lzcapp&#x2F;pkg&#x2F;content&#x2F;，所以&#x2F;lzcapp&#x2F;pkg&#x2F;content&#x2F;web 也就是刚才的 dist&#x2F;web。这个的意思就是说把跟路由转发这个静态目录，其实就是类似 Nginx 托管静态文件这个样子，只是不需要手动打包，写好命令之后，打包工具帮忙做了这一套。</li><li><code>http(s)://$hostname/$path</code>， 这个是我们印象里的，也就是代理后端，比如&#x2F;api&#x2F;&#x3D;http(s):&#x2F;&#x2F;$hostname&#x2F;$path，其实就类似 Nginx 的 proxy_pass。这个是我们熟知的后端。</li><li><strong>exec</strong>：这个和 http(s)很像，后面多加了一个 run.sh，相当于在转发到 http(s)路由之前，先执行这个脚本。一般是用来一直环境，比如 pip install 什么的，但是由于每个人的环境不一样，还是要使用多个镜像源才保险，我上架的应用就遇到用户通过清华源下载报错 HTTP403 以及 腾讯源下载签名不匹配的问题，或者干脆使用 Docker，这个我们后面再说。</li></ol><p>附上 pip 多源的例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 已有 —— 主索引 &amp; 前两级备用</span></span><br><span class="line">pip config <span class="built_in">set</span>  global.index-url        https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">pip config --add global.extra-index-url https://pypi.mirrors.ustc.edu.cn/simple/</span><br><span class="line">pip config --add global.extra-index-url https://mirrors.bfsu.edu.cn/pypi/web/simple/</span><br><span class="line"></span><br><span class="line"><span class="comment"># ③ 阿里云（华东节点评测最稳）</span></span><br><span class="line">pip config --add global.extra-index-url https://mirrors.aliyun.com/pypi/simple/</span><br><span class="line"></span><br><span class="line"><span class="comment"># ④ 华为云（华南线路友好）</span></span><br><span class="line">pip config --add global.extra-index-url https://repo.huaweicloud.com/repository/pypi/simple/</span><br><span class="line"></span><br><span class="line"><span class="comment"># ⑤ 字节跳动开源镜像（火山引擎，带全站 CDN）</span></span><br><span class="line">pip config --add global.extra-index-url https://mirrors.byteimg.com/pypi/simple/</span><br><span class="line"></span><br><span class="line"><span class="comment"># ⑥ 南京大学镜像（NJU，教育网 &amp; 华东建议保留）</span></span><br><span class="line">pip config --add global.extra-index-url https://mirrors.nju.edu.cn/pypi/web/simple/</span><br></pre></td></tr></table></figure><hr><h3 id="打包与安装"><a href="#打包与安装" class="headerlink" title="打包与安装"></a>打包与安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打包成 LPK</span></span><br><span class="line">lzc-cli project build -o release.lpk</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在线安装 LPK</span></span><br><span class="line">lzc-cli app install release.lpk</span><br></pre></td></tr></table></figure><p>然后是打包，如果缺少 lzc-build.yml，lzc-icon.png，lzc-manifest.yml 三者之一就会报错。</p><p>LPK 是懒猫微服应用商店 APP 的安装包格式，其实可以理解为一个配置文件的压缩包，安装之后其实就是在微服内部启动了一个 alpine 的 image，然后通过 build.sh 安装依赖。</p><p>通过 lzc-docker 来看，直接打包的就是这个 images registry.lazycat.cloud&#x2F;lzc&#x2F;lzcapp:3.20.3</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250630181419299.png" alt="image-20250630181419299"></p><p>命令如下<strong>lzc-docker history –no-trunc registry.lazycat.cloud&#x2F;lzc&#x2F;lzcapp:3.20.3</strong>，能够看到是 Alpine 作为 base image，然后更换中科大的源，以及安装 <strong>gcompat</strong> 以兼容 glibc 程序。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(base) lzcbox-029c588e ~ <span class="comment"># lzc-docker history --no-trunc registry.lazycat.cloud/lzc/lzcapp:3.20.3</span></span><br><span class="line">IMAGE                                                                     CREATED        CREATED BY                                                                                                SIZE      COMMENT</span><br><span class="line">sha256:ba7a533c869a26d89e83bdc5ddb978df5a3502ac91452422a649d0d3cf52190b   7 months ago   RUN /bin/sh -c apk add gcompat <span class="comment"># buildkit                                                                 2.48MB    buildkit.dockerfile.v0</span></span><br><span class="line">&lt;missing&gt;                                                                 7 months ago   RUN /bin/sh -c sed -i <span class="string">&#x27;s/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g&#x27;</span> /etc/apk/repositories <span class="comment"># buildkit   97B       buildkit.dockerfile.v0</span></span><br><span class="line">&lt;missing&gt;                                                                 9 months ago   CMD [<span class="string">&quot;/bin/sh&quot;</span>]                                                                                           0B        buildkit.dockerfile.v0</span><br><span class="line">&lt;missing&gt;                                                                 9 months ago   ADD alpine-minirootfs-3.20.3-x86_64.tar.gz / <span class="comment"># buildkit                                                   7.8MB     buildkit.dockerfile.v0</span></span><br><span class="line">(base) lzcbox-029c588e ~ <span class="comment">#</span></span><br></pre></td></tr></table></figure><p>甚至可以看到，这个 image 是连 bash 以及各种开发运行时都没有的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(base) lzcbox-029c588e ~ # lzc-docker run -it registry.lazycat.cloud/lzc/lzcapp:3.20.3 bash</span><br><span class="line">docker: Error response from daemon: failed to create task for container: failed to create shim task: OCI runtime create failed: runc create failed: unable to start container process: error during container init: exec: &quot;bash&quot;: executable file not found in $PATH: unknown.</span><br><span class="line">(base) lzcbox-029c588e ~ # lzc-docker run -it registry.lazycat.cloud/lzc/lzcapp:3.20.3 sh</span><br><span class="line">/ # go</span><br><span class="line">sh: go: not found</span><br><span class="line">/ # npm</span><br><span class="line">sh: npm: not found</span><br><span class="line">/ # pip</span><br><span class="line">sh: pip: not found</span><br><span class="line">/ # python</span><br><span class="line">sh: python: not found</span><br><span class="line">/ #</span><br></pre></td></tr></table></figure><p>所以这个 backend 文件夹的 run.sh 是拿来安装 Python 依赖的。而前端是使用本地的 npm 打包的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line"></span><br><span class="line"># 切换到当前目录</span><br><span class="line">cd &quot;$(dirname &quot;$0&quot;)&quot;</span><br><span class="line">sed -i &#x27;s/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g&#x27; /etc/apk/repositories</span><br><span class="line">apk update</span><br><span class="line">apk add python3 py3-pip</span><br><span class="line"># ❶ 设主索引，只能有一个</span><br><span class="line"># 已有 —— 主索引 &amp; 前两级备用</span><br><span class="line">pip config set  global.index-url        https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">pip config --add global.extra-index-url https://pypi.mirrors.ustc.edu.cn/simple/</span><br><span class="line">pip config --add global.extra-index-url https://mirrors.bfsu.edu.cn/pypi/web/simple/</span><br><span class="line"></span><br><span class="line"># ③ 阿里云（华东节点评测最稳）</span><br><span class="line">pip config --add global.extra-index-url https://mirrors.aliyun.com/pypi/simple/</span><br><span class="line"></span><br><span class="line"># ④ 华为云（华南线路友好）</span><br><span class="line">pip config --add global.extra-index-url https://repo.huaweicloud.com/repository/pypi/simple/</span><br><span class="line"></span><br><span class="line"># ⑤ 字节跳动开源镜像（火山引擎，带全站 CDN）</span><br><span class="line">pip config --add global.extra-index-url https://mirrors.byteimg.com/pypi/simple/</span><br><span class="line"></span><br><span class="line"># ⑥ 南京大学镜像（NJU，教育网 &amp; 华东建议保留）</span><br><span class="line">pip config --add global.extra-index-url https://mirrors.nju.edu.cn/pypi/web/simple/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pip install -r ./requirements.txt --break-system-packages</span><br><span class="line">python3 app.py</span><br></pre></td></tr></table></figure><p>安装之后的 app 可以通过 lzc-docker 查看，也可以使用 Dozze 查看日志，一般 debug 时候的时候会看这个。</p><p>DOZZL 需要安装开发者工具，然后使用<a href="https://dev.设备名.heiyu.space/dozzle/%E8%AE%BF%E9%97%AE%E3%80%82">https://dev.设备名.heiyu.space/dozzle/访问。</a></p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250630190230526.png" alt="image-20250630190230526"></p><p>一般来说部署有两个 pod，一个是 App-1 结尾的，主要是涉及到转发，run.sh 自动安装依赖，以及健康检查。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PATH:&quot;/&quot; is served by &quot;file&quot;://&quot;/lzcapp/pkg/content/dist&quot;</span><br><span class="line">PATH:&quot;/api/&quot; is served by &quot;http&quot;://&quot;host.lzcapp:53443&quot;</span><br><span class="line">health check finished</span><br></pre></td></tr></table></figure><p>应用名字-1 结尾的，这个才是应用的日志。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[2025-06-29 17:29:29 +0800] [1] [INFO] Starting gunicorn 23.0.0</span><br><span class="line">[2025-06-29 17:29:29 +0800] [1] [INFO] Listening at: http://0.0.0.0:9527 (1)</span><br><span class="line">[2025-06-29 17:29:29 +0800] [1] [INFO] Using worker: sync</span><br><span class="line">[2025-06-29 17:29:29 +0800] [9] [INFO] Booting worker with pid: 9</span><br></pre></td></tr></table></figure><p>希望大家都能够多多为懒猫微服贡献应用。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;懒猫应用离不开社区的力量，有了各位社区贡献者的支持让懒猫商店的应用越来越丰富。下面示范如何把自己的&lt;strong&gt;全栈应用&lt;/strong&gt;上架到懒猫微服。&lt;/p&gt;
&lt;p&gt;官网给出的示例里只有 &lt;strong&gt;3 个必备文件&lt;/strong&gt;：&lt;code&gt;lzc-build.yml&lt;/code&gt;、&lt;code&gt;lzc-icon.png&lt;/code&gt;、&lt;code&gt;lzc-manifest.yml&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250630173852407.png&quot; alt=&quot;示例目录结构&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;**&lt;code&gt;lzc-icon.png&lt;/code&gt;**：应用图标，必须为  PNG。&lt;/li&gt;
&lt;li&gt;**&lt;code&gt;lzc-build.yml&lt;/code&gt;**：定义打包脚本、输出路径与图标路径。&lt;/li&gt;
&lt;li&gt;**&lt;code&gt;lzc-manifest.yml&lt;/code&gt;**：应用清单，描述路由规则等。</summary>
    
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/categories/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
    
    <category term="开发" scheme="https://xu-hardy.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>给群晖安装Iperf3，一键局域网测速</title>
    <link href="https://xu-hardy.github.io/%E7%BB%99%E7%BE%A4%E6%99%96%E5%AE%89%E8%A3%85iperf3%EF%BC%8C%E4%B8%80%E9%94%AE%E5%B1%80%E5%9F%9F%E7%BD%91%E6%B5%8B%E9%80%9F/"/>
    <id>https://xu-hardy.github.io/%E7%BB%99%E7%BE%A4%E6%99%96%E5%AE%89%E8%A3%85iperf3%EF%BC%8C%E4%B8%80%E9%94%AE%E5%B1%80%E5%9F%9F%E7%BD%91%E6%B5%8B%E9%80%9F/</id>
    <published>2025-07-01T16:00:00.000Z</published>
    <updated>2025-07-03T06:34:24.711Z</updated>
    
    <content type="html"><![CDATA[<p>群晖默认不带 iperf3，所以需要套件来安装：</p><p>套件中心搜索 SynoCli，然后安装 SynoCli Monitor Tools ，里面有常见的监控工具。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250615183217020.png" alt="image-20250615183217020"></p><p>然后在群晖上启动服务端：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name@qun:~$ iperf3 -s</span><br><span class="line">-----------------------------------------------------------</span><br><span class="line">Server listening on 5201 (test #1)</span><br><span class="line">-----------------------------------------------------------</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在 Mac 上测速，iperf3 -c 和</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250615184708521.png" alt="image-20250615184708521"></p><p>这两个命令的差别关键在于 <strong>数据传输方向</strong>，也就是谁是“发”谁是“收”。</p><hr><h3 id="✅-iperf3-c"><a href="#✅-iperf3-c" class="headerlink" title="✅ iperf3 -c &lt;server_ip&gt;"></a>✅ <code>iperf3 -c &lt;server_ip&gt;</code></h3><ul><li><strong>含义</strong>：客户端主动发数据，服务器接收。</li><li><strong>方向</strong>：📤 客户端 → 服务器（上传测试）</li><li><strong>谁发数据？</strong>：客户端</li><li><strong>谁测带宽？</strong>：客户端测发送速度，服务器测接收速度。</li></ul><p>🧪 示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iperf3 -c 192.168.5.171</span><br></pre></td></tr></table></figure><p>表示测试<strong>从你这台机器上传数据到服务器的带宽</strong>。</p><hr><h3 id="✅-iperf3-c-R"><a href="#✅-iperf3-c-R" class="headerlink" title="✅ iperf3 -c &lt;server_ip&gt; -R"></a>✅ <code>iperf3 -c &lt;server_ip&gt; -R</code></h3><ul><li><strong>含义</strong>：反向测试，客户端建立连接后，让服务器发数据。</li><li><strong>方向</strong>：📥 服务器 → 客户端（下载测试）</li><li><strong>谁发数据？</strong>：服务器</li><li><strong>谁测带宽？</strong>：客户端测接收速度，服务器测发送速度。</li></ul><p>🧪 示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iperf3 -c 192.168.5.171 -R</span><br></pre></td></tr></table></figure><p>表示测试<strong>从服务器下载数据到你的机器的带宽</strong>。</p><hr><h3 id="🔁-表格对比总结："><a href="#🔁-表格对比总结：" class="headerlink" title="🔁 表格对比总结："></a>🔁 表格对比总结：</h3><table><thead><tr><th>命令</th><th>数据方向</th><th>谁发送</th><th>谁接收</th><th>测的是什么带宽</th></tr></thead><tbody><tr><td><code>iperf3 -c</code></td><td>客户端 → 服务器</td><td>客户端</td><td>服务器</td><td><strong>上传带宽</strong></td></tr><tr><td><code>iperf3 -c -R</code></td><td>服务器 → 客户端</td><td>服务器</td><td>客户端</td><td><strong>下载带宽</strong></td></tr></tbody></table><hr><h3 id="🎯-提示："><a href="#🎯-提示：" class="headerlink" title="🎯 提示："></a>🎯 提示：</h3><ul><li>二者都只能测试<strong>一个方向</strong>，不会自动“双向”测试。</li><li>如果你想做双向测试，请手动运行这两个命令各一次。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;群晖默认不带 iperf3，所以需要套件来安装：&lt;/p&gt;
&lt;p&gt;套件中心搜索 SynoCli，然后安装 SynoCli Monitor Tools ，里面有常见的监控工具。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com</summary>
      
    
    
    
    <category term="群晖" scheme="https://xu-hardy.github.io/categories/%E7%BE%A4%E6%99%96/"/>
    
    
    <category term="家庭网络" scheme="https://xu-hardy.github.io/tags/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>Lighting 原生不支持OTG！</title>
    <link href="https://xu-hardy.github.io/lighting-%E5%8E%9F%E7%94%9F%E4%B8%8D%E6%94%AF%E6%8C%81otg%EF%BC%81/"/>
    <id>https://xu-hardy.github.io/lighting-%E5%8E%9F%E7%94%9F%E4%B8%8D%E6%94%AF%E6%8C%81otg%EF%BC%81/</id>
    <published>2025-07-01T16:00:00.000Z</published>
    <updated>2025-07-03T06:34:24.711Z</updated>
    
    <content type="html"><![CDATA[<p>我还留着 Lighting 的设备，由于大疆 pocket3 最近更新了直连手机文件管理器的功能，所以试试。</p><p>用了 Apple 的原装线连接 pocket3 和 iPhone 结果没反应，但是在 IPAD 上就能够成正常连接。</p><p>然后换了移动硬盘连接 IPhone 同样也不行，和 IPhone 的售后 battle 了好久对方也说不明白。最后还是 Apple 论坛上找找到一个帖子，</p><p>Lighting 原生不支持 OTG，还得买转接头，这算盘打的真响。</p><span id="more"></span><p><a href="https://discussionschinese.apple.com/thread/252659031?=undefined&previousThread=255169304321&sortBy=rank">https://discussionschinese.apple.com/thread/252659031?=undefined&amp;previousThread=255169304321&amp;sortBy=rank</a></p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250624115019794.png" alt="image-20250624115019794"></p><p>最后感谢欧盟，要求 Apple 更换 Typec 接口，解决了 USB2.0 的问题，也可以和安卓设备一样用高速传输了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;我还留着 Lighting 的设备，由于大疆 pocket3 最近更新了直连手机文件管理器的功能，所以试试。&lt;/p&gt;
&lt;p&gt;用了 Apple 的原装线连接 pocket3 和 iPhone 结果没反应，但是在 IPAD 上就能够成正常连接。&lt;/p&gt;
&lt;p&gt;然后换了移动硬盘连接 IPhone 同样也不行，和 IPhone 的售后 battle 了好久对方也说不明白。最后还是 Apple 论坛上找找到一个帖子，&lt;/p&gt;
&lt;p&gt;Lighting 原生不支持 OTG，还得买转接头，这算盘打的真响。&lt;/p&gt;</summary>
    
    
    
    <category term="Apple" scheme="https://xu-hardy.github.io/categories/Apple/"/>
    
    
    <category term="Apple" scheme="https://xu-hardy.github.io/tags/Apple/"/>
    
  </entry>
  
  <entry>
    <title>MacOS 26 beta 如何恢复启动台</title>
    <link href="https://xu-hardy.github.io/macos-26-beta-%E5%A6%82%E4%BD%95%E6%81%A2%E5%A4%8D%E5%90%AF%E5%8A%A8%E5%8F%B0/"/>
    <id>https://xu-hardy.github.io/macos-26-beta-%E5%A6%82%E4%BD%95%E6%81%A2%E5%A4%8D%E5%90%AF%E5%8A%A8%E5%8F%B0/</id>
    <published>2025-07-01T16:00:00.000Z</published>
    <updated>2025-07-03T06:34:24.712Z</updated>
    
    <content type="html"><![CDATA[<p>苹果最新版的系统使用了年份命名，主要是毛玻璃风格，虽然毛玻璃用了几天慢慢习惯了。</p><p>另一个槽点是 apple 把启动台去掉了，改成了 apps，用搜索栏统一搜索。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/afe4c7a5c5be827826a5052bef99b15d.png" alt="afe4c7a5c5be827826a5052bef99b15d"></p><p>除了检索应用，也能检索邮件和文件什么的，属于是一键搜索了。</p><span id="more"></span><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/f2ffc0aca969718696707c309990f94a.png" alt="f2ffc0aca969718696707c309990f94a"></p><p>那么我们怎么改原来的启动台呢？执行这两个命令然后重启：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> -p /Library/Preferences/FeatureFlags/Domain</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> defaults write /Library/Preferences/FeatureFlags/Domain/SpotlightUI.plist SpotlightPlus -dict Enabled -bool <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>GPT 解释如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">#### 第 1 行：</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">sudo mkdir -p /Library/Preferences/FeatureFlags/Domain</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">* 创建一个目录用于配置 **macOS 内部功能标志（FeatureFlags）**。</span><br><span class="line">* `-p` 参数确保中间目录不存在时也一并创建。</span><br><span class="line"></span><br><span class="line">#### 第 2 行：</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">sudo defaults write /Library/Preferences/FeatureFlags/Domain/SpotlightUI.plist SpotlightPlus -dict Enabled -bool false</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">* 使用 macOS `defaults` 命令写入系统级别的配置文件。</span><br><span class="line">* `SpotlightUI.plist` 是控制 Spotlight（聚焦搜索）的功能标志文件。</span><br><span class="line">* `SpotlightPlus` 是 macOS 14 Sonoma 起的一个实验性 Spotlight 增强功能。</span><br><span class="line">* `Enabled -bool false` 意思是**禁用 Spotlight Plus（新版搜索界面）**。</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">### 🧩 背景用途：</span><br><span class="line"></span><br><span class="line">这个配置被用来：</span><br><span class="line"></span><br><span class="line">| 场景                 | 描述                                       |</span><br><span class="line">| ------------------ | ---------------------------------------- |</span><br><span class="line">| 💻 macOS Sonoma 用户 | 禁用默认启用的“Spotlight Plus”功能，恢复旧版 Spotlight |</span><br><span class="line">| 🧪 实验功能控制          | macOS 通过隐藏的 feature flag 启用或禁用某些 GUI 功能  |</span><br><span class="line">| ⚙️ 解决兼容问题          | 有些用户觉得新版 Spotlight 太慢或不兼容快捷键脚本，想禁用       |</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">### 🚨 注意事项：</span><br><span class="line"></span><br><span class="line">1. 更改后可能需要 **重启系统或注销登录** 才能生效。</span><br><span class="line">2. 如果系统升级，Apple 可能会重置该设置。</span><br><span class="line">3. 这种方法是“非公开支持”的隐藏设置，未来 macOS 可能废弃此路径。</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">如果你想恢复 Spotlight Plus，只需执行：</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">sudo defaults delete /Library/Preferences/FeatureFlags/Domain/SpotlightUI.plist SpotlightPlus</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">或者将 `-bool true` 写回去。</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">如你还有其他想隐藏或禁用的 macOS 功能（比如 Siri、Stage Manager、控制中心某模块），我可以帮你查找对应的 `defaults write` 配置。需要吗？</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>重启之后我们的启动台就回来了：</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/dbd2d68cadcb6d80d8df9cbfe240dace.png" alt="dbd2d68cadcb6d80d8df9cbfe240dace"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;苹果最新版的系统使用了年份命名，主要是毛玻璃风格，虽然毛玻璃用了几天慢慢习惯了。&lt;/p&gt;
&lt;p&gt;另一个槽点是 apple 把启动台去掉了，改成了 apps，用搜索栏统一搜索。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/afe4c7a5c5be827826a5052bef99b15d.png&quot; alt=&quot;afe4c7a5c5be827826a5052bef99b15d&quot;&gt;&lt;/p&gt;
&lt;p&gt;除了检索应用，也能检索邮件和文件什么的，属于是一键搜索了。&lt;/p&gt;</summary>
    
    
    
    <category term="Apple" scheme="https://xu-hardy.github.io/categories/Apple/"/>
    
    
    <category term="Apple" scheme="https://xu-hardy.github.io/tags/Apple/"/>
    
  </entry>
  
</feed>
