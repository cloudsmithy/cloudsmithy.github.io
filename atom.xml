<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>镜湖</title>
  
  
  <link href="https://xu-hardy.github.io/atom.xml" rel="self"/>
  
  <link href="https://xu-hardy.github.io/"/>
  <updated>2025-06-30T08:38:22.824Z</updated>
  <id>https://xu-hardy.github.io/</id>
  
  <author>
    <name>Xu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>懒猫微服入门篇（零）：开箱初探，硬件亮相</title>
    <link href="https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%85%A5%E9%97%A8%E7%AF%87%EF%BC%88%E9%9B%B6%EF%BC%89%EF%BC%9A%E5%BC%80%E7%AE%B1%E5%88%9D%E6%8E%A2%EF%BC%8C%E7%A1%AC%E4%BB%B6%E4%BA%AE%E7%9B%B8/"/>
    <id>https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%85%A5%E9%97%A8%E7%AF%87%EF%BC%88%E9%9B%B6%EF%BC%89%EF%BC%9A%E5%BC%80%E7%AE%B1%E5%88%9D%E6%8E%A2%EF%BC%8C%E7%A1%AC%E4%BB%B6%E4%BA%AE%E7%9B%B8/</id>
    <published>2025-07-01T16:00:00.000Z</published>
    <updated>2025-06-30T08:38:22.824Z</updated>
    
    <content type="html"><![CDATA[<p>用了一个半月的懒猫微服，来写一个伪开箱。机甲风格外壳也得值个几百块，这个外壳还支持拆机之后全身水洗。在桌面上确实颜值很高，在各个小主机都是塑料外壳的时代，属于用心良苦了。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250619161920055.png" alt="image-20250619161920055"></p><p>这张图是创始人在用户群里发的实拍图：</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/6c54b4ac4c8d437375149b66ca7d6aee.jpg" alt="6c54b4ac4c8d437375149b66ca7d6aee"></p><p>据群友们聊天说，这台机器已经经过了多个版本迭代，最后定型为现在这个样子。以后不要再用鞋盒了。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/6356f1ef9911435c101dc8d9c4eec591.png" alt="6356f1ef9911435c101dc8d9c4eec591"></p><hr><h3 id="系统与配置"><a href="#系统与配置" class="headerlink" title="系统与配置"></a>系统与配置</h3><p>通过 <code>neofetch</code> 可以看到，这台机器预装的是 Debian 12，实际系统也做了不少魔改优化。核心配置如下：</p><ul><li><strong>CPU</strong>：Intel Core i5-1155G7 @ 4.5GHz（4 核心 8 线程），相当于现在主流的 N305 强了很多。</li><li><strong>内存</strong>：笔记本内存 DDR4，最大可扩展至 32GB，3200MHZ （买的时候可以谈从 16G 升级到 32G）</li><li><strong>显卡</strong>：Intel Iris Xe Graphics，英特尔最强核显，核显频率最高 1.35GHz，支持 4K 高清输出与 H.265 视频硬解</li><li><strong>存储</strong>：<ul><li>系统盘：512GB PCIe 4.0 NVMe，用于运行系统组件和保存根目录文件。</li><li>数据盘：两个 2.5 寸 SATA 盘位，可以组 RAID0 或者 RAID1。SSD 或者 HDD 不限。</li></ul></li><li><strong>主板</strong>：看上是自己做的，叫做 YENTEK LC2580，启动热键是 F11，进入 BIOS 的按键是 <code>&lt;DEL&gt;</code> 。 没有锁 BIOS，也支持刷成其他的系统。</li></ul><p>运行 <code>dmidecode</code> 可见内存状态如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> dmidecode -t memory | grep -e <span class="string">&quot;Size&quot;</span> -e <span class="string">&quot;Form Factor&quot;</span> -e <span class="string">&quot;Locator&quot;</span></span><br><span class="line">        Size: No Module Installed</span><br><span class="line">        Form Factor: Unknown</span><br><span class="line">        Locator: Controller1-ChannelA-DIMM0</span><br><span class="line">        Bank Locator: BANK 0</span><br><span class="line">        Size: 32 GB</span><br><span class="line">        Form Factor: SODIMM</span><br><span class="line">        Locator: Controller0-ChannelA-DIMM0</span><br><span class="line">        Bank Locator: BANK 0</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure><hr><h3 id="网络性能"><a href="#网络性能" class="headerlink" title="网络性能"></a>网络性能</h3><p>网络配置方面也比较主流：</p><ul><li><strong>有线</strong>：2.5G 单网口，可惜我的路由器还是千兆不能完全发挥其能力</li><li><strong>无线</strong>：Intel AX210，支持 WiFi 6 可以跑满千兆。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(base) lzcbox-029c588e ~ <span class="comment"># dmesg | grep -i ethernet</span></span><br><span class="line">[    2.946824] Intel(R) 2.5G Ethernet Linux Driver</span><br><span class="line">[    9.157839] Bluetooth: BNEP (Ethernet Emulation) ver 1.3</span><br><span class="line">(base) lzcbox-029c588e ~ <span class="comment"># lspci | grep -i network</span></span><br><span class="line">04:00.0 Network controller: Intel Corporation Wi-Fi 6 AX210/AX211/AX411 160MHz (rev 1a)</span><br></pre></td></tr></table></figure><p>于 WIFI6 来说协商速率一般是 2402Mbps，所以就算达到协商速率的一般的话，也就是差不多千兆，加上很多家用路由也仅仅是千兆，我为了 POE 供电所以牺牲了部分内网带宽，所以没有跑满。如果你有 2.5G 的机器和交换机，那么一定可以跑的很舒服，基本就到机械硬盘的上限了。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250619213746613.png" alt="image-20250619213746613"></p><hr><h3 id="CPU-性跑分"><a href="#CPU-性跑分" class="headerlink" title="CPU 性跑分"></a>CPU 性跑分</h3><p>跑了几次 geekbench6，能够看到单核心的性能有 1700+，由于测速的同时还在运行很多系统应用，所以实际的数值比这个还要大一些。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250619215814429.png" alt="image-20250619215814429"></p><p>后面用了 EndeavourOS KDE 的随身碟，能够看到单核心分数还能再提升。这个 CPU 跑 docker，K8S 甚至虚拟机都没啥问题了。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250619215631160.png" alt="image-20250619215631160"></p><hr><h3 id="外部接口"><a href="#外部接口" class="headerlink" title="外部接口"></a>外部接口</h3><p>机器背部接口一览，我这边插了一张采集卡，非常实用：</p><p>接口方面也非常丰富：</p><ul><li><strong>USB</strong>：USB 3.0 x3</li><li><strong>Type-C</strong>：USB 3.2 Type-C x2，支持反冲保护</li><li><strong>视频输出</strong>：HDMI 2.1 x1，支持 4K 输出、多声道音频</li><li><strong>音频接口</strong>：3.5mm 耳机口，支持高阻抗耳机</li><li><strong>电源接口</strong>：DC 5525</li></ul><blockquote><p>整机搭载一枚 17mm 涡轮静音风扇，结合滚珠轴承与自研调速算法，实际体验确实安静，确实没有 3.5 寸硬盘那种炒豆子的声音了。</p></blockquote><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/15b358f335c93c896b98292e49ee0bf6.jpg" alt="15b358f335c93c896b98292e49ee0bf6"></p><p>可以看到 Deepin 的 团队出来做产品的能力还是挺强的，从主板到 OS 的深度定制，技术功底可见一斑。</p><p>下面是群友的发的效果图，实物质感确实很棒，欢迎找我下单体验！</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/cd96e69cd34841430873db544aae96a4.png" alt="cd96e69cd34841430873db544aae96a4"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;用了一个半月的懒猫微服，来写一个伪开箱。机甲风格外壳也得值个几百块，这个外壳还支持拆机之后全身水洗。在桌面上确实颜值很高，在各个小主机都是塑料外壳的时代，属于用心良苦了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/</summary>
      
    
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/categories/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
    
    <category term="硬件与外设" scheme="https://xu-hardy.github.io/tags/%E7%A1%AC%E4%BB%B6%E4%B8%8E%E5%A4%96%E8%AE%BE/"/>
    
  </entry>
  
  <entry>
    <title>懒猫微服实战入门（一）： 从开启SSH到免密登录，一步步教你搞定远程管理</title>
    <link href="https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A-%E4%BB%8E%E5%BC%80%E5%90%AFssh%E5%88%B0%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95%EF%BC%8C%E4%B8%80%E6%AD%A5%E6%AD%A5%E6%95%99%E4%BD%A0%E6%90%9E%E5%AE%9A%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
    <id>https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A-%E4%BB%8E%E5%BC%80%E5%90%AFssh%E5%88%B0%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95%EF%BC%8C%E4%B8%80%E6%AD%A5%E6%AD%A5%E6%95%99%E4%BD%A0%E6%90%9E%E5%AE%9A%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86/</id>
    <published>2025-07-01T16:00:00.000Z</published>
    <updated>2025-06-30T08:38:22.824Z</updated>
    
    <content type="html"><![CDATA[<p>对于很多资深的 NAS 玩家来说，拿到一台机器首先要配置远程登录和环境依赖。懒猫上其实可以实现云计算讲的 Iass - Pass -Sass 这三个层级，不过对于资深玩家而言，肯定是要从 Infra 这个级别入手的。</p><p>官方文档如下：<br><a href="https://developer.lazycat.cloud/ssh.html">https://developer.lazycat.cloud/ssh.html</a></p><p>安装懒猫开发者工具，然后再右上角能够看到 sshd 服务的状态。<br>然后点击开启，之后我们才可以使用 ssh 登录，在写这篇文章测试的时候，我关闭了这个按钮，再去 ssh 直接就报错了。</p><p><img src="https://lzc-playground-1301583638.cos.ap-chengdu.myqcloud.com/guidelines/459/823b1afe-fb70-4866-8303-aa051e9b65bc.png" alt="image.png" title="image.png"></p><p>默认是 root 身份登录，密码在开发者工具里启动的时候设置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@&lt;your-service-name&gt;.heiyu.space</span><br></pre></td></tr></table></figure><p>如果觉得密码麻烦，也可以导入密钥，更加安全：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id -i ~/.ssh/id_ed25519 root@xxxxx.heiyu.space</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: &quot;/Users/xu/.ssh/id_ed25519.pub&quot;</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys</span><br><span class="line">root@micro.heiyu.space&#x27;s password:</span><br><span class="line"></span><br><span class="line">Number of key(s) added:        1</span><br><span class="line"></span><br><span class="line">Now try logging into the machine, with: &quot;ssh -i /.ssh/id_ed25519 &#x27;root@xxxx.heiyu.space&#x27;&quot;</span><br><span class="line">and check to make sure that only the key(s) you wanted were added.</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果觉得 root 用户不安全的话，可以新建一个日常用户，然后加到 docker 组里面，也能正常使用 docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> useradd -m -s /bin/bash user1</span><br><span class="line"></span><br><span class="line">usermod -aG docker user1</span><br><span class="line"></span><br><span class="line">usermod -aG <span class="built_in">sudo</span> user1</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://lzc-playground-1301583638.cos.ap-chengdu.myqcloud.com/guidelines/459/e40ad428-93be-487e-880c-d37c76f27fc1.png" alt="image.png" title="image.png"></p><p>如果遇到到 root 组会有无法使用 sudo 的问题，请独立安装，sudo 是单独的软件包,需要安装才有.并不是所有 Linux 都有 sudo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt update &amp;&amp; apt install <span class="built_in">sudo</span></span><br></pre></td></tr></table></figure><p>注意：要开着懒猫微服 APP ，否则无法使用 heiyu.space 提供的穿透服务。</p><p><img src="https://lzc-playground-1301583638.cos.ap-chengdu.myqcloud.com/guidelines/459/a303adbb-d3f5-4fa2-9a6d-6d3b25abbe34.png" alt="image.png" title="image.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;对于很多资深的 NAS 玩家来说，拿到一台机器首先要配置远程登录和环境依赖。懒猫上其实可以实现云计算讲的 Iass - Pass -Sass 这三个层级，不过对于资深玩家而言，肯定是要从 Infra 这个级别入手的。&lt;/p&gt;
&lt;p&gt;官方文档如下：&lt;br&gt;&lt;a href=&quot;h</summary>
      
    
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/categories/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/tags/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
  </entry>
  
  <entry>
    <title>懒猫微服实战入门（十）：通过 nmtui 设置静态 IP，接入旁路由实现科学上网</title>
    <link href="https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E5%8D%81%EF%BC%89%EF%BC%9A%E9%80%9A%E8%BF%87-nmtui-%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81-ip%EF%BC%8C%E6%8E%A5%E5%85%A5%E6%97%81%E8%B7%AF%E7%94%B1%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    <id>https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E5%8D%81%EF%BC%89%EF%BC%9A%E9%80%9A%E8%BF%87-nmtui-%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81-ip%EF%BC%8C%E6%8E%A5%E5%85%A5%E6%97%81%E8%B7%AF%E7%94%B1%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</id>
    <published>2025-07-01T16:00:00.000Z</published>
    <updated>2025-06-30T08:38:22.824Z</updated>
    
    <content type="html"><![CDATA[<p>日常开发中，我主要使用的是 <strong>MacBook</strong> 作为主力机。但有些软件、驱动或容器服务必须在 <strong>X86 架构环境下测试</strong>，这时懒猫微服就是一个很好的辅助平台。然而在一些网络场景下，为了访问特定服务，还需要将这台设备接入旁路由中。</p><p>不然我访问 Dockerhub 是这样的，经常会超时，只能用不是很全的镜像站。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250530113416141.png" alt="image-20250530113416141"></p><p>群晖等设备提供的图形化网络面板，懒猫微服这类轻量系统没有 GUI，只能使用命令行工具。NetworkManager 提供了一个非常好用的文本界面工具：<code>nmtui</code>。</p><h2 id="什么是-nmtui"><a href="#什么是-nmtui" class="headerlink" title="什么是 nmtui"></a>什么是 <code>nmtui</code></h2><p><code>nmtui</code> 是 NetworkManager 的 TUI（Text-based User Interface）组件，界面类似简化版 GUI，操作简单，功能却很强大。通过它，我们可以方便地完成以下配置：</p><ul><li>选择并连接网络设备（有线或无线）</li><li>设置 <strong>手动 IP 地址</strong></li><li>指定 <strong>网关</strong>、<strong>DNS 服务器</strong></li><li>管理 <strong>路由策略</strong></li><li>开启或关闭 DHCP 自动获取功能</li></ul><p>命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmtui</span><br></pre></td></tr></table></figure><hr><h2 id="设置静态-IP-接入旁路由"><a href="#设置静态-IP-接入旁路由" class="headerlink" title="设置静态 IP 接入旁路由"></a>设置静态 IP 接入旁路由</h2><p>打开 <code>nmtui</code> 后，进入“Edit a connection”，编辑你连接的网卡（如 <code>enp2s0</code>），手动设置 IP 地址、网关和 DNS。如下图所示，我将所有网络解析都指向了旁路由（比如是 OpenWrt 或其他带翻墙能力的设备）：</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250530113654399.png" alt="nmtui IPv4 设置"></p><p>确保设置完成后，运行以下命令重新应用配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmcli device reapply enp2s0</span><br></pre></td></tr></table></figure><p>如果配置无误，网络将立即切换到静态 IP 并走旁路由的网关。</p><hr><h2 id="验证效果"><a href="#验证效果" class="headerlink" title="验证效果"></a>验证效果</h2><p>这样子终端就能下载 Docker image 了，其实到这一步已经完成了。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250530113410246.png" alt="Google 搜索页面"></p><p>接下来，可以通过懒猫微服中安装的浏览器测试网络是否生效。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250530113238801.png" alt="YouTube 套娃"></p><p>继续打开 YouTube 首页，也能顺利访问并加载视频页面：</p><p>你没看错，这是 <strong>浏览器里的浏览器</strong>，实现了一个“浏览器套娃”的效果。😂</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250530112240064.png" alt="image-20250530112240064"></p><p>最终，我播放了银临的《牵丝戏》，人美歌也好听～</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250530112250228.png" alt="银临《牵丝戏》"></p><p><img src="https://lzc-playground-1301583638.cos.ap-chengdu.myqcloud.com/guidelines/459/59ab31d4-adf8-4c8e-9775-1b37710f570a.png" alt="77dea8a6a38817c503c379dd946fc9e4.png" title="77dea8a6a38817c503c379dd946fc9e4.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;日常开发中，我主要使用的是 &lt;strong&gt;MacBook&lt;/strong&gt; 作为主力机。但有些软件、驱动或容器服务必须在 &lt;strong&gt;X86 架构环境下测试&lt;/strong&gt;，这时懒猫微服就是一个很好的辅助平台。然而在一些网络场景下，为了访问特定服务，还需要将这台设备</summary>
      
    
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/categories/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
    
    <category term="代理" scheme="https://xu-hardy.github.io/tags/%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>懒猫微服实战入门（十一）：一键换源指南：用 chsrc 开启丝滑体验</title>
    <link href="https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%EF%BC%9A%E4%B8%80%E9%94%AE%E6%8D%A2%E6%BA%90%E6%8C%87%E5%8D%97%EF%BC%9A%E7%94%A8-chsrc-%E5%BC%80%E5%90%AF%E4%B8%9D%E6%BB%91%E4%BD%93%E9%AA%8C/"/>
    <id>https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%EF%BC%9A%E4%B8%80%E9%94%AE%E6%8D%A2%E6%BA%90%E6%8C%87%E5%8D%97%EF%BC%9A%E7%94%A8-chsrc-%E5%BC%80%E5%90%AF%E4%B8%9D%E6%BB%91%E4%BD%93%E9%AA%8C/</id>
    <published>2025-07-01T16:00:00.000Z</published>
    <updated>2025-06-30T08:38:22.824Z</updated>
    
    <content type="html"><![CDATA[<p>最近懒猫微服的系统固件进行了更新，默认的软件源重新指向了国际源。估计是为了方便海外用户，但对于国内开发者来说，访问速度顿时大打折扣，软件安装和更新频繁卡在连接阶段，着实是一个问题。</p><p>正巧群友推荐了一个神器 —— <a href="https://gitee.com/RubyMetric/chsrc"><code>chsrc</code></a>。这个工具支持一键切换系统、Python、conda 等多个主流组件的源，简洁高效，非常适合懒猫微服这样的轻量环境使用。</p><h2 id="下载并安装-chsrc"><a href="#下载并安装-chsrc" class="headerlink" title="下载并安装 chsrc"></a>下载并安装 chsrc</h2><p>chsrc 项目在 Gitee 上提供了预编译的可执行文件，适用于不同架构的 Linux 设备。我当前使用的是 x86_64 架构，因此只需运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://gitee.com/RubyMetric/chsrc/releases/download/pre/chsrc-x64-linux -o chsrc</span><br><span class="line"><span class="built_in">chmod</span> +x ./chsrc</span><br></pre></td></tr></table></figure><p>下载后，为了方便使用，我们通常会把它加入环境变量。但懒猫微服的一个特殊机制是：<strong>除了 <code>/root</code> 目录，其他目录在每次重启后都会被重置</strong>。这意味着如果你将 chsrc 放在 <code>/home</code> 或 <code>/usr/local/bin</code> 之类的目录，它在下次重启后可能就不见了。</p><p>所以我将 chsrc 的二进制文件移动到了 <code>/root/app</code> 下（可以新建这个目录），并在 <code>~/.bashrc</code> 中手动追加了环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=/root/app:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>这样每次打开 shell 时，系统就会自动把 chsrc 所在路径加入 <code>$PATH</code>，确保我们可以直接使用 <code>chsrc</code> 命令。</p><h2 id="一键更换-Debian-软件源"><a href="#一键更换-Debian-软件源" class="headerlink" title="一键更换 Debian 软件源"></a>一键更换 Debian 软件源</h2><p>懒猫微服是基于 Debian 的发行版，因此可以直接运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsrc <span class="built_in">set</span> debian</span><br></pre></td></tr></table></figure><p>运行后，工具会先检测系统当前源格式（支持新版 <code>deb822</code>），然后测速多个国内镜像源（如清华、中科大、阿里等），自动选择最快的源进行替换，整个过程完全自动化，再也不用去网上搜帖子找各种源了。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250530201828165.png" alt="换源截图"></p><h2 id="更换-Python-镜像源"><a href="#更换-Python-镜像源" class="headerlink" title="更换 Python 镜像源"></a>更换 Python 镜像源</h2><p>除了操作系统本身的源之外，也能更换 Python，node 这样的源。</p><p>我制作了一个 Miniconda 的一键安装脚本，用来替代系统自带的 Python3.11，用 conda 虚拟环境管理起来很方便。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 下载最新 Miniconda 安装脚本</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;📥 正在下载 Miniconda 安装器...&quot;</span></span><br><span class="line">MINICONDA=Miniconda3-latest-Linux-x86_64.sh</span><br><span class="line">wget https://repo.anaconda.com/miniconda/<span class="variable">$MINICONDA</span> -O /tmp/<span class="variable">$MINICONDA</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 静默安装到 ~/miniconda3</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;⚙️ 正在静默安装到 ~/miniconda3...&quot;</span></span><br><span class="line">bash /tmp/<span class="variable">$MINICONDA</span> -b -p <span class="variable">$HOME</span>/miniconda3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 添加到 PATH（写入 .bashrc）</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;🔧 正在将 Miniconda 添加到 PATH...&quot;</span></span><br><span class="line">CONDA_INIT=<span class="string">&#x27;export PATH=&quot;$HOME/miniconda3/bin:$PATH&quot;&#x27;</span></span><br><span class="line"><span class="keyword">if</span> ! grep -q <span class="string">&quot;<span class="variable">$CONDA_INIT</span>&quot;</span> ~/.bashrc; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$CONDA_INIT</span>&quot;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 初始化 conda（非交互式）</span></span><br><span class="line"><span class="variable">$HOME</span>/miniconda3/bin/conda init bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 提示用户刷新 shell</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;✅ 安装完成！请运行以下命令以立即生效：&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;  source ~/.bashrc&quot;</span></span><br></pre></td></tr></table></figure><p>这个脚本的好处是全程自动化，不需要你动手点选目录，也不必一步步设置环境变量，适合懒猫开发者在新设备或系统还原后快速恢复工作环境。</p><p>安装好 Miniconda 之后，就可以利用 <code>chsrc</code> 来更换 pip 源了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsrc <span class="built_in">set</span> python</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/449f7b0d2e26f4247caf0ce47b4c1622.png" alt="chsrc 设置 Python 源"></p><p>此命令会将 pip 的默认源改为清华源或豆瓣源等国内镜像，提高模块下载速度，彻底告别“卡在安装 xx 模块”的窘境。</p><p>最后一步，把 conda 的源也换成国内的。直接执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsrc <span class="built_in">set</span> conda</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250530204151317.png" alt="换源成功"></p><p>然后需要手动更新 <code>.condarc</code> 配置文件。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>这次我体验了 <code>chsrc</code> 在懒猫微服上的完整使用链路，感受可以总结为三句话：</p><ul><li><strong>能跑就行？不，要跑得快。</strong></li><li><strong>别用默认源，懒人换源有奇效。</strong></li><li><strong>系统、Python、Conda，一条龙解决卡顿。</strong></li></ul><p>如果你也在用懒猫微服、或者在其他 Debian 系的轻量服务器上摸索开发环境，强烈推荐你试试这个工具和脚本组合。毕竟，“懒得配置”不应该成为“卡在配置”的理由。</p><p><img src="https://lzc-playground-1301583638.cos.ap-chengdu.myqcloud.com/guidelines/459/e5fc8b99-2220-4a5a-8327-38da7b93456f.png" alt="image.png" title="image.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近懒猫微服的系统固件进行了更新，默认的软件源重新指向了国际源。估计是为了方便海外用户，但对于国内开发者来说，访问速度顿时大打折扣，软件安装和更新频繁卡在连接阶段，着实是一个问题。&lt;/p&gt;
&lt;p&gt;正巧群友推荐了一个神器 —— &lt;a href=&quot;https://gitee.c</summary>
      
    
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/categories/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/tags/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
  </entry>
  
  <entry>
    <title>懒猫微服实战入门（十二）：用 iVentoy 打造你的 PXE 服务器</title>
    <link href="https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89%EF%BC%9A%E7%94%A8-iventoy-%E6%89%93%E9%80%A0%E4%BD%A0%E7%9A%84-pxe-%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89%EF%BC%9A%E7%94%A8-iventoy-%E6%89%93%E9%80%A0%E4%BD%A0%E7%9A%84-pxe-%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2025-07-01T16:00:00.000Z</published>
    <updated>2025-06-30T08:38:22.824Z</updated>
    
    <content type="html"><![CDATA[<p>很多介绍 Linux 的书籍都会在结尾推荐 PXE 装机方式，尤其是经典的 TFTP + Kickstart 自动部署方案。但在普通家庭或轻量办公环境中，这种方式显得有些繁琐。在 U 盘装机的环境中，我一般使用的 <strong>Ventoy</strong>多合一 。不过 Ventoy 团队又推出了一个支持 PXE 的装机版本，名为 <strong>iVentoy</strong>，和 WDS 类似，不过更加省心，这个应用已经上架懒猫微服的应用商店，非常适合内网多机装系统的场景。终于不用再琢磨 WDS 了。还有就是之前不小心用店家带的 U 盘把主机的所有数据都格式化了，这种手残也一去不复返了。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250601202019460.png" alt="iVentoy商店界面"></p><h3 id="什么是-PXE-无盘装机？"><a href="#什么是-PXE-无盘装机？" class="headerlink" title="什么是 PXE 无盘装机？"></a>什么是 PXE 无盘装机？</h3><p>PXE，全称 <strong>Preboot eXecution Environment</strong>，是一种允许电脑在没有本地操作系统、光盘或 U 盘的情况下，通过网络从服务器下载引导程序并完成系统安装的机制。</p><p><strong>PXE 装机简化流程如下：</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1. 开机 → BIOS/UEFI 设置为从网卡启动（PXE Boot）</span><br><span class="line">       ↓</span><br><span class="line">2. 客户端通过网卡发出 DHCP 请求 → 获取 IP 和引导文件地址</span><br><span class="line">       ↓</span><br><span class="line">3. 通过 TFTP 下载启动文件（如 pxelinux.0 或 iPXE）</span><br><span class="line">       ↓</span><br><span class="line">4. 加载内核（vmlinuz）和安装器（initrd.img）</span><br><span class="line">       ↓</span><br><span class="line">5. 进入图形界面或执行自动化系统安装</span><br></pre></td></tr></table></figure><hr><h4 id="PXE-装机适用场景"><a href="#PXE-装机适用场景" class="headerlink" title="PXE 装机适用场景"></a>PXE 装机适用场景</h4><ul><li>大量办公电脑或服务器的系统部署</li><li>设备没有 USB 接口或启动盘时</li><li>多系统测试、系统重装、快速恢复环境</li><li>各类 PE 工具、Linux Live 系统启动</li></ul><hr><h3 id="懒猫微服-上-iVentoy-装机体验"><a href="#懒猫微服-上-iVentoy-装机体验" class="headerlink" title="懒猫微服 上 iVentoy 装机体验"></a>懒猫微服 上 iVentoy 装机体验</h3><p>以下是我在懒猫微服环境中使用 iVentoy 的全过程：</p><h4 id="1-上传系统镜像"><a href="#1-上传系统镜像" class="headerlink" title="1. 上传系统镜像"></a>1. 上传系统镜像</h4><p>进入懒猫的应用数据目录：<br><code>应用数据 - Iventoy - ISO</code><br>将你准备好的 Windows &#x2F; Linux ISO 文件上传到此路径。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250601203151865.png" alt="上传 ISO 镜像"></p><h4 id="2-启动-iVentoy，配置网络"><a href="#2-启动-iVentoy，配置网络" class="headerlink" title="2. 启动 iVentoy，配置网络"></a>2. 启动 iVentoy，配置网络</h4><p>确保机器在内网下有一个 <strong>有效的 IPv4 地址</strong>，然后启动 iVentoy。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250601202427884.png" alt="iVentoy 主界面"></p><h4 id="3-BIOS-设置启用-PXE"><a href="#3-BIOS-设置启用-PXE" class="headerlink" title="3. BIOS 设置启用 PXE"></a>3. BIOS 设置启用 PXE</h4><p>进入待装机设备的 BIOS，确保启用 <strong>PXE Boot &#x2F; 网络启动功能</strong>。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250601202741281.png" alt="开启 PXE 支持"></p><h4 id="4-插网线，选择-PXE-启动"><a href="#4-插网线，选择-PXE-启动" class="headerlink" title="4. 插网线，选择 PXE 启动"></a>4. 插网线，选择 PXE 启动</h4><p>启动设备，确保插入网线（无线网卡 PXE 启动通常不被支持），从网卡启动。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250601202303737.png" alt="从网络启动"></p><h4 id="5-自动进入-iVentoy-引导菜单"><a href="#5-自动进入-iVentoy-引导菜单" class="headerlink" title="5. 自动进入 iVentoy 引导菜单"></a>5. 自动进入 iVentoy 引导菜单</h4><p>如果网络配置无误，设备会自动弹出引导菜单，可以看到之前上传的 ISO 镜像。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/78714275c7adc030420ccf77b479955b.jpg" alt="iVentoy 引导界面"></p><p>选择一个系统镜像，回车进入即可，相当于将 ISO 当成 LiveCD 使用。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/4488415be27c9e56412883cc35e95ce7.jpg" alt="选择 ISO 启动"></p><h3 id="6-成功进入桌面系统"><a href="#6-成功进入桌面系统" class="headerlink" title="6. 成功进入桌面系统"></a>6. 成功进入桌面系统</h3><p>以 Pop!_OS 为例，系统已经顺利启动，无需任何 U 盘！</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/8a1dc12c14c27fdc02a39db103994f5a.jpg" alt="成功进入系统桌面"></p><hr><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>这个办法还是适合炫技，把电脑接上网线，然后不用 U 盘，凭空装好系统，不过还是没有 U 盘那么丝滑，有时候不能打满千兆带宽。不过假如手头 U 盘不够用，或者要在多个系统反复装机测试就很方便了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;很多介绍 Linux 的书籍都会在结尾推荐 PXE 装机方式，尤其是经典的 TFTP + Kickstart 自动部署方案。但在普通家庭或轻量办公环境中，这种方式显得有些繁琐。在 U 盘装机的环境中，我一般使用的 &lt;strong&gt;Ventoy&lt;/strong&gt;多合一 。不过</summary>
      
    
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/categories/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/tags/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
  </entry>
  
  <entry>
    <title>懒猫微服实战入门（十三）：懒猫穿透不只图形化，纯命令行服务器也可以</title>
    <link href="https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89%EF%BC%9A%E6%87%92%E7%8C%AB%E7%A9%BF%E9%80%8F%E4%B8%8D%E5%8F%AA%E5%9B%BE%E5%BD%A2%E5%8C%96%EF%BC%8C%E7%BA%AF%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B9%9F%E5%8F%AF%E4%BB%A5/"/>
    <id>https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89%EF%BC%9A%E6%87%92%E7%8C%AB%E7%A9%BF%E9%80%8F%E4%B8%8D%E5%8F%AA%E5%9B%BE%E5%BD%A2%E5%8C%96%EF%BC%8C%E7%BA%AF%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B9%9F%E5%8F%AF%E4%BB%A5/</id>
    <published>2025-07-01T16:00:00.000Z</published>
    <updated>2025-06-30T08:38:22.824Z</updated>
    
    <content type="html"><![CDATA[<p>需要解析 <code>heiyu.space</code> 这个域名就得安装客户端，突然发现懒猫微服的客户端都是图形化界面。对于服务器环境，特别是没有图形界面的服务器，我们需要纯命令行解决方案。</p><p>随着公网 IPv4 地址即将枯竭，许多云厂商的学生机也不再提供公网 IP，这迫使开发者寻找异地组网方案。虽然 Tailscale 是一个可选方案，但作为懒猫微服用户，我更希望利用懒猫自带的组网功能实现这一需求。</p><p>在 VIP 群咨询后，获得了服务端组网工具：<br><a href="https://gitee.com/lazycatcloud/hclient-cli">https://gitee.com/lazycatcloud/hclient-cli</a></p><p>和花生壳的 CLI 类似，但是比花生壳省心多了。（这里不再过多吐槽花生壳系列了）</p><h3 id="安装与配置"><a href="#安装与配置" class="headerlink" title="安装与配置"></a>安装与配置</h3><h4 id="1-下载与初始运行"><a href="#1-下载与初始运行" class="headerlink" title="1. 下载与初始运行"></a>1. 下载与初始运行</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x ./hclient-cli-<span class="variable">$arch</span> <span class="comment"># 首次启动需要添加可执行权限</span></span><br><span class="line">./hclient-cli-<span class="variable">$arch</span></span><br></pre></td></tr></table></figure><p>初始运行会提示：<br><strong>当前为非 tun 模式,仅支持通过 http 代理访问微服或其他设备资源</strong></p><p>然后就会提示<strong>当前为非 tun 模式,仅支持通过 http 代理访问微服或其他设备资源</strong>，也就是说现在是单项的组网，这肯定不是我的要求，然后 GPT O3 给了我一个答案。</p><h4 id="2-启用-TUN-模式"><a href="#2-启用-TUN-模式" class="headerlink" title="2. 启用 TUN 模式"></a>2. 启用 TUN 模式</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> ./hclient-cli-<span class="variable">$arch</span> -tun <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>再启动之后，就没有那个 TUN 模式的提示了。如下</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250602191812289.png" alt="hclient-cli启动界面"></p><h4 id="3-常用命令"><a href="#3-常用命令" class="headerlink" title="3. 常用命令"></a>3. 常用命令</h4><p>然后需要使用命令添加，bname 是机器的名字，uid 和 password 是用户名和密码，这样就保证了全球唯一性质，执行完第一步的时候已有的客户端会弹出验证码，执行完第二步就会消失。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/1187b6cb50dd4eab5c211f927f5bbbd6.png" alt="1187b6cb50dd4eab5c211f927f5bbbd6"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加微服</span></span><br><span class="line">curl -X POST <span class="string">&#x27;http://127.0.0.1:7777/add_box?bname=%s&amp;uid=%s&amp;password=%s&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置TFA Code（两步验证码）</span></span><br><span class="line">curl -X POST <span class="string">&#x27;http://127.0.0.1:7777/add_tfa?bname=%s&amp;tfa=%s&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列举微服</span></span><br><span class="line">curl <span class="string">&#x27;http://127.0.0.1:7777/box_list&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除微服</span></span><br><span class="line">curl -X DELETE <span class="string">&#x27;http://127.0.0.1:7777/del_box?bname=%s&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前客户端信息</span></span><br><span class="line">curl <span class="string">&#x27;http://127.0.0.1:7777/client_info&#x27;</span></span><br></pre></td></tr></table></figure><p>在<strong>懒猫微服设备监控</strong>中可以看到加入的设备。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250602191830359.png" alt="设备监控界面"></p><h3 id="2-访问验证"><a href="#2-访问验证" class="headerlink" title="2. 访问验证"></a>2. 访问验证</h3><p>一开始去访问我写的面食比例计算机，发现了重定向了，才想到懒猫默认给所有的应用加了一个认证。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag">  <span class="attr">href</span>=<span class="string">&quot;https://micro.heiyu.space/sys/login?redirect=https%3A%2F%2Fflour-calc.name.heiyu.space%2F&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span>Temporary Redirect&lt;/a</span><br><span class="line">&gt;.</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250602202752227.png" alt="认证界面"></p><h3 id="3-双向访问测试"><a href="#3-双向访问测试" class="headerlink" title="3. 双向访问测试"></a>3. 双向访问测试</h3><p>商店里的 elasticsearch 放行了所有路由，这样我们在终端和 SDK 就不再需要走那个 web 的验证了，不然只能在请求头里面硬塞 cookie，但是如果是多层认证就非常的难搞。从图片中可以看到，我们从云服务器可以成功访问到家里的懒猫微服了。这个代表从云服务回到家里时没有问题的。<br><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/ab21f6aafea87f704df434047a587c37.png" alt="云服务器访问家庭网络"></p><h3 id="4-SSH-访问测试"><a href="#4-SSH-访问测试" class="headerlink" title="4. SSH 访问测试"></a>4. SSH 访问测试</h3><p>其实更多的时候我们的异地组网是为了能够在没有公网 IP 的情况下访问节点，查一下监控设备中的域名，然后 ssh 访问进去，发现基本没什么问题。所以就能够双向访问了，这样我们组网的目的就达到了。<br><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/e5316a84db1f258801b864c5bd18eef2.png" alt="SSH连接成功"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过懒猫微服的 CLI 工具，我们成功实现了：</p><ol><li>无图形界面服务器的穿透接入</li><li>双向网络访问</li></ol><p><img src="https://lzc-playground-1301583638.cos.ap-chengdu.myqcloud.com/guidelines/459/06da8512-7447-496c-a5f1-669059d134cf.png" alt="77dea8a6a38817c503c379dd946fc9e4.png" title="77dea8a6a38817c503c379dd946fc9e4.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;需要解析 &lt;code&gt;heiyu.space&lt;/code&gt; 这个域名就得安装客户端，突然发现懒猫微服的客户端都是图形化界面。对于服务器环境，特别是没有图形界面的服务器，我们需要纯命令行解决方案。&lt;/p&gt;
&lt;p&gt;随着公网 IPv4 地址即将枯竭，许多云厂商的学生机也不再提供公</summary>
      
    
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/categories/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/tags/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
  </entry>
  
  <entry>
    <title>懒猫微服实战入门（十四）：不登录客户端，如何用 Samba 挂载懒猫微服网盘？</title>
    <link href="https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89%EF%BC%9A%E4%B8%8D%E7%99%BB%E5%BD%95%E5%AE%A2%E6%88%B7%E7%AB%AF%EF%BC%8C%E5%A6%82%E4%BD%95%E7%94%A8-samba-%E6%8C%82%E8%BD%BD%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E7%BD%91%E7%9B%98%EF%BC%9F/"/>
    <id>https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89%EF%BC%9A%E4%B8%8D%E7%99%BB%E5%BD%95%E5%AE%A2%E6%88%B7%E7%AB%AF%EF%BC%8C%E5%A6%82%E4%BD%95%E7%94%A8-samba-%E6%8C%82%E8%BD%BD%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E7%BD%91%E7%9B%98%EF%BC%9F/</id>
    <published>2025-07-01T16:00:00.000Z</published>
    <updated>2025-06-30T08:38:22.824Z</updated>
    
    <content type="html"><![CDATA[<p>懒猫微服网盘自带自动挂载 Samba 功能，但如果<strong>不登录客户端</strong>，也可以手动通过微服的私有地址来挂载，实现访问和高速传输。</p><p>由于懒猫网盘采用<strong>多租户架构</strong>，每位用户的数据是隔离的。因此，访问路径通常为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smb://&lt;ip&gt;/&lt;用户名&gt;</span><br></pre></td></tr></table></figure><h2 id="🧩-步骤一：开启内网访问服务"><a href="#🧩-步骤一：开启内网访问服务" class="headerlink" title="🧩 步骤一：开启内网访问服务"></a>🧩 步骤一：开启内网访问服务</h2><p>在开始挂载前，<strong>请确保你已在懒猫微服后台开启了“内网访问服务”</strong>，否则 SMB 连接会被拒绝。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250621230834943.png" alt="image-20250621230834943"></p><hr><h2 id="💡-回忆一波上机考试的方式"><a href="#💡-回忆一波上机考试的方式" class="headerlink" title="💡 回忆一波上机考试的方式"></a>💡 回忆一波上机考试的方式</h2><p>以前在上机考试时，老师会将题目放在服务器共享目录中，我们用 <code>Win + R</code> 输入 <code>\\IP地址</code> 来下载资料，当时还觉得这操作很高端。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250621224004995.png" alt="image-20250621224004995"></p><p><strong>解释：</strong><br>这是通过 <code>Win + R</code> 快捷键打开“运行”窗口，输入 <code>\\&lt;IP&gt;</code> 快速访问局域网 SMB 共享目录。通常用于临时打开文件夹，不做映射。</p><hr><h2 id="🐧-macOS-Linux-挂载方式（CLI）"><a href="#🐧-macOS-Linux-挂载方式（CLI）" class="headerlink" title="🐧 macOS&#x2F;Linux 挂载方式（CLI）"></a>🐧 macOS&#x2F;Linux 挂载方式（CLI）</h2><p>在 Linux 或 macOS 上，可以直接用以下地址挂载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smb://&lt;ip&gt;/Download</span><br></pre></td></tr></table></figure><p>或者通过 <code>mount.cifs</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> mount -t cifs //192.168.1.100/your-username /mnt/share -o user=your-username,password=your-password</span><br></pre></td></tr></table></figure><hr><h2 id="🪟-Windows-上手动挂载-SMB-网盘"><a href="#🪟-Windows-上手动挂载-SMB-网盘" class="headerlink" title="🪟 Windows 上手动挂载 SMB 网盘"></a>🪟 Windows 上手动挂载 SMB 网盘</h2><p>在 Windows 中，需要通过图形界面手动挂载为本地磁盘，操作如下：</p><h3 id="第一步：右键“此电脑”-→-映射网络驱动器"><a href="#第一步：右键“此电脑”-→-映射网络驱动器" class="headerlink" title="第一步：右键“此电脑” → 映射网络驱动器"></a>第一步：右键“此电脑” → <strong>映射网络驱动器</strong></h3><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250621224142450.png" alt="image-20250621224142450"></p><p><strong>解释：</strong><br>在这里你可以：</p><ul><li>选择盘符（建议使用末尾的 <code>Z:</code>, <code>Y:</code>, <code>X:</code> 等）；</li><li>输入共享路径（例如 <code>\\192.168.1.100\your-username</code>）；</li><li>可勾选“使用其他凭据连接”等选项。</li></ul><hr><h3 id="第二步：确认挂载路径并验证身份"><a href="#第二步：确认挂载路径并验证身份" class="headerlink" title="第二步：确认挂载路径并验证身份"></a>第二步：确认挂载路径并验证身份</h3><p>系统将提示输入用户名和密码：</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250621224120769.png" alt="image-20250621224120769"></p><hr><h3 id="第三步：挂载成功，查看-Z-盘内容"><a href="#第三步：挂载成功，查看-Z-盘内容" class="headerlink" title="第三步：挂载成功，查看 Z 盘内容"></a>第三步：挂载成功，查看 Z 盘内容</h3><p>成功后，可以在“此电脑”中看到挂载好的 SMB 网络盘：</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250621230132415.png" alt="image-20250621230132415"></p><p>你可以像操作本地硬盘一样打开、拖拽、复制文件。</p><hr><h3 id="打开挂载目录后的界面如下："><a href="#打开挂载目录后的界面如下：" class="headerlink" title="打开挂载目录后的界面如下："></a>打开挂载目录后的界面如下：</h3><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250621230747150.png" alt="image-20250621230747150"></p><hr><h2 id="🚀-实测传输速度：约-500MB-s"><a href="#🚀-实测传输速度：约-500MB-s" class="headerlink" title="🚀 实测传输速度：约 500MB&#x2F;s"></a>🚀 实测传输速度：约 500MB&#x2F;s</h2><p>我测试了一下，将文件从 SMB 网盘拖入 PVE 虚拟机，传输速度稳定在 <strong>500MB&#x2F;s</strong>，表现不错。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/bed30da7272c40a1203b34b834269b13.png" alt="bed30da7272c40a1203b34b834269b13"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;懒猫微服网盘自带自动挂载 Samba 功能，但如果&lt;strong&gt;不登录客户端&lt;/strong&gt;，也可以手动通过微服的私有地址来挂载，实现访问和高速传输。&lt;/p&gt;
&lt;p&gt;由于懒猫网盘采用&lt;strong&gt;多租户架构&lt;/strong&gt;，每位用户的数据是隔离的。因此，访问路径通常</summary>
      
    
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/categories/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
    
    <category term="NAS" scheme="https://xu-hardy.github.io/tags/NAS/"/>
    
  </entry>
  
  <entry>
    <title>懒猫微服实战入门（十五）：大疆Pocket3 素材导入懒猫网盘</title>
    <link href="https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E5%8D%81%E4%BA%94%EF%BC%89%EF%BC%9A%E5%A4%A7%E7%96%86pocket3-%E7%B4%A0%E6%9D%90%E5%AF%BC%E5%85%A5%E6%87%92%E7%8C%AB%E7%BD%91%E7%9B%98/"/>
    <id>https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E5%8D%81%E4%BA%94%EF%BC%89%EF%BC%9A%E5%A4%A7%E7%96%86pocket3-%E7%B4%A0%E6%9D%90%E5%AF%BC%E5%85%A5%E6%87%92%E7%8C%AB%E7%BD%91%E7%9B%98/</id>
    <published>2025-07-01T16:00:00.000Z</published>
    <updated>2025-06-30T08:38:22.824Z</updated>
    
    <content type="html"><![CDATA[<p>日常使用 Pocket3 拍摄视频，就是共享比较麻烦，不然就得每个手机安装一个 app，然后再导出。突发奇想可以把素材传到懒猫网盘中，这样就解决了这个痛点。</p><p>大疆的机器每次连接都要走这个流程，不得不说真的很麻烦。这个 Wi-Fi 的记忆功能比较鸡肋。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250624122938093.png" alt="image-20250624122938093"></p><p>连接之后需要右上角先把视频下载到手机本地，然后点击分享。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250624123556578.png" alt="image-20250624123556578"></p><p>这里可以选各种软件，比如 airdrop，微信，邮件。我这里选懒猫微服，点击之后就会跳转到懒猫网盘。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250624123606895.png" alt="image-20250624123606895"></p><p>第一次传输我发现速度慢的离谱。询问了售后才发现 ios 会默认在 wifi 网络不好时走流量的。</p><p>因为大疆的 pocket3 传输需要连接相机的 Wi-Fi。所以手机是整个一断网额的状态。这流量也不快。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250624123055526.png" alt="image-20250624123055526"></p><p>偷偷跑流量是手机和运行商的传统了，那么在蜂窝网络里给他关掉。关掉无线局域网助理。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250624123117094.png" alt="image-20250624123117094"></p><p>关了之后，再重复上边的操作，就发现懒猫网盘打不开了，嗯 这就是预期的行为了，不会偷偷的用网了。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250624123004993.png" alt="image-20250624123004993"></p><p>于是询问大疆额售后能不能让机器连接家里的网，得到的回答是不行。只能手动切换 Wi-Fi。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250624123022647.png" alt="image-20250624123022647"></p><p>换了网之后再传输，这个速度就舒服多了，虽然没跑满千兆，但是也能够看了。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250624123032634.png" alt="image-20250624123032634"></p><p>然后把上一步的视频文件夹共享出来，以后把素材都发到这个文件夹里。再共享给其他的懒猫用户，就很方便了。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250624123207647.png" alt="image-20250624123207647"></p><blockquote><p>两个很想吐槽的地方</p><ol><li>大疆 pocket3 不能直接连家里 Wi-Fi，传文件到网盘必须换网</li><li>Apple 的 lighting 原生不支持 OTG，需要买转接头。</li></ol></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;日常使用 Pocket3 拍摄视频，就是共享比较麻烦，不然就得每个手机安装一个 app，然后再导出。突发奇想可以把素材传到懒猫网盘中，这样就解决了这个痛点。&lt;/p&gt;
&lt;p&gt;大疆的机器每次连接都要走这个流程，不得不说真的很麻烦。这个 Wi-Fi 的记忆功能比较鸡肋。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/categories/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/tags/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
  </entry>
  
  <entry>
    <title>懒猫微服实战入门（十六）：把懒猫微服当作 24 × 7 在线开发机</title>
    <link href="https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E5%8D%81%E5%85%AD%EF%BC%89%EF%BC%9A%E6%8A%8A%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%BD%93%E4%BD%9C-24-%C3%97-7-%E5%9C%A8%E7%BA%BF%E5%BC%80%E5%8F%91%E6%9C%BA/"/>
    <id>https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E5%8D%81%E5%85%AD%EF%BC%89%EF%BC%9A%E6%8A%8A%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%BD%93%E4%BD%9C-24-%C3%97-7-%E5%9C%A8%E7%BA%BF%E5%BC%80%E5%8F%91%E6%9C%BA/</id>
    <published>2025-07-01T16:00:00.000Z</published>
    <updated>2025-06-30T08:38:22.824Z</updated>
    
    <content type="html"><![CDATA[<p>最近和极限科技沟通，将 <strong>INFINI Console</strong> 上架到懒猫微服。可以当作随时可用、不关机的 <strong>远程开发机</strong>。比如连接自己部署的 ES，中间件，数据库什么的。</p><h2 id="1-应用商店一键安装-INFINI-Console"><a href="#1-应用商店一键安装-INFINI-Console" class="headerlink" title="1. 应用商店一键安装 INFINI Console"></a>1. 应用商店一键安装 INFINI Console</h2><p>从懒猫微服应用商店搜索 <strong>Console</strong>，点击“安装”即可：</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/a8de38c1a8d6cb8bf34ae697256ad230.png" alt="应用商店界面"></p><h2 id="2-初始化与登录"><a href="#2-初始化与登录" class="headerlink" title="2. 初始化与登录"></a>2. 初始化与登录</h2><p>初始化之后登录：</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/Snipaste_2025-06-24_13-16-34.png" alt="登录页面"></p><p>首次登录后台，左侧侧边栏包含 <strong>Dashboard、Agents、Settings</strong> 等模块：</p><ul><li>Dashboard 默认展示 CPU &#x2F; 内存 &#x2F; 磁盘实时曲线。</li><li>顶栏可切换“明暗主题”并显示当前工作区 ID。</li><li>右下角有“检查更新”按钮，提示有新版时可一键升级。</li></ul><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/Snipaste_2025-06-24_13-16-57.png" alt="控制台主界面"></p><h2 id="3-用-Dockge-安装-Easysearch"><a href="#3-用-Dockge-安装-Easysearch" class="headerlink" title="3. 用 Dockge 安装 Easysearch"></a>3. 用 Dockge 安装 Easysearch</h2><p>ES 的话，我是直接用 Dockge 安装的，如果你需要啥中间价，数据库都可以用这个安装。</p><p>前提需要用 lzc-cli appstore copy-image 来获取国内的镜像源：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将官方镜像复制到懒猫内网仓库</span></span><br><span class="line">lzc-cli appstore copy-image infinilabs/easysearch:1.13.0-2159</span><br></pre></td></tr></table></figure><p>然后把 <code>docker run</code> 或 <code>docker-compose.yml</code> 中的镜像地址替换成上一步生成的私有 registry 地址即可。全部容器由 <strong>Dockge</strong> 图形化管理：<br>（截图信息要点）</p><ul><li>Dockge 左侧列出所有 Stack，右侧显示 Easysearch 服务状态为 <code>Running</code>。</li><li>端口 9200 已自动映射，重启、查看日志，都能一键完成。</li></ul><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250624164746305.png" alt="Dockge 管理界面"></p><h2 id="4-为什么说它适合做开发机？"><a href="#4-为什么说它适合做开发机？" class="headerlink" title="4. 为什么说它适合做开发机？"></a>4. 为什么说它适合做开发机？</h2><table><thead><tr><th>需求</th><th>懒猫微服能力</th><th>体验亮点</th></tr></thead><tbody><tr><td><strong>24 × 7 在线</strong></td><td>独立云主机，自动重启、监控告警</td><td>关掉本地电脑，服务仍在运行</td></tr><tr><td><strong>x86 架构</strong></td><td>后端统一使用 x86 节点</td><td>对 <strong>Mac M 系列（ARM）用户</strong>，可避免本地编译兼容性问题</td></tr><tr><td><strong>多端远程开发</strong></td><td>内置 Web Shell、端口映射、域名分配</td><td>VS Code Remote &#x2F; JetBrains Gateway 秒连接</td></tr><tr><td><strong>镜像同步</strong></td><td><code>lzc-cli appstore copy-image</code></td><td>国内网络下拉镜像不超时</td></tr><tr><td><strong>中间件生态</strong></td><td>Dockge + Compose</td><td>RabbitMQ、Redis、Postgres 都能一键启动</td></tr><tr><td><strong>环境变量管理</strong></td><td>UI + <code>.env</code> 托管</td><td>私密信息集中维护，避免泄漏</td></tr></tbody></table><p>总结下来，把懒猫微服当作一个可远程访问的轻量开发机还是挺合适的：</p><ol><li>不用担心公网 IP 和端口映射</li><li>应用商店部署方便快捷</li><li>支持命令行部署、私有镜像同步</li><li>用 Dockge 管理一套中间件生态完全没问题</li></ol><p>适合：<br>👉 想要随时随地调试项目的开发者<br>👉 不想在本地装一堆环境的轻量用户<br>👉 有多端共享、协作需求的远程开发场景</p><p>整套流程走下来，你只需一台浏览器，就能获得 <strong>24 × 7 不关机的云端开发环境</strong>。如果你也是 Mac M-芯片用户、经常出差或需要多端协作，不妨试试用懒猫微服托管自己的 DevBox。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近和极限科技沟通，将 &lt;strong&gt;INFINI Console&lt;/strong&gt; 上架到懒猫微服。可以当作随时可用、不关机的 &lt;strong&gt;远程开发机&lt;/strong&gt;。比如连接自己部署的 ES，中间件，数据库什么的。&lt;/p&gt;
&lt;h2 id=&quot;1-应用商店一键安装-</summary>
      
    
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/categories/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/tags/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
  </entry>
  
  <entry>
    <title>懒猫微服实战入门（十七）：把 Steam 游戏存到懒猫网盘</title>
    <link href="https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E5%8D%81%E4%B8%83%EF%BC%89%EF%BC%9A%E6%8A%8A-steam-%E6%B8%B8%E6%88%8F%E5%AD%98%E5%88%B0%E6%87%92%E7%8C%AB%E7%BD%91%E7%9B%98/"/>
    <id>https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E5%8D%81%E4%B8%83%EF%BC%89%EF%BC%9A%E6%8A%8A-steam-%E6%B8%B8%E6%88%8F%E5%AD%98%E5%88%B0%E6%87%92%E7%8C%AB%E7%BD%91%E7%9B%98/</id>
    <published>2025-07-01T16:00:00.000Z</published>
    <updated>2025-06-30T08:38:22.824Z</updated>
    
    <content type="html"><![CDATA[<p>懒猫微服的网盘基本可以替代一些公有的网盘，还有一个好处是可以自动挂载，只要打开懒猫微服的客户端，然后自动把网盘就能自动挂载到 Finder，十分方便。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250627201448767.png" alt="image-20250627201448767"></p><p>网盘的挂载是支持了 WebDAV 和 Sambda。这是常见的两种远程访问的协议。</p><p><strong>WebDAV（Web Distributed Authoring and Versioning）</strong>主要用于 <strong>HTTP&#x2F;HTTPS 协议</strong> 的文件共享，适合 <strong>远程访问、云存储</strong>。基于 HTTP&#x2F;HTTPS<strong>，可在浏览器中直接访问（如 <code>http://server/webdav</code>）。</strong></p><p>SMB（Server Message Block）&#x2F; Samba 主要用于 <strong>局域网文件共享</strong>（如 Windows 共享文件夹、NAS、企业内网存储）。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250627211645046.png" alt="image-20250627211645046"></p><p>通过 mount 命令可以看到，懒猫微服客户端默认使用的是 SMB 协议挂载：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//xu-automount@file.micro.heiyu.space/xu-automount on /Users/xu/lazycat_automount/micro (smbfs, nodev, nosuid, mounted by xu)</span><br><span class="line">//xu-automount@file.micro.heiyu.space/xu on /Volumes/xu (smbfs, nodev, nosuid, mounted by xu)</span><br></pre></td></tr></table></figure><p>默认有两个文件夹，其实都是指向网盘根目录的软连接。两者内容完全一样。</p><blockquote><p>&lt;用户名&gt;-automount：这个应该不是自动挂载到文件管理器的目录</p><p>&lt;用户名&gt;: 这个是网盘多租户的目录</p></blockquote><p>所以在 Steam 里我们直接添加驱动器就好：</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/a1a7bbcb4236bc63c91151d9dc3a53b6.png" alt="a1a7bbcb4236bc63c91151d9dc3a53b6"></p><p>然后可以选择这两个文件目录，就像前面介绍的，这两个选择哪个都行：</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/ff20f0dc7b36ba7e27ad18ce45b2c378.png" alt="ff20f0dc7b36ba7e27ad18ce45b2c378"></p><p>然后这个时候会弹出来这个提示。我们选择允许。这样 Steam 才能有写入懒猫网盘的权限。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/b90bea03eed9f716a64f52ae16a2526f.png" alt="b90bea03eed9f716a64f52ae16a2526f"></p><p>然后选择下载之后，我们发现网盘里多了一个 SteamLibrary 的目录。所有的游戏都存在这里。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/7733bdd613320011b0de6ad55032cc19.png" alt="7733bdd613320011b0de6ad55032cc19"></p><p>如果你比较习惯网盘的页面，也可以在网盘里找到 SteamLibrary 的目录</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250627202118461.png" alt="image-20250627202118461"></p><p>如果哪天不再需要写入懒猫网盘，用这个办法删除。网上吐槽挺多的。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/788d94c0cb77ec7c66aa3de73f414462.png" alt="788d94c0cb77ec7c66aa3de73f414462"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;懒猫微服的网盘基本可以替代一些公有的网盘，还有一个好处是可以自动挂载，只要打开懒猫微服的客户端，然后自动把网盘就能自动挂载到 Finder，十分方便。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/cloudsmith</summary>
      
    
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/categories/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/tags/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
  </entry>
  
  <entry>
    <title>懒猫微服实战入门（二）：打造多人协作环境,权限控制+数据隔离一步到位.md</title>
    <link href="https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E6%89%93%E9%80%A0%E5%A4%9A%E4%BA%BA%E5%8D%8F%E4%BD%9C%E7%8E%AF%E5%A2%83-%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6-%E6%95%B0%E6%8D%AE%E9%9A%94%E7%A6%BB%E4%B8%80%E6%AD%A5%E5%88%B0%E4%BD%8D-md/"/>
    <id>https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E6%89%93%E9%80%A0%E5%A4%9A%E4%BA%BA%E5%8D%8F%E4%BD%9C%E7%8E%AF%E5%A2%83-%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6-%E6%95%B0%E6%8D%AE%E9%9A%94%E7%A6%BB%E4%B8%80%E6%AD%A5%E5%88%B0%E4%BD%8D-md/</id>
    <published>2025-07-01T16:00:00.000Z</published>
    <updated>2025-06-30T08:38:22.824Z</updated>
    
    <content type="html"><![CDATA[<p>最近在懒猫微服上架了一些应用，正好分享给家里人用。这个实现起来很简单，在懒猫微服上开一个新的用户，然后控制这个用户是否可以安装软件，可以使用什么软件，这样不同用户之间的数据就隔离开了，比如每个人的懒猫网盘和懒猫清单是独立的，互相不会产生干扰。</p><p>下面就以实际操作为例，教大家新建用户，并且了解这些自带的安全机制。</p><h2 id="新建用户"><a href="#新建用户" class="headerlink" title="新建用户"></a>新建用户</h2><p><strong>设置</strong> - <strong>用户管理</strong>，这里可以看到现存的账户，第一次激活的时候会提示注册一个管理员账户，后面可以右上角点击邀请成员，然后会得到弹出一个二维码，新的客户端需要下载懒猫客户端，然后客户端扫码添加输入信息即可。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250510111411166.png" alt="image-20250510111411166"></p><p>扫码后可以为新用户设置用户名和密码。客户端下载地址：<br>👉 <a href="https://lazycat.cloud/download">https://lazycat.cloud/download</a></p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250510112156501.png" alt="image-20250510112156501"></p><p>注册完成后，新成员就可以使用自己的账号登录懒猫微服啦。默认是“非管理员权限”，更安全。</p><h2 id="用户权限控制"><a href="#用户权限控制" class="headerlink" title="用户权限控制"></a>用户权限控制</h2><p>新建之后，我对这个新用户的画像是用户而不是管理者，所以只需要登录之后看到应用白名单就可以了。</p><p>点击新建用户的头像，可以设置用户可以看见应用的白名单。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250510114715784.png" alt="image-20250510114715784"></p><p>比如，我只授权了家庭成员使用懒猫网盘、懒猫清单等基础工具。于是使用手机端登录新的账户，可以看到在<strong>我的应用</strong>中只有刚刚选中那些，这对于日常使用来说刚刚好，这个页面相对于安装了几十个 app 的管理页面来说，实在是清爽。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250510114840299.png" alt="image-20250510114840299"></p><h3 id="登录的二次验证"><a href="#登录的二次验证" class="headerlink" title="登录的二次验证"></a>登录的二次验证</h3><p>在此之前我们先来介绍多因子验证（MFA），通俗来讲我们在使用用户名密码登录的时候有时候还要接收一个验证码，有时候是发到邮箱的，有的是手机短信，还有个需要安装特定的 APP 来查看，比如 Authy，Google Authenticator。</p><p>而懒猫微服在 APP 中内置了 MFA 接收验证码的功能，新设备登录的时候会有如下提示：</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250510120716665.png" alt="image-20250510120716665"></p><p>在一台新的设备登录懒猫账户的时候，已经登录这个账户的设备就会弹出这个提示，这个时候我一般是提前打开懒猫微服 APP。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250510115337692.png" alt="image-20250510115337692"></p><p>当然如果没有提前打开或者登录呢，也可以在「微服管理 - 安全码」来查看，比如这样，这个方式很 Apple 但是用着比 Apple 的提示舒服多了。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250510115726710.png" alt="image-20250510115726710"></p><p>那么什么时候才会触发这个 MFA 呢？经过不完全测试，主要还是在这里设备管理这里有一个云端白名单，在这里的设备可以就可以免去 MFA 的验证，如果删除某个设备之后，这个设备会马上注销登录，并且在此登录的时候还需要 MFA 验证。这个操作，极大了降低了被黑客攻击的可能性。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250510115805192.png" alt="image-20250510115805192"></p><p>当然如果你觉得 MFA 比较麻烦，那么也可以使用手机号码的方式进行登录，绑定手机号，然后用收验证码的方式进行登录,比如这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">【懒猫微服】验证码：0000，5分钟内有效！请勿转发或泄漏。</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250510120805601.png" alt="image-20250510120805601"></p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>以前用过很多 NAS，一直苦于怕黑客攻击而没有监管 NAS 放在互联网，而一套完整的登录机制也要花费很大的精力去维护，拓展。期间也选择过蒲公英这样的异地组网设备，虽然可以达到目的，但是过程不尽如人意，对于很多国产生态来说，售后一直是缺失的很重要的一环。而懒猫微服恰好弥补了这样的短板，让懂技术的人从繁杂的维护设备中解放出来，像使用公有云一样的使用 NAS。</p><p><img src="https://lzc-playground-1301583638.cos.ap-chengdu.myqcloud.com/guidelines/459/fec2fe20-307a-49d2-8cc5-a5ec370d31c5.png" alt="image.png" title="image.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近在懒猫微服上架了一些应用，正好分享给家里人用。这个实现起来很简单，在懒猫微服上开一个新的用户，然后控制这个用户是否可以安装软件，可以使用什么软件，这样不同用户之间的数据就隔离开了，比如每个人的懒猫网盘和懒猫清单是独立的，互相不会产生干扰。&lt;/p&gt;
&lt;p&gt;下面就以实际操作</summary>
      
    
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/categories/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
    
    <category term="MFA" scheme="https://xu-hardy.github.io/tags/MFA/"/>
    
  </entry>
  
  <entry>
    <title>懒猫微服实战入门（三）:懒猫智慧屏，以为是地表最强电视盒子，结果是闺蜜机</title>
    <link href="https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%89%EF%BC%89-%E6%87%92%E7%8C%AB%E6%99%BA%E6%85%A7%E5%B1%8F%EF%BC%8C%E4%BB%A5%E4%B8%BA%E6%98%AF%E5%9C%B0%E8%A1%A8%E6%9C%80%E5%BC%BA%E7%94%B5%E8%A7%86%E7%9B%92%E5%AD%90%EF%BC%8C%E7%BB%93%E6%9E%9C%E6%98%AF%E9%97%BA%E8%9C%9C%E6%9C%BA/"/>
    <id>https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%89%EF%BC%89-%E6%87%92%E7%8C%AB%E6%99%BA%E6%85%A7%E5%B1%8F%EF%BC%8C%E4%BB%A5%E4%B8%BA%E6%98%AF%E5%9C%B0%E8%A1%A8%E6%9C%80%E5%BC%BA%E7%94%B5%E8%A7%86%E7%9B%92%E5%AD%90%EF%BC%8C%E7%BB%93%E6%9E%9C%E6%98%AF%E9%97%BA%E8%9C%9C%E6%9C%BA/</id>
    <published>2025-07-01T16:00:00.000Z</published>
    <updated>2025-06-30T08:38:22.824Z</updated>
    
    <content type="html"><![CDATA[<p>过年那阵子，为了看春晚不卡顿，打算换一个当贝盒子，尽管这些年刷过矿机当盒子或者 Armbian，但是仍然对当贝系列情有独钟，而时过境迁，最后发现在当年风靡市场的网红盒子，不过 RK3566 而已，根据不同的 RAM+ROM 的组合来卖到更高的价格，实在是没有什么性价比。</p><p>于是想到 X86 能性能会更加好一些，比如 Android TV 这种固件，不过这种基本都是海外版本，纯净的基本什么都要自己捣鼓，而 B 站评论的第三方链接又很担心安全问题。</p><p>这问题一直持续到我购买了懒猫微服，高性能的 X86 主机，还带 HDMI（目前 Typec 不支持供电和视频传输），和飞牛的原生 Gnome 输出不同的是懒猫智慧屏其实是商店里面一个独立的 APP，本质上相当于客户端，需要手机扫码授权才能使用</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250512090024831.png" alt="image-20250512090024831"></p><p>登录之后是这样的，其实就是在原来 APP 的基础上加了一个 Chrome 浏览器，然后其他的应用也能在显示器上打开。右上角依次是搜索栏，软件商店和登出按钮。接下来就是可以愉快的观影了，个人体验新开一个账户，然后设置应用白名单体验会更加的好～（但是用手机遥控的时候会提示，智慧屏正在被其他用户使用是否停止 hhhh）</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250512090050827.png" alt="image-20250512090050827"></p><h4 id="我尝试的观影流程如下："><a href="#我尝试的观影流程如下：" class="headerlink" title="我尝试的观影流程如下："></a>我尝试的观影流程如下：</h4><ol><li>把视频传输到<strong>懒猫网盘</strong>（拖拽上传或者 Samba）</li><li>打开<strong>视频播放器</strong>（其他播放器也可）</li><li>然后选中网盘文件就可以播放啦</li></ol><p>目前支持手机端遥控，类似市面上的盒子助手， 我连接了 Action III ，能够愉快的观影了。<img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250512110003104.png" alt="image-20250512110003104"></p><p>由于是内置的应用，所以不存在电视盒子广告乱象的问题，11 代 I5 拿来观看 4K 也是轻松秒杀，需要什么就往网盘传什么。高端的需求只需要简单的办法。感觉不用买 Apple TV 了，如果需要其他软件比如 jellyfin 啥的也可以自己部署～。</p><p>机器有 USB 还能插键鼠，接好外设的时候记得重启一下，应该是容器部署的原因，让容器在启动的时候再读一遍&#x2F;dev&#x2F;bus&#x2F;usb 下的设备。除了观影，接会议室的演示大屏幕也不错～</p><p>毕竟这个页面，连 debian 虚拟机都能使用，其他的应用也不在话下。想用 X86 安卓的话，直接安装到虚拟机里～</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250512103811587.png" alt="image-20250512103811587"></p><p><strong>为啥说可以成为闺蜜机呢？</strong></p><p><strong>为啥说可以成为闺蜜机呢？</strong></p><p>某天在商场的时候看到一个大大的带支架的还可以随时移动的平板叫做闺蜜机。</p><p>那么懒猫微服 + HDMI 投屏器&#x2F;毫米波投屏器 + 可移动支架，是不是很像？</p><p>某宝上还有这样的改装套餐，解决显示器供电看来就 OK。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250512095959092.png" alt="image-20250512095959092"></p><ol><li>市面上没有好用的电视盒子？选懒猫！</li><li>市面上没有良心的在线网盘？选懒猫！</li><li>市面上没有便宜的闺蜜专机？选懒猫！</li></ol><p>市面上的闺蜜机动辄大几千，配置又差强人意，还不如买懒猫微服，还有专业的售后陪玩，探索无限可能！</p><p>什么？你说闺蜜机还得有语音助手， AI 美颜，娱乐互动？快登懒猫微服用 Docker 来部署吧，还有机会上架懒猫商店哦～</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;过年那阵子，为了看春晚不卡顿，打算换一个当贝盒子，尽管这些年刷过矿机当盒子或者 Armbian，但是仍然对当贝系列情有独钟，而时过境迁，最后发现在当年风靡市场的网红盒子，不过 RK3566 而已，根据不同的 RAM+ROM 的组合来卖到更高的价格，实在是没有什么性价比。&lt;/</summary>
      
    
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/categories/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/tags/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
  </entry>
  
  <entry>
    <title>懒猫微服实战入门（四）：完全DNS访问，和本地代理冲突了怎么办？</title>
    <link href="https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E5%AE%8C%E5%85%A8dns%E8%AE%BF%E9%97%AE%EF%BC%8C%E5%92%8C%E6%9C%AC%E5%9C%B0%E4%BB%A3%E7%90%86%E5%86%B2%E7%AA%81%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E%EF%BC%9F/"/>
    <id>https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E5%AE%8C%E5%85%A8dns%E8%AE%BF%E9%97%AE%EF%BC%8C%E5%92%8C%E6%9C%AC%E5%9C%B0%E4%BB%A3%E7%90%86%E5%86%B2%E7%AA%81%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E%EF%BC%9F/</id>
    <published>2025-07-01T16:00:00.000Z</published>
    <updated>2025-06-30T08:38:22.824Z</updated>
    
    <content type="html"><![CDATA[<p>刚拿到懒猫微服的时候，了解到这个机器完全使用 DNS 来访问是很吃惊的。拒不完全使用经验，大概是机器里部署了一套私有的 DNS server，然后广播到整个局域网。而公网上的则是 heiyu.space，通过 whois 查看，公网的 domain 是在腾讯云购买的。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250513092022572.png" alt="image-20250513092022572"></p><p>所以应该是两套的解析结构，局域网访问的时候，就先用机器部署的私有 domain 进行解析，如果使用流量或者在外边，就是走互联网上 DNSPod 的解析记录。这个结论属于猜测，因为很多公有云也确实四这么做的，一个公开托管的 domain 用来互联网解析，一个 VPC 内的 private domain 用来解析 VPC 内部的地址。</p><p>懒猫微服和传统的 NAS 又很大的不同，如果作为小白玩家可以很快上手，当做 Sass 服务来用。但对于专业玩家，总有一种技术的强迫症，总用抽丝剥茧，从 Saas 一点点解析到 Iass，然后一点把懒猫编程能够公开访问的私有云。</p><p>比如网络。可以通过 dig 或者 nslookup 来解析</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dig xxx.heiyu.space +short</span><br><span class="line">dig xxx.heiyu.space AAAA +short</span><br></pre></td></tr></table></figure><p>但是，DNS 解析这里慢慢就出现问题了。在某次上传文件到懒猫网盘的时候，我发现速度慢的可怜，几乎是走了公网。在 VIP 答疑群里得知，流量应该是从代理转了一圈，然后回来的，所以慢，剩下的就是解决这个问题了。</p><p>那么办法就是放行白名单，不让他走代理，由于是 DNS 访问，而很多代理的规则是根据域名匹配的，所以要去改这个匹配规则。当然如果你用 nmtui 配置静态 IP 地址的话，那么内网访问也是没有问题了，直接走上级路由的默认路由表即可。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250513094205439.png" alt="image-20250513094205439"></p><p>而白名单主要是放行， _.heiyu.space 和 _.lazycat.cloud 这两个域名，heiyu.space 是穿透服务，lazycat.cloud 是官网和论坛。</p><p>不同的软件有不同的设置办法，比如说用 DOMAIN-SUFFIX 来替代域名的泛解析，所以放行的时候 heiyu.space 这这样子就好。我在修改配置文件的时候用 DOMAIN-SUFFIX 匹配*.heiyu.space 不生效，花了不少的时间。实际不需要再写一次 * 号。</p><p><img src="https://dl.playground.lazycat.cloud/guidelines/459/9ed1bbce-73b0-4ce9-8e22-fb20d6c8b21c.png" alt="image.png"></p><p>而最终落到配置文件上就是这样的。（之前写 DOMAIN-SUFFIX,*.lazycat.cloud,DIRECT）一直不生效。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rules:</span><br><span class="line">- DOMAIN-SUFFIX,lazycat.cloud,DIRECT</span><br><span class="line">- DOMAIN-SUFFIX,heiyu.space,DIRECT</span><br><span class="line">- DOMAIN-SUFFIX,deepseek.com,DIRECT</span><br></pre></td></tr></table></figure><p>也总结一下其他规则吧，最常见的类型有这些：</p><h3 id="1）DOMAIN"><a href="#1）DOMAIN" class="headerlink" title="1）DOMAIN"></a>1）DOMAIN</h3><ul><li>只匹配<strong>某个域名本身</strong>。</li><li>举例：<code>gs.apple.com</code> → 只有访问 <code>gs.apple.com</code> 才会命中。</li></ul><h3 id="2）DOMAIN-SUFFIX"><a href="#2）DOMAIN-SUFFIX" class="headerlink" title="2）DOMAIN-SUFFIX"></a>2）DOMAIN-SUFFIX</h3><ul><li>匹配<strong>所有以这个后缀结尾的域名</strong>。</li><li>举例：<code>apple.com</code> → <code>gs.apple.com</code>、<code>itunes.apple.com</code> 都会命中。</li></ul><h3 id="3）DOMAIN-KEYWORD"><a href="#3）DOMAIN-KEYWORD" class="headerlink" title="3）DOMAIN-KEYWORD"></a>3）DOMAIN-KEYWORD</h3><ul><li>匹配<strong>包含某个关键词的所有域名</strong>。</li><li>举例：<code>apple</code> → <code>apple.com</code>、<code>gs.apple.com</code>、<code>appleabc.xyz</code> 都会命中。</li></ul><h3 id="4）IP-CIDR"><a href="#4）IP-CIDR" class="headerlink" title="4）IP-CIDR"></a>4）IP-CIDR</h3><ul><li>匹配<strong>某个 IP 地址段</strong>。</li><li>举例：<code>192.168.0.0/16</code> → 匹配 192.168 开头的所有 IP。</li></ul><blockquote><p>这些是规则写法里最基本的几种，掌握了就能应对绝大多数情况。</p></blockquote><p><img src="https://lzc-playground-1301583638.cos.ap-chengdu.myqcloud.com/guidelines/459/ae810d7f-7410-489c-9017-987a12234160.png" alt="image.png" title="image.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;刚拿到懒猫微服的时候，了解到这个机器完全使用 DNS 来访问是很吃惊的。拒不完全使用经验，大概是机器里部署了一套私有的 DNS server，然后广播到整个局域网。而公网上的则是 heiyu.space，通过 whois 查看，公网的 domain 是在腾讯云购买的。&lt;/p</summary>
      
    
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/categories/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
    
    <category term="代理" scheme="https://xu-hardy.github.io/tags/%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>懒猫微服实战入门（五）：文件上传到懒猫网盘，SMB 电视盒子观影</title>
    <link href="https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%88%B0%E6%87%92%E7%8C%AB%E7%BD%91%E7%9B%98%EF%BC%8Csmb-%E7%94%B5%E8%A7%86%E7%9B%92%E5%AD%90%E8%A7%82%E5%BD%B1/"/>
    <id>https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%88%B0%E6%87%92%E7%8C%AB%E7%BD%91%E7%9B%98%EF%BC%8Csmb-%E7%94%B5%E8%A7%86%E7%9B%92%E5%AD%90%E8%A7%82%E5%BD%B1/</id>
    <published>2025-07-01T16:00:00.000Z</published>
    <updated>2025-06-30T08:38:22.824Z</updated>
    
    <content type="html"><![CDATA[<p>作为一个合格的 NAS，肯定要有文件共享的功能，一般我们常用的是 SMB，NFS 和 WebDav 这三种，然后需要设置共享目录和用户权限。</p><p>懒猫网盘提供了一个开箱即用的方案，直接通过 APP 把网盘的文件夹映射自动挂载到本地，不需要像 Linux 那样 mount，也不需像 window 一样新建磁盘映射：</p><p>我们看看以前要挂载一个盘有多麻烦:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Debian/Ubuntu</span><br><span class="line">sudo apt install cifs-utils</span><br><span class="line">sudo mkdir /mnt/smb_share</span><br><span class="line">sudo mount -t cifs //SERVER_IP_OR_NAME/SHARE_NAME /mnt/smb_share -o username=SMB_USER,password=SMB_PASSWORD,domain=WORKGROUP</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果需要开机自动挂载，还得改&#x2F;etc&#x2F;fstab 里面的条目。但是，懒猫网盘可以开箱即用，不管你是用浏览器，APP，还是用访达挂载 SMB 都访问都可以。属实是解放了 Mac 党的电脑空间。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250514104946937.png" alt="image-20250514104946937"></p><p>在网盘中点击自己的头像，然后<strong>设置</strong> - <strong>网络服务</strong>这里，可以看到设置。甚至点击起开内网服务，还会给一个 IP 地址的 SMB 地址：</p><p><code>smb://ip/user-name</code>，电视盒子不能安装懒猫 app，但是有了 IP 地址之后就可以连接 SMB 了～</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250514105241675.png"></p><p>然后就是当贝盒子这里啦，如果你是小米盒子或者其他的盒子，只要文件管理器支持 SMB 就 OK</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250514113806260.png" alt="image-20250514113806260"></p><p>进入文件管理器，选择 <strong>局域网共享连接</strong>。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250514113737029.png" alt="image-20250514113737029"></p><p>然后输入懒猫微服的 IP 地址，用户名密码就是微服 APP 的， 这一套有点 AD 域的感觉了。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250514113708677.png" alt="image-20250514113708677"></p><p>如果你的文件管理器默认没有 SMB 也没有关系，还可以使用第三方应用进行 SMB 连接，比如这个 Github 项目，可以从 release 中下载 APK 进行安装。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250514113634937.png" alt="image-20250514113634937"></p><p>连接成功后，可对文件进行扫描和管理。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250514113612422.png" alt="图片"></p><p>通过以上配置，就可以在电视盒子上通过 SMB 连接 NAS，开心的观看的 4K 电影了。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250514113307833.png" alt="image-20250514113307833"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;作为一个合格的 NAS，肯定要有文件共享的功能，一般我们常用的是 SMB，NFS 和 WebDav 这三种，然后需要设置共享目录和用户权限。&lt;/p&gt;
&lt;p&gt;懒猫网盘提供了一个开箱即用的方案，直接通过 APP 把网盘的文件夹映射自动挂载到本地，不需要像 Linux 那样 mo</summary>
      
    
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/categories/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/tags/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
  </entry>
  
  <entry>
    <title>懒猫微服实战入门（六）：使用2fauth共享你的MFA</title>
    <link href="https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9A%E4%BD%BF%E7%94%A82fauth%E5%85%B1%E4%BA%AB%E4%BD%A0%E7%9A%84mfa/"/>
    <id>https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9A%E4%BD%BF%E7%94%A82fauth%E5%85%B1%E4%BA%AB%E4%BD%A0%E7%9A%84mfa/</id>
    <published>2025-07-01T16:00:00.000Z</published>
    <updated>2025-06-30T08:38:22.824Z</updated>
    
    <content type="html"><![CDATA[<p>标题有点绕口，甚至听起来有点反直觉。</p><p>故事的背景是这样的，去参加了 AWS 的活动给的账户强制开 MFA，但是我们还想团队内部 share 使用，于是产生了这个需求。</p><p>登录到 AWS 的控制台强制开了 MFA，而且在第一次注册的时候强制绑定多因子验证。这也就意味着，其他人如果想登录这个账户就得随时 call 我，然后我去发给他数据验证码，这实在很不方便，所以想到了共享的 MFA 的需求。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250516164159950.png" alt="image-20250516164159950"></p><p>头几天逛商店看到的，觉得项目有点意思就下载了，没想到这么快用到了。懒猫商店，一键部署很方便，当成 Saas 服务来用，完全不考虑部署运维的事情。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250516163824579.png" alt="image-20250516163824579"></p><p>之前给小伙伴开了懒猫微服的账户，共享了 planka 来看项目进度，这次把 2fauth 的权限也添加给他。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250516163911970.png" alt="image-20250516163911970"></p><p>首先我这边先注册管理员的账户，默认是登录页面，需要切换一下。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250516164749502.png" alt="image-20250516164749502"></p><p>登录之后会提示绑定一下这个账户的 MFA，我就是为了不在手机上安装 MFA 软件才用这个的，就不要套娃了。反正外面还有懒猫的验证系统，那个还有 TLS 加密，安全码验证。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250516164845425.png" alt="image-20250516164845425"></p><p>选择不绑定设备之后，在这里导入需要设置的 MFA，这可以用摄像头或者导入二维码文件。我用的电脑端，所以直接在应用处截图，然后导入到这里了。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250516164821161.png" alt="image-20250516164821161"></p><p>点击最下面的导入，然后选择二维码 - 上传 就可以了。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250516165311672.png" alt="image-20250516165311672"></p><p>导入之后是这样的，可以二次确认签发机构。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250516165259782.png" alt="image-20250516165259782"></p><p>然后把生成的 6 位数字填写到 aws 控制台上，就可以成功验证了。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250516165435265.png" alt="image-20250516165435265"></p><p>在 2fauth 控制台上是这样的，点开就可以查看 6 位数字验证码。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250516165711375.png" alt="image-20250516165711375"></p><p>那么回到一开始的话题，怎么共享给其他账户呢？点击下方 - 管理员 - 用户 ，然后我们来新建一个普通用户。步骤基本和前面的一致。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250516165543137.png" alt="image-20250516165543137"></p><p>本来以为有用户组一类的概念，把两个用户和 MFA 放在一个组里达到 share 的目的，结果发现这个分组完全是用来区分的 TAG。也没有找到把用户加到组里的操作。那就从管理员导出，再从下一个用户导入吧。</p><p>首先试了二维码，但是导入的时候就提示 server error。于是查了了 wiki，都是其他 MFA 软件导入 2fauth 的。无奈只能只能导出配置文件。名字叫做 2fauth_export.json</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250516170143799.png" alt="image-20250516170143799"></p><p>登录新用户的时候新建，然后选择文本文件。导入刚才的配置文件就可以了。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250516165311672.png" alt="image-20250516165311672"></p><p>配置文件基本长这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;app&quot;: &quot;2fauth_v5.3.2&quot;,</span><br><span class="line">  &quot;schema&quot;: 1,</span><br><span class="line">  &quot;datetime&quot;: &quot;2025-05-16T08:35:07.676665Z&quot;,</span><br><span class="line">  &quot;data&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;otp_type&quot;: &quot;totp&quot;,</span><br><span class="line">      &quot;account&quot;: &quot;Q&quot;,</span><br><span class="line">      &quot;service&quot;: &quot;AWS SSO&quot;,</span><br><span class="line">      &quot;icon&quot;: null,</span><br><span class="line">      &quot;icon_mime&quot;: null,</span><br><span class="line">      &quot;icon_file&quot;: null,</span><br><span class="line">      &quot;secret&quot;: &quot;secretsss&quot;,</span><br><span class="line">      &quot;digits&quot;: 6,</span><br><span class="line">      &quot;algorithm&quot;: &quot;sha1&quot;,</span><br><span class="line">      &quot;period&quot;: 30,</span><br><span class="line">      &quot;counter&quot;: null,</span><br><span class="line">      &quot;legacy_uri&quot;: &quot;otpauth://totp/&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整个过程有点绕，有人说每个人手机安装 google authenticator 扫一下不就好了吗？</p><p><strong>为什么采取这个方案？</strong></p><ol><li><p>之前用手机安装类似软件，每次去三里屯维修的时候都说返厂要把数据抹掉，下次还得重新绑定，还有一些软件只认 MFA 不认人。</p><p>这过程不光折腾的够呛，而且 Apple 本身的问题还要 MFA 来买单。</p></li><li><p>起初是想做一个类似于团队共享 MFA 的场景的，类似于 RBAC，控制起来很灵活，但是实际体验下来是没有达到的。</p></li><li><p>把最早的 MFA 二维码截图 share 出去也能扫，但是不确定有效时间。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;标题有点绕口，甚至听起来有点反直觉。&lt;/p&gt;
&lt;p&gt;故事的背景是这样的，去参加了 AWS 的活动给的账户强制开 MFA，但是我们还想团队内部 share 使用，于是产生了这个需求。&lt;/p&gt;
&lt;p&gt;登录到 AWS 的控制台强制开了 MFA，而且在第一次注册的时候强制绑定多因子</summary>
      
    
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/categories/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/tags/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
  </entry>
  
  <entry>
    <title>懒猫微服实战入门（八）：懒猫微服 × SSH Remote：打造随时随地的云端开发环境</title>
    <link href="https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E5%85%AB%EF%BC%89%EF%BC%9A%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D-%C3%97-ssh-remote%EF%BC%9A%E6%89%93%E9%80%A0%E9%9A%8F%E6%97%B6%E9%9A%8F%E5%9C%B0%E7%9A%84%E4%BA%91%E7%AB%AF%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <id>https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E5%85%AB%EF%BC%89%EF%BC%9A%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D-%C3%97-ssh-remote%EF%BC%9A%E6%89%93%E9%80%A0%E9%9A%8F%E6%97%B6%E9%9A%8F%E5%9C%B0%E7%9A%84%E4%BA%91%E7%AB%AF%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</id>
    <published>2025-07-01T16:00:00.000Z</published>
    <updated>2025-06-30T08:38:22.824Z</updated>
    
    <content type="html"><![CDATA[<p>Apple 开始换了 ARM 芯片之后，我们还处于 X86 和 ARM 交叉的阶段。所以有时候还得有一台 X86 的开发环境来测试一些兼容性问题。一开始手里面只有低配置的软路由，后来入手了懒猫微服，这个 11 代 i5 的 CPU 终于能够编译一些重型的任务了。</p><p>下面演示如何把懒猫微服配置成一台云端开发机，并分别用 <strong>VS Code</strong> 与 <strong>PyCharm</strong> 进行远程开发。</p><p>虽然懒猫微服的商店已经上架了 code-sever 可以开箱即用，除此之外我们也来探索下其他的方案。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250529163903393.png" alt="image-20250529163903393"></p><hr><h2 id="1-·-准备-SSH-免密登录"><a href="#1-·-准备-SSH-免密登录" class="headerlink" title="1 · 准备 SSH 免密登录"></a>1 · 准备 SSH 免密登录</h2><p>修改 <code>~/.ssh/config</code>（若无自行创建）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Host lzc</span><br><span class="line">    HostName server.heiyu.space      # 服务器域名 / IP</span><br><span class="line">    User root                        # 默认用户名</span><br><span class="line">    IdentityFile ~/.ssh/id_ed25519   # 私钥路径</span><br><span class="line">    Port 22                          # 默认端口</span><br><span class="line">    ServerAliveInterval 60           # 60 秒保活</span><br><span class="line">    TCPKeepAlive yes                 # TCP 保持连接</span><br><span class="line">    ForwardAgent yes                 # 允许代理转发</span><br><span class="line">    IdentitiesOnly yes               # 只尝试显式钥匙</span><br></pre></td></tr></table></figure><p>终端测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh lzc          <span class="comment"># 应直接登录而不再提示密码</span></span><br></pre></td></tr></table></figure><hr><h2 id="2-·-VS-Code-：一键-Remote"><a href="#2-·-VS-Code-：一键-Remote" class="headerlink" title="2 · VS Code ：一键 Remote"></a>2 · VS Code ：一键 Remote</h2><blockquote><p>需要 <strong>Remote Development</strong> 三件套插件（SSH &#x2F; WSL &#x2F; Containers）。</p></blockquote><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250529161722643.png" alt="VS Code 插件"></p><ol><li>安装完成后，点击左下角 <strong>棕黄色</strong>的 Remote 图标。</li><li>VS Code 自动读取 <code>~/.ssh/config</code>，显示刚才的 <strong>lzc</strong> 主机。<br><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250529161700856.png" alt="选择主机"></li><li>选择需要打开的文件夹，我们是 root 登录，所以基本上所有的路径都有访问权限，由于懒猫微服的设置，除了 root 目录外，其他的目标可能会被清空，所以我们尽量把代码留在 root 目录下就好。<br><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250529162340274.png" alt="选择目录"></li><li>打开之后我们就可以看到代码了，剩下的就和本地差不多了，这也就是偷懒不学 VIM 的原因吧。<br><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250529161829107.png" alt="远程工作区"></li></ol><hr><h2 id="3-·-PyCharm-：Gateway-秒连"><a href="#3-·-PyCharm-：Gateway-秒连" class="headerlink" title="3 · PyCharm ：Gateway 秒连"></a>3 · PyCharm ：Gateway 秒连</h2><p>我们再来看 Pycharm，默认提供了远程开发的功能。记得最早 Jetbrains 的是这么实现的，把本地代码推送到远端的&#x2F;tmp 文件夹然后调用远端编译器执行。现在用了 Gateway 基本可以达到实时的效果了。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250529161730354.png" alt="PyCharm Remote 入口"></p><ol><li>依次点击 <strong>New SSH Configuration → Add</strong>，填入主机、端口、用户名，并选择 <strong>私钥</strong> 或 <strong>密码</strong>。<br><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250529161741726.png" alt="配置 SSH"></li><li>连接成功后，选择需要打开的服务器目录（同样建议用 <code>/root/...</code>）。<br><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250529161748708.png" alt="选择工程目录"></li><li>首次连接时 PyCharm 会在服务器端安装一个 <strong>IDE Agent</strong>。<br><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250529163010706.png" alt="安装 Agent"></li><li>安装完毕即可像本地一样运行、调试、补全。<br><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250529161803751.png" alt="远程编辑器"></li></ol><hr><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>apple 的 M 芯片用来开发，而懒微服就作为上线环境之前的测试环境，当需要 X86 环境的时候，随时切换过去。</p><p><img src="https://lzc-playground-1301583638.cos.ap-chengdu.myqcloud.com/guidelines/459/31aa8fe0-4d90-4b1a-948f-c97288f47c64.png" alt="77dea8a6a38817c503c379dd946fc9e4.png" title="77dea8a6a38817c503c379dd946fc9e4.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Apple 开始换了 ARM 芯片之后，我们还处于 X86 和 ARM 交叉的阶段。所以有时候还得有一台 X86 的开发环境来测试一些兼容性问题。一开始手里面只有低配置的软路由，后来入手了懒猫微服，这个 11 代 i5 的 CPU 终于能够编译一些重型的任务了。&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/categories/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/tags/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
  </entry>
  
  <entry>
    <title>懒猫微服实战入门（九）：给懒猫安装图形界面，使用 XRDP 实现远程桌面</title>
    <link href="https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E4%B9%9D%EF%BC%89%EF%BC%9A%E7%BB%99%E6%87%92%E7%8C%AB%E5%AE%89%E8%A3%85%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%EF%BC%8C%E4%BD%BF%E7%94%A8-xrdp-%E5%AE%9E%E7%8E%B0%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2/"/>
    <id>https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%88%E4%B9%9D%EF%BC%89%EF%BC%9A%E7%BB%99%E6%87%92%E7%8C%AB%E5%AE%89%E8%A3%85%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%EF%BC%8C%E4%BD%BF%E7%94%A8-xrdp-%E5%AE%9E%E7%8E%B0%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2/</id>
    <published>2025-07-01T16:00:00.000Z</published>
    <updated>2025-06-30T08:38:22.824Z</updated>
    
    <content type="html"><![CDATA[<p>虽然我们日常使用 Linux 系统时，大多数操作都是通过终端完成的，比如运行服务、查看日志、编辑配置文件等。但在某些场景下，图形界面仍然是非常有用的：例如需要打开浏览器进行调试、运行带 GUI 的应用程序，或者想给不太熟悉命令行的同事一个更友好的访问方式。</p><p>因此，这一篇教程就来介绍如何在懒猫微服上安装图形桌面环境，并通过 XRDP 实现远程桌面连接。我们选择的是轻量级的 <strong>XFCE4 桌面环境</strong>，它资源占用小，运行稳定，界面风格有点像老版本 Windows，非常适合资源有限的 VPS 或微型容器环境。当然，你也可以选择 KDE Plasma、GNOME 等更现代的桌面环境，但安装包体积和资源占用会更高。</p><hr><h2 id="一键安装脚本"><a href="#一键安装脚本" class="headerlink" title="一键安装脚本"></a>一键安装脚本</h2><p>经过多次测试，我总结了一份实用的一键安装脚本，适用于基于 Debian 的系统（如 Ubuntu 或懒猫微服）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;==&gt; 设置 keyboard-configuration 为无交互模式&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;keyboard-configuration keyboard-configuration/layoutcode select us&#x27;</span> | debconf-set-selections</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;keyboard-configuration keyboard-configuration/modelcode select pc105&#x27;</span> | debconf-set-selections</span><br><span class="line"><span class="built_in">export</span> DEBIAN_FRONTEND=noninteractive</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;==&gt; 更新系统包索引&quot;</span></span><br><span class="line">apt update</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;==&gt; 安装桌面和远程桌面组件&quot;</span></span><br><span class="line">apt install -y xfce4 xfce4-goodies xorg dbus-x11 x11-xserver-utils \</span><br><span class="line">               xrdp xorgxrdp keyboard-configuration</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;==&gt; 配置 .xsession 启动 XFCE&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;startxfce4&quot;</span> &gt; ~/.xsession</span><br><span class="line"><span class="built_in">chmod</span> +x ~/.xsession</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;==&gt; 添加 xrdp 到 ssl-cert 用户组（避免黑屏）&quot;</span></span><br><span class="line">adduser xrdp ssl-cert</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;==&gt; 启动并启用 xrdp 服务&quot;</span></span><br><span class="line">systemctl <span class="built_in">enable</span> xrdp</span><br><span class="line">systemctl restart xrdp</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;✅ 安装完成！现在可以使用 Windows 远程桌面（mstsc）登录本机 IP，使用系统用户名登录 XFCE 桌面。&quot;</span></span><br></pre></td></tr></table></figure><p>你只需要将这段脚本保存为 <code>install-xrdp-xfce.sh</code> 文件，赋予执行权限并运行即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x install-xrdp-xfce.sh</span><br><span class="line">./install-xrdp-xfce.sh</span><br></pre></td></tr></table></figure><p>需要注意的是, 重启之后这个配置仍然会消失.所以还需要使用 systemd –user 拉起来这个脚本.</p><h2 id="远程桌面使用说明"><a href="#远程桌面使用说明" class="headerlink" title="远程桌面使用说明"></a>远程桌面使用说明</h2><ol><li>安装完成后，在 Windows 系统中打开“远程桌面连接（mstsc）”。</li><li>输入你的懒猫主机 IP 地址。</li><li>使用系统中的用户名密码进行登录</li><li>如果一切正常，应该可以看到一个 XFCE 图形桌面。</li></ol><p>如果你连接后出现黑屏问题，通常是 <code>.xsession</code> 配置不正确或者权限不足，上述脚本中已经处理好了这个问题。</p><hr><h2 id="补充：如果你还想让它能本地显示图形界面"><a href="#补充：如果你还想让它能本地显示图形界面" class="headerlink" title="补充：如果你还想让它能本地显示图形界面"></a>补充：如果你还想让它能本地显示图形界面</h2><p>如果你希望在物理机或有显卡输出的虚拟机中直接打开图形界面（不是远程连接），可以额外添加如下配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;exec startxfce4&quot;</span> &gt; ~/.xinitrc</span><br><span class="line"><span class="built_in">chmod</span> +x ~/.xinitrc</span><br><span class="line">startx</span><br></pre></td></tr></table></figure><p>这样你在本地终端执行 <code>startx</code> 就能启动 XFCE 桌面。</p><p>通过上述脚本，我们可以非常快速地为懒猫微服安装一个可用的图形桌面环境，并通过 XRDP 实现远程访问。这在需要图形界面支持的场景下尤其方便，例如：</p><ul><li>使用浏览器调试网页；</li><li>可视化工具如 Wireshark、GParted；</li><li>为不熟悉命令行的用户开放访问权限。</li></ul><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250530112353984.png" alt="image-20250530112353984"></p><p>如果你希望安装 KDE、GNOME 等更复杂的桌面，可以将 <code>apt install</code> 中的包名替换为 <code>kde-standard</code>、<code>gnome</code> 等，并注意资源占用问题。</p><p><img src="https://lzc-playground-1301583638.cos.ap-chengdu.myqcloud.com/guidelines/459/d44ae9de-a552-4745-9a8e-c645ff4def87.png" alt="77dea8a6a38817c503c379dd946fc9e4.png" title="77dea8a6a38817c503c379dd946fc9e4.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;虽然我们日常使用 Linux 系统时，大多数操作都是通过终端完成的，比如运行服务、查看日志、编辑配置文件等。但在某些场景下，图形界面仍然是非常有用的：例如需要打开浏览器进行调试、运行带 GUI 的应用程序，或者想给不太熟悉命令行的同事一个更友好的访问方式。&lt;/p&gt;
&lt;p&gt;因</summary>
      
    
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/categories/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/tags/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
  </entry>
  
  <entry>
    <title>懒猫微服开发篇（零）：上架应用需要哪些知识</title>
    <link href="https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%BC%80%E5%8F%91%E7%AF%87%EF%BC%88%E9%9B%B6%EF%BC%89%EF%BC%9A%E4%B8%8A%E6%9E%B6%E5%BA%94%E7%94%A8%E9%9C%80%E8%A6%81%E5%93%AA%E4%BA%9B%E7%9F%A5%E8%AF%86/"/>
    <id>https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%BC%80%E5%8F%91%E7%AF%87%EF%BC%88%E9%9B%B6%EF%BC%89%EF%BC%9A%E4%B8%8A%E6%9E%B6%E5%BA%94%E7%94%A8%E9%9C%80%E8%A6%81%E5%93%AA%E4%BA%9B%E7%9F%A5%E8%AF%86/</id>
    <published>2025-07-01T16:00:00.000Z</published>
    <updated>2025-06-30T08:38:22.825Z</updated>
    
    <content type="html"><![CDATA[<p>懒猫微服的可玩性在于可以让开发人员放开手脚来做一些事情，等于是提供了一个可靠的基础设施。那么理所当然我们可以把开源的知识应用到上面，比如开发或者移植应用，或者干脆部署一些好玩的东西。这在传统 NAS 上实现起来很困难，甚至都没有包管理工具。</p><p>我们看一看开发懒猫应用，需要什么样的知识？</p><p>那么，开发懒猫微服的应用需要掌握哪些技能呢？</p><h3 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h3><p>懒猫微服的 CLI 本质上是一个通过 NPM 全局安装的工具包，因此掌握一些基本的 NPM 使用方法是必要的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @lazycatcloud/lzc-cli</span><br></pre></td></tr></table></figure><p>这个工具是用 JavaScript 编写的，但如果你只是为了使用而非开发，那么并不需要掌握这门语言。当然，你也可以选择使用 pnpm 或 yarn 作为包管理工具，或者通过 NVM 来创建 Node.js 虚拟环境。</p><p>如果在 macOS&#x2F;Linux 上遇到了权限不足的问题，其实不一定要使用 <code>sudo</code>。默认情况下，npm 的全局目录是 <code>/usr/local</code>，普通用户对其没有写权限。比如我们可以看到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> ll /usr/</span><br><span class="line">total 0</span><br><span class="line">drwxr-xr-x  918 root  wheel    29K  6  5 14:05 bin/</span><br><span class="line">drwxr-xr-x   32 root  wheel   1.0K  6  5 14:05 lib/</span><br><span class="line">drwxr-xr-x  417 root  wheel    13K  6  5 14:05 libexec/</span><br><span class="line">drwxr-xr-x    8 root  wheel   256B  6 10 09:31 local/</span><br><span class="line">drwxr-xr-x  230 root  wheel   7.2K  6  5 14:05 sbin/</span><br><span class="line">drwxr-xr-x   43 root  wheel   1.3K  6  5 14:05 share/</span><br><span class="line">drwxr-xr-x    5 root  wheel   160B  6  5 14:05 standalone/</span><br><span class="line">lrwxr-xr-x    1 root  wheel    25B  6  5 14:05 X11@ -&gt; ../private/var/select/X11</span><br><span class="line">lrwxr-xr-x    1 root  wheel    25B  6  5 14:05 X11R6@ -&gt; ../private/var/select/X11</span><br></pre></td></tr></table></figure><p>因此我们可以通过设置 npm 的全局安装目录，规避权限问题。在当前用户目录中创建一个文件夹并添加到环境变量中即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> npm config get prefix</span><br><span class="line">/usr/local</span><br><span class="line"><span class="built_in">mkdir</span> ~/.npm_packages</span><br><span class="line">npm config <span class="built_in">set</span> prefix ~/.npm_packages/</span><br><span class="line">npm config get prefix</span><br><span class="line">/Users/home/.npm_packages</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> PATH=~/.npm-global/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>开发的技能是可选的，如果你只是移植现有的应用的话，那么具备一些 Docker Compose 的知识就足够了，这个我们后面再说。</p><p>如果是开发原创 APP 的话，那么无论是 Vue，React，Go，Python 都有用武之地，只要是 Web 的应用能够本地运行或者打包成 Docker 就能上架商店。相信很多开发的小伙伴也会做一些 Devops 的事情，这部分的技能是可以完全迁移过来的。</p><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><p>很多 NAS 是基于 FreeBSD 或者 Linux 改的，懒猫微服是基于 debian12， 虽然在设计之初是针对非专业玩家。但是后来也开放了 SSH，可以做和其他 Linux 一样的事情，给了 root 用户，所以可以底层操作文件，网络，查看分区，监控，以及系统负载。</p><p>所以不是只有树莓派或者自己笔电装机才能学 Linux，懒猫微服的系统重启之后会复原（除了 root 目录和网络设置），所以请随便折腾。</p><p>虽然有了一套很完善的图形客户端，但是相信很多专业的玩家还是更加喜欢用传统 Linux 的方式来看待这个微服，我管他叫做拆解系统设计。</p><p>举个例子：用 <code>htop</code> 查看负载、用 <code>nmtui</code> 配置网络、用 <code>lsblk</code> 查看磁盘分区、用 <code>systemctl</code> 设置服务自启。深度定制的系统，让我们可以完全无视内核，以及 grub 的这些东西。甚至连 sambda，webdav 这些 server 都不用自己安装。</p><h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><p>Docker 好像对 NAS 玩家是必须的，无论是群晖，威联通。与传统 NAS 不一样的是，懒猫微服集成了三套 docker，分别是系统组件，playground 和应用商店。</p><p>playground 就是我们刻板印象的 Docker， 这里叫做<code>pg-docker</code>，所以需要懂一些 Docker 的知识，比如下载，打包，上传，还有数据卷的贡献。甚至包括 Docker- compose 的使用。</p><p>应用商店也是基于 Docker 运行的，</p><p>上架软件时有两种方式：</p><ol><li><p><strong>直接打包</strong>：这个一般用于原创应用或者移植开源无 docker 版本的应用。调试的时候可以使用懒猫内置的 Docker Registry 的 image 进行测试，颇有 VS code remote 的风格。这个调试模式叫做 devshell。</p></li><li><p><strong>Docker 镜像迁移</strong>：一般用于已有的 docker image 的迁移，由于国内出海宽带不足，访问 Docker 经常失败。所以需要使用懒猫提供的 Docker Registry 来做一个国内版本的镜像。然后再做目录的映射。</p></li></ol><h3 id="OIDC"><a href="#OIDC" class="headerlink" title="OIDC"></a>OIDC</h3><p>这个稍稍有点跑题，前面的都是传统 Devops 需要的东西。这里的 OIDC 叫做 OpenID Connect，是单点登录实现的一种。传统的认证有基于 cookie 的，或者基于 JWT 的。OIDC 是后者，也是单点登录中最优雅的实现。除了 OIDC 之外，你可能听说过 SAML，Oauth，其实也都是 Single Sign-On 的不同实现，而 Oauth 是和 OpenID Connect 源同一脉，Oauth 的各家实现千差万别，而 OpenID Connect 既统一了规范，解决用户态的问题。换句话说 OAuth 2.0 只是用来授权，颁发的是<code>Access Token</code>，而对于访问者是谁还需要开发人员自己存数据库。OIDC 则是引入了<code>ID Token</code>，这通常是通常是 JWT，所以认证直接请求 IDP 解码就好了。大致是这个流程：</p><p>下图是 OIDC 的基本流程：</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250623222439761.png" alt="image-20250623222439761"></p><h4 id="能够学到哪些知识："><a href="#能够学到哪些知识：" class="headerlink" title="能够学到哪些知识："></a>能够学到哪些知识：</h4><ol><li>微服内部的官网看起来是根据 OpenResty 改的（个人推断），所以可以来复习一下 nginx 或者 OpenResty 相关的知识</li><li>Docker 的使用，容器这几年还是挺火的，移植应用必备，甚至还支持 web VNC。</li><li>HTTP 知识：有些情况需要对 http 的请求做特殊的处理，比如加一些自定义 header 或者 cookies</li><li>单点登录：微服内置了 OIDC 的认证，应用能够自动帮助我们申请 CLIENT_ID 和 CLIENT_SECRET，简化了和 IDP 打交道的环节。</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>如果你熟悉 Web 开发、Docker 和基本的 Linux 操作，那么你已经可以快速上手懒猫微服的应用开发。无论是移植开源项目，还是开发原创 App，只要能够在本地运行或打包为 Docker 镜像，就可以顺利上架到应用商店。</p><p>懒猫微服不仅仅是一个面向普通用户的 NAS 系统，更是一块为开发者打造的自由试验田 —— 它就是一台稳定可靠的 Debian 云主机，你可以在上面尽情发挥创意与技术。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;懒猫微服的可玩性在于可以让开发人员放开手脚来做一些事情，等于是提供了一个可靠的基础设施。那么理所当然我们可以把开源的知识应用到上面，比如开发或者移植应用，或者干脆部署一些好玩的东西。这在传统 NAS 上实现起来很困难，甚至都没有包管理工具。&lt;/p&gt;
&lt;p&gt;我们看一看开发懒猫</summary>
      
    
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/categories/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
    
    <category term="开发" scheme="https://xu-hardy.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>写给懒猫微服玩家的容器小书 Docker篇（一）：《无法部署的诅咒》</title>
    <link href="https://xu-hardy.github.io/%E5%86%99%E7%BB%99%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E7%8E%A9%E5%AE%B6%E7%9A%84%E5%AE%B9%E5%99%A8%E5%B0%8F%E4%B9%A6-docker%E7%AF%87%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E3%80%8A%E6%97%A0%E6%B3%95%E9%83%A8%E7%BD%B2%E7%9A%84%E8%AF%85%E5%92%92%E3%80%8B/"/>
    <id>https://xu-hardy.github.io/%E5%86%99%E7%BB%99%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E7%8E%A9%E5%AE%B6%E7%9A%84%E5%AE%B9%E5%99%A8%E5%B0%8F%E4%B9%A6-docker%E7%AF%87%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E3%80%8A%E6%97%A0%E6%B3%95%E9%83%A8%E7%BD%B2%E7%9A%84%E8%AF%85%E5%92%92%E3%80%8B/</id>
    <published>2025-07-01T16:00:00.000Z</published>
    <updated>2025-06-30T08:38:22.825Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一直想写一本容器小书，真好懒猫基本都做了容器化，所以把这部分分享出来。不同的是，懒猫微服中使用 pg-docker 来替代 docker 命令，使用 dockge 来执行 docker-compose。以下讲解以标准 docker 为主，这样子既学会了 docker 知识，也能够在懒猫微服上启动 Docker 服务。</p></blockquote><h1 id="《无法部署的诅咒》讲的是-Docker-的起源与作用、镜像与容器概念、安装入门"><a href="#《无法部署的诅咒》讲的是-Docker-的起源与作用、镜像与容器概念、安装入门" class="headerlink" title="《无法部署的诅咒》讲的是 Docker 的起源与作用、镜像与容器概念、安装入门"></a>《无法部署的诅咒》讲的是 Docker 的起源与作用、镜像与容器概念、安装入门</h1><h3 id="🏙️-开篇：代码在电脑上运行良好，部署却频频翻车"><a href="#🏙️-开篇：代码在电脑上运行良好，部署却频频翻车" class="headerlink" title="🏙️ 开篇：代码在电脑上运行良好，部署却频频翻车"></a>🏙️ 开篇：代码在电脑上运行良好，部署却频频翻车</h3><p>小李是一名后端工程师，刚完成一个用 Flask 编写的内部管理系统。他信心满满地将代码提交，交给测试工程师老赵部署。</p><p>可没想到——</p><blockquote><p>“报错了！你是不是少传文件了？”</p><p>“我这边 Python 是 3.6，怎么你这代码用了 <code>match case</code>？”</p><p>“你数据库呢？你 Redis 配了？环境变量在哪？”</p></blockquote><p>这一刻，小李陷入了一个叫「部署地狱」的世界。</p><p>这个世界里，每一台服务器都是独一无二的“宠物”，需要手动配置、手动部署、手动踩坑，稍有不慎就会陷入版本冲突、依赖缺失、环境不一致的深渊。</p><p>小李心里想：<strong>有没有一种办法，能让我把代码和环境一起打包起来，无论在哪运行都能保持一致？</strong></p><hr><h3 id="🌀-变故：神秘的程序员大叔与魔法容器"><a href="#🌀-变故：神秘的程序员大叔与魔法容器" class="headerlink" title="🌀 变故：神秘的程序员大叔与魔法容器"></a>🌀 变故：神秘的程序员大叔与魔法容器</h3><p>在公司茶水间，小李邂逅了一个带着黑框眼镜的大叔，大家都叫他老周。</p><p>老周是个技术老炮，在各种部署大灾难中杀出血路。他听完小李的吐槽后，轻轻地推了一份文档过来，只写了五个字母：</p><blockquote><p><code>Docker</code></p></blockquote><p>“这是个<strong>魔法容器</strong>，”老周说，“把你代码和环境都打包进去，哪怕放在火星，也能跑。”</p><blockquote><p>“以后别再‘它在我电脑上可以跑’了，Docker 能让所有环境变得一致。”</p></blockquote><p>小李的眼睛亮了。</p><hr><h3 id="🔧-技术讲解-Part-1：什么是-Docker？"><a href="#🔧-技术讲解-Part-1：什么是-Docker？" class="headerlink" title="🔧 技术讲解 Part 1：什么是 Docker？"></a>🔧 技术讲解 Part 1：什么是 Docker？</h3><p>Docker 是一个<strong>开源的容器化平台</strong>，它允许开发者将应用及其所有依赖打包成一个“容器”，保证在任何平台上都可以一致运行。</p><p>你可以把 Docker 想象成：</p><blockquote><p><strong>程序员的打包箱子</strong>：把你写的程序、环境、库、配置都放进去，打包成一个“镜像”；</p><p><strong>程序员的快递服务</strong>：运行镜像就像打开快递，内容和你寄出时一模一样。</p></blockquote><h4 id="🚀-为什么要用-Docker？"><a href="#🚀-为什么要用-Docker？" class="headerlink" title="🚀 为什么要用 Docker？"></a>🚀 为什么要用 Docker？</h4><ul><li>✅ <strong>跨平台运行</strong>：一次构建，到处运行（Run anywhere）</li><li>✅ <strong>快速部署</strong>：秒级启动，适合 CI&#x2F;CD</li><li>✅ <strong>环境一致性</strong>：不再“你电脑能跑我电脑不行”</li><li>✅ <strong>轻量隔离</strong>：不像虚拟机那么重，不需要整个操作系统</li><li>✅ <strong>资源占用少</strong>：用起来更像一个进程，而不是一台虚拟机</li></ul><blockquote><p>☑️ 一句话总结：<strong>Docker 解决了“在我电脑上能跑”的问题。</strong></p></blockquote><hr><h3 id="🛠️-技术讲解-Part-2：如何安装-Docker？"><a href="#🛠️-技术讲解-Part-2：如何安装-Docker？" class="headerlink" title="🛠️ 技术讲解 Part 2：如何安装 Docker？"></a>🛠️ 技术讲解 Part 2：如何安装 Docker？</h3><p>老周拍了拍小李的肩膀，说：“先装起来，动手最重要。”</p><h4 id="🧑‍💻-在-Mac-Windows-上："><a href="#🧑‍💻-在-Mac-Windows-上：" class="headerlink" title="🧑‍💻 在 Mac &#x2F; Windows 上："></a>🧑‍💻 在 Mac &#x2F; Windows 上：</h4><ul><li>访问官网：<a href="https://www.docker.com/products/docker-desktop">https://www.docker.com/products/docker-desktop</a></li><li>下载并安装 Docker Desktop</li><li>安装后打开终端（Terminal），输入：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker --version</span><br></pre></td></tr></table></figure><p>如果看到 Docker 的版本信息，说明安装成功。</p><h4 id="🧑‍💻-在-Linux（Ubuntu）上："><a href="#🧑‍💻-在-Linux（Ubuntu）上：" class="headerlink" title="🧑‍💻 在 Linux（Ubuntu）上："></a>🧑‍💻 在 Linux（Ubuntu）上：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install docker.io</span><br><span class="line"><span class="built_in">sudo</span> systemctl start docker</span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><p>🔐 <em>建议将当前用户加入 docker 组，以免每次都要用 sudo：</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> usermod -aG docker <span class="variable">$USER</span></span><br></pre></td></tr></table></figure><hr><h3 id="🧠-技术讲解-Part-3：Docker-的核心概念"><a href="#🧠-技术讲解-Part-3：Docker-的核心概念" class="headerlink" title="🧠 技术讲解 Part 3：Docker 的核心概念"></a>🧠 技术讲解 Part 3：Docker 的核心概念</h3><table><thead><tr><th>概念</th><th>说明</th></tr></thead><tbody><tr><td>镜像（Image）</td><td>应用和其依赖的静态快照模板（如：打包好的 Python 环境 + Flask 项目）</td></tr><tr><td>容器（Container）</td><td>镜像运行出来的实例，是真正“活着”的程序</td></tr><tr><td>Dockerfile</td><td>编写镜像的“配方”，定义如何构建镜像</td></tr><tr><td>Docker Hub</td><td>类似 GitHub 的公共镜像仓库，可上传&#x2F;下载别人做好的镜像</td></tr><tr><td><code>docker</code> 命令</td><td>Docker 的主命令工具，用于操作镜像、容器、网络、卷等</td></tr></tbody></table><h4 id="📌-镜像-vs-容器"><a href="#📌-镜像-vs-容器" class="headerlink" title="📌 镜像 vs 容器"></a>📌 镜像 vs 容器</h4><ul><li>镜像是“模具”，容器是“实物”</li><li>镜像不可变，容器是可运行的环境</li><li>一个镜像可以运行多个容器</li></ul><hr><h3 id="🧪-技术实践：Hello-Docker-世界"><a href="#🧪-技术实践：Hello-Docker-世界" class="headerlink" title="🧪 技术实践：Hello Docker 世界"></a>🧪 技术实践：Hello Docker 世界</h3><p>老周指导小李敲下第一行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><blockquote><p>如果 docker run&#x2F;pull 有问题，那么可以通过<code>lzc-cli appstore copy-image your-images</code>来使用懒猫的镜像仓库。</p></blockquote><p>这个命令会做三件事：</p><ol><li>自动从 Docker Hub 拉取一个 <code>hello-world</code> 镜像（如果本地没有）</li><li>基于镜像运行容器</li><li>容器运行后输出信息，然后自动退出</li></ol><p>这是验证 Docker 是否正常运行的“点灯测试”。</p><hr><h3 id="🧱-小李的第一个真实容器：Flask-Web-项目打包实战"><a href="#🧱-小李的第一个真实容器：Flask-Web-项目打包实战" class="headerlink" title="🧱 小李的第一个真实容器：Flask Web 项目打包实战"></a>🧱 小李的第一个真实容器：Flask Web 项目打包实战</h3><p>老周笑着说：“现在，把你那个 Flask 管理系统也丢进 Docker 试试。”</p><p>小李在项目根目录下写了一个 Dockerfile：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 Python 官方基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.11</span>-slim</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置工作目录</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制项目文件</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . /app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install -r requirements.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置启动命令</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;python&quot;</span>, <span class="string">&quot;main.py&quot;</span>]</span></span><br></pre></td></tr></table></figure><h4 id="构建镜像："><a href="#构建镜像：" class="headerlink" title="构建镜像："></a>构建镜像：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t my-flask-app .</span><br></pre></td></tr></table></figure><h4 id="启动容器："><a href="#启动容器：" class="headerlink" title="启动容器："></a>启动容器：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 5000:5000 my-flask-app</span><br></pre></td></tr></table></figure><p>现在访问浏览器 <code>http://localhost:5000</code>，你的项目上线了！</p><hr><h3 id="💡-小知识快闪"><a href="#💡-小知识快闪" class="headerlink" title="💡 小知识快闪"></a>💡 小知识快闪</h3><ul><li>Docker 容器内部不包含完整操作系统，只包含必要的运行库；</li><li>Dockerfile 的每一行都是一层（Layer），构建时会缓存复用；</li><li><code>docker ps</code> 查看运行中容器，<code>docker images</code> 查看已有镜像；</li><li>可以通过 <code>.dockerignore</code> 文件忽略不想加入镜像的文件，比如 <code>.git</code> 和日志。</li></ul><hr><h3 id="⚔️-章节尾声：打破部署诅咒"><a href="#⚔️-章节尾声：打破部署诅咒" class="headerlink" title="⚔️ 章节尾声：打破部署诅咒"></a>⚔️ 章节尾声：打破部署诅咒</h3><p>这次，小李把打好的镜像发给了测试老赵：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 5000:5000 my-flask-app</span><br></pre></td></tr></table></figure><p>老赵只运行了一行命令，项目便神奇地跑了起来。</p><blockquote><p>“不改配置？不用装 Python？数据库也连上了？”<br>“你这是什么魔法！”</p></blockquote><p>小李笑了笑，第一次感觉部署是件简单的事。</p><hr><h2 id="🧭-第一章总结知识点："><a href="#🧭-第一章总结知识点：" class="headerlink" title="🧭 第一章总结知识点："></a>🧭 第一章总结知识点：</h2><table><thead><tr><th>技术点</th><th>命令</th></tr></thead><tbody><tr><td>安装 Docker</td><td>Mac&#x2F;Win 下载 Docker Desktop &#x2F; Ubuntu 安装 <code>docker.io</code></td></tr><tr><td>查看版本</td><td><code>docker --version</code></td></tr><tr><td>运行测试容器</td><td><code>docker run hello-world</code></td></tr><tr><td>编写 Dockerfile</td><td>FROM &#x2F; COPY &#x2F; RUN &#x2F; CMD</td></tr><tr><td>构建镜像</td><td><code>docker build -t name .</code></td></tr><tr><td>运行容器</td><td><code>docker run -p 宿主:容器 镜像名</code></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;一直想写一本容器小书，真好懒猫基本都做了容器化，所以把这部分分享出来。不同的是，懒猫微服中使用 pg-docker 来替代 docker 命令，使用 dockge 来执行 docker-compose。以下讲解以标准 docker 为主，这样子既学</summary>
      
    
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/categories/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
    
    <category term="Docker" scheme="https://xu-hardy.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>写给懒猫微服玩家的容器小书 Docker篇（二）：《镜像旅馆的秘密》</title>
    <link href="https://xu-hardy.github.io/%E5%86%99%E7%BB%99%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E7%8E%A9%E5%AE%B6%E7%9A%84%E5%AE%B9%E5%99%A8%E5%B0%8F%E4%B9%A6-docker%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E3%80%8A%E9%95%9C%E5%83%8F%E6%97%85%E9%A6%86%E7%9A%84%E7%A7%98%E5%AF%86%E3%80%8B/"/>
    <id>https://xu-hardy.github.io/%E5%86%99%E7%BB%99%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E7%8E%A9%E5%AE%B6%E7%9A%84%E5%AE%B9%E5%99%A8%E5%B0%8F%E4%B9%A6-docker%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E3%80%8A%E9%95%9C%E5%83%8F%E6%97%85%E9%A6%86%E7%9A%84%E7%A7%98%E5%AF%86%E3%80%8B/</id>
    <published>2025-07-01T16:00:00.000Z</published>
    <updated>2025-06-30T08:38:22.825Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一直想写一本容器小书，真好懒猫基本都做了容器化，所以把这部分分享出来。不同的是，懒猫微服中使用 pg-docker 来替代 docker 命令，使用 dockge 来执行 docker-compose。以下讲解以标准 docker 为主，这样子既学会了 docker 知识，也能够在懒猫微服上启动 Docker 服务。</p></blockquote><h1 id="《镜像旅馆的秘密》讲的是-Docker-镜像的原理、分层结构、生命周期、Docker-Hub-上传与下载、常见镜像命令详解"><a href="#《镜像旅馆的秘密》讲的是-Docker-镜像的原理、分层结构、生命周期、Docker-Hub-上传与下载、常见镜像命令详解" class="headerlink" title="《镜像旅馆的秘密》讲的是 Docker 镜像的原理、分层结构、生命周期、Docker Hub 上传与下载、常见镜像命令详解"></a>《镜像旅馆的秘密》讲的是 Docker 镜像的原理、分层结构、生命周期、Docker Hub 上传与下载、常见镜像命令详解</h1><h3 id="🏰-开篇：进入镜像旅馆"><a href="#🏰-开篇：进入镜像旅馆" class="headerlink" title="🏰 开篇：进入镜像旅馆"></a>🏰 开篇：进入镜像旅馆</h3><p>自从小李用 Docker 成功打包并运行了自己的 Flask 项目，他的开发效率飞快提高。</p><p>某天，老周带他来到一座巨大的数字建筑——<strong>Docker 镜像旅馆</strong>。</p><p>“这是你所有镜像的家，”老周说，“也是全球程序员共享旅程资源的中转站。”</p><p>镜像旅馆里，层层叠叠地存放着成千上万个镜像，就像一栋模块化的高楼大厦。</p><hr><h3 id="🧱-镜像的本质：一层一层搭起来的文件系统"><a href="#🧱-镜像的本质：一层一层搭起来的文件系统" class="headerlink" title="🧱 镜像的本质：一层一层搭起来的文件系统"></a>🧱 镜像的本质：一层一层搭起来的文件系统</h3><p>老周告诉小李：</p><blockquote><p>“镜像（Image）其实是一个<strong>只读的分层文件系统</strong>。你写的每一条 Dockerfile 指令，都会构成一层 Layer。”</p></blockquote><p>比如这个简单的 Dockerfile：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.11</span>-slim</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . /app</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install -r requirements.txt</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;python&quot;</span>, <span class="string">&quot;main.py&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>对应的镜像层如下：</p><ol><li><code>FROM</code> → 拉了一个基础镜像层（Python 3.11）</li><li><code>WORKDIR</code> → 添加一个设置工作目录的 Layer</li><li><code>COPY</code> → 拷贝代码文件的 Layer</li><li><code>RUN</code> → 安装依赖的新 Layer</li><li><code>CMD</code> → 容器入口（不是 Layer，但存配置）</li></ol><blockquote><p>💡 小知识：Docker 会尽量缓存和复用前面的 Layer，节省时间和存储。</p></blockquote><hr><h3 id="🧪-镜像命令全攻略"><a href="#🧪-镜像命令全攻略" class="headerlink" title="🧪 镜像命令全攻略"></a>🧪 镜像命令全攻略</h3><p>小李打开终端，开始探索这些镜像的日常操作。</p><h4 id="1-查看本地镜像："><a href="#1-查看本地镜像：" class="headerlink" title="1. 查看本地镜像："></a>1. 查看本地镜像：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">REPOSITORY     TAG        IMAGE ID       CREATED          SIZE</span><br><span class="line">my-flask-app   latest     123abc456def   2 minutes ago    125MB</span><br><span class="line">python         3.11-slim  789xyz654hij   3 days ago       40MB</span><br></pre></td></tr></table></figure><p>解释：</p><ul><li><code>REPOSITORY</code>：镜像名</li><li><code>TAG</code>：标签（版本号）</li><li><code>IMAGE ID</code>：镜像唯一标识符</li><li><code>SIZE</code>：镜像大小</li></ul><h4 id="2-查看镜像历史构建过程（看每层）："><a href="#2-查看镜像历史构建过程（看每层）：" class="headerlink" title="2. 查看镜像历史构建过程（看每层）："></a>2. 查看镜像历史构建过程（看每层）：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">history</span> my-flask-app</span><br></pre></td></tr></table></figure><h4 id="3-删除镜像："><a href="#3-删除镜像：" class="headerlink" title="3. 删除镜像："></a>3. 删除镜像：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi my-flask-app</span><br></pre></td></tr></table></figure><p>（⚠️ 若有容器在运行该镜像，需先停止并删除容器）</p><hr><h3 id="🗂-镜像仓库：Docker-Hub"><a href="#🗂-镜像仓库：Docker-Hub" class="headerlink" title="🗂 镜像仓库：Docker Hub"></a>🗂 镜像仓库：Docker Hub</h3><p>老周指了指旅馆大堂里的一个巨大电梯：</p><blockquote><p>“这是 Docker Hub，全球最大的镜像共享仓库。”</p></blockquote><p>在这里，小李能下载成千上万的开源镜像，也能上传自己的。</p><h4 id="登录-Docker-Hub："><a href="#登录-Docker-Hub：" class="headerlink" title="登录 Docker Hub："></a>登录 Docker Hub：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker login</span><br></pre></td></tr></table></figure><p>（需要先注册账号）</p><h4 id="下载镜像："><a href="#下载镜像：" class="headerlink" title="下载镜像："></a>下载镜像：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure><p>这会从 Docker Hub 拉取最新版本的 <code>nginx</code> 镜像</p><h4 id="指定版本拉取："><a href="#指定版本拉取：" class="headerlink" title="指定版本拉取："></a>指定版本拉取：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis:6.2</span><br></pre></td></tr></table></figure><blockquote><p>如果 docker run&#x2F;pull 有问题，那么可以通过<code>lzc-cli appstore copy-image your-images</code>来使用懒猫的镜像仓库。</p></blockquote><p>（相当于拉取 <code>redis</code> 仓库中 tag 为 <code>6.2</code> 的镜像）</p><h4 id="上传镜像（先打标签）："><a href="#上传镜像（先打标签）：" class="headerlink" title="上传镜像（先打标签）："></a>上传镜像（先打标签）：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker tag my-flask-app yourdockerhubname/my-flask-app:1.0</span><br><span class="line">docker push yourdockerhubname/my-flask-app:1.0</span><br></pre></td></tr></table></figure><hr><h3 id="📦-镜像-Tag-与版本控制"><a href="#📦-镜像-Tag-与版本控制" class="headerlink" title="📦 镜像 Tag 与版本控制"></a>📦 镜像 Tag 与版本控制</h3><p>老周问：“小李，你知道为什么镜像都有个 <code>:latest</code> 吗？”</p><p>小李说：“这是默认版本号吧？”</p><p>“对，但我们不能依赖它。<strong>开发、测试、生产应使用明确版本号，比如 1.0、20240321 等</strong>。”</p><p>Docker 镜像是通过 <code>tag</code> 来区分版本的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker build -t myapp:1.0 .</span><br><span class="line">docker build -t myapp:latest .</span><br></pre></td></tr></table></figure><p>你可以为同一个镜像打多个标签，对应不同场景使用。</p><hr><h3 id="🔍-镜像体积优化技巧"><a href="#🔍-镜像体积优化技巧" class="headerlink" title="🔍 镜像体积优化技巧"></a>🔍 镜像体积优化技巧</h3><p>小李注意到镜像越来越大了，占了很多硬盘空间。</p><p>老周给了他几点建议：</p><ol><li><p>使用轻量级基础镜像：</p><ul><li>比如 <code>python:3.11-slim</code> 代替 <code>python:3.11</code></li></ul></li><li><p>合并</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RUN</span><br></pre></td></tr></table></figure><p>命令，减少层数：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt update &amp;&amp; apt install -y git &amp;&amp; <span class="built_in">rm</span> -rf /var/lib/apt/lists/*</span></span><br></pre></td></tr></table></figure></li><li><p>删除临时文件：</p><ul><li>安装后清理缓存，避免垃圾文件残留</li></ul></li><li><p>多阶段构建（进阶）：</p><ul><li>构建和运行使用不同的镜像阶段</li></ul></li></ol><hr><h3 id="📂-镜像保存与迁移"><a href="#📂-镜像保存与迁移" class="headerlink" title="📂 镜像保存与迁移"></a>📂 镜像保存与迁移</h3><p>后来小李想把自己的镜像传给另一位没有 Docker Hub 的同事。</p><p>他用到了镜像导出与导入：</p><h4 id="导出镜像为-tar-文件："><a href="#导出镜像为-tar-文件：" class="headerlink" title="导出镜像为 .tar 文件："></a>导出镜像为 <code>.tar</code> 文件：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker save my-flask-app &gt; myapp.tar</span><br></pre></td></tr></table></figure><h4 id="导入镜像："><a href="#导入镜像：" class="headerlink" title="导入镜像："></a>导入镜像：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load &lt; myapp.tar</span><br></pre></td></tr></table></figure><p>镜像打包成离线文件，便于携带与备份。</p><hr><h3 id="🔍-深入-Layer-实战：查看镜像内容"><a href="#🔍-深入-Layer-实战：查看镜像内容" class="headerlink" title="🔍 深入 Layer 实战：查看镜像内容"></a>🔍 深入 Layer 实战：查看镜像内容</h3><p>小李很好奇，镜像到底长什么样？</p><p>老周教他运行容器并进到里面：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --<span class="built_in">rm</span> my-flask-app /bin/bash</span><br></pre></td></tr></table></figure><p>这样他就能直接进入容器的 Linux 环境，像在服务器上一样查看文件结构：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> /</span><br><span class="line"><span class="built_in">cd</span> /app</span><br><span class="line"><span class="built_in">cat</span> requirements.txt</span><br></pre></td></tr></table></figure><p>他终于明白，每个镜像就像是一个“静态快照”，而容器才是“它的动态运行副本”。</p><hr><h3 id="📊-镜像生命周期总结表"><a href="#📊-镜像生命周期总结表" class="headerlink" title="📊 镜像生命周期总结表"></a>📊 镜像生命周期总结表</h3><table><thead><tr><th>操作</th><th>命令</th></tr></thead><tbody><tr><td>查看本地镜像</td><td><code>docker images</code></td></tr><tr><td>构建新镜像</td><td><code>docker build -t name .</code></td></tr><tr><td>删除镜像</td><td><code>docker rmi 镜像名</code></td></tr><tr><td>下载镜像</td><td><code>docker pull 镜像名[:tag]</code></td></tr><tr><td>上传镜像</td><td><code>docker push 镜像名[:tag]</code></td></tr><tr><td>镜像打包导出</td><td><code>docker save &gt; xxx.tar</code></td></tr><tr><td>镜像导入还原</td><td><code>docker load &lt; xxx.tar</code></td></tr><tr><td>镜像历史层查看</td><td><code>docker history 镜像名</code></td></tr></tbody></table><hr><h3 id="🎬-尾声：镜像旅馆的门票"><a href="#🎬-尾声：镜像旅馆的门票" class="headerlink" title="🎬 尾声：镜像旅馆的门票"></a>🎬 尾声：镜像旅馆的门票</h3><p>小李现在拥有了多个镜像，搭配不同的版本、依赖、语言，像积木一样可以快速组合各种环境。</p><p>“这就像 Minecraft 的世界地图，每张都是一个镜像。”小李说。</p><p>老周点点头：“没错，镜像只是开始，真正的冒险——是容器运行起来后的世界。”</p><hr><h2 id="🧭-第二章小结"><a href="#🧭-第二章小结" class="headerlink" title="🧭 第二章小结"></a>🧭 第二章小结</h2><ul><li>镜像是构建环境的基础模板，支持版本控制、缓存加速、快速构建</li><li>可以上传到 Docker Hub 或导出 <code>.tar</code> 进行离线传输</li><li>管理命令要熟练掌握：<code>build</code>、<code>pull</code>、<code>push</code>、<code>rmi</code>、<code>tag</code>、<code>history</code></li><li>优化镜像大小要用 slim 基础镜像、合并命令、清理缓存</li></ul><h2 id="✨-增补内容：镜像的高级技能与实战应用"><a href="#✨-增补内容：镜像的高级技能与实战应用" class="headerlink" title="✨ 增补内容：镜像的高级技能与实战应用"></a>✨ 增补内容：镜像的高级技能与实战应用</h2><hr><h3 id="🧪-多阶段构建：精致分工，极限瘦身"><a href="#🧪-多阶段构建：精致分工，极限瘦身" class="headerlink" title="🧪 多阶段构建：精致分工，极限瘦身"></a>🧪 多阶段构建：精致分工，极限瘦身</h3><p>有一次，小李需要构建一个使用 <code>npm</code> 打包前端、Python 启动后端的项目。打包工具很多、依赖也重，他担心镜像太大。</p><p>老周说：“你要学会<strong>多阶段构建（multi-stage build）</strong>，把构建阶段和运行阶段分开。”</p><blockquote><p>多阶段构建的目标是：<strong>编译用谁都行，最终镜像要最小。</strong></p></blockquote><h4 id="示例：Node-构建-nginx-托管"><a href="#示例：Node-构建-nginx-托管" class="headerlink" title="示例：Node 构建 + nginx 托管"></a>示例：Node 构建 + nginx 托管</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一阶段：使用 node 构建前端</span></span><br><span class="line"><span class="keyword">FROM</span> node:<span class="number">18</span> AS builder</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> npm install &amp;&amp; npm run build</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二阶段：用 nginx 托管打包后的静态文件</span></span><br><span class="line"><span class="keyword">FROM</span> nginx:alpine</span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=builder /app/dist /usr/share/nginx/html</span></span><br></pre></td></tr></table></figure><ul><li>第一阶段装依赖、打包代码</li><li>第二阶段只取编译结果，<strong>不用带上 node&#x2F;npm 等工具</strong></li></ul><p>小李一测试，镜像体积从 300MB 降到 25MB，部署速度快了 10 倍！</p><hr><h3 id="🧩-使用-dockerignore：镜像防垃圾机制"><a href="#🧩-使用-dockerignore：镜像防垃圾机制" class="headerlink" title="🧩 使用 .dockerignore：镜像防垃圾机制"></a>🧩 使用 <code>.dockerignore</code>：镜像防垃圾机制</h3><p>构建时，小李发现镜像中夹杂了 <code>.git</code>、<code>node_modules</code>、<code>__pycache__</code>……</p><p>老周摇头道：“你忘了 <code>.dockerignore</code> 文件。”</p><p>就像 <code>.gitignore</code> 一样，<code>.dockerignore</code> 告诉 Docker 哪些文件在构建镜像时要排除。</p><h4 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">__pycache__/</span><br><span class="line">.git/</span><br><span class="line">node_modules/</span><br><span class="line">.env</span><br><span class="line">*.log</span><br></pre></td></tr></table></figure><p>这个文件放在 Dockerfile 同目录下，<strong>能显著加快构建速度和减小镜像大小</strong>。</p><hr><h3 id="📦-自建私有镜像仓库（Registry）"><a href="#📦-自建私有镜像仓库（Registry）" class="headerlink" title="📦 自建私有镜像仓库（Registry）"></a>📦 自建私有镜像仓库（Registry）</h3><p>当公司禁止使用 Docker Hub 时，小李开始尝试搭建自己的镜像库。</p><p>老周带他部署了一个本地私有镜像仓库（基于 Docker 官方镜像）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 5000:5000 --restart=always --name registry registry:2</span><br></pre></td></tr></table></figure><p>现在他可以：</p><ul><li><p>推送到私库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker tag myapp localhost:5000/myapp</span><br><span class="line">docker push localhost:5000/myapp</span><br></pre></td></tr></table></figure></li><li><p>拉取镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull localhost:5000/myapp</span><br></pre></td></tr></table></figure></li></ul><p>适合公司内部使用，搭配 Nexus、Harbor 可实现更完善的权限、审计、镜像管理等功能。（比如懒猫的 copy-image）</p><h3 id="🧠-镜像调试技巧：如何从镜像中探查问题？"><a href="#🧠-镜像调试技巧：如何从镜像中探查问题？" class="headerlink" title="🧠 镜像调试技巧：如何从镜像中探查问题？"></a>🧠 镜像调试技巧：如何从镜像中探查问题？</h3><p>如果小李的镜像出错了，他可以通过两种方式“探测”镜像内部：</p><h4 id="方法-1：运行一个交互式-shell-容器"><a href="#方法-1：运行一个交互式-shell-容器" class="headerlink" title="方法 1：运行一个交互式 shell 容器"></a>方法 1：运行一个交互式 shell 容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it myapp /bin/bash</span><br></pre></td></tr></table></figure><p>（如果 bash 不存在，可以用 <code>/bin/sh</code>）</p><h4 id="方法-2：打开已有容器的终端"><a href="#方法-2：打开已有容器的终端" class="headerlink" title="方法 2：打开已有容器的终端"></a>方法 2：打开已有容器的终端</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it container_id /bin/bash</span><br></pre></td></tr></table></figure><p>通过 <code>ls</code>、<code>cat</code>、<code>which</code>、<code>env</code> 命令，可以检查：</p><ul><li>文件有没有 COPY 进去？</li><li><code>pip install</code> 是否安装成功？</li><li>环境变量是否丢失？</li></ul><hr><h3 id="🔐-镜像安全：不要把密码打包进镜像！"><a href="#🔐-镜像安全：不要把密码打包进镜像！" class="headerlink" title="🔐 镜像安全：不要把密码打包进镜像！"></a>🔐 镜像安全：不要把密码打包进镜像！</h3><p>小李曾在 Dockerfile 里写了：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ENV</span> DB_PASSWORD=<span class="number">123456</span></span><br></pre></td></tr></table></figure><p>老周当场拍桌：“你这是把钥匙写死进容器了！”</p><p>最佳做法：</p><ul><li>在容器运行时注入环境变量（例如使用 <code>.env</code> 文件 + <code>--env</code> 参数）</li><li>使用 <code>docker secret</code> 或 KMS 管理</li><li>使用 BuildKit 的 <code>--secret</code> 机制加密构建时参数（高级用法）</li></ul><hr><h3 id="🧾-镜像标签管理规范建议"><a href="#🧾-镜像标签管理规范建议" class="headerlink" title="🧾 镜像标签管理规范建议"></a>🧾 镜像标签管理规范建议</h3><p>小李准备上线，他开始给镜像打各种 tag：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker build -t myapp:1.0.0 .</span><br><span class="line">docker tag myapp:1.0.0 myapp:latest</span><br></pre></td></tr></table></figure><p>老周说：</p><blockquote><p>“tag 是镜像的版本名，不要用 <code>latest</code> 作为生产环境唯一标识。”</p></blockquote><p>推荐命名规范：</p><table><thead><tr><th>标签</th><th>含义</th></tr></thead><tbody><tr><td><code>myapp:1.0.0</code></td><td>语义化版本控制</td></tr><tr><td><code>myapp:20240324</code></td><td>构建时间戳</td></tr><tr><td><code>myapp:prod</code></td><td>环境标识</td></tr><tr><td><code>myapp:feature-login</code></td><td>功能分支测试</td></tr></tbody></table><hr><h3 id="🔁-镜像缓存失效调试技巧"><a href="#🔁-镜像缓存失效调试技巧" class="headerlink" title="🔁 镜像缓存失效调试技巧"></a>🔁 镜像缓存失效调试技巧</h3><p>有时候构建镜像时，小李发现修改了某个文件，Docker 却好像没更新。</p><p>老周点拨他：“那是缓存搞的鬼。”</p><h4 id="方法一：强制跳过缓存"><a href="#方法一：强制跳过缓存" class="headerlink" title="方法一：强制跳过缓存"></a>方法一：强制跳过缓存</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build --no-cache -t myapp .</span><br></pre></td></tr></table></figure><h4 id="方法二：注意-COPY-顺序影响缓存命中"><a href="#方法二：注意-COPY-顺序影响缓存命中" class="headerlink" title="方法二：注意 COPY 顺序影响缓存命中"></a>方法二：注意 COPY 顺序影响缓存命中</h4><p>Docker 会从上到下按顺序缓存。如果把变化频繁的文件 COPY 太早，就会导致缓存失效：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="language-bash"> requirements.txt .      <span class="comment"># OK，变动少，适合先复制</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install -r requirements.txt</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .                     <span class="comment"># 后复制代码，避免频繁无效重建</span></span></span><br></pre></td></tr></table></figure><blockquote><p>✨ 技巧：越是稳定的文件，越早 COPY，利于缓存复用。</p></blockquote><hr><h2 id="📘-第二章-·-补充总结更新版"><a href="#📘-第二章-·-补充总结更新版" class="headerlink" title="📘 第二章 · 补充总结更新版"></a>📘 第二章 · 补充总结更新版</h2><table><thead><tr><th>技术点</th><th>命令 &#x2F; 说明</th></tr></thead><tbody><tr><td>多阶段构建</td><td><code>FROM ... AS builder</code> + <code>COPY --from=builder</code></td></tr><tr><td>忽略文件</td><td><code>.dockerignore</code> 文件</td></tr><tr><td>镜像上传私库</td><td><code>docker push localhost:5000/myapp</code></td></tr><tr><td>开启 BuildKit</td><td><code>DOCKER_BUILDKIT=1 docker build ...</code></td></tr><tr><td>进入镜像内调试</td><td><code>docker run -it 镜像 /bin/bash</code></td></tr><tr><td>镜像版本管理建议</td><td>避免乱用 <code>latest</code>，使用语义化 tag</td></tr><tr><td>跳过缓存构建</td><td><code>docker build --no-cache ...</code></td></tr></tbody></table><hr><p>小李站在镜像旅馆的屋顶，看着一层层高楼像乐高积木一样堆叠而起。</p><p>他感到激动——他已经不再为“部署”苦恼，而是拥有了一个随时可打包、可还原的开发宇宙。</p><p>老周说：“你的旅程才刚刚开始，容器的世界比镜像更复杂。”</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;一直想写一本容器小书，真好懒猫基本都做了容器化，所以把这部分分享出来。不同的是，懒猫微服中使用 pg-docker 来替代 docker 命令，使用 dockge 来执行 docker-compose。以下讲解以标准 docker 为主，这样子既学</summary>
      
    
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/categories/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
    
    <category term="Docker" scheme="https://xu-hardy.github.io/tags/Docker/"/>
    
  </entry>
  
</feed>
