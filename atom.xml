<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>镜湖</title>
  
  
  <link href="https://airag.click/atom.xml" rel="self"/>
  
  <link href="https://airag.click/"/>
  <updated>2025-07-17T10:20:46.472Z</updated>
  <id>https://airag.click/</id>
  
  <author>
    <name>Xu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://airag.click/posts/0/"/>
    <id>https://airag.click/posts/0/</id>
    <published>2025-07-17T10:20:46.472Z</published>
    <updated>2025-07-17T10:20:46.472Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Kubernetes-部署（Deployment）：管理应用的副本和扩展"><a href="#Kubernetes-部署（Deployment）：管理应用的副本和扩展" class="headerlink" title="Kubernetes 部署（Deployment）：管理应用的副本和扩展"></a>Kubernetes 部署（Deployment）：管理应用的副本和扩展</h3><p>在 Kubernetes 中，<strong>Pod</strong> 是最基本的部署单元，但通常我们不会直接创建 Pod。为了更好地管理和扩展应用，Kubernetes 提供了 <strong>部署（Deployment）</strong> 这一高级抽象。通过使用部署，我们可以更轻松地管理应用的副本、扩展、回滚等操作。</p><p>在本节课中，我们将通过 <strong>部署</strong> 来管理多容器 Pod，并介绍如何在 Kubernetes 中进行扩展和滚动更新。</p><hr><h2 id="部署的概念"><a href="#部署的概念" class="headerlink" title="部署的概念"></a>部署的概念</h2><p><strong>部署（Deployment）</strong> 是用来管理多个 Pod 副本的。每个 Pod 都是从同一个模板创建的，因此它们是相同的。通过在部署中指定所需的 Pod 数量（如 5 个 Redis 副本），Kubernetes 会自动创建、管理并确保所需数量的 Pod 运行。如果某个 Pod 被删除，Kubernetes 会自动创建新的 Pod 来替代它。你还可以随时修改所需的副本数量，Kubernetes 会自动调整集群的实际状态以匹配你的目标状态。</p><h3 id="部署的工作原理"><a href="#部署的工作原理" class="headerlink" title="部署的工作原理"></a>部署的工作原理</h3><ul><li><strong>Pod 模板</strong>：部署使用 Pod 模板来创建 Pod，每个 Pod 副本都会使用这个模板。</li><li><strong>副本数</strong>：你可以在部署的规范中指定副本数，Kubernetes 会确保这个数量的 Pod 始终运行。</li><li><strong>标签选择器</strong>：部署通过标签选择器来选择哪些 Pod 属于这个部署。</li><li><strong>部署控制器</strong>：Kubernetes 的部署控制器会管理部署的生命周期，确保 Pod 始终处于期望的状态。</li></ul><hr><h2 id="在部署中使用微服务应用"><a href="#在部署中使用微服务应用" class="headerlink" title="在部署中使用微服务应用"></a>在部署中使用微服务应用</h2><p>为了展示如何使用部署来管理 Pods，我们将使用前面创建的 <strong>微服务 3 层应用</strong>，并将每个层级的 Pod 替换为由部署管理的 Pod。</p><h3 id="创建-Namespace"><a href="#创建-Namespace" class="headerlink" title="创建 Namespace"></a>创建 Namespace</h3><p>首先，我们为本节课创建一个新的 Namespace，名为 <code>deployments</code>，用于组织和管理该应用。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Namespace</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">deployments</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">microservices</span></span><br></pre></td></tr></table></figure><p>通过以下命令创建该 Namespace：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f deployments-namespace.yaml</span><br></pre></td></tr></table></figure><hr><h2 id="数据层部署"><a href="#数据层部署" class="headerlink" title="数据层部署"></a>数据层部署</h2><p>我们将创建一个 <strong>Redis 部署</strong>，来代替之前的单个 Redis Pod。该部署会管理多个 Redis 副本，以确保应用的高可用性。</p><h3 id="数据层部署-Manifest-文件"><a href="#数据层部署-Manifest-文件" class="headerlink" title="数据层部署 Manifest 文件"></a>数据层部署 Manifest 文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">data-tier</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">deployments</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">tier:</span> <span class="string">data</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">tier:</span> <span class="string">data</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redis</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">redis:latest</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">6379</span></span><br></pre></td></tr></table></figure><ul><li><strong>replicas</strong>：指定部署需要的 Redis Pod 副本数量，设置为 1 表示一个副本。</li><li><strong>selector</strong>：标签选择器，用来选择 Pod 进行管理。</li><li><strong>template</strong>：Pod 模板，定义 Pod 的规格和容器配置。</li></ul><h3 id="创建数据层部署"><a href="#创建数据层部署" class="headerlink" title="创建数据层部署"></a>创建数据层部署</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f data-tier-deployment.yaml -n deployments</span><br></pre></td></tr></table></figure><hr><h2 id="应用层部署"><a href="#应用层部署" class="headerlink" title="应用层部署"></a>应用层部署</h2><p>在应用层，我们创建一个 <strong>服务器部署</strong>，它管理运行 Node.js 应用的容器。服务器将与数据层的 Redis 服务进行交互。</p><h3 id="应用层部署-Manifest-文件"><a href="#应用层部署-Manifest-文件" class="headerlink" title="应用层部署 Manifest 文件"></a>应用层部署 Manifest 文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">app-tier</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">deployments</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">tier:</span> <span class="string">app</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">tier:</span> <span class="string">app</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">server</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">node:latest</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">REDIS_URL</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">&quot;data-tier:6379&quot;</span> <span class="comment"># 服务发现，通过服务名访问 Redis</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure><ul><li><strong>env</strong>：设置 <code>REDIS_URL</code> 环境变量，指向数据层服务 <code>data-tier:6379</code>。</li></ul><h3 id="创建应用层部署"><a href="#创建应用层部署" class="headerlink" title="创建应用层部署"></a>创建应用层部署</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f app-tier-deployment.yaml -n deployments</span><br></pre></td></tr></table></figure><hr><h2 id="支持层部署"><a href="#支持层部署" class="headerlink" title="支持层部署"></a>支持层部署</h2><p>支持层不需要单独的服务，而是通过 DNS 进行服务发现。我们将创建一个 <strong>支持层部署</strong>，它管理 <strong>Poller</strong> 和 <strong>Counter</strong> 容器，并通过 DNS 查找应用层的服务。</p><h3 id="支持层部署-Manifest-文件"><a href="#支持层部署-Manifest-文件" class="headerlink" title="支持层部署 Manifest 文件"></a>支持层部署 Manifest 文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">support-tier</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">deployments</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">tier:</span> <span class="string">support</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">tier:</span> <span class="string">support</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">counter</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">counter-app:latest</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">API_URL</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">&quot;app-tier:8080&quot;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">poller</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">poller-app:latest</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">API_URL</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">&quot;app-tier:8080&quot;</span></span><br></pre></td></tr></table></figure><h3 id="创建支持层部署"><a href="#创建支持层部署" class="headerlink" title="创建支持层部署"></a>创建支持层部署</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f support-tier-deployment.yaml -n deployments</span><br></pre></td></tr></table></figure><hr><h2 id="查看所有部署和-Pods"><a href="#查看所有部署和-Pods" class="headerlink" title="查看所有部署和 Pods"></a>查看所有部署和 Pods</h2><p>创建完部署后，可以使用以下命令查看所有的部署和 Pod 状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl get deployments -n deployments</span><br><span class="line">kubectl get pods -n deployments</span><br></pre></td></tr></table></figure><p>你将看到三个部署，分别是 <strong>数据层、应用层和支持层</strong>，每个部署都包含一个副本的 Pod。</p><hr><h2 id="扩展部署"><a href="#扩展部署" class="headerlink" title="扩展部署"></a>扩展部署</h2><p>通过 <code>kubectl scale</code> 命令，我们可以修改部署的副本数量。这对于 <strong>扩展</strong> 和 <strong>缩减</strong> 应用非常有用。</p><h3 id="扩展应用层部署"><a href="#扩展应用层部署" class="headerlink" title="扩展应用层部署"></a>扩展应用层部署</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl scale deployment app-tier -n deployments --replicas=5</span><br></pre></td></tr></table></figure><h3 id="查看扩展后的-Pods"><a href="#查看扩展后的-Pods" class="headerlink" title="查看扩展后的 Pods"></a>查看扩展后的 Pods</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods -n deployments</span><br></pre></td></tr></table></figure><p>你将看到 <strong>应用层</strong> 的 Pod 数量已经增加至 5 个，Kubernetes 会自动管理这些副本并确保它们处于正常运行状态。</p><hr><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>在本节课中，我们学习了如何使用 <strong>部署（Deployment）</strong> 来管理和扩展 Kubernetes 中的应用：</p><ol><li><strong>部署</strong> 通过模板创建多个 Pod 副本，确保应用的高可用性；</li><li>我们学习了如何通过 <strong>环境变量</strong> 和 <strong>DNS</strong> 进行服务发现；</li><li>使用 <strong>kubectl scale</strong> 来扩展和缩减部署的副本数量。</li></ol><p>在下一节课中，我们将介绍如何使用 <strong>滚动更新</strong> 来平滑地更新应用，确保在更新过程中不影响服务的可用性。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Kubernetes-部署（Deployment）：管理应用的副本和扩展&quot;&gt;&lt;a href=&quot;#Kubernetes-部署（Deployment）：管理应用的副本和扩展&quot; class=&quot;headerlink&quot; title=&quot;Kubernetes 部署（Deploy</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://airag.click/posts/0/"/>
    <id>https://airag.click/posts/0/</id>
    <published>2025-07-17T10:20:46.471Z</published>
    <updated>2025-07-17T10:20:46.471Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Kubernetes-入门概览：为什么它是容器编排的首选？"><a href="#Kubernetes-入门概览：为什么它是容器编排的首选？" class="headerlink" title="Kubernetes 入门概览：为什么它是容器编排的首选？"></a>Kubernetes 入门概览：为什么它是容器编排的首选？</h1><p>在容器化技术广泛应用的今天，如何高效、自动地部署和管理容器化应用，成为 DevOps 工程师、SRE 和云工程师绕不开的话题。Kubernetes（简称 K8s）作为当前最主流的容器编排系统，凭借其强大的功能和灵活的架构，已经成为开源领域最活跃的项目之一。</p><h2 id="什么是-Kubernetes？"><a href="#什么是-Kubernetes？" class="headerlink" title="什么是 Kubernetes？"></a>什么是 Kubernetes？</h2><p>Kubernetes 是一个由 Google 开源的容器编排平台，最初基于其内部使用多年的 Borg 系统。它可以自动化容器应用的部署、扩展和运维，是现代云原生架构的核心组件之一。</p><p>Kubernetes 最大的优势是<strong>可扩展性强</strong>，无论是几十个容器还是上百万个容器，它都可以通过分布式架构灵活管理。此外，Kubernetes 还支持多种运行环境：本地机房、私有云、公有云甚至混合云。</p><h2 id="为什么选择-Kubernetes？"><a href="#为什么选择-Kubernetes？" class="headerlink" title="为什么选择 Kubernetes？"></a>为什么选择 Kubernetes？</h2><p>Kubernetes 的成功不仅仅是因为“容器热潮”，更在于它为开发者和运维人员都提供了极佳的抽象能力和自动化机制：</p><h3 id="开发者视角："><a href="#开发者视角：" class="headerlink" title="开发者视角："></a>开发者视角：</h3><ul><li>使用 <strong>声明式配置（YAML）</strong> 快速部署和管理容器。</li><li>支持 <strong>服务发现与负载均衡</strong>，轻松暴露服务。</li><li>原生支持 <strong>多语言微服务架构</strong> 的部署与管理。</li></ul><h3 id="运维人员视角："><a href="#运维人员视角：" class="headerlink" title="运维人员视角："></a>运维人员视角：</h3><ul><li><strong>自愈能力</strong>：容器运行失败可自动迁移至其他节点。</li><li><strong>弹性伸缩</strong>：按需自动扩展实例数。</li><li><strong>滚动更新与回滚</strong>：安全上线、快速恢复。</li><li><strong>资源限制与监控</strong>：精细控制 CPU、内存等资源。</li></ul><h2 id="核心特性一览"><a href="#核心特性一览" class="headerlink" title="核心特性一览"></a>核心特性一览</h2><p>Kubernetes 提供的功能远超基础编排，涵盖了从部署到安全、从监控到弹性恢复的方方面面：</p><ul><li>自动部署、滚动更新与回滚</li><li>服务发现与内置负载均衡</li><li>横向自动扩展（HPA）</li><li>Secret 与 ConfigMap 管理</li><li>持久化存储（PV&#x2F;PVC）</li><li>状态副本控制（StatefulSet）</li><li>作业调度（Job&#x2F;CronJob）</li><li>基于角色的访问控制（RBAC）</li><li>支持 Linux 与 Windows 容器</li></ul><h2 id="与其他编排工具的对比"><a href="#与其他编排工具的对比" class="headerlink" title="与其他编排工具的对比"></a>与其他编排工具的对比</h2><p>虽然 Kubernetes 是市场主流，但还有一些其他容器编排工具值得了解：</p><table><thead><tr><th>工具</th><th>特点</th></tr></thead><tbody><tr><td><strong>DCOS</strong></td><td>适合混合工作负载，支持容器与非容器任务，内置 Kafka&#x2F;Spark 安装器。</td></tr><tr><td><strong>Amazon ECS</strong></td><td>AWS 原生服务，配合 EC2 或 Fargate 使用，适合深度绑定 AWS 的用户。</td></tr><tr><td><strong>Docker Swarm Mode</strong></td><td>Docker 官方编排方案，与 Docker CLI 原生集成，适合小规模集群或从 Swarm 迁移至 Kubernetes 的过渡期使用。</td></tr></tbody></table><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>Kubernetes 已成为现代云原生应用的基础设施核心，无论你是刚接触容器技术，还是希望将 DevOps 流程进一步自动化，Kubernetes 都值得深入学习与掌握。在接下来的内容中，我们将一起动手实践部署容器应用到 Kubernetes 集群，敬请期待！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Kubernetes-入门概览：为什么它是容器编排的首选？&quot;&gt;&lt;a href=&quot;#Kubernetes-入门概览：为什么它是容器编排的首选？&quot; class=&quot;headerlink&quot; title=&quot;Kubernetes 入门概览：为什么它是容器编排的首选？&quot;&gt;&lt;/a</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://airag.click/posts/0/"/>
    <id>https://airag.click/posts/0/</id>
    <published>2025-07-17T10:20:46.471Z</published>
    <updated>2025-07-17T10:20:46.471Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Kubernetes-自动扩缩：基于-CPU-的扩展"><a href="#Kubernetes-自动扩缩：基于-CPU-的扩展" class="headerlink" title="Kubernetes 自动扩缩：基于 CPU 的扩展"></a>Kubernetes 自动扩缩：基于 CPU 的扩展</h3><p>在 Kubernetes 中，<strong>自动扩缩（Autoscaling）</strong> 是一项强大的功能，它可以根据集群负载动态调整 Pod 副本数，确保系统始终以最佳资源利用率运行。在本节课中，我们将学习如何基于 <strong>CPU 使用率</strong> 实现自动扩缩，并展示如何设置 <strong>HorizontalPodAutoscaler</strong>（水平 Pod 自动扩缩器）来根据 CPU 使用情况动态调整 Pod 数量。</p><hr><h2 id="自动扩缩工作原理"><a href="#自动扩缩工作原理" class="headerlink" title="自动扩缩工作原理"></a>自动扩缩工作原理</h2><p>自动扩缩允许我们通过指定目标 CPU 百分比和最小、最大副本数来自动调整 Pod 副本的数量。自动扩缩的工作机制如下：</p><ul><li><strong>CPU 百分比</strong>：自动扩缩基于 Pod 请求的 CPU 百分比来工作。Pod 可以设置 CPU 请求，确保 Pod 被调度到具备足够 CPU 资源的节点上。如果 Pod 没有设置 CPU 请求，自动扩缩不会生效。</li><li><strong>副本数调整</strong>：当 Pod 的实际 CPU 使用率超过目标 CPU 使用率时，Kubernetes 会增加 Pod 副本；当实际 CPU 使用率低于目标时，Kubernetes 会减少 Pod 副本。扩缩的副本数会在最小和最大副本数之间进行调整。</li></ul><hr><h2 id="设置自动扩缩前的准备工作"><a href="#设置自动扩缩前的准备工作" class="headerlink" title="设置自动扩缩前的准备工作"></a>设置自动扩缩前的准备工作</h2><h3 id="安装-Metrics-Server"><a href="#安装-Metrics-Server" class="headerlink" title="安装 Metrics Server"></a>安装 Metrics Server</h3><p>自动扩缩依赖于集群中收集的 <strong>CPU 和内存</strong> 使用情况。Kubernetes 提供了 <strong>Metrics Server</strong> 来收集这些指标，它是 Kubernetes 自己维护的解决方案。</p><ol><li><p><strong>安装 Metrics Server</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/download/v0.5.0/components.yaml</span><br></pre></td></tr></table></figure></li><li><p><strong>检查 Metrics Server 是否正常运行</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl top pods -n deployments</span><br></pre></td></tr></table></figure><p>这将列出集群中每个 Pod 的 CPU 和内存使用情况。</p></li></ol><hr><h2 id="创建部署并设置-CPU-请求"><a href="#创建部署并设置-CPU-请求" class="headerlink" title="创建部署并设置 CPU 请求"></a>创建部署并设置 CPU 请求</h2><p>为了启用自动扩缩功能，我们需要在部署的 Pod 模板中指定 <strong>CPU 请求</strong>，这样 Kubernetes 才能根据实际的 CPU 使用率进行扩缩。</p><h3 id="设置-CPU-请求"><a href="#设置-CPU-请求" class="headerlink" title="设置 CPU 请求"></a>设置 CPU 请求</h3><p>在应用层部署中，我们为每个 Pod 设置了 CPU 请求，确保自动扩缩能够基于 CPU 使用情况进行扩展。以下是应用层的部署文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">app-tier</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">deployments</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">5</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">tier:</span> <span class="string">app</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">tier:</span> <span class="string">app</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">server</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">node:latest</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">REDIS_URL</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">&quot;data-tier:6379&quot;</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8080</span></span><br><span class="line">          <span class="attr">resources:</span></span><br><span class="line">            <span class="attr">requests:</span></span><br><span class="line">              <span class="attr">cpu:</span> <span class="string">&quot;20m&quot;</span> <span class="comment"># 设置 CPU 请求</span></span><br><span class="line">            <span class="attr">limits:</span></span><br><span class="line">              <span class="attr">cpu:</span> <span class="string">&quot;50m&quot;</span> <span class="comment"># 设置 CPU 限制</span></span><br></pre></td></tr></table></figure><p>这里，我们设置了 <strong>CPU 请求</strong> 为 20 milli CPU（即 0.02 核心），<strong>CPU 限制</strong> 为 50 milli CPU。</p><hr><h2 id="创建-HorizontalPodAutoscaler"><a href="#创建-HorizontalPodAutoscaler" class="headerlink" title="创建 HorizontalPodAutoscaler"></a>创建 HorizontalPodAutoscaler</h2><p>我们将创建一个 <strong>HorizontalPodAutoscaler</strong> 资源来实现基于 CPU 的自动扩缩。<strong>HorizontalPodAutoscaler</strong> 是 Kubernetes 中用来根据负载动态扩展 Pod 副本数的资源。</p><h3 id="创建-HorizontalPodAutoscaler-资源"><a href="#创建-HorizontalPodAutoscaler-资源" class="headerlink" title="创建 HorizontalPodAutoscaler 资源"></a>创建 HorizontalPodAutoscaler 资源</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">autoscaling/v2beta2</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">HorizontalPodAutoscaler</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">app-tier-autoscaler</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">deployments</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">scaleTargetRef:</span></span><br><span class="line">    <span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line">    <span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">app-tier</span></span><br><span class="line">  <span class="attr">minReplicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">maxReplicas:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">targetCPUUtilizationPercentage:</span> <span class="number">70</span></span><br></pre></td></tr></table></figure><ul><li><strong>scaleTargetRef</strong>：指定目标资源，这里我们将其指向 <code>app-tier</code> 部署。</li><li><strong>minReplicas</strong> 和 <strong>maxReplicas</strong>：设置 Pod 副本的最小和最大数量。</li><li><strong>targetCPUUtilizationPercentage</strong>：设置目标 CPU 使用率，当实际 CPU 使用率超过该值时，Kubernetes 会增加 Pod 副本数。</li></ul><h3 id="创建-HorizontalPodAutoscaler-1"><a href="#创建-HorizontalPodAutoscaler-1" class="headerlink" title="创建 HorizontalPodAutoscaler"></a>创建 HorizontalPodAutoscaler</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f app-tier-autoscaler.yaml -n deployments</span><br></pre></td></tr></table></figure><hr><h2 id="查看自动扩缩状态"><a href="#查看自动扩缩状态" class="headerlink" title="查看自动扩缩状态"></a>查看自动扩缩状态</h2><p>使用以下命令查看自动扩缩的状态和当前的 CPU 使用情况：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl get hpa -n deployments</span><br><span class="line">kubectl describe hpa app-tier-autoscaler -n deployments</span><br></pre></td></tr></table></figure><ul><li><code>kubectl get hpa</code>：查看自动扩缩器的当前状态。</li><li><code>kubectl describe hpa</code>：查看详细信息，包括当前的 CPU 使用情况以及扩缩历史。</li></ul><hr><h2 id="测试自动扩缩"><a href="#测试自动扩缩" class="headerlink" title="测试自动扩缩"></a>测试自动扩缩</h2><p>在创建自动扩缩器后，我们可以通过增加或减少 Pod 的 CPU 使用负载来触发扩缩。</p><ol><li><p><strong>扩展应用层的副本数</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl scale deployment app-tier -n deployments --replicas=5</span><br></pre></td></tr></table></figure></li><li><p><strong>监控扩缩效果</strong>：</p><p>可以使用 <code>kubectl get pods -n deployments</code> 来查看 Pod 数量是否随着 CPU 使用的变化而发生变化。</p></li></ol><hr><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>在本节课中，我们学习了如何为 Kubernetes 部署启用 <strong>自动扩缩</strong>：</p><ol><li>使用 <strong>Metrics Server</strong> 收集集群的资源使用情况；</li><li>在部署中设置 <strong>CPU 请求</strong> 和 <strong>CPU 限制</strong>，以便自动扩缩能够基于实际的 CPU 使用情况进行扩展；</li><li>使用 <strong>HorizontalPodAutoscaler</strong> 来根据 CPU 使用情况自动调整 Pod 副本数。</li></ol><p>在下一节课中，我们将继续学习如何利用 <strong>滚动更新</strong> 来平滑地更新应用程序，确保在不影响可用性的情况下进行代码或配置的更新。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Kubernetes-自动扩缩：基于-CPU-的扩展&quot;&gt;&lt;a href=&quot;#Kubernetes-自动扩缩：基于-CPU-的扩展&quot; class=&quot;headerlink&quot; title=&quot;Kubernetes 自动扩缩：基于 CPU 的扩展&quot;&gt;&lt;/a&gt;Kubernet</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://airag.click/posts/0/"/>
    <id>https://airag.click/posts/0/</id>
    <published>2025-07-17T10:20:46.471Z</published>
    <updated>2025-07-17T10:20:46.471Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Kubernetes-滚动更新与回滚：在部署中管理应用更新"><a href="#Kubernetes-滚动更新与回滚：在部署中管理应用更新" class="headerlink" title="Kubernetes 滚动更新与回滚：在部署中管理应用更新"></a>Kubernetes 滚动更新与回滚：在部署中管理应用更新</h3><p>Kubernetes 的 <strong>部署（Deployment）</strong> 提供了强大的功能来管理应用的副本，并通过 <strong>滚动更新</strong> 来平滑地更新应用而不会造成停机。在本节课中，我们将学习如何使用 Kubernetes 进行 <strong>滚动更新</strong> 和 <strong>回滚</strong>，并展示如何处理部署中的更新操作。</p><hr><h2 id="滚动更新概述"><a href="#滚动更新概述" class="headerlink" title="滚动更新概述"></a>滚动更新概述</h2><p><strong>滚动更新</strong> 是 Kubernetes 默认的更新策略。它允许我们在不间断服务的情况下，逐步替换旧版本的 Pod 为新版本的 Pod。滚动更新的一大优势是它保证在更新过程中，服务始终可用，不会因为更新而停机。每次更新仅更新一部分副本，直到所有副本都被更新完成。</p><h3 id="滚动更新的工作原理"><a href="#滚动更新的工作原理" class="headerlink" title="滚动更新的工作原理"></a>滚动更新的工作原理</h3><ol><li><strong>更新模板</strong>：当你更新部署模板（如更改容器镜像、环境变量、标签等）时，Kubernetes 会自动触发滚动更新。</li><li><strong>逐步替换副本</strong>：Kubernetes 会逐步增加新副本并删除旧副本，直到所有副本都更新为新版本。</li><li><strong>可用性</strong>：更新过程中会有部分 Pod 使用新版本，部分 Pod 使用旧版本。因此，应用需要能够平滑地处理这种版本不一致的情况。</li></ol><hr><h2 id="更新部署"><a href="#更新部署" class="headerlink" title="更新部署"></a>更新部署</h2><p>我们将继续使用上节课的 <strong>微服务三层应用</strong>，并通过 <strong>部署</strong> 来管理 Pods。在本节课中，我们将触发一个简单的部署更新，看看滚动更新是如何工作的。</p><h3 id="更新应用部署"><a href="#更新应用部署" class="headerlink" title="更新应用部署"></a>更新应用部署</h3><p>首先，我们将删除现有的 <strong>自动扩缩配置</strong>，以便观察更新的过程。删除自动扩缩器后，我们可以更容易地观察到滚动更新。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete hpa app-tier -n deployments</span><br></pre></td></tr></table></figure><p>接下来，我们将编辑 <strong>应用层部署</strong>，将副本数从 2 改为 10，并移除 <strong>CPU 请求</strong> 设置。这样做是为了简化操作，避免由于 CPU 请求导致 Pod 调度问题。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl edit deployment app-tier -n deployments</span><br></pre></td></tr></table></figure><p>在编辑器中，修改副本数和资源请求，保存并退出。</p><hr><h2 id="触发滚动更新"><a href="#触发滚动更新" class="headerlink" title="触发滚动更新"></a>触发滚动更新</h2><p>现在我们将触发一个更新，通过更新容器的镜像标签来演示滚动更新的过程。这次更新只会改变容器的镜像标签，但它足以触发一个滚动更新。</p><ol><li>打开 <strong>应用层部署</strong>，修改容器镜像标签（例如，从 <code>cloudacademy:v1</code> 改为 <code>cloudacademy:v2</code>）。</li><li>使用 <code>kubectl apply</code> 触发部署更新：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f app-tier-deployment.yaml -n deployments</span><br></pre></td></tr></table></figure><ol start="3"><li>观察滚动更新的状态：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl rollout status deployment/app-tier -n deployments</span><br></pre></td></tr></table></figure><p>这将显示每次更新的进度，你会看到新副本逐步替换旧副本。</p><hr><h2 id="暂停和恢复滚动更新"><a href="#暂停和恢复滚动更新" class="headerlink" title="暂停和恢复滚动更新"></a>暂停和恢复滚动更新</h2><p>Kubernetes 允许我们在滚动更新过程中暂停并恢复更新操作。可以通过 <code>kubectl rollout pause</code> 和 <code>kubectl rollout resume</code> 命令来实现。</p><ol><li><strong>暂停滚动更新</strong>：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl rollout pause deployment/app-tier -n deployments</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>恢复滚动更新</strong>：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl rollout resume deployment/app-tier -n deployments</span><br></pre></td></tr></table></figure><p>这允许我们在更新过程中灵活控制进度。</p><hr><h2 id="回滚部署"><a href="#回滚部署" class="headerlink" title="回滚部署"></a>回滚部署</h2><p>如果更新过程中出现问题，Kubernetes 允许我们 <strong>回滚到先前的版本</strong>。通过 <code>kubectl rollout undo</code> 命令，我们可以轻松地将部署恢复到之前的状态。</p><ol><li><strong>回滚到上一版本</strong>：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl rollout undo deployment/app-tier -n deployments</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>查看历史版本</strong>：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl rollout <span class="built_in">history</span> deployment/app-tier -n deployments</span><br></pre></td></tr></table></figure><p>通过 <code>kubectl rollout history</code>，我们可以查看部署的历史记录，找到并回滚到特定的版本。</p><hr><h2 id="扩展与滚动更新"><a href="#扩展与滚动更新" class="headerlink" title="扩展与滚动更新"></a>扩展与滚动更新</h2><p>在 Kubernetes 中，扩展和滚动更新是两个独立的概念：</p><ul><li><strong>扩展</strong>：可以通过增加副本数来扩展应用，保证负载均衡。</li><li><strong>滚动更新</strong>：在不中断服务的情况下，逐步更新容器镜像或配置。</li></ul><h3 id="扩展部署"><a href="#扩展部署" class="headerlink" title="扩展部署"></a>扩展部署</h3><p>假设我们希望扩展 <strong>应用层部署</strong>，可以使用 <code>kubectl scale</code> 命令来增加副本数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl scale deployment app-tier -n deployments --replicas=5</span><br></pre></td></tr></table></figure><p>然后，我们可以通过查看 Pods 状态确认扩展后的副本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods -n deployments</span><br></pre></td></tr></table></figure><hr><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>在本节课中，我们学习了如何使用 <strong>滚动更新</strong> 来更新 Kubernetes 部署：</p><ol><li><strong>滚动更新</strong> 允许我们平滑地替换旧版本的 Pod，为新版本的 Pod 提供无缝过渡。</li><li>我们介绍了如何通过 <code>kubectl</code> 命令暂停、恢复和回滚滚动更新。</li><li><strong>扩展</strong> 和 <strong>滚动更新</strong> 是 Kubernetes 部署管理的两个重要特性，它们可以帮助我们高效地管理应用。</li></ol><p>在下一节课中，我们将探讨如何结合 <strong>探针（Probes）</strong> 和 <strong>初始化容器（Init Containers）</strong> 来确保容器在健康和启动时满足特定条件。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Kubernetes-滚动更新与回滚：在部署中管理应用更新&quot;&gt;&lt;a href=&quot;#Kubernetes-滚动更新与回滚：在部署中管理应用更新&quot; class=&quot;headerlink&quot; title=&quot;Kubernetes 滚动更新与回滚：在部署中管理应用更新&quot;&gt;&lt;/a</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://airag.click/posts/0/"/>
    <id>https://airag.click/posts/0/</id>
    <published>2025-07-17T10:20:46.471Z</published>
    <updated>2025-07-17T10:20:46.471Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Kubernetes-探针（Probes）：确保应用健康运行"><a href="#Kubernetes-探针（Probes）：确保应用健康运行" class="headerlink" title="Kubernetes 探针（Probes）：确保应用健康运行"></a>Kubernetes 探针（Probes）：确保应用健康运行</h3><p>在本节课中，我们将介绍 Kubernetes 的 <strong>探针（Probes）</strong> 功能，特别是 <strong>就绪探针（Readiness Probe）</strong> 和 <strong>存活探针（Liveness Probe）</strong>，它们有助于确保容器在 Kubernetes 中的健康状态，进而提高应用的稳定性和可用性。</p><hr><h2 id="探针的概念"><a href="#探针的概念" class="headerlink" title="探针的概念"></a>探针的概念</h2><p>在 Kubernetes 中，<strong>探针（Probes）</strong> 是用于监控容器状态的重要工具。它们能够帮助 Kubernetes 判断容器是否准备好接受流量或是否进入故障状态，必要时重新启动容器。常见的探针类型有：</p><ol><li><p><strong>就绪探针（Readiness Probe）</strong>：用于检查容器是否准备好接受流量。如果容器尚未准备好，Kubernetes 将不会将流量路由到该容器。</p></li><li><p><strong>存活探针（Liveness Probe）</strong>：用于检查容器是否健康。如果容器进入无法恢复的状态（如死锁），Kubernetes 会重启该容器。</p></li></ol><h3 id="就绪探针（Readiness-Probe）"><a href="#就绪探针（Readiness-Probe）" class="headerlink" title="就绪探针（Readiness Probe）"></a>就绪探针（Readiness Probe）</h3><p><strong>就绪探针</strong> 用于检测容器是否准备好接收流量。容器启动后，可能需要一定时间来加载配置或缓存，直到其完全准备好服务流量。</p><ul><li><strong>用途</strong>：在 Pod 启动过程中，Kubernetes 会使用就绪探针监控容器的状态，直到它们准备好接受流量。如果 Pod 未准备好，Kubernetes 不会将流量发送到该 Pod。</li><li><strong>场景</strong>：例如，Pod 依赖外部服务或数据库，如果该服务或数据库不可用，Kubernetes 会暂停向该 Pod 发送流量，直到外部服务恢复。</li></ul><h3 id="存活探针（Liveness-Probe）"><a href="#存活探针（Liveness-Probe）" class="headerlink" title="存活探针（Liveness Probe）"></a>存活探针（Liveness Probe）</h3><p><strong>存活探针</strong> 用于检查容器是否处于健康状态。如果容器进入了死锁或崩溃状态，存活探针会让 Kubernetes 重启该容器。</p><ul><li><strong>用途</strong>：当容器无法响应请求，或者处于无法恢复的状态时，Kubernetes 会使用存活探针检测并自动重启该容器。</li><li><strong>场景</strong>：例如，容器可能会进入死锁状态，导致无法处理新的请求。存活探针会及时检测到这一点并触发容器重启。</li></ul><hr><h2 id="如何配置探针"><a href="#如何配置探针" class="headerlink" title="如何配置探针"></a>如何配置探针</h2><p>探针可以在 Pod 的 <strong>容器规格（container spec）</strong> 中配置。Kubernetes 提供了三种方式来检查容器状态：</p><ol><li><strong>命令检查（Exec probe）</strong>：通过在容器内执行命令来检查容器的健康状态。</li><li><strong>HTTP GET 请求（HTTP GET probe）</strong>：通过向容器暴露的 HTTP 端口发送请求来检查容器状态。</li><li><strong>TCP Socket 检查（TCP Socket probe）</strong>：尝试连接容器暴露的端口来检查容器是否健康。</li></ol><h3 id="探针配置示例"><a href="#探针配置示例" class="headerlink" title="探针配置示例"></a>探针配置示例</h3><p>以下是 <strong>Redis Pod</strong> 和 <strong>API 服务 Pod</strong> 配置就绪探针和存活探针的示例。</p><h4 id="数据层（Redis-Pod）的探针配置"><a href="#数据层（Redis-Pod）的探针配置" class="headerlink" title="数据层（Redis Pod）的探针配置"></a>数据层（Redis Pod）的探针配置</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">data-tier</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">service-discovery</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">tier:</span> <span class="string">data</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">tier:</span> <span class="string">data</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redis</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">redis:latest</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">6379</span></span><br><span class="line">          <span class="attr">readinessProbe:</span></span><br><span class="line">            <span class="attr">tcpSocket:</span></span><br><span class="line">              <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">          <span class="attr">livenessProbe:</span></span><br><span class="line">            <span class="attr">tcpSocket:</span></span><br><span class="line">              <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">            <span class="attr">initialDelaySeconds:</span> <span class="number">30</span></span><br><span class="line">            <span class="attr">periodSeconds:</span> <span class="number">10</span></span><br></pre></td></tr></table></figure><ul><li><strong>readinessProbe</strong>：用于检查 Redis 服务是否已经启动并能接收连接。</li><li><strong>livenessProbe</strong>：用于检测 Redis 是否在运行中，如果 Redis 崩溃或挂掉，Kubernetes 会重启该容器。</li></ul><h4 id="应用层（API-服务）的探针配置"><a href="#应用层（API-服务）的探针配置" class="headerlink" title="应用层（API 服务）的探针配置"></a>应用层（API 服务）的探针配置</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">app-tier</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">service-discovery</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">tier:</span> <span class="string">app</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">tier:</span> <span class="string">app</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">server</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">node:latest</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">REDIS_URL</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">&quot;data-tier:6379&quot;</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8080</span></span><br><span class="line">          <span class="attr">readinessProbe:</span></span><br><span class="line">            <span class="attr">httpGet:</span></span><br><span class="line">              <span class="attr">path:</span> <span class="string">/healthz</span></span><br><span class="line">              <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">          <span class="attr">livenessProbe:</span></span><br><span class="line">            <span class="attr">httpGet:</span></span><br><span class="line">              <span class="attr">path:</span> <span class="string">/healthz</span></span><br><span class="line">              <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">            <span class="attr">initialDelaySeconds:</span> <span class="number">10</span></span><br><span class="line">            <span class="attr">periodSeconds:</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><ul><li><strong>readinessProbe</strong>：API 服务的就绪探针通过 HTTP GET 请求检查 <code>/healthz</code> 路径，确保 API 服务可以与 Redis 服务交互。</li><li><strong>livenessProbe</strong>：API 服务的存活探针也使用 HTTP GET 请求检查 <code>/healthz</code> 路径，确认 API 服务是否健康。</li></ul><hr><h2 id="配置探针的最佳实践"><a href="#配置探针的最佳实践" class="headerlink" title="配置探针的最佳实践"></a>配置探针的最佳实践</h2><ol><li><p><strong>就绪探针与存活探针的初始延迟</strong>：</p><ul><li>设置适当的 <strong>initialDelaySeconds</strong>，确保容器有足够时间启动并准备好处理流量。</li><li>通常，存活探针的延迟要比就绪探针长，因为容器可能需要更多时间才能恢复正常。</li></ul></li><li><p><strong>探针失败处理</strong>：</p><ul><li>默认情况下，Kubernetes 会在探针失败 3 次后将容器标记为失败并进行重启。你可以通过配置 <strong>failureThreshold</strong> 来调整此行为。</li></ul></li><li><p><strong>服务发现和负载均衡</strong>：</p><ul><li><strong>服务</strong> 会使用 <strong>就绪探针</strong> 来决定是否将流量发送到某个 Pod。如果 Pod 的就绪探针失败，服务会停止将流量发送到该 Pod。</li></ul></li></ol><hr><h2 id="监控与调试"><a href="#监控与调试" class="headerlink" title="监控与调试"></a>监控与调试</h2><ol><li><p><strong>查看 Pod 状态</strong>：你可以使用 <code>kubectl get pods</code> 查看 Pod 是否准备好接收流量。</p></li><li><p><strong>查看探针状态</strong>：使用 <code>kubectl describe pod &lt;pod_name&gt;</code> 来查看探针的执行情况和历史记录。</p></li><li><p><strong>查看容器日志</strong>：你可以使用 <code>kubectl logs &lt;pod_name&gt; -f</code> 来查看容器的日志，帮助你调试探针失败的原因。</p></li><li><p><strong>重新启动 Pod</strong>：如果需要重启 Pod，使用 <code>kubectl delete pod &lt;pod_name&gt;</code>，Kubernetes 会自动创建新的 Pod。</p></li></ol><hr><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>在本节课中，我们介绍了 Kubernetes 中的 <strong>探针（Probes）</strong>：</p><ol><li><strong>就绪探针</strong>：用于检查容器是否准备好接收流量。</li><li><strong>存活探针</strong>：用于检测容器是否健康，必要时重启容器。</li><li>探针可以通过命令、HTTP GET 请求和 TCP socket 来检查容器状态。</li><li>Kubernetes 会基于探针的状态决定是否向 Pod 发送流量或重启 Pod。</li></ol><p>下一节课，我们将学习如何使用 <strong>初始化容器（Init Containers）</strong>，以便在容器启动之前执行一些必要的初始化操作。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Kubernetes-探针（Probes）：确保应用健康运行&quot;&gt;&lt;a href=&quot;#Kubernetes-探针（Probes）：确保应用健康运行&quot; class=&quot;headerlink&quot; title=&quot;Kubernetes 探针（Probes）：确保应用健康运行&quot;&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://airag.click/posts/0/"/>
    <id>https://airag.click/posts/0/</id>
    <published>2025-07-17T10:20:46.471Z</published>
    <updated>2025-07-17T10:20:46.471Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Kubernetes-初始化容器（Init-Containers）：确保容器启动前的任务完成"><a href="#Kubernetes-初始化容器（Init-Containers）：确保容器启动前的任务完成" class="headerlink" title="Kubernetes 初始化容器（Init Containers）：确保容器启动前的任务完成"></a>Kubernetes 初始化容器（Init Containers）：确保容器启动前的任务完成</h3><p>在 Kubernetes 中，<strong>初始化容器（Init Containers）</strong> 提供了一种有效的方式来执行在主应用容器启动前必须完成的任务。初始化容器与主容器之间有着紧密的联系，且通常是必须在主容器启动之前完成的任务。</p><p>本节课将介绍初始化容器的工作原理，以及如何使用它们来确保在应用容器启动之前完成一些预设任务。</p><hr><h2 id="为什么需要初始化容器？"><a href="#为什么需要初始化容器？" class="headerlink" title="为什么需要初始化容器？"></a>为什么需要初始化容器？</h2><h3 id="任务与主容器的分离"><a href="#任务与主容器的分离" class="headerlink" title="任务与主容器的分离"></a>任务与主容器的分离</h3><p>有时，我们需要在主应用容器启动之前执行某些任务。例如，等待某个服务启动、下载文件或动态选择应用端口。虽然这些任务可以放在主容器中执行，但通常将这些任务与主应用容器分开，以保持镜像的简洁性。这是因为，这些任务与应用本身的功能关系紧密，但不应该出现在应用镜像中，避免增加容器镜像的复杂性和安全风险。</p><h3 id="初始化容器的作用"><a href="#初始化容器的作用" class="headerlink" title="初始化容器的作用"></a>初始化容器的作用</h3><p><strong>初始化容器</strong> 解决了这个问题。它们在主容器启动前运行，并且只会在每个 Pod 启动时运行一次。如果 Pod 被删除并重新创建，初始化容器会重新执行。这就确保了在应用容器启动之前，所有必要的任务都已经完成。</p><h3 id="初始化容器与主容器的区别"><a href="#初始化容器与主容器的区别" class="headerlink" title="初始化容器与主容器的区别"></a>初始化容器与主容器的区别</h3><ul><li><strong>镜像不同</strong>：初始化容器和主容器使用不同的镜像。初始化容器可以使用一些不适合放入主应用镜像中的工具，例如 <code>sed</code>、<code>awk</code> 或 <code>dig</code> 等。</li><li><strong>任务执行</strong>：初始化容器通常执行一些任务，比如等待服务的启动、执行预处理脚本等。</li><li><strong>顺序执行</strong>：初始化容器按声明的顺序逐个执行，且每个容器必须成功完成后，才会启动下一个容器。所有初始化容器执行完毕后，才会启动主容器。</li></ul><h3 id="初始化容器的生命周期"><a href="#初始化容器的生命周期" class="headerlink" title="初始化容器的生命周期"></a>初始化容器的生命周期</h3><ul><li>初始化容器会在每个 Pod 被创建时执行一次。</li><li>如果 Pod 因为 <strong>存活探针（Liveness Probe）</strong> 失败而重启，初始化容器会再次执行。</li></ul><p>初始化容器的执行次数是确定的，通常应该设计为具有幂等性，即运行多次也不会产生额外的副作用。</p><hr><h2 id="在应用中使用初始化容器"><a href="#在应用中使用初始化容器" class="headerlink" title="在应用中使用初始化容器"></a>在应用中使用初始化容器</h2><p>让我们来看一个实际的例子，如何在 <strong>应用层</strong> 部署中添加一个初始化容器。这个容器的任务是等待 <strong>Redis</strong> 服务启动，确保在 API 服务容器启动之前，Redis 服务已经可用。</p><h3 id="更新应用部署的-Manifest"><a href="#更新应用部署的-Manifest" class="headerlink" title="更新应用部署的 Manifest"></a>更新应用部署的 Manifest</h3><p>在应用的部署模板中，我们将添加初始化容器，并让它执行一个脚本来等待 Redis 连接的建立。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">app-tier</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">service-discovery</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">tier:</span> <span class="string">app</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">tier:</span> <span class="string">app</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">initContainers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">await-redis</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">node:latest</span></span><br><span class="line">          <span class="attr">command:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;npm&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;run&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;await-redis&quot;</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">REDIS_URL</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">&quot;data-tier:6379&quot;</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">server</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">node:latest</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">REDIS_URL</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">&quot;data-tier:6379&quot;</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><ul><li><strong>initContainers</strong>: 这个部分定义了一个初始化容器 <code>await-redis</code>，它会运行一个脚本，检查 Redis 服务是否可以连接。该脚本通过 <code>npm run await-redis</code> 命令执行。</li><li><strong>命令字段</strong>：通过命令覆盖了容器的默认入口命令，使其在启动时执行特定的操作。</li><li><strong>Redis 服务检查</strong>：通过 <code>REDIS_URL</code> 环境变量，初始化容器会尝试连接 Redis 服务，确保服务可用后才会启动主容器。</li></ul><h3 id="应用更新"><a href="#应用更新" class="headerlink" title="应用更新"></a>应用更新</h3><p>我们将使用以下命令更新部署，并检查 Pod 状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f app-tier-deployment.yaml -n service-discovery</span><br><span class="line">kubectl describe pod -n service-discovery app-tier</span><br></pre></td></tr></table></figure><p>在执行这些操作后，您将看到 <strong>事件日志（Event Log）</strong>，显示整个 Pod 生命周期的进展，包括初始化容器的执行。</p><hr><h2 id="调试初始化容器"><a href="#调试初始化容器" class="headerlink" title="调试初始化容器"></a>调试初始化容器</h2><p>由于初始化容器阻止主容器启动，若初始化容器失败，主容器也不会启动。因此，调试初始化容器非常重要。您可以使用以下命令查看初始化容器的日志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl logs -n service-discovery app-tier -c await-redis</span><br></pre></td></tr></table></figure><p>如果初始化容器失败，日志可以帮助您确定失败的原因。</p><hr><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>在本节课中，我们学习了如何使用 <strong>初始化容器（Init Containers）</strong>：</p><ol><li><strong>初始化容器</strong> 用于在主容器启动之前执行一些任务，保证主容器可以在合适的条件下启动。</li><li>初始化容器和主容器使用不同的镜像，可以包含工具和自定义代码来执行初始化任务。</li><li><strong>初始化容器</strong> 的执行顺序是串行的，且在每次 Pod 启动时都会执行。</li><li>我们使用 <strong><code>kubectl logs</code></strong> 命令调试初始化容器，确保任务成功完成。</li></ol><p>在下一节课中，我们将深入探讨 <strong>卷（Volumes）</strong> 的概念，以便在多个容器之间共享数据。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Kubernetes-初始化容器（Init-Containers）：确保容器启动前的任务完成&quot;&gt;&lt;a href=&quot;#Kubernetes-初始化容器（Init-Containers）：确保容器启动前的任务完成&quot; class=&quot;headerlink&quot; title=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://airag.click/posts/0/"/>
    <id>https://airag.click/posts/0/</id>
    <published>2025-07-17T10:20:46.471Z</published>
    <updated>2025-07-17T10:20:46.471Z</updated>
    
    <content type="html"><![CDATA[<h3 id="探索-Kubernetes-生态系统：Helm、Kustomize、Prometheus、Kubeflow-与-Knative"><a href="#探索-Kubernetes-生态系统：Helm、Kustomize、Prometheus、Kubeflow-与-Knative" class="headerlink" title="探索 Kubernetes 生态系统：Helm、Kustomize、Prometheus、Kubeflow 与 Knative"></a>探索 Kubernetes 生态系统：Helm、Kustomize、Prometheus、Kubeflow 与 Knative</h3><p>Kubernetes 的生态系统充满活力，拥有一系列的工具，帮助开发人员在使用 Kubernetes 时更加高效。在 Kubernetes 核心的周围，众多工具和技术层出不穷，虽然无法一一列举，但我会介绍其中几款流行且值得了解的工具。</p><h4 id="1-Helm：Kubernetes-的包管理器"><a href="#1-Helm：Kubernetes-的包管理器" class="headerlink" title="1. Helm：Kubernetes 的包管理器"></a>1. <strong>Helm：Kubernetes 的包管理器</strong></h4><p>Helm 是 Kubernetes 的包管理器，允许用户通过创建<strong>Charts</strong>来管理 Kubernetes 应用的打包、安装和升级。一个 Chart 包含了部署某个应用所需的所有资源，比如服务、部署等。使用 Helm，可以轻松地共享和管理 Kubernetes 应用。</p><p><strong>例子</strong>：<br>如果我们使用 Redis 作为数据层，而不是从零开始构建和管理 Redis，我们可以使用 Redis 的 Helm Chart。这些 Charts 通常可以在 Helm Hub 上找到，类似于 Docker Hub 上的镜像。例如，有一个高可用的 Redis Chart，它解决了我们应用中的单点故障问题，使用 Helm 可以通过一个命令轻松部署它。</p><p>Helm 让我们免于从头开始构建复杂应用，节省时间和资源。</p><h4 id="2-Kustomize：自定义-Kubernetes-资源"><a href="#2-Kustomize：自定义-Kubernetes-资源" class="headerlink" title="2. Kustomize：自定义 Kubernetes 资源"></a>2. <strong>Kustomize：自定义 Kubernetes 资源</strong></h4><p>Kustomize 是一个 Kubernetes 资源定制工具，帮助你管理复杂的 Kubernetes 应用。Kustomize 不需要对原始的 YAML 文件做修改，而是通过一个<code>kustomization.yaml</code>文件来声明修改规则。这使得你可以在不污染原始资源的情况下进行修改。</p><p><strong>例子</strong>：<br>假设你需要在不同的环境（开发、生产等）中使用不同的配置，Kustomize 能够轻松解决这个问题。通过它，你可以在不改变原始资源的情况下动态调整配置、命名空间、标签等。</p><p>Kustomize 的一个强大功能是支持<strong>Overlay</strong>，你可以为不同环境（如开发、生产等）创建不同的配置，并将其叠加到基础资源上。Kustomize 自 Kubernetes 1.14 起已与<code>kubectl</code>集成，可以直接在命令行中使用。</p><h4 id="3-Prometheus：Kubernetes-的监控与告警"><a href="#3-Prometheus：Kubernetes-的监控与告警" class="headerlink" title="3. Prometheus：Kubernetes 的监控与告警"></a>3. <strong>Prometheus：Kubernetes 的监控与告警</strong></h4><p>Prometheus 是一个开源的监控和告警系统，专为 Kubernetes 设计。它通过从 Kubernetes 组件和应用中收集时间序列数据，帮助开发者监控集群健康和应用状态。</p><p>Prometheus 与 Grafana 常常配合使用，Grafana 提供强大的数据可视化能力。Prometheus 能够定义告警规则，一旦触发条件满足，系统会自动发送通知。</p><p><strong>例子</strong>：<br>假设你有一个运行在 Kubernetes 集群中的应用，你希望根据应用的 CPU 使用情况进行自动扩容。在 Prometheus 中，你可以定义自定义指标，并将其与 Horizontal Pod Autoscaler 结合，以基于自定义指标进行扩展，而不仅仅依赖于 CPU 和内存的标准指标。</p><p>通过 Helm Chart 安装 Prometheus，使得集群监控变得轻松可行。</p><h4 id="4-Kubeflow：Kubernetes-上的机器学习平台"><a href="#4-Kubeflow：Kubernetes-上的机器学习平台" class="headerlink" title="4. Kubeflow：Kubernetes 上的机器学习平台"></a>4. <strong>Kubeflow：Kubernetes 上的机器学习平台</strong></h4><p>Kubeflow 是一个专为 Kubernetes 设计的机器学习平台，旨在使机器学习的部署变得更加简单、可扩展和便携。Kubeflow 提供了一个完整的机器学习栈，支持从构建模型、训练到提供服务的全流程。</p><p>Kubeflow 允许你在 Kubernetes 的基础上构建机器学习应用，利用 Kubernetes 提供的自动扩展等功能，使得机器学习工作负载的部署和管理更加高效。</p><p><strong>例子</strong>：<br>如果你需要在 Kubernetes 上训练和部署一个机器学习模型，Kubeflow 为你提供了一个集成的平台，包括 TensorFlow、PyTorch 等流行框架的支持。你可以在 Kubeflow 中设置工作流，并在多个节点上并行训练模型，提高训练效率。</p><h4 id="5-Knative：Kubernetes-上的-Serverless-平台"><a href="#5-Knative：Kubernetes-上的-Serverless-平台" class="headerlink" title="5. Knative：Kubernetes 上的 Serverless 平台"></a>5. <strong>Knative：Kubernetes 上的 Serverless 平台</strong></h4><p>Knative 是一个在 Kubernetes 之上构建的 serverless 平台，旨在帮助开发人员更简单地构建、部署和管理无服务器应用。Knative 让开发者可以专注于代码，而无需关心运行代码的基础设施。</p><p>Serverless 允许自动扩展应用，只根据需要运行代码，从而避免了固定的服务器资源浪费。Knative 让 Kubernetes 具备了 serverless 的能力，并且支持跨云部署，避免了供应商锁定。</p><p><strong>例子</strong>：<br>你可以使用 Knative 创建无服务器的 Web 应用。当请求到来时，Knative 会自动启动应用实例并处理请求，处理完毕后，实例会自动关闭，无需长时间运行实例。</p><h4 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. <strong>总结</strong></h4><p>Kubernetes 的生态系统极其丰富，提供了多种工具帮助开发者提高生产力。本文介绍了几个重要的工具：</p><ul><li><strong>Helm</strong>：Kubernetes 的包管理器，简化了应用的部署和管理。</li><li><strong>Kustomize</strong>：Kubernetes 资源的定制工具，帮助你管理不同环境的配置。</li><li><strong>Prometheus</strong>：Kubernetes 的监控和告警系统，用于集群和应用的监控。</li><li><strong>Kubeflow</strong>：Kubernetes 上的机器学习平台，简化机器学习的部署和管理。</li><li><strong>Knative</strong>：Kubernetes 上的 Serverless 平台，帮助构建、部署和管理无服务器应用。</li></ul><p>这些工具是 Kubernetes 生态系统的一部分，可以帮助你提高开发效率，减少管理复杂性。每个工具都有其独特的功能，可以根据项目需求选择合适的工具。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;探索-Kubernetes-生态系统：Helm、Kustomize、Prometheus、Kubeflow-与-Knative&quot;&gt;&lt;a href=&quot;#探索-Kubernetes-生态系统：Helm、Kustomize、Prometheus、Kubeflow-与-K</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://airag.click/posts/0/"/>
    <id>https://airag.click/posts/0/</id>
    <published>2025-07-17T10:20:46.471Z</published>
    <updated>2025-07-17T10:20:46.471Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Kubernetes-部署方式全解：从单节点到生产级集群"><a href="#Kubernetes-部署方式全解：从单节点到生产级集群" class="headerlink" title="Kubernetes 部署方式全解：从单节点到生产级集群"></a>Kubernetes 部署方式全解：从单节点到生产级集群</h1><p>当你决定采用 Kubernetes 作为容器编排平台后，随之而来的第一个问题往往是：<strong>应该怎么部署 Kubernetes？</strong></p><p>Kubernetes 提供了丰富的部署方式，从本地开发用的单节点集群，到企业级的多节点生产环境，再到云厂商的托管服务。本文将带你梳理 Kubernetes 部署的全景地图，助你选对部署路径，快速上手。</p><hr><h2 id="✅-本地开发：单节点集群的三种部署方式"><a href="#✅-本地开发：单节点集群的三种部署方式" class="headerlink" title="✅ 本地开发：单节点集群的三种部署方式"></a>✅ 本地开发：单节点集群的三种部署方式</h2><p>如果你是初学者，或仅用于本地开发测试，以下这些方式可以让你几分钟内跑起一个 Kubernetes 集群：</p><h3 id="1-Docker-Desktop（Mac-Windows）"><a href="#1-Docker-Desktop（Mac-Windows）" class="headerlink" title="1. Docker Desktop（Mac &#x2F; Windows）"></a>1. Docker Desktop（Mac &#x2F; Windows）</h3><p>只需在设置中开启 Kubernetes，Docker Desktop 就能一键启动一个本地单节点集群。适合已有 Docker 环境的用户，是最简单的入门方式。</p><h3 id="2-Minikube（跨平台）"><a href="#2-Minikube（跨平台）" class="headerlink" title="2. Minikube（跨平台）"></a>2. Minikube（跨平台）</h3><p>Minikube 是轻量级的本地集群工具，支持 Linux、Mac 和 Windows。它通过虚拟化技术（如 VirtualBox、Docker、HyperKit）模拟一个 Kubernetes 环境。</p><h3 id="3-Kubeadm（Linux-原生）"><a href="#3-Kubeadm（Linux-原生）" class="headerlink" title="3. Kubeadm（Linux 原生）"></a>3. Kubeadm（Linux 原生）</h3><p>在 Linux 系统中，可以使用 kubeadm 原地安装 Kubernetes。适合希望完全理解集群底层结构的用户。但需要注意，它直接在本机安装组件，不是虚拟化的沙箱环境。</p><hr><h2 id="🧪-持续集成：快速启动临时集群的最佳实践"><a href="#🧪-持续集成：快速启动临时集群的最佳实践" class="headerlink" title="🧪 持续集成：快速启动临时集群的最佳实践"></a>🧪 持续集成：快速启动临时集群的最佳实践</h2><p>如果你在做 CI&#x2F;CD 自动化测试，希望在每次提交代码时启动一个“干净的 Kubernetes 环境”，推荐使用：</p><h3 id="K-in-D（Kubernetes-in-Docker）"><a href="#K-in-D（Kubernetes-in-Docker）" class="headerlink" title="K-in-D（Kubernetes in Docker）"></a>K-in-D（Kubernetes in Docker）</h3><p>K-in-D 或 kind 是专为自动化测试场景设计的工具。它在 Docker 容器中运行 Kubernetes，启动速度快、配置简单，适合临时集群的使用场景。</p><hr><h2 id="🚀-生产部署：多节点集群的三类路径"><a href="#🚀-生产部署：多节点集群的三类路径" class="headerlink" title="🚀 生产部署：多节点集群的三类路径"></a>🚀 生产部署：多节点集群的三类路径</h2><p>对于生产环境，需要多节点集群以支持横向扩展和故障容忍。可根据以下三种策略进行部署选择：</p><h3 id="1-托管服务（Managed-Kubernetes）"><a href="#1-托管服务（Managed-Kubernetes）" class="headerlink" title="1. 托管服务（Managed Kubernetes）"></a>1. 托管服务（Managed Kubernetes）</h3><p>如果你更看重运维简化、安全加固和快速上线，云厂商的 Kubernetes 托管服务是首选：</p><ul><li><strong>Amazon EKS</strong></li><li><strong>Azure AKS</strong></li><li><strong>Google GKE</strong></li></ul><p>这类服务屏蔽了复杂安装与升级过程，但版本更新可能落后几个周期（Kubernetes 每 3 个月发新版本）。好处是深度整合了 IAM、安全、存储等云端服务。</p><h3 id="2-自建方案（Do-It-Yourself）"><a href="#2-自建方案（Do-It-Yourself）" class="headerlink" title="2. 自建方案（Do It Yourself）"></a>2. 自建方案（Do It Yourself）</h3><p>如果你希望对集群架构、网络、存储等有<strong>完全控制权</strong>，可以选择以下工具：</p><ul><li><strong>kubeadm</strong>：原生部署核心组件，适合进阶用户。</li><li><strong>kops</strong>：适用于 AWS 上的自动化部署。</li><li><strong>kubespray</strong>：基于 Ansible 的跨平台部署工具，支持多种 Linux 发行版。</li></ul><h3 id="3-企业级增强发行版"><a href="#3-企业级增强发行版" class="headerlink" title="3. 企业级增强发行版"></a>3. 企业级增强发行版</h3><p>有些企业更偏好商业支持与更强安全能力，可以选择下列增强型 Kubernetes 平台：</p><ul><li><strong>Red Hat OpenShift</strong></li><li><strong>VMware Tanzu &#x2F; Pivotal Container Service</strong></li><li><strong>Rancher（支持多云和混合云）</strong></li></ul><hr><h2 id="❓-部署前的几个关键决策问题"><a href="#❓-部署前的几个关键决策问题" class="headerlink" title="❓ 部署前的几个关键决策问题"></a>❓ 部署前的几个关键决策问题</h2><p>在选择部署路径前，你需要先明确以下几个问题：</p><table><thead><tr><th>问题</th><th>推荐方向</th></tr></thead><tbody><tr><td>想省事还是掌控权？</td><td>托管服务 vs 自建部署</td></tr><tr><td>绑定某家云厂商是否 OK？</td><td>AWS EKS &#x2F; GCP GKE 等深度整合方案</td></tr><tr><td>担心厂商锁定？</td><td>Kubespray &#x2F; Rancher 等开源方案</td></tr><tr><td>集群部署在哪？</td><td>支持云上、本地或混合部署（如 GKE On-Prem、EKS on Outposts）</td></tr><tr><td>容器类型？</td><td>Kubernetes 支持混合集群（Linux&#x2F;Windows 容器节点共存）</td></tr></tbody></table><hr><h2 id="🧪-快速体验：Cloud-Academy-实验环境推荐"><a href="#🧪-快速体验：Cloud-Academy-实验环境推荐" class="headerlink" title="🧪 快速体验：Cloud Academy 实验环境推荐"></a>🧪 快速体验：Cloud Academy 实验环境推荐</h2><p>如果你只是想上手 Kubernetes 的实践操作，而不想自己搭集群，Cloud Academy 提供了一个多节点的 Playground Lab，你可以在其中完成所有课程示例。</p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Kubernetes 的部署方式非常灵活，从单节点的开发环境到企业级的多节点集群，每种方式都有其适用场景。初学者可以从 Docker Desktop 或 minikube 入门，开发者和测试工程师可以使用 kind 快速拉起临时集群，而企业可以根据资源与运维能力选择托管或自建方式。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Kubernetes-部署方式全解：从单节点到生产级集群&quot;&gt;&lt;a href=&quot;#Kubernetes-部署方式全解：从单节点到生产级集群&quot; class=&quot;headerlink&quot; title=&quot;Kubernetes 部署方式全解：从单节点到生产级集群&quot;&gt;&lt;/a&gt;Ku</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://airag.click/posts/0/"/>
    <id>https://airag.click/posts/0/</id>
    <published>2025-07-17T10:20:46.471Z</published>
    <updated>2025-07-17T10:20:46.471Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Kubernetes-架构解析：掌握核心组件，打牢学习基础"><a href="#Kubernetes-架构解析：掌握核心组件，打牢学习基础" class="headerlink" title="Kubernetes 架构解析：掌握核心组件，打牢学习基础"></a>Kubernetes 架构解析：掌握核心组件，打牢学习基础</h1><p>在学习 Kubernetes 的旅程中，理解其架构是至关重要的一步。Kubernetes 并不仅仅是一个部署工具，它是一个<strong>分布式系统</strong>，有着自己独特的术语体系与架构设计。本文将带你掌握 Kubernetes 的基本架构，为后续深入学习打下坚实基础。</p><hr><h2 id="为什么要理解-Kubernetes-架构？"><a href="#为什么要理解-Kubernetes-架构？" class="headerlink" title="为什么要理解 Kubernetes 架构？"></a>为什么要理解 Kubernetes 架构？</h2><p>Kubernetes 的功能强大，自动化程度高，但其背后的原理并非魔法，而是由一整套分布式组件协调工作实现的。只有理解这些组件的职责与交互方式，才能真正做到：</p><ul><li>正确配置与排错；</li><li>理解“为什么这样设计”；</li><li>写出可靠、可扩展的部署配置。</li></ul><hr><h2 id="Kubernetes-是一个集群系统"><a href="#Kubernetes-是一个集群系统" class="headerlink" title="Kubernetes 是一个集群系统"></a>Kubernetes 是一个集群系统</h2><p>Kubernetes 架构的顶层抽象是 <strong>Cluster（集群）</strong>。一个集群由一组节点（Nodes）组成，这些节点可以是物理机，也可以是虚拟机。</p><ul><li><strong>Cluster（集群）</strong>：整个系统的集合，是部署容器化应用的平台。</li><li><strong>Node（节点）</strong>：集群中的一台机器，可以是工作节点或控制节点。</li></ul><hr><h2 id="控制面与工作节点"><a href="#控制面与工作节点" class="headerlink" title="控制面与工作节点"></a>控制面与工作节点</h2><p>Kubernetes 节点按职责分为两类：</p><table><thead><tr><th>节点类型</th><th>描述</th></tr></thead><tbody><tr><td><strong>控制节点（Master Node）</strong></td><td>运行控制面组件（Control Plane），负责整个集群的调度与管理。</td></tr><tr><td><strong>工作节点（Worker Node）</strong></td><td>承载应用容器的运行环境，实际运行用户的 Pod。</td></tr></tbody></table><h3 id="控制面组件包含："><a href="#控制面组件包含：" class="headerlink" title="控制面组件包含："></a>控制面组件包含：</h3><ul><li><strong>API Server</strong>：对外接口，供用户与集群交互。</li><li><strong>Scheduler</strong>：负责<strong>调度 Pod 到合适的节点</strong>（注意不是定时任务，而是根据资源需求与规则分配位置）。</li><li><strong>Controller Manager</strong>：负责集群状态维护，如副本控制、节点状态感知等。</li><li><strong>etcd</strong>：分布式数据库，保存集群的所有状态信息。</li></ul><hr><h2 id="Pod-是最小的调度单元"><a href="#Pod-是最小的调度单元" class="headerlink" title="Pod 是最小的调度单元"></a>Pod 是最小的调度单元</h2><p>在 Kubernetes 中，<strong>容器被封装在 Pod 内运行</strong>。</p><ul><li><strong>Pod</strong>：可以包含一个或多个容器，这些容器共享网络和存储空间，在同一节点上运行。</li><li>Pod 是 Kubernetes 的基本构建块，而不是容器本身。</li></ul><hr><h2 id="核心抽象一览"><a href="#核心抽象一览" class="headerlink" title="核心抽象一览"></a>核心抽象一览</h2><p>Kubernetes 引入了多个关键概念，帮助用户构建复杂的容器编排体系：</p><table><thead><tr><th>概念</th><th>描述</th></tr></thead><tbody><tr><td><strong>Pod</strong></td><td>容器的运行单元，多个容器可共存于同一 Pod。</td></tr><tr><td><strong>Service</strong></td><td>网络抽象，暴露 Pod 供集群内外访问（负载均衡+发现）。</td></tr><tr><td><strong>Deployment</strong></td><td>控制 Pod 的创建、更新、回滚和副本数量（声明式部署）。</td></tr></tbody></table><p>这些核心对象将支撑你完成自动部署、扩缩容、负载均衡、滚动更新等关键操作。</p><hr><h2 id="小结：我们已经了解了……"><a href="#小结：我们已经了解了……" class="headerlink" title="小结：我们已经了解了……"></a>小结：我们已经了解了……</h2><ul><li>Kubernetes 是一个分布式容器编排系统；</li><li>集群由多个节点组成；</li><li>节点分为控制节点和工作节点；</li><li>控制面负责调度和集群状态维护；</li><li>应用以 Pod 形式运行；</li><li>Pod 通过 Service 对外暴露；</li><li>Deployment 控制 Pod 的生命周期与扩展策略。</li></ul><hr><h2 id="推荐学习方式"><a href="#推荐学习方式" class="headerlink" title="推荐学习方式"></a>推荐学习方式</h2><p>初学者可以多次回顾本节内容，直到熟悉这些基本术语。你也可以参考 Kubernetes 官方文档中的<a href="https://kubernetes.io/zh-cn/docs/reference/glossary/?fundamental=true">术语词汇表</a>，补充更多细节。</p><p>后面，我们将正式演示<strong>如何与 Kubernetes 集群交互</strong>，敬请期待！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Kubernetes-架构解析：掌握核心组件，打牢学习基础&quot;&gt;&lt;a href=&quot;#Kubernetes-架构解析：掌握核心组件，打牢学习基础&quot; class=&quot;headerlink&quot; title=&quot;Kubernetes 架构解析：掌握核心组件，打牢学习基础&quot;&gt;&lt;/a</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://airag.click/posts/0/"/>
    <id>https://airag.click/posts/0/</id>
    <published>2025-07-17T10:20:46.471Z</published>
    <updated>2025-07-17T10:20:46.471Z</updated>
    
    <content type="html"><![CDATA[<h1 id="与-Kubernetes-交互的四种方式：掌握-kubectl，开启实战之路"><a href="#与-Kubernetes-交互的四种方式：掌握-kubectl，开启实战之路" class="headerlink" title="与 Kubernetes 交互的四种方式：掌握 kubectl，开启实战之路"></a>与 Kubernetes 交互的四种方式：掌握 kubectl，开启实战之路</h1><p>学习 Kubernetes 不仅要理解架构，还要掌握<strong>如何与集群交互</strong>。不管你是开发者、运维工程师，还是 DevOps 实践者，掌握 Kubernetes 的操作方式，是走向生产环境部署的第一步。</p><p>本文将带你梳理四种常见的 Kubernetes 交互方式，并重点介绍最核心的命令行工具——<code>kubectl</code>。</p><hr><h2 id="🔗-方法一：直接调用-Kubernetes-API（REST-接口）"><a href="#🔗-方法一：直接调用-Kubernetes-API（REST-接口）" class="headerlink" title="🔗 方法一：直接调用 Kubernetes API（REST 接口）"></a>🔗 方法一：直接调用 Kubernetes API（REST 接口）</h2><p>Kubernetes 的控制面由 Master 组件提供，而其中的核心就是 <strong>API Server</strong>。它是集群的“前台”，负责接收和处理所有请求。</p><p>虽然 Kubernetes 本质上是通过 REST API 驱动的，但<strong>直接使用 HTTP API 调用</strong>并不常见，主要用于：</p><ul><li>你使用的编程语言没有官方或社区的客户端库；</li><li>或者你正在开发低层级集成组件。</li></ul><p>API 文档地址：<a href="https://kubernetes.io/docs/reference/kubernetes-api/">https://kubernetes.io/docs/reference/kubernetes-api/</a></p><hr><h2 id="🧰-方法二：使用官方客户端库（Client-Libraries）"><a href="#🧰-方法二：使用官方客户端库（Client-Libraries）" class="headerlink" title="🧰 方法二：使用官方客户端库（Client Libraries）"></a>🧰 方法二：使用官方客户端库（Client Libraries）</h2><p>Kubernetes 官方维护了多个语言的客户端 SDK，可大大简化身份认证、请求拼接、错误处理等重复工作。适合开发者用代码直接操作 Kubernetes。</p><h3 id="官方支持语言："><a href="#官方支持语言：" class="headerlink" title="官方支持语言："></a>官方支持语言：</h3><ul><li>Go</li><li>Python</li><li>Java</li><li>.NET</li><li>JavaScript</li></ul><p>也有很多社区支持的库，适合偏门语言如 Rust、Ruby、PHP 等。对需要自动化控制资源的 OPA、Operator 编写者尤其重要。</p><hr><h2 id="🧑‍💻-方法三：使用命令行工具-kubectl（最推荐）"><a href="#🧑‍💻-方法三：使用命令行工具-kubectl（最推荐）" class="headerlink" title="🧑‍💻 方法三：使用命令行工具 kubectl（最推荐）"></a>🧑‍💻 方法三：使用命令行工具 kubectl（最推荐）</h2><p>这是 <strong>最常见也是最推荐</strong> 的方式，是本课程的重点工具。<code>kubectl</code> 是 Kubernetes 的命令行客户端，可以通过高度抽象的命令行指令与集群交互，本质上它封装了对 API Server 的调用。</p><h3 id="为什么要学好-kubectl？"><a href="#为什么要学好-kubectl？" class="headerlink" title="为什么要学好 kubectl？"></a>为什么要学好 kubectl？</h3><ul><li><strong>功能全</strong>：部署、删除、调试、查看资源都能做；</li><li><strong>使用频繁</strong>：日常管理几乎全靠它；</li><li><strong>学习曲线平缓</strong>：只要掌握一类资源的管理方法，其他类都大同小异。</li></ul><hr><h2 id="🧪-常用-kubectl-命令示例"><a href="#🧪-常用-kubectl-命令示例" class="headerlink" title="🧪 常用 kubectl 命令示例"></a>🧪 常用 kubectl 命令示例</h2><table><thead><tr><th>命令</th><th>用途</th></tr></thead><tbody><tr><td><code>kubectl create</code></td><td>创建资源。可以使用命令行或指定 YAML 文件（manifest）</td></tr><tr><td><code>kubectl delete</code></td><td>删除资源</td></tr><tr><td><code>kubectl get</code></td><td>查询某类资源的列表，如 <code>kubectl get pods</code></td></tr><tr><td><code>kubectl describe</code></td><td>查看资源详情，如 <code>kubectl describe pod server</code></td></tr><tr><td><code>kubectl logs</code></td><td>查看 Pod 中容器的日志，可用于调试</td></tr></tbody></table><p>💡**提示：**大多数操作都支持 <code>-f</code> 选项导入 YAML 文件。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f deployment.yaml</span><br><span class="line">kubectl delete -f deployment.yaml</span><br></pre></td></tr></table></figure><p>随着课程深入，我们将系统学习这些命令在实际部署和排障中的用法。</p><hr><h2 id="📊-方法四：Kubernetes-Web-Dashboard（图形界面）"><a href="#📊-方法四：Kubernetes-Web-Dashboard（图形界面）" class="headerlink" title="📊 方法四：Kubernetes Web Dashboard（图形界面）"></a>📊 方法四：Kubernetes Web Dashboard（图形界面）</h2><p>Dashboard 是一个 Web UI，可以用浏览器查看集群状态、Pod 列表、日志等信息，适合初学者做可视化管理。</p><ul><li>属于可选组件，并不是所有集群都默认安装；</li><li>Cloud Academy 的“部署有状态应用实验”课程中会介绍该功能；</li><li>不推荐用于生产环境操作，更适合作为补充或演示用途。</li></ul><hr><h2 id="✅-总结"><a href="#✅-总结" class="headerlink" title="✅ 总结"></a>✅ 总结</h2><table><thead><tr><th>方式</th><th>适用人群</th><th>特点</th></tr></thead><tbody><tr><td>REST API</td><td>深度集成开发者</td><td>灵活但繁琐</td></tr><tr><td>Client Libraries</td><td>自动化系统、平台开发</td><td>编程方式控制资源</td></tr><tr><td><strong>kubectl（推荐）</strong></td><td>所有 Kubernetes 用户</td><td>命令清晰、高效、标准操作</td></tr><tr><td>Web Dashboard</td><td>初学者、教学展示</td><td>可视化界面，但不适合复杂管理</td></tr></tbody></table><p>**掌握 kubectl，才能真正开始你的 Kubernetes 实战之旅。**在下一节课中，我们将首次部署一个应用到 Kubernetes 集群，欢迎继续学习！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;与-Kubernetes-交互的四种方式：掌握-kubectl，开启实战之路&quot;&gt;&lt;a href=&quot;#与-Kubernetes-交互的四种方式：掌握-kubectl，开启实战之路&quot; class=&quot;headerlink&quot; title=&quot;与 Kubernetes 交互的</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://airag.click/posts/0/"/>
    <id>https://airag.click/posts/0/</id>
    <published>2025-07-17T10:20:46.471Z</published>
    <updated>2025-07-17T10:20:46.471Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Kubernetes-Pods-入门：部署与管理你的第一个应用"><a href="#Kubernetes-Pods-入门：部署与管理你的第一个应用" class="headerlink" title="Kubernetes Pods 入门：部署与管理你的第一个应用"></a>Kubernetes Pods 入门：部署与管理你的第一个应用</h3><p>在 Kubernetes 中，<strong>Pod</strong> 是最基本的部署单元。每个 Pod 都包含一个或多个容器，并且这些容器共享相同的网络和存储。通过本节课的学习，你将掌握如何创建和管理 Pod，并进一步理解与 Kubernetes 集群交互的基础模式。</p><hr><h2 id="什么是-Pod？"><a href="#什么是-Pod？" class="headerlink" title="什么是 Pod？"></a>什么是 Pod？</h2><p>在 Kubernetes 中，<strong>Pod</strong> 是一个或多个容器的集合。虽然每个 Pod 最小可以包含一个容器，我们的例子中会聚焦于单容器 Pod，但 Kubernetes 同时支持 <strong>多容器 Pod</strong>，它们共享相同的网络空间和存储。</p><h3 id="Pod-的重要特点："><a href="#Pod-的重要特点：" class="headerlink" title="Pod 的重要特点："></a>Pod 的重要特点：</h3><ol><li><strong>共享网络：</strong> 每个 Pod 都有一个唯一的 IP 地址，不论其容器位于哪个节点。所有 Pod 都可以相互通信，无论它们所在的节点是什么。</li><li><strong>资源管理：</strong> Pod 的声明包含容器的所有属性，例如容器镜像、端口映射、自动重启策略、资源限制等。</li></ol><hr><h2 id="Pod-的声明与-Manifest-文件"><a href="#Pod-的声明与-Manifest-文件" class="headerlink" title="Pod 的声明与 Manifest 文件"></a>Pod 的声明与 Manifest 文件</h2><p>Pod 的配置是通过 <strong>Manifest 文件</strong> 来完成的。Manifest 文件包含了 Kubernetes 资源的描述，包括资源的 <strong>API 版本</strong>、<strong>Kind</strong>（资源类型）、<strong>Metadata</strong>（元数据）和 <strong>Spec</strong>（规格）。</p><p>Manifest 文件通常采用 YAML 格式，并被用来定义 Kubernetes 中的各种资源。通过向 Kubernetes API 服务器发送 Manifest 文件，Kubernetes 会根据文件中的描述进行相应的操作，如创建 Pod、服务等。</p><h3 id="一个简单的-Pod-示例："><a href="#一个简单的-Pod-示例：" class="headerlink" title="一个简单的 Pod 示例："></a>一个简单的 Pod 示例：</h3><p>以下是一个最简单的 Pod Manifest 示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-pod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx-container</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">nginx:latest</span></span><br></pre></td></tr></table></figure><ul><li><strong>apiVersion</strong>: Kubernetes API 版本。</li><li><strong>kind</strong>: 资源类型（这里是 Pod）。</li><li><strong>metadata</strong>: 资源的元数据，最少需要指定 <code>name</code>。</li><li><strong>spec</strong>: 资源的规格配置，这里定义了容器的名称和镜像。</li></ul><hr><h2 id="使用-kubectl-创建和管理-Pod"><a href="#使用-kubectl-创建和管理-Pod" class="headerlink" title="使用 kubectl 创建和管理 Pod"></a>使用 <code>kubectl</code> 创建和管理 Pod</h2><h3 id="1-创建-Pod"><a href="#1-创建-Pod" class="headerlink" title="1. 创建 Pod"></a>1. 创建 Pod</h3><p>使用以下命令创建 Pod：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f pod.yaml</span><br></pre></td></tr></table></figure><p>其中 <code>pod.yaml</code> 是你之前编写的 Manifest 文件。<code>kubectl create</code> 命令将读取该文件并根据其中的描述在 Kubernetes 集群中创建相应的资源。</p><h3 id="2-查看-Pod-状态"><a href="#2-查看-Pod-状态" class="headerlink" title="2. 查看 Pod 状态"></a>2. 查看 Pod 状态</h3><p>运行以下命令查看当前 Pod 的状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods</span><br></pre></td></tr></table></figure><p>这会列出当前命名空间中的所有 Pod，包括每个 Pod 的运行状态、重启次数、存活时间等信息。</p><h3 id="3-查看-Pod-详细信息"><a href="#3-查看-Pod-详细信息" class="headerlink" title="3. 查看 Pod 详细信息"></a>3. 查看 Pod 详细信息</h3><p>要获取 Pod 的详细信息，可以使用 <code>describe</code> 命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl describe pod my-pod</span><br></pre></td></tr></table></figure><p>这将显示关于 Pod 的详细信息，包括它的 IP 地址、运行状态、容器状态以及容器的日志等。</p><hr><h2 id="配置容器端口和资源请求"><a href="#配置容器端口和资源请求" class="headerlink" title="配置容器端口和资源请求"></a>配置容器端口和资源请求</h2><h3 id="1-配置端口映射"><a href="#1-配置端口映射" class="headerlink" title="1. 配置端口映射"></a>1. 配置端口映射</h3><p>在 Pod 的配置中，你可能需要将容器的某个端口暴露到外部网络，以便外部访问容器服务。通过添加端口映射来实现：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-pod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx-container</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">nginx:latest</span></span><br><span class="line">      <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p>这个配置将在容器中暴露 80 端口，以便访问 Nginx 服务。</p><h3 id="2-设置资源请求与限制"><a href="#2-设置资源请求与限制" class="headerlink" title="2. 设置资源请求与限制"></a>2. 设置资源请求与限制</h3><p>Kubernetes 调度 Pod 时，需要考虑其资源请求（CPU 和内存）以及可能的资源限制。你可以为 Pod 配置这些参数：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-pod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx-container</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">nginx:latest</span></span><br><span class="line">      <span class="attr">resources:</span></span><br><span class="line">        <span class="attr">requests:</span></span><br><span class="line">          <span class="attr">memory:</span> <span class="string">&quot;64Mi&quot;</span></span><br><span class="line">          <span class="attr">cpu:</span> <span class="string">&quot;250m&quot;</span></span><br><span class="line">        <span class="attr">limits:</span></span><br><span class="line">          <span class="attr">memory:</span> <span class="string">&quot;128Mi&quot;</span></span><br><span class="line">          <span class="attr">cpu:</span> <span class="string">&quot;500m&quot;</span></span><br></pre></td></tr></table></figure><ul><li><strong>requests</strong>: 定义 Pod 启动时的资源需求。</li><li><strong>limits</strong>: 限制 Pod 最大可使用的资源。</li></ul><hr><h2 id="删除-Pod"><a href="#删除-Pod" class="headerlink" title="删除 Pod"></a>删除 Pod</h2><p>如果你需要删除一个 Pod，可以使用以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete pod my-pod</span><br></pre></td></tr></table></figure><p>该命令将会删除 <code>my-pod</code>，并且如果 Pod 被某个控制器（如 Deployment）管理，它会自动创建一个新的 Pod 来替代已删除的 Pod。</p><hr><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>在本节课中，我们学习了 Kubernetes 中 <strong>Pod</strong> 的基本概念及操作：</p><ol><li><strong>Pod 是最小的部署单元</strong>，包含一个或多个容器。</li><li>Pod 的配置通过 <strong>Manifest 文件</strong> 来声明，可以使用 YAML 格式定义。</li><li>通过 <strong><code>kubectl</code></strong> 可以轻松创建、查看和管理 Pod。</li><li>我们还学习了如何配置容器的端口映射和资源请求与限制。</li></ol><p>接下来，我们将通过 <strong>服务（Service）</strong> 来使我们的 Web 应用可访问，进一步探索如何在 Kubernetes 中构建和管理生产环境应用。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Kubernetes-Pods-入门：部署与管理你的第一个应用&quot;&gt;&lt;a href=&quot;#Kubernetes-Pods-入门：部署与管理你的第一个应用&quot; class=&quot;headerlink&quot; title=&quot;Kubernetes Pods 入门：部署与管理你的第一个应</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://airag.click/posts/0/"/>
    <id>https://airag.click/posts/0/</id>
    <published>2025-07-17T10:20:46.471Z</published>
    <updated>2025-07-17T10:20:46.471Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Kubernetes-服务：如何通过-NodePort-访问-Pod"><a href="#Kubernetes-服务：如何通过-NodePort-访问-Pod" class="headerlink" title="Kubernetes 服务：如何通过 NodePort 访问 Pod"></a>Kubernetes 服务：如何通过 NodePort 访问 Pod</h3><p>在上一课中，我们成功创建了一个 Web 服务器 Pod。然而，由于其 IP 地址是动态分配的，并且 Pods 之间的通信仅限于容器网络内，这个 Web 服务器仍然无法从集群外部或其他 Pod 外部访问。为了能从外部访问该 Web 服务，我们需要引入 <strong>Kubernetes 服务（Service）</strong>。</p><p>本节课将介绍如何通过 <strong>Service</strong> 来解决 Pod 访问性问题，特别是如何使用 <strong>NodePort 服务</strong> 从外部访问 Pod。</p><hr><h2 id="什么是-Kubernetes-服务？"><a href="#什么是-Kubernetes-服务？" class="headerlink" title="什么是 Kubernetes 服务？"></a>什么是 Kubernetes 服务？</h2><p>Kubernetes 服务是一个抽象层，用于定义 Pods 的网络访问规则。通过服务，你可以将客户端请求路由到匹配的 Pods，且服务会提供一个静态的 IP 地址和端口，使得 Pods 即使在重新调度时也能通过固定地址访问。</p><p>服务提供了负载均衡功能，能够将请求均匀分发到多个匹配的 Pods 上，保证请求的高可用性。</p><h3 id="服务的工作原理："><a href="#服务的工作原理：" class="headerlink" title="服务的工作原理："></a>服务的工作原理：</h3><ol><li><strong>标签选择器（Selector）</strong>：服务通过标签选择器来选择一组 Pods。例如，可以使用 <code>app=webserver</code> 标签选择所有 Web 服务器 Pods。</li><li><strong>静态 IP</strong>：服务会分配一个 <strong>Cluster IP</strong>，用于集群内部访问该服务。</li><li><strong>端口映射</strong>：服务通过端口映射将请求发送到相应的 Pod。如果使用 NodePort 服务，还可以让服务通过集群外部的端口进行访问。</li></ol><hr><h2 id="创建一个-NodePort-服务"><a href="#创建一个-NodePort-服务" class="headerlink" title="创建一个 NodePort 服务"></a>创建一个 NodePort 服务</h2><h3 id="步骤-1：定义服务的-Manifest-文件"><a href="#步骤-1：定义服务的-Manifest-文件" class="headerlink" title="步骤 1：定义服务的 Manifest 文件"></a>步骤 1：定义服务的 Manifest 文件</h3><p>我们将通过创建一个服务的 Manifest 文件，定义服务的类型、选择器、端口等属性。以下是一个简单的 NodePort 服务 Manifest 文件示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">webserver-service</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">webserver</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">webserver</span> <span class="comment"># 服务选择标签为 app=webserver 的 Pod</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">80</span> <span class="comment"># 服务的端口</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">80</span> <span class="comment"># 指定容器内的端口</span></span><br><span class="line">      <span class="attr">nodePort:</span> <span class="number">30001</span> <span class="comment"># NodePort，外部访问的端口</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span> <span class="comment"># 服务类型为 NodePort</span></span><br></pre></td></tr></table></figure><ul><li><strong>selector</strong>: 使用标签选择器选择要暴露的 Pods（本例中选择标签为 <code>app=webserver</code> 的 Pods）。</li><li><strong>ports</strong>: 定义服务的端口映射。这里将 Pod 内部的 80 端口映射到外部的 30001 端口。</li><li><strong>type: NodePort</strong>: 设置服务类型为 NodePort，使得服务能通过集群节点的外部 IP 和指定端口访问。</li></ul><h3 id="步骤-2：创建服务"><a href="#步骤-2：创建服务" class="headerlink" title="步骤 2：创建服务"></a>步骤 2：创建服务</h3><p>使用 <code>kubectl create</code> 命令创建服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f webserver-service.yaml</span><br></pre></td></tr></table></figure><h3 id="步骤-3：查看服务状态"><a href="#步骤-3：查看服务状态" class="headerlink" title="步骤 3：查看服务状态"></a>步骤 3：查看服务状态</h3><p>创建服务后，可以使用以下命令查看服务的状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get services</span><br></pre></td></tr></table></figure><p>输出中会显示服务的 <strong>Cluster IP</strong>、<strong>NodePort</strong> 和端口等信息。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NAME                TYPE       CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">webserver-service   NodePort   10.103.92.123   &lt;none&gt;        80:30001/TCP   5m</span><br></pre></td></tr></table></figure><ul><li><strong>Cluster IP</strong>: 服务的内部 IP 地址。</li><li><strong>NodePort</strong>: 集群外部可以访问服务的端口。</li></ul><h3 id="步骤-4：访问服务"><a href="#步骤-4：访问服务" class="headerlink" title="步骤 4：访问服务"></a>步骤 4：访问服务</h3><p>为了从集群外部访问 Web 服务，你可以使用任意节点的 <strong>Node IP</strong> 和指定的 <strong>NodePort</strong> 端口。首先，使用以下命令查看节点的 IP 地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl describe nodes | grep -i address -A 1</span><br></pre></td></tr></table></figure><p>然后，使用 <code>curl</code> 发送请求访问 Web 服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://&lt;node-ip&gt;:30001</span><br></pre></td></tr></table></figure><p>你将看到 Nginx 服务器返回的 HTML 页面，表示 Web 服务已经成功暴露并可以从外部访问。</p><hr><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>在本节课中，我们学习了如何使用 <strong>NodePort 服务</strong> 来解决 Pod 访问性问题。通过定义服务，我们可以为一组 Pod 提供一个固定的访问地址，即使 Pods 被重新调度到其他节点，也能通过该地址访问：</p><ul><li><strong>Selector</strong>：选择与服务匹配的 Pods。</li><li><strong>Ports</strong>：配置服务的端口映射，使 Pod 的端口对外暴露。</li><li><strong>NodePort</strong>：使服务能够通过集群节点的外部 IP 和端口访问。</li></ul><p>在下一节课中，我们将进一步探讨如何在 Kubernetes 中使用 <strong>多容器 Pod</strong> 来支持更复杂的应用。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Kubernetes-服务：如何通过-NodePort-访问-Pod&quot;&gt;&lt;a href=&quot;#Kubernetes-服务：如何通过-NodePort-访问-Pod&quot; class=&quot;headerlink&quot; title=&quot;Kubernetes 服务：如何通过 NodeP</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://airag.click/posts/0/"/>
    <id>https://airag.click/posts/0/</id>
    <published>2025-07-17T10:20:46.471Z</published>
    <updated>2025-07-17T10:20:46.471Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Kubernetes-多容器-Pod：实现-3-层应用"><a href="#Kubernetes-多容器-Pod：实现-3-层应用" class="headerlink" title="Kubernetes 多容器 Pod：实现 3 层应用"></a>Kubernetes 多容器 Pod：实现 3 层应用</h3><p>在 Kubernetes 中，<strong>多容器 Pod</strong> 是一种将多个紧密相关的容器组合在一起的方式，容器在同一个 Pod 内共享相同的网络和存储资源。这种方式适用于需要紧密协作的服务，能够在同一个 Pod 中进行资源共享和通信。</p><p>在本节课中，我们将创建一个 3 层应用，包含 4 个容器，并通过 Kubernetes 来管理它们。我们将介绍如何在多容器 Pod 中使用 <strong>Namespace</strong> 和 <strong>Pod 日志</strong>，同时学习如何让不同层次的服务相互协作。</p><hr><h2 id="应用架构"><a href="#应用架构" class="headerlink" title="应用架构"></a>应用架构</h2><p>我们要实现的应用是一个简单的计数器系统，包含 <strong>4 个容器</strong>，分布在 <strong>3 个层级</strong>：</p><ol><li><strong>应用层</strong>：包含一个 Node.js 服务器容器，它接收一个 POST 请求用于递增计数器，并通过 GET 请求获取当前计数值。</li><li><strong>数据层</strong>：使用 <strong>Redis</strong> 存储计数器的值。</li><li><strong>支持层</strong>：包含两个容器：<strong>Poller</strong> 容器（不断发送 GET 请求到服务器，打印计数器值）和 <strong>Counter</strong> 容器（随机发送 POST 请求到服务器，递增计数器）。</li></ol><hr><h2 id="使用-Namespace-隔离资源"><a href="#使用-Namespace-隔离资源" class="headerlink" title="使用 Namespace 隔离资源"></a>使用 Namespace 隔离资源</h2><p>Kubernetes 的 <strong>Namespace</strong> 功能帮助我们隔离不同的资源，可以用于不同用户、环境或应用的资源管理。在本课程中，我们为该应用创建一个名为 <code>microservices</code> 的 Namespace。</p><h3 id="创建-Namespace"><a href="#创建-Namespace" class="headerlink" title="创建 Namespace"></a>创建 Namespace</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Namespace</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">microservices</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">counter-microservice</span></span><br></pre></td></tr></table></figure><p>使用以下命令创建该 Namespace：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f microservices-namespace.yaml</span><br></pre></td></tr></table></figure><p>创建后，你可以在任何资源的 Manifest 文件中指定该 Namespace。</p><hr><h2 id="创建多容器-Pod"><a href="#创建多容器-Pod" class="headerlink" title="创建多容器 Pod"></a>创建多容器 Pod</h2><p>接下来，我们将创建一个多容器 Pod，将应用的 4 个容器放入同一个 Pod 中。这些容器分别是 Redis、Server、Counter 和 Poller。</p><h3 id="Pod-Manifest-文件"><a href="#Pod-Manifest-文件" class="headerlink" title="Pod Manifest 文件"></a>Pod Manifest 文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">app</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">microservices</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redis</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">redis:latest</span></span><br><span class="line">      <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">6379</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">server</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">node:latest</span></span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">REDIS_URL</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">&quot;localhost:6379&quot;</span></span><br><span class="line">      <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8080</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">counter</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">counter-app:latest</span></span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">API_URL</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">&quot;http://localhost:8080&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">poller</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">poller-app:latest</span></span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">API_URL</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">&quot;http://localhost:8080&quot;</span></span><br></pre></td></tr></table></figure><h3 id="创建-Pod"><a href="#创建-Pod" class="headerlink" title="创建 Pod"></a>创建 Pod</h3><p>使用以下命令创建 Pod：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f app-pod.yaml -n microservices</span><br></pre></td></tr></table></figure><h3 id="查看-Pod-状态"><a href="#查看-Pod-状态" class="headerlink" title="查看 Pod 状态"></a>查看 Pod 状态</h3><p>使用以下命令查看 Pod 状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods -n microservices</span><br></pre></td></tr></table></figure><p>你将看到 Pod 中的所有容器状态。</p><h3 id="查看-Pod-详细信息"><a href="#查看-Pod-详细信息" class="headerlink" title="查看 Pod 详细信息"></a>查看 Pod 详细信息</h3><p>使用 <code>kubectl describe</code> 获取详细信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl describe pod app -n microservices</span><br></pre></td></tr></table></figure><p>这将显示更多的事件和每个容器的状态，帮助你进行调试。</p><hr><h2 id="查看容器日志"><a href="#查看容器日志" class="headerlink" title="查看容器日志"></a>查看容器日志</h2><p>Kubernetes 通过 <strong>kubectl logs</strong> 命令提供容器日志。日志包括容器标准输出（stdout）和标准错误（stderr）的内容。</p><h3 id="获取特定容器的日志"><a href="#获取特定容器的日志" class="headerlink" title="获取特定容器的日志"></a>获取特定容器的日志</h3><p>例如，要查看 <code>counter</code> 容器的最近 10 行日志，可以使用以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl logs -n microservices app counter --<span class="built_in">tail</span> 10</span><br></pre></td></tr></table></figure><h3 id="实时查看日志"><a href="#实时查看日志" class="headerlink" title="实时查看日志"></a>实时查看日志</h3><p>使用 <code>-f</code> 选项实时查看日志输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl logs -n microservices app poller -f</span><br></pre></td></tr></table></figure><p>这会实时显示 <code>poller</code> 容器的日志，帮助你观察计数器的变化过程。</p><hr><h2 id="资源请求与限制"><a href="#资源请求与限制" class="headerlink" title="资源请求与限制"></a>资源请求与限制</h2><p>在 Kubernetes 中，你可以为 Pod 和容器设置 <strong>资源请求</strong> 和 <strong>资源限制</strong>，确保容器不会消耗过多的资源。资源请求是 Pod 启动时所需的最低资源，而资源限制是 Pod 最大可以使用的资源。</p><h3 id="设置资源请求和限制"><a href="#设置资源请求和限制" class="headerlink" title="设置资源请求和限制"></a>设置资源请求和限制</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">app</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">microservices</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redis</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">redis:latest</span></span><br><span class="line">      <span class="attr">resources:</span></span><br><span class="line">        <span class="attr">requests:</span></span><br><span class="line">          <span class="attr">memory:</span> <span class="string">&quot;64Mi&quot;</span></span><br><span class="line">          <span class="attr">cpu:</span> <span class="string">&quot;250m&quot;</span></span><br><span class="line">        <span class="attr">limits:</span></span><br><span class="line">          <span class="attr">memory:</span> <span class="string">&quot;128Mi&quot;</span></span><br><span class="line">          <span class="attr">cpu:</span> <span class="string">&quot;500m&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">server</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">node:latest</span></span><br><span class="line">      <span class="attr">resources:</span></span><br><span class="line">        <span class="attr">requests:</span></span><br><span class="line">          <span class="attr">memory:</span> <span class="string">&quot;128Mi&quot;</span></span><br><span class="line">          <span class="attr">cpu:</span> <span class="string">&quot;500m&quot;</span></span><br><span class="line">        <span class="attr">limits:</span></span><br><span class="line">          <span class="attr">memory:</span> <span class="string">&quot;256Mi&quot;</span></span><br><span class="line">          <span class="attr">cpu:</span> <span class="string">&quot;1&quot;</span></span><br></pre></td></tr></table></figure><h3 id="更新-Pod-的资源"><a href="#更新-Pod-的资源" class="headerlink" title="更新 Pod 的资源"></a>更新 Pod 的资源</h3><p>如果你已经创建了 Pod，但需要更新资源请求和限制，你需要删除 Pod 并重新创建：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete pod app -n microservices</span><br><span class="line">kubectl create -f app-pod.yaml -n microservices</span><br></pre></td></tr></table></figure><hr><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>在本节课中，我们学习了如何创建和管理 Kubernetes 中的 <strong>多容器 Pod</strong>：</p><ul><li><strong>Namespace</strong> 用于隔离不同资源，使得管理更加清晰；</li><li><strong>多容器 Pod</strong> 使得紧密协作的容器能够共享同一个网络和存储；</li><li>我们还了解了如何查看容器日志，并通过 <strong>kubectl logs</strong> 命令帮助调试应用；</li><li><strong>资源请求和限制</strong> 确保容器运行在合理的资源范围内。</li></ul><p>在下一节课中，我们将使用 <strong>服务（Service）</strong> 来将我们的多容器 Pod 拆分成多个独立的服务，并实现应用的可扩展性。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Kubernetes-多容器-Pod：实现-3-层应用&quot;&gt;&lt;a href=&quot;#Kubernetes-多容器-Pod：实现-3-层应用&quot; class=&quot;headerlink&quot; title=&quot;Kubernetes 多容器 Pod：实现 3 层应用&quot;&gt;&lt;/a&gt;Kuber</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://airag.click/posts/0/"/>
    <id>https://airag.click/posts/0/</id>
    <published>2025-07-17T10:20:46.471Z</published>
    <updated>2025-07-17T10:20:46.472Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Kubernetes-服务发现：跨-Pod-访问与多层应用"><a href="#Kubernetes-服务发现：跨-Pod-访问与多层应用" class="headerlink" title="Kubernetes 服务发现：跨 Pod 访问与多层应用"></a>Kubernetes 服务发现：跨 Pod 访问与多层应用</h3><p>在 Kubernetes 中，<strong>服务（Service）</strong> 不仅仅用于暴露 Pod 给外部，还可以有效地在集群内部进行服务发现和负载均衡。通过将多个 Pod 分层并结合服务，我们能够更好地管理和扩展应用。</p><p>在本节课中，我们将通过构建一个 <strong>多层应用</strong>，学习如何在集群内部使用 <strong>服务发现</strong>，包括基于 <strong>环境变量</strong> 和 <strong>DNS</strong> 的服务发现机制。</p><hr><h2 id="应用架构"><a href="#应用架构" class="headerlink" title="应用架构"></a>应用架构</h2><p>我们将构建一个 <strong>多层应用</strong>，该应用包含 <strong>3 个层次</strong>，分布在 <strong>多个容器和 Pod</strong> 中：</p><ol><li><strong>数据层</strong>：使用 <strong>Redis</strong> 存储计数器。</li><li><strong>应用层</strong>：包括一个 <strong>Node.js 服务器</strong>，用于处理 POST 请求递增计数器值，处理 GET 请求获取当前计数值。</li><li><strong>支持层</strong>：包括 <strong>Poller</strong> 和 <strong>Counter</strong> 容器，用于定期发送请求获取和更新计数器。</li></ol><p>为了确保各层之间能够高效通信，我们将使用 Kubernetes <strong>服务</strong> 来暴露每一层，并实现 <strong>服务发现</strong>。</p><hr><h2 id="创建-Namespace"><a href="#创建-Namespace" class="headerlink" title="创建 Namespace"></a>创建 Namespace</h2><p><strong>Namespace</strong> 用于隔离 Kubernetes 中的资源，可以将不同的应用或环境分开管理。在本节课中，我们为服务发现应用创建了一个名为 <code>service-discovery</code> 的 Namespace。</p><h3 id="创建-Namespace-1"><a href="#创建-Namespace-1" class="headerlink" title="创建 Namespace"></a>创建 Namespace</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Namespace</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">service-discovery</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">microservices</span></span><br></pre></td></tr></table></figure><p>通过以下命令创建该 Namespace：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f service-discovery-namespace.yaml</span><br></pre></td></tr></table></figure><hr><h2 id="创建数据层服务与-Pod"><a href="#创建数据层服务与-Pod" class="headerlink" title="创建数据层服务与 Pod"></a>创建数据层服务与 Pod</h2><p>在数据层，我们将创建一个 <strong>Redis 服务</strong> 和相应的 Redis <strong>Pod</strong>。Redis 服务将暴露给应用层，便于服务器容器访问。</p><h3 id="数据层服务与-Pod-Manifest-文件"><a href="#数据层服务与-Pod-Manifest-文件" class="headerlink" title="数据层服务与 Pod Manifest 文件"></a>数据层服务与 Pod Manifest 文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">data-tier</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">service-discovery</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">tier:</span> <span class="string">data</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redis</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">6379</span></span><br><span class="line">  <span class="attr">clusterIP:</span> <span class="string">None</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">service-discovery</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">tier:</span> <span class="string">data</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redis</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">redis:latest</span></span><br><span class="line">      <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">6379</span></span><br></pre></td></tr></table></figure><h3 id="创建数据层服务和-Pod"><a href="#创建数据层服务和-Pod" class="headerlink" title="创建数据层服务和 Pod"></a>创建数据层服务和 Pod</h3><p>使用以下命令创建数据层服务和 Pod：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f data-tier.yaml -n service-discovery</span><br></pre></td></tr></table></figure><h3 id="查看数据层-Pod-和服务状态"><a href="#查看数据层-Pod-和服务状态" class="headerlink" title="查看数据层 Pod 和服务状态"></a>查看数据层 Pod 和服务状态</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods -n service-discovery</span><br><span class="line">kubectl describe service -n service-discovery data-tier</span><br></pre></td></tr></table></figure><p>此时，你应该能看到 <strong>data-tier 服务</strong> 和 <strong>Redis Pod</strong> 的详细信息，确保服务已经成功创建，并且 Redis Pod 作为服务端点。</p><hr><h2 id="创建应用层服务与-Pod"><a href="#创建应用层服务与-Pod" class="headerlink" title="创建应用层服务与 Pod"></a>创建应用层服务与 Pod</h2><p>在应用层，我们将创建一个 <strong>服务器服务</strong> 和相应的 <strong>Node.js 服务器 Pod</strong>。此服务会通过 DNS 或环境变量使得其他 Pod 能够访问 Redis 服务。</p><h3 id="应用层服务与-Pod-Manifest-文件"><a href="#应用层服务与-Pod-Manifest-文件" class="headerlink" title="应用层服务与 Pod Manifest 文件"></a>应用层服务与 Pod Manifest 文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">app-tier</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">service-discovery</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">tier:</span> <span class="string">app</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">server</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">server</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">service-discovery</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">tier:</span> <span class="string">app</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">server</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">node:latest</span></span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">REDIS_URL</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">configMapKeyRef:</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">service-discovery</span></span><br><span class="line">              <span class="attr">key:</span> <span class="string">data-tier</span></span><br><span class="line">      <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure><h3 id="创建应用层服务和-Pod"><a href="#创建应用层服务和-Pod" class="headerlink" title="创建应用层服务和 Pod"></a>创建应用层服务和 Pod</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f app-tier.yaml -n service-discovery</span><br></pre></td></tr></table></figure><hr><h2 id="使用-DNS-和环境变量进行服务发现"><a href="#使用-DNS-和环境变量进行服务发现" class="headerlink" title="使用 DNS 和环境变量进行服务发现"></a>使用 DNS 和环境变量进行服务发现</h2><p>Kubernetes 提供了两种方式来进行 <strong>服务发现</strong>：</p><ol><li><strong>环境变量</strong>：Kubernetes 会为每个服务注入环境变量，帮助容器找到目标服务。</li><li><strong>DNS</strong>：Kubernetes 会为每个服务创建 DNS 记录，容器可以通过 DNS 名称访问服务。</li></ol><h3 id="通过环境变量访问服务"><a href="#通过环境变量访问服务" class="headerlink" title="通过环境变量访问服务"></a>通过环境变量访问服务</h3><p>当服务器容器启动时，它会从环境变量中获取 Redis 服务的 IP 地址，环境变量的格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REDIS_URL=data-tier-service-host</span><br></pre></td></tr></table></figure><p>Kubernetes 会通过服务名称 <strong>data-tier-service-host</strong> 自动解析为相应的服务地址。</p><h3 id="通过-DNS-访问服务"><a href="#通过-DNS-访问服务" class="headerlink" title="通过 DNS 访问服务"></a>通过 DNS 访问服务</h3><p>Pod 可以通过服务名称直接使用 DNS 进行访问。在我们的示例中，服务器容器会通过 <strong>app-tier.service-discovery</strong> 访问应用层服务。</p><hr><h2 id="创建支持层-Pod"><a href="#创建支持层-Pod" class="headerlink" title="创建支持层 Pod"></a>创建支持层 Pod</h2><p>支持层包含 <strong>Poller</strong> 和 <strong>Counter</strong> 容器，这两个容器会通过 <strong>DNS</strong> 或环境变量与应用层服务进行通信。</p><h3 id="支持层-Pod-Manifest-文件"><a href="#支持层-Pod-Manifest-文件" class="headerlink" title="支持层 Pod Manifest 文件"></a>支持层 Pod Manifest 文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">support-tier</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">service-discovery</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">counter</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">counter-app:latest</span></span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">API_URL</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">&quot;http://app-tier.service-discovery&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">poller</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">poller-app:latest</span></span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">API_URL</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">&quot;http://app-tier.service-discovery&quot;</span></span><br></pre></td></tr></table></figure><h3 id="创建支持层-Pod-1"><a href="#创建支持层-Pod-1" class="headerlink" title="创建支持层 Pod"></a>创建支持层 Pod</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f support-tier.yaml -n service-discovery</span><br></pre></td></tr></table></figure><hr><h2 id="查看所有-Pods-和日志"><a href="#查看所有-Pods-和日志" class="headerlink" title="查看所有 Pods 和日志"></a>查看所有 Pods 和日志</h2><p>在应用创建并启动之后，可以使用以下命令查看 Pod 状态和容器日志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods -n service-discovery</span><br><span class="line">kubectl logs -n service-discovery support-tier poller -f</span><br></pre></td></tr></table></figure><p>通过实时查看日志，确保容器按预期工作。</p><hr><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>在本节课中，我们学习了如何通过 <strong>服务发现</strong> 在 Kubernetes 中连接和管理多个 Pod：</p><ol><li>我们使用 <strong>服务</strong> 作为不同层之间的接口，避免直接使用 Pod 的 IP 地址；</li><li>介绍了如何使用 <strong>环境变量</strong> 和 <strong>DNS</strong> 进行服务发现；</li><li>通过将不同的容器分配到多个 Pod，并使用服务来连接它们，实现了一个多层架构。</li></ol><p>在下一节课中，我们将探讨如何在 Kubernetes 中进行应用 <strong>扩展</strong>，以便在实际生产环境中更高效地管理容器。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Kubernetes-服务发现：跨-Pod-访问与多层应用&quot;&gt;&lt;a href=&quot;#Kubernetes-服务发现：跨-Pod-访问与多层应用&quot; class=&quot;headerlink&quot; title=&quot;Kubernetes 服务发现：跨 Pod 访问与多层应用&quot;&gt;&lt;/a</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>EC2 没有绑定 EIP，重启后 IP 会变？DDNS-GO 自动更新你的域名</title>
    <link href="https://airag.click/posts/369cde6d/"/>
    <id>https://airag.click/posts/369cde6d/</id>
    <published>2025-07-14T16:00:00.000Z</published>
    <updated>2025-07-17T10:20:46.481Z</updated>
    
    <content type="html"><![CDATA[<p>在 IPV4 即将枯竭的年代，云服务商的 EIP 也开始收费了。对于没有弹性公网 IP（EIP）的云服务器，我们可以通过 DDNS-GO 实现动态域名解析。本文介绍了如何使用 Docker 快速部署 DDNS-GO，并借助 DDNS 实现动态域名绑定，从而让服务器即使公网 IP 变化，也能够实时更新域名解析记录，这样只需要使用域名访问，不再需要在控制台查看。</p><hr><h2 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h2><p>使用官方安装脚本快速安装 Docker：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com -o get-docker.sh</span><br><span class="line"><span class="built_in">sudo</span> sh get-docker.sh</span><br></pre></td></tr></table></figure><span id="more"></span><p>设置 Docker 开机自启并立即启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> --now docker</span><br></pre></td></tr></table></figure><hr><h2 id="添加当前用户到-docker-用户组（避免每次用-sudo）"><a href="#添加当前用户到-docker-用户组（避免每次用-sudo）" class="headerlink" title="添加当前用户到 docker 用户组（避免每次用 sudo）"></a>添加当前用户到 <code>docker</code> 用户组（避免每次用 sudo）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> usermod -aG docker <span class="variable">$USER</span></span><br></pre></td></tr></table></figure><h3 id="生效方式："><a href="#生效方式：" class="headerlink" title="生效方式："></a>生效方式：</h3><ul><li>推荐：<strong>重新登录终端会话</strong></li><li>或使用临时方式立即生效：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">newgrp docker</span><br></pre></td></tr></table></figure><p>验证是否配置成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker info</span><br></pre></td></tr></table></figure><p>若无权限报错，则配置已生效。</p><hr><h2 id="Docker-中部署-DDNS-GO"><a href="#Docker-中部署-DDNS-GO" class="headerlink" title="Docker 中部署 DDNS-GO"></a>Docker 中部署 DDNS-GO</h2><p>我们将使用 Docker 的 <code>host</code> 网络模式挂载主机目录，确保 DDNS 能正常检测本地 IP：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name ddns-go --restart=always --net=host -v /opt/ddns-go:/root jeessy/ddns-go</span><br></pre></td></tr></table></figure><ul><li><p><code>/opt/ddns-go</code> 是主机目录，你可以替换为任意路径，用于持久化配置。</p></li><li><p>启动后，DDNS-GO 的配置文件为 <code>.ddns-go.yaml</code>，位于挂载目录中。</p></li></ul><h2 id="初始化配置"><a href="#初始化配置" class="headerlink" title="初始化配置"></a>初始化配置</h2><p>部署完成后，打开浏览器访问：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://&lt;Docker主机IP&gt;:9876</span><br></pre></td></tr></table></figure><p>你会看到 DDNS-GO 的初始化页面，如图所示：</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250715114247261.png" alt="初始化配置页面"></p><p>DDNS-GO 是一个开源的动态域名更新工具，支持多个域名服务商，我的域名托管在 cloudflare 上，所以需要在 cloudflare 上申请一个 API-KEY 来做这个更新。</p><ul><li><strong>TTL 建议设置为“自动”</strong></li><li><strong>IP 获取方式推荐使用外网 API（如 ipip.net）</strong></li></ul><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250715115315906-20250715122303544.png" alt="成功绑定 DDNS 地址"></p><p>前往 Cloudflare 的 <a href="https://dash.cloudflare.com/profile/api-tokens">API Token 页面</a>，为 DDNS-GO 创建一个具备修改 DNS 权限的 Token。</p><p>建议选择 <strong>“Edit zone DNS”</strong> 模板，只赋予必要权限，并可以限制在特定域名范围内使用。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/ceb3433ce7976c7c3199fc54402af084-20250715122245169.png" alt="Cloudflare API Token 创建"></p><p>此外，DDNS-GO 支持 webhook 通知，可选用如 Slack、Server 酱等方式实时通知 IP 变动情况。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250715121816313.png" alt="image-20250715121816313"></p><hr><h2 id="验证-DDNS-的效果"><a href="#验证-DDNS-的效果" class="headerlink" title="验证 DDNS 的效果"></a>验证 DDNS 的效果</h2><p>我们尝试停止云主机后再重新开启，公网 IP 会发生变化：</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250715120531839.png" alt="公网 IP 变化"></p><p>重启后 DDNS-GO 会自动检测 IP 变动并更新域名解析：</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250715120827569.png" alt="DDNS 更新成功"></p><p>通过域名访问服务仍然保持不变，无需手动更新 IP。</p><hr><p>同时 Server 也会把这个消息推送到手机上：</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250715121937366.png" alt="image-20250715121937366"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>即使云服务器没有绑定弹性公网 IP，借助 DDNS-GO 和 Docker，我们依然可以实现动态域名解析：</p><ul><li><strong>低成本</strong>：无需购买 EIP，节省开销；</li><li><strong>自动化</strong>：IP 改变后自动更新域名解析；</li><li><strong>易部署</strong>：Docker 一键运行，配置简单直观。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;在 IPV4 即将枯竭的年代，云服务商的 EIP 也开始收费了。对于没有弹性公网 IP（EIP）的云服务器，我们可以通过 DDNS-GO 实现动态域名解析。本文介绍了如何使用 Docker 快速部署 DDNS-GO，并借助 DDNS 实现动态域名绑定，从而让服务器即使公网 IP 变化，也能够实时更新域名解析记录，这样只需要使用域名访问，不再需要在控制台查看。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;安装-Docker&quot;&gt;&lt;a href=&quot;#安装-Docker&quot; class=&quot;headerlink&quot; title=&quot;安装 Docker&quot;&gt;&lt;/a&gt;安装 Docker&lt;/h2&gt;&lt;p&gt;使用官方安装脚本快速安装 Docker：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;curl -fsSL https://get.docker.com -o get-docker.sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;sudo&lt;/span&gt; sh get-docker.sh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="AWS" scheme="https://airag.click/categories/AWS/"/>
    
    
    <category term="AWS" scheme="https://airag.click/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>使用 DDNS-GO 给 Cloudflare 做动态域名解析</title>
    <link href="https://airag.click/posts/e12a36f0/"/>
    <id>https://airag.click/posts/e12a36f0/</id>
    <published>2025-07-13T16:00:00.000Z</published>
    <updated>2025-07-17T10:20:46.472Z</updated>
    
    <content type="html"><![CDATA[<p>我的域名最初是在 AWS 的 Route53 上购买的，然而在使用过程中发现 Host Zone 的费用并不低，除了每月的托管费用，还包括 TTL 更新等开销。在朋友建议下，我决定将域名解析的任务从 AWS 迁移到 Cloudflare，一方面可以节省成本，另一方面配置也更为灵活。</p><h2 id="第一步：更改-NS-记录"><a href="#第一步：更改-NS-记录" class="headerlink" title="第一步：更改 NS 记录"></a>第一步：更改 NS 记录</h2><p>准确地说，需要在原域名注册商（我的是 AWS Route53）处修改 Name Server，将默认的 AWS NS 记录改为 Cloudflare 提供的 NS 地址。这样，域名解析权就转移到了 Cloudflare。</p><span id="more"></span><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/bf852b6fc90fdb8aeca974c19ebe15fa-20250714213924253-20250714213959894.png" alt="Route53 修改 NS"><br>Route53 中的 NS 修改界面 如下， <em>替换成 Cloudflare 的 NS 后，域名正式托管在 Cloudflare</em></p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250714212603214.png" alt="NS 修改示意"></p><h2 id="第二步：创建-API-Token"><a href="#第二步：创建-API-Token" class="headerlink" title="第二步：创建 API Token"></a>第二步：创建 API Token</h2><p>前往 Cloudflare 的 <a href="https://dash.cloudflare.com/profile/api-tokens">API Token 页面</a>，为 DDNS-GO 创建一个具备修改 DNS 权限的 Token。</p><p>建议选择 <strong>“Edit zone DNS”</strong> 模板，只赋予必要权限，并可以限制在特定域名范围内使用。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/ceb3433ce7976c7c3199fc54402af084.png" alt="Cloudflare API Token 创建"></p><hr><h2 id="第三步：配置-DDNS-GO"><a href="#第三步：配置-DDNS-GO" class="headerlink" title="第三步：配置 DDNS-GO"></a>第三步：配置 DDNS-GO</h2><p>DDNS-GO 是一个开源的动态域名更新工具，支持多个域名服务商（不包括 AWS 的 Route53）。看来不仅迁移出来省钱，还省心。我们把上一步申请的 token 添加到这里，TTL 设置成自动就行。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250714211648662.png" alt="DDNS-GO 配置界面"></p><ul><li><strong>TTL 建议设置为“自动”</strong></li><li><strong>IP 获取方式推荐使用外网 API（如 ipip.net）</strong></li></ul><p>此外，DDNS-GO 支持 webhook 通知，可选用如 Slack、Server 酱等方式实时通知 IP 变动情况。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250714211710302.png" alt="Webhook 配置"></p><h2 id="第四步：查看效果"><a href="#第四步：查看效果" class="headerlink" title="第四步：查看效果"></a>第四步：查看效果</h2><p>我将 DDNS 记录绑定到家用公网 IP（IPv4），未启用 IPv6。保存配置后，前往 Cloudflare 后台查看 DNS 记录，已成功同步更新。</p><blockquote><p>⚠️ 小提示：如果你绑定的 IP 是中国大陆的，<strong>建议不要开启 Cloudflare 的代理功能（小云朵），否则可能出现连接问题</strong>。</p></blockquote><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250714213533869.png" alt="CF DNS 记录更新"></p><h2 id="Bonus：免费-TLS-证书"><a href="#Bonus：免费-TLS-证书" class="headerlink" title="Bonus：免费 TLS 证书"></a>Bonus：免费 TLS 证书</h2><p>使用 Cloudflare 托管 DNS，访问你的网站时会根据规则<strong>加上 TLS 证书</strong>，实现 HTTPS 加密，非常方便省心。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250714212823244.png" alt="自动 TLS 证书"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>通过将域名解析迁移到 Cloudflare，并配合 DDNS-GO 工具进行动态更新，既省钱又省事，还顺带获得了免费证书加持。相比 AWS Route53 的托管费用和配置复杂度，Cloudflare 无疑是个人用户和轻量级应用的更优选择。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;我的域名最初是在 AWS 的 Route53 上购买的，然而在使用过程中发现 Host Zone 的费用并不低，除了每月的托管费用，还包括 TTL 更新等开销。在朋友建议下，我决定将域名解析的任务从 AWS 迁移到 Cloudflare，一方面可以节省成本，另一方面配置也更为灵活。&lt;/p&gt;
&lt;h2 id=&quot;第一步：更改-NS-记录&quot;&gt;&lt;a href=&quot;#第一步：更改-NS-记录&quot; class=&quot;headerlink&quot; title=&quot;第一步：更改 NS 记录&quot;&gt;&lt;/a&gt;第一步：更改 NS 记录&lt;/h2&gt;&lt;p&gt;准确地说，需要在原域名注册商（我的是 AWS Route53）处修改 Name Server，将默认的 AWS NS 记录改为 Cloudflare 提供的 NS 地址。这样，域名解析权就转移到了 Cloudflare。&lt;/p&gt;</summary>
    
    
    
    <category term="懒猫微服" scheme="https://airag.click/categories/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
    
    <category term="懒猫微服" scheme="https://airag.click/tags/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
    <category term="家庭网络" scheme="https://airag.click/tags/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>使用 GitHub 单点登录到 Memos</title>
    <link href="https://airag.click/posts/b10cd1f4/"/>
    <id>https://airag.click/posts/b10cd1f4/</id>
    <published>2025-07-12T16:00:00.000Z</published>
    <updated>2025-07-17T10:20:46.472Z</updated>
    
    <content type="html"><![CDATA[<p>在构建团队协作平台或知识系统时，接入 GitHub 登录是一种常见的低成本单点登录（SSO）方案，既简洁又安全。本教程将手把手教大家如何创建 GitHub OAuth 应用，并将其集成到 <a href="https://github.com/usememos/memos">Memos</a> 等支持 OAuth 的系统中，帮助用户实现无感登录体验。</p><hr><h2 id="一、创建-GitHub-OAuth-应用"><a href="#一、创建-GitHub-OAuth-应用" class="headerlink" title="一、创建 GitHub OAuth 应用"></a>一、创建 GitHub OAuth 应用</h2><h3 id="1-打开-GitHub-OAuth-应用配置入口"><a href="#1-打开-GitHub-OAuth-应用配置入口" class="headerlink" title="1. 打开 GitHub OAuth 应用配置入口"></a>1. 打开 GitHub OAuth 应用配置入口</h3><ol><li>登录 GitHub，点击右上角头像，选择 <strong>Settings（设置）</strong></li><li>在左侧栏选择 <strong>Developer settings</strong></li><li>点击 <strong>OAuth Apps</strong>，然后点击右侧的 <strong>New OAuth App</strong> 创建新的应用</li></ol><p>📷 页面示意：</p><span id="more"></span><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/640-20250713224449968-20250713225034801.png" alt="创建 OAuth 应用"></p><hr><h3 id="2-填写应用基本信息"><a href="#2-填写应用基本信息" class="headerlink" title="2. 填写应用基本信息"></a>2. 填写应用基本信息</h3><p>在创建页面中填写如下字段：</p><ul><li><p><strong>Application Name</strong>：如 <code>Console SSO</code></p></li><li><p><strong>Homepage URL</strong>：建议填写系统主页，例如 <code>https://memos.name.heiyu.space</code></p></li><li><p><strong>Authorization callback URL</strong>：授权成功后的回调地址，格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://memos.name.heiyu.space/auth/callback</span><br></pre></td></tr></table></figure></li></ul><p>📷 示例填写界面：</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250713224139574.png" alt="填写信息"></p><hr><h3 id="3-获取-Client-ID-和-Client-Secret"><a href="#3-获取-Client-ID-和-Client-Secret" class="headerlink" title="3. 获取 Client ID 和 Client Secret"></a>3. 获取 Client ID 和 Client Secret</h3><p>提交后，GitHub 将生成：</p><ul><li><strong>Client ID</strong>：用于标识该 OAuth 应用</li><li><strong>Client Secret</strong>：用于身份验证，请妥善保存，<strong>不要泄露！</strong></li></ul><p>📷 凭证界面如下：</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/640" alt="获取客户端凭证"></p><hr><h2 id="二、查看和管理-OAuth-应用"><a href="#二、查看和管理-OAuth-应用" class="headerlink" title="二、查看和管理 OAuth 应用"></a>二、查看和管理 OAuth 应用</h2><p>创建完成后，返回 OAuth 应用列表，即可看到刚创建的应用。</p><p>点击应用名可查看授权信息和应用详情：</p><p>📷 应用列表和详情视图：</p><ul><li><p>应用列表页面<br><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/640-20250713224027323-20250713224450558-20250713225035672" alt="OAuth 应用列表"></p><p>然后邮件会收到 Github 绑定 Oauth 的通知。<br><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/bb21e51f43bf5eedd8b6c44ef27e3fd9-20250713225035879.png" alt="授权详情"></p></li></ul><hr><h3 id="4-在-Memos-中配置-GitHub-登录"><a href="#4-在-Memos-中配置-GitHub-登录" class="headerlink" title="4. 在 Memos 中配置 GitHub 登录"></a>4. 在 Memos 中配置 GitHub 登录</h3><p>进入系统设置页面：</p><ol><li>点击左下角齿轮图标（设置）</li><li>选择 <strong>单点登录（SSO）</strong></li><li>选择 GitHub 作为登录方式，填写刚获取的 Client ID 和 Client Secret</li></ol><p>📷 Memos 配置页面示例：</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250713224629619.png" alt="设置 GitHub 单点登录"></p><p>配置保存后，注销当前账号，登录页面会显示 GitHub 登录按钮。</p><p>📷 登录页面展示效果：</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/26dac7e6f9531a83010a5cc44e95c71f-20250713225036385.png" alt="GitHub 登录入口"></p><p>通过以上步骤，我们完成了 GitHub 登录的接入流程：</p><p>✅ 创建并配置 GitHub OAuth 应用<br>✅ 获取并填入凭证<br>✅ 在 Memos 中启用 OAuth 登录</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在构建团队协作平台或知识系统时，接入 GitHub 登录是一种常见的低成本单点登录（SSO）方案，既简洁又安全。本教程将手把手教大家如何创建 GitHub OAuth 应用，并将其集成到 &lt;a href=&quot;https://github.com/usememos/memos&quot;&gt;Memos&lt;/a&gt; 等支持 OAuth 的系统中，帮助用户实现无感登录体验。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;一、创建-GitHub-OAuth-应用&quot;&gt;&lt;a href=&quot;#一、创建-GitHub-OAuth-应用&quot; class=&quot;headerlink&quot; title=&quot;一、创建 GitHub OAuth 应用&quot;&gt;&lt;/a&gt;一、创建 GitHub OAuth 应用&lt;/h2&gt;&lt;h3 id=&quot;1-打开-GitHub-OAuth-应用配置入口&quot;&gt;&lt;a href=&quot;#1-打开-GitHub-OAuth-应用配置入口&quot; class=&quot;headerlink&quot; title=&quot;1. 打开 GitHub OAuth 应用配置入口&quot;&gt;&lt;/a&gt;1. 打开 GitHub OAuth 应用配置入口&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;登录 GitHub，点击右上角头像，选择 &lt;strong&gt;Settings（设置）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;在左侧栏选择 &lt;strong&gt;Developer settings&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;点击 &lt;strong&gt;OAuth Apps&lt;/strong&gt;，然后点击右侧的 &lt;strong&gt;New OAuth App&lt;/strong&gt; 创建新的应用&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;📷 页面示意：&lt;/p&gt;</summary>
    
    
    
    <category term="懒猫微服" scheme="https://airag.click/categories/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
    
    <category term="懒猫微服" scheme="https://airag.click/tags/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
  </entry>
  
  <entry>
    <title>快速启动 http 站点</title>
    <link href="https://airag.click/posts/572b7187/"/>
    <id>https://airag.click/posts/572b7187/</id>
    <published>2025-07-11T16:00:00.000Z</published>
    <updated>2025-07-17T10:20:46.482Z</updated>
    
    <content type="html"><![CDATA[<p>以下是 Python 内置 HTTP 服务器的几种常用启动方式：</p><ol><li>默认端口启动（8000）：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m http.server</span><br></pre></td></tr></table></figure><span id="more"></span><ol start="2"><li>指定端口启动（示例使用 1378 端口）：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m http.server 1378</span><br></pre></td></tr></table></figure><ol start="3"><li>支持 IPv6 的启动方式：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m http.server 1378 --<span class="built_in">bind</span> ::</span><br></pre></td></tr></table></figure><p>这些命令会在当前目录启动一个简单的 HTTP 文件服务器，方便快速共享文件或测试网页。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;以下是 Python 内置 HTTP 服务器的几种常用启动方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;默认端口启动（8000）：&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;python -m http.server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="开发" scheme="https://airag.click/categories/%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="开发" scheme="https://airag.click/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>使用 Memos 替代 Flomo</title>
    <link href="https://airag.click/posts/6f97c31a/"/>
    <id>https://airag.click/posts/6f97c31a/</id>
    <published>2025-07-11T16:00:00.000Z</published>
    <updated>2025-07-17T10:20:46.472Z</updated>
    
    <content type="html"><![CDATA[<p>曾经用过 Flomo，一度觉得体验不错，但后来因不想续费会员而中止使用。最近在懒猫微服的商店中发现了 <a href="https://github.com/usememos/memos">Memos</a>，完全开源、支持自托管，是个很不错的替代方案。</p><hr><h2 id="什么是-Memos？"><a href="#什么是-Memos？" class="headerlink" title="什么是 Memos？"></a>什么是 Memos？</h2><p><a href="https://github.com/usememos/memos">Memos</a> 是一款开源、极简、现代化的笔记系统，主打「快速记录、随时检索」。适合捕捉灵感、日常备忘、碎片想法、读书笔记等多种用途。</p><p>它具有以下特点：</p><span id="more"></span><ul><li>🧩 极简 Markdown 编辑器，写作无干扰</li><li>🔍 支持标签与多条件过滤，查找便捷</li><li>📱 原生适配移动端界面，自动响应式布局</li><li>🌐 内置开放 API，可接入自动化工具或客户端</li><li>🗂 支持归档、置顶、图像插入、链接跳转等实用功能</li><li>🔐 数据完全自托管，掌控在自己手中</li></ul><p>目前 GitHub star 数已超 6k，开发活跃，文档完善，社区生态也在不断壮大。</p><hr><h2 id="页面结构与使用方式"><a href="#页面结构与使用方式" class="headerlink" title="页面结构与使用方式"></a>页面结构与使用方式</h2><p>Memos 主页面分为两栏：</p><h3 id="✅-左侧侧边栏："><a href="#✅-左侧侧边栏：" class="headerlink" title="✅ 左侧侧边栏："></a>✅ 左侧侧边栏：</h3><ul><li><strong>创建 Memo</strong>：点击加号即可撰写新内容</li><li><strong>标签筛选</strong>：点击任意标签快速过滤</li><li><strong>快捷菜单</strong>：查看所有 Memo、归档 Memo、置顶 Memo、搜索功能等</li></ul><h3 id="✅-右侧内容区："><a href="#✅-右侧内容区：" class="headerlink" title="✅ 右侧内容区："></a>✅ 右侧内容区：</h3><ul><li><p>展示所有 Memo 内容，以时间倒序排列</p></li><li><p>每条 Memo 支持：</p><ul><li>编辑、置顶、归档</li><li>标签添加（支持 <code>#标签名</code> 快捷方式）</li><li>Markdown 格式（支持标题、代码块、列表、引用等）</li><li>拖拽上传图片或截图粘贴</li><li>自动识别链接并可点击跳转</li></ul></li></ul><p>📷 示例页面如下：</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250711183947167.png" alt="image-20250711183947167"></p><hr><h2 id="开启-API-支持"><a href="#开启-API-支持" class="headerlink" title="开启 API 支持"></a>开启 API 支持</h2><p>在设置中可以启用 API 功能，系统会生成一个唯一的 <code>API KEY</code>，用于连接第三方客户端或自动化工具（如 Moe Memos）。</p><p>📷 API 开关和密钥生成页面如下：</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250711184031658.png" alt="image-20250711184031658"></p><hr><h2 id="Moe-Memos-客户端"><a href="#Moe-Memos-客户端" class="headerlink" title="Moe Memos 客户端"></a>Moe Memos 客户端</h2><p>App Store 上的 Moe Memos 是一款第三方移动端客户端，原生适配 Memos 的 API 接口，界面极简，使用流畅。</p><p>📷 图标预览：</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250711184107888.png" alt="image-20250711184107888"></p><hr><h2 id="如何登录-Moe-Memos"><a href="#如何登录-Moe-Memos" class="headerlink" title="如何登录 Moe Memos"></a>如何登录 Moe Memos</h2><ol><li>安装 Moe Memos 后，打开 App</li><li>输入你的自托管域名，如 <code>https://memos.name.heiyu.space</code></li><li>填写 API KEY 即可登录（需在系统中开启单租户模式）</li></ol><p>📷 登录后界面展示：</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250711183848763.png" alt="image-20250711183848763"></p><hr><h2 id="简单对比-Flomo"><a href="#简单对比-Flomo" class="headerlink" title="简单对比 Flomo"></a>简单对比 Flomo</h2><table><thead><tr><th>功能</th><th>Flomo</th><th>Memos（自托管）</th></tr></thead><tbody><tr><td>微信同步</td><td>✅（原生）</td><td>❌（可接 webhook 实现）</td></tr><tr><td>多端支持</td><td>✅</td><td>✅ Moe Memos</td></tr><tr><td>数据隐私</td><td>❌ 云端托管</td><td>✅ 完全自持</td></tr><tr><td>开放 API</td><td>❌ 限制较多</td><td>✅ 支持 API KEY</td></tr><tr><td>成本</td><td>收费会员制</td><td>免费开源（除托管成本）</td></tr><tr><td>Markdown</td><td>❌</td><td>✅ 原生支持</td></tr><tr><td>图片粘贴上传</td><td>❌</td><td>✅</td></tr></tbody></table><p>虽然 Memos 不支持微信原生同步，但凭借开放架构和高度可定制性，能实现更强的私有笔记体验。</p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Memos 是一款功能恰到好处、设计极简、部署门槛低的笔记系统，非常适合替代 Flomo 这类灵感记录工具。配合懒猫微服提供的部署方案，可以做到：</p><ul><li>一键上线，无需服务器运维知识</li><li>API 集成快捷，客户端体验佳</li><li>数据可备份、可迁移、可掌控</li></ul><p>适合用来做「知识碎片记录」、「阅读随想」、「灵感管理」、「工程笔记」等场景。欢迎大家一起探索更多玩法！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;曾经用过 Flomo，一度觉得体验不错，但后来因不想续费会员而中止使用。最近在懒猫微服的商店中发现了 &lt;a href=&quot;https://github.com/usememos/memos&quot;&gt;Memos&lt;/a&gt;，完全开源、支持自托管，是个很不错的替代方案。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;什么是-Memos？&quot;&gt;&lt;a href=&quot;#什么是-Memos？&quot; class=&quot;headerlink&quot; title=&quot;什么是 Memos？&quot;&gt;&lt;/a&gt;什么是 Memos？&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/usememos/memos&quot;&gt;Memos&lt;/a&gt; 是一款开源、极简、现代化的笔记系统，主打「快速记录、随时检索」。适合捕捉灵感、日常备忘、碎片想法、读书笔记等多种用途。&lt;/p&gt;
&lt;p&gt;它具有以下特点：&lt;/p&gt;</summary>
    
    
    
    <category term="懒猫微服" scheme="https://airag.click/categories/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
    
    <category term="懒猫微服" scheme="https://airag.click/tags/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
  </entry>
  
  <entry>
    <title>MacOS 环境下运行 EasySearch 报错无法信任 Java 包的解决方案</title>
    <link href="https://airag.click/posts/b77119f9/"/>
    <id>https://airag.click/posts/b77119f9/</id>
    <published>2025-07-11T16:00:00.000Z</published>
    <updated>2025-07-17T10:20:46.477Z</updated>
    
    <content type="html"><![CDATA[<h4 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h4><p>近期因 MacBook 系统降级重装，需重新部署 EasySearch 环境。由于系统未预装 Java，选择下载捆绑 JDK 的 EasySearch 版本，但在安装过程中遇到以下问题：</p><ol><li>系统安全机制拦截 Java 运行</li><li>密码认证异常（持续返回 401 错误）<span id="more"></span></li></ol><h4 id="问题现象"><a href="#问题现象" class="headerlink" title="问题现象"></a>问题现象</h4><ol><li><p><strong>安全拦截</strong><br>MacOS Gatekeeper 阻止运行捆绑的 JDK，即使在「系统偏好设置-安全性与隐私」中手动放行后，仍出现权限不足提示（见图 1）。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/46af71cf990c6b337b0368dff20c8e83.png" alt="安全拦截提示"></p></li><li><p><strong>认证失效</strong><br>配置文件中的密码校验异常，任何登录尝试均返回 401 状态码。</p></li></ol><h4 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h4><ol><li><p><strong>全局权限设置</strong><br>首先通过终端命令关闭系统安全限制：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> spctl --master-disable</span><br></pre></td></tr></table></figure><p>但发现此操作仍无法解决 JDK 运行问题。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/16d776ecf82e11ffda565666c96494aa-20250712103722754.png" alt="权限设置无效提示"></p></li><li><p><strong>最终解决方案</strong><br>采用处理「App 损坏」报错的方法：</p><ul><li><p>重新解压安装包</p></li><li><p>执行扩展属性清除命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xattr -cr jdk/bin/java</span><br></pre></td></tr></table></figure></li><li><p>重新初始化 EasySearch</p></li></ul></li></ol><h4 id="验证结果"><a href="#验证结果" class="headerlink" title="验证结果"></a>验证结果</h4><p>成功运行 EasySearch 并完成系统初始化（见图 3）。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250712103428122.png" alt="运行成功截图"></p><h4 id="经验总结"><a href="#经验总结" class="headerlink" title="经验总结"></a>经验总结</h4><p>MacOS 对未公证应用的限制日趋严格，建议：</p><ol><li>优先使用公证版本软件</li><li>遇到权限问题时，<code>xattr -cr</code>命令可有效清除可能导致拦截的扩展属性</li><li>401 错误可能与系统权限深度关联，需综合处理运行环境和配置文件</li></ol>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;问题背景&lt;/h4&gt;&lt;p&gt;近期因 MacBook 系统降级重装，需重新部署 EasySearch 环境。由于系统未预装 Java，选择下载捆绑 JDK 的 EasySearch 版本，但在安装过程中遇到以下问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;系统安全机制拦截 Java 运行&lt;/li&gt;
&lt;li&gt;密码认证异常（持续返回 401 错误）</summary>
    
    
    
    <category term="极限科技" scheme="https://airag.click/categories/%E6%9E%81%E9%99%90%E7%A7%91%E6%8A%80/"/>
    
    
    <category term="搜索引擎（ES）" scheme="https://airag.click/tags/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%EF%BC%88ES%EF%BC%89/"/>
    
  </entry>
  
</feed>
