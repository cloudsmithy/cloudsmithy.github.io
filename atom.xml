<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>镜湖</title>
  
  
  <link href="https://airag.click/atom.xml" rel="self"/>
  
  <link href="https://airag.click/"/>
  <updated>2025-07-16T03:17:26.801Z</updated>
  <id>https://airag.click/</id>
  
  <author>
    <name>Xu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>EC2 没有绑定 EIP，重启后 IP 会变？DDNS-GO 自动更新你的域名</title>
    <link href="https://airag.click/posts/369cde6d/"/>
    <id>https://airag.click/posts/369cde6d/</id>
    <published>2025-07-14T16:00:00.000Z</published>
    <updated>2025-07-16T03:17:26.801Z</updated>
    
    <content type="html"><![CDATA[<p>在 IPV4 即将枯竭的年代，云服务商的 EIP 也开始收费了。对于没有弹性公网 IP（EIP）的云服务器，我们可以通过 DDNS-GO 实现动态域名解析。本文介绍了如何使用 Docker 快速部署 DDNS-GO，并借助 DDNS 实现动态域名绑定，从而让服务器即使公网 IP 变化，也能够实时更新域名解析记录，这样只需要使用域名访问，不再需要在控制台查看。</p><hr><h2 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h2><p>使用官方安装脚本快速安装 Docker：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com -o get-docker.sh</span><br><span class="line"><span class="built_in">sudo</span> sh get-docker.sh</span><br></pre></td></tr></table></figure><span id="more"></span><p>设置 Docker 开机自启并立即启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> --now docker</span><br></pre></td></tr></table></figure><hr><h2 id="添加当前用户到-docker-用户组（避免每次用-sudo）"><a href="#添加当前用户到-docker-用户组（避免每次用-sudo）" class="headerlink" title="添加当前用户到 docker 用户组（避免每次用 sudo）"></a>添加当前用户到 <code>docker</code> 用户组（避免每次用 sudo）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> usermod -aG docker <span class="variable">$USER</span></span><br></pre></td></tr></table></figure><h3 id="生效方式："><a href="#生效方式：" class="headerlink" title="生效方式："></a>生效方式：</h3><ul><li>推荐：<strong>重新登录终端会话</strong></li><li>或使用临时方式立即生效：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">newgrp docker</span><br></pre></td></tr></table></figure><p>验证是否配置成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker info</span><br></pre></td></tr></table></figure><p>若无权限报错，则配置已生效。</p><hr><h2 id="Docker-中部署-DDNS-GO"><a href="#Docker-中部署-DDNS-GO" class="headerlink" title="Docker 中部署 DDNS-GO"></a>Docker 中部署 DDNS-GO</h2><p>我们将使用 Docker 的 <code>host</code> 网络模式挂载主机目录，确保 DDNS 能正常检测本地 IP：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name ddns-go --restart=always --net=host -v /opt/ddns-go:/root jeessy/ddns-go</span><br></pre></td></tr></table></figure><ul><li><p><code>/opt/ddns-go</code> 是主机目录，你可以替换为任意路径，用于持久化配置。</p></li><li><p>启动后，DDNS-GO 的配置文件为 <code>.ddns-go.yaml</code>，位于挂载目录中。</p></li></ul><h2 id="初始化配置"><a href="#初始化配置" class="headerlink" title="初始化配置"></a>初始化配置</h2><p>部署完成后，打开浏览器访问：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://&lt;Docker主机IP&gt;:9876</span><br></pre></td></tr></table></figure><p>你会看到 DDNS-GO 的初始化页面，如图所示：</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250715114247261.png" alt="初始化配置页面"></p><p>DDNS-GO 是一个开源的动态域名更新工具，支持多个域名服务商，我的域名托管在 cloudflare 上，所以需要在 cloudflare 上申请一个 API-KEY 来做这个更新。</p><ul><li><strong>TTL 建议设置为“自动”</strong></li><li><strong>IP 获取方式推荐使用外网 API（如 ipip.net）</strong></li></ul><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250715115315906-20250715122303544.png" alt="成功绑定 DDNS 地址"></p><p>前往 Cloudflare 的 <a href="https://dash.cloudflare.com/profile/api-tokens">API Token 页面</a>，为 DDNS-GO 创建一个具备修改 DNS 权限的 Token。</p><p>建议选择 <strong>“Edit zone DNS”</strong> 模板，只赋予必要权限，并可以限制在特定域名范围内使用。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/ceb3433ce7976c7c3199fc54402af084-20250715122245169.png" alt="Cloudflare API Token 创建"></p><p>此外，DDNS-GO 支持 webhook 通知，可选用如 Slack、Server 酱等方式实时通知 IP 变动情况。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250715121816313.png" alt="image-20250715121816313"></p><hr><h2 id="验证-DDNS-的效果"><a href="#验证-DDNS-的效果" class="headerlink" title="验证 DDNS 的效果"></a>验证 DDNS 的效果</h2><p>我们尝试停止云主机后再重新开启，公网 IP 会发生变化：</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250715120531839.png" alt="公网 IP 变化"></p><p>重启后 DDNS-GO 会自动检测 IP 变动并更新域名解析：</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250715120827569.png" alt="DDNS 更新成功"></p><p>通过域名访问服务仍然保持不变，无需手动更新 IP。</p><hr><p>同时 Server 也会把这个消息推送到手机上：</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250715121937366.png" alt="image-20250715121937366"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>即使云服务器没有绑定弹性公网 IP，借助 DDNS-GO 和 Docker，我们依然可以实现动态域名解析：</p><ul><li><strong>低成本</strong>：无需购买 EIP，节省开销；</li><li><strong>自动化</strong>：IP 改变后自动更新域名解析；</li><li><strong>易部署</strong>：Docker 一键运行，配置简单直观。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;在 IPV4 即将枯竭的年代，云服务商的 EIP 也开始收费了。对于没有弹性公网 IP（EIP）的云服务器，我们可以通过 DDNS-GO 实现动态域名解析。本文介绍了如何使用 Docker 快速部署 DDNS-GO，并借助 DDNS 实现动态域名绑定，从而让服务器即使公网 IP 变化，也能够实时更新域名解析记录，这样只需要使用域名访问，不再需要在控制台查看。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;安装-Docker&quot;&gt;&lt;a href=&quot;#安装-Docker&quot; class=&quot;headerlink&quot; title=&quot;安装 Docker&quot;&gt;&lt;/a&gt;安装 Docker&lt;/h2&gt;&lt;p&gt;使用官方安装脚本快速安装 Docker：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;curl -fsSL https://get.docker.com -o get-docker.sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;sudo&lt;/span&gt; sh get-docker.sh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="AWS" scheme="https://airag.click/categories/AWS/"/>
    
    
    <category term="AWS" scheme="https://airag.click/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>使用 DDNS-GO 给 Cloudflare 做动态域名解析</title>
    <link href="https://airag.click/posts/e12a36f0/"/>
    <id>https://airag.click/posts/e12a36f0/</id>
    <published>2025-07-13T16:00:00.000Z</published>
    <updated>2025-07-16T03:17:26.792Z</updated>
    
    <content type="html"><![CDATA[<p>我的域名最初是在 AWS 的 Route53 上购买的，然而在使用过程中发现 Host Zone 的费用并不低，除了每月的托管费用，还包括 TTL 更新等开销。在朋友建议下，我决定将域名解析的任务从 AWS 迁移到 Cloudflare，一方面可以节省成本，另一方面配置也更为灵活。</p><h2 id="第一步：更改-NS-记录"><a href="#第一步：更改-NS-记录" class="headerlink" title="第一步：更改 NS 记录"></a>第一步：更改 NS 记录</h2><p>准确地说，需要在原域名注册商（我的是 AWS Route53）处修改 Name Server，将默认的 AWS NS 记录改为 Cloudflare 提供的 NS 地址。这样，域名解析权就转移到了 Cloudflare。</p><span id="more"></span><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/bf852b6fc90fdb8aeca974c19ebe15fa-20250714213924253-20250714213959894.png" alt="Route53 修改 NS"><br>Route53 中的 NS 修改界面 如下， <em>替换成 Cloudflare 的 NS 后，域名正式托管在 Cloudflare</em></p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250714212603214.png" alt="NS 修改示意"></p><h2 id="第二步：创建-API-Token"><a href="#第二步：创建-API-Token" class="headerlink" title="第二步：创建 API Token"></a>第二步：创建 API Token</h2><p>前往 Cloudflare 的 <a href="https://dash.cloudflare.com/profile/api-tokens">API Token 页面</a>，为 DDNS-GO 创建一个具备修改 DNS 权限的 Token。</p><p>建议选择 <strong>“Edit zone DNS”</strong> 模板，只赋予必要权限，并可以限制在特定域名范围内使用。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/ceb3433ce7976c7c3199fc54402af084.png" alt="Cloudflare API Token 创建"></p><hr><h2 id="第三步：配置-DDNS-GO"><a href="#第三步：配置-DDNS-GO" class="headerlink" title="第三步：配置 DDNS-GO"></a>第三步：配置 DDNS-GO</h2><p>DDNS-GO 是一个开源的动态域名更新工具，支持多个域名服务商（不包括 AWS 的 Route53）。看来不仅迁移出来省钱，还省心。我们把上一步申请的 token 添加到这里，TTL 设置成自动就行。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250714211648662.png" alt="DDNS-GO 配置界面"></p><ul><li><strong>TTL 建议设置为“自动”</strong></li><li><strong>IP 获取方式推荐使用外网 API（如 ipip.net）</strong></li></ul><p>此外，DDNS-GO 支持 webhook 通知，可选用如 Slack、Server 酱等方式实时通知 IP 变动情况。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250714211710302.png" alt="Webhook 配置"></p><h2 id="第四步：查看效果"><a href="#第四步：查看效果" class="headerlink" title="第四步：查看效果"></a>第四步：查看效果</h2><p>我将 DDNS 记录绑定到家用公网 IP（IPv4），未启用 IPv6。保存配置后，前往 Cloudflare 后台查看 DNS 记录，已成功同步更新。</p><blockquote><p>⚠️ 小提示：如果你绑定的 IP 是中国大陆的，<strong>建议不要开启 Cloudflare 的代理功能（小云朵），否则可能出现连接问题</strong>。</p></blockquote><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250714213533869.png" alt="CF DNS 记录更新"></p><h2 id="Bonus：免费-TLS-证书"><a href="#Bonus：免费-TLS-证书" class="headerlink" title="Bonus：免费 TLS 证书"></a>Bonus：免费 TLS 证书</h2><p>使用 Cloudflare 托管 DNS，访问你的网站时会根据规则<strong>加上 TLS 证书</strong>，实现 HTTPS 加密，非常方便省心。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250714212823244.png" alt="自动 TLS 证书"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>通过将域名解析迁移到 Cloudflare，并配合 DDNS-GO 工具进行动态更新，既省钱又省事，还顺带获得了免费证书加持。相比 AWS Route53 的托管费用和配置复杂度，Cloudflare 无疑是个人用户和轻量级应用的更优选择。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;我的域名最初是在 AWS 的 Route53 上购买的，然而在使用过程中发现 Host Zone 的费用并不低，除了每月的托管费用，还包括 TTL 更新等开销。在朋友建议下，我决定将域名解析的任务从 AWS 迁移到 Cloudflare，一方面可以节省成本，另一方面配置也更为灵活。&lt;/p&gt;
&lt;h2 id=&quot;第一步：更改-NS-记录&quot;&gt;&lt;a href=&quot;#第一步：更改-NS-记录&quot; class=&quot;headerlink&quot; title=&quot;第一步：更改 NS 记录&quot;&gt;&lt;/a&gt;第一步：更改 NS 记录&lt;/h2&gt;&lt;p&gt;准确地说，需要在原域名注册商（我的是 AWS Route53）处修改 Name Server，将默认的 AWS NS 记录改为 Cloudflare 提供的 NS 地址。这样，域名解析权就转移到了 Cloudflare。&lt;/p&gt;</summary>
    
    
    
    <category term="懒猫微服" scheme="https://airag.click/categories/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
    
    <category term="懒猫微服" scheme="https://airag.click/tags/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
    <category term="家庭网络" scheme="https://airag.click/tags/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>使用 GitHub 单点登录到 Memos</title>
    <link href="https://airag.click/posts/b10cd1f4/"/>
    <id>https://airag.click/posts/b10cd1f4/</id>
    <published>2025-07-12T16:00:00.000Z</published>
    <updated>2025-07-16T03:17:26.792Z</updated>
    
    <content type="html"><![CDATA[<p>在构建团队协作平台或知识系统时，接入 GitHub 登录是一种常见的低成本单点登录（SSO）方案，既简洁又安全。本教程将手把手教大家如何创建 GitHub OAuth 应用，并将其集成到 <a href="https://github.com/usememos/memos">Memos</a> 等支持 OAuth 的系统中，帮助用户实现无感登录体验。</p><hr><h2 id="一、创建-GitHub-OAuth-应用"><a href="#一、创建-GitHub-OAuth-应用" class="headerlink" title="一、创建 GitHub OAuth 应用"></a>一、创建 GitHub OAuth 应用</h2><h3 id="1-打开-GitHub-OAuth-应用配置入口"><a href="#1-打开-GitHub-OAuth-应用配置入口" class="headerlink" title="1. 打开 GitHub OAuth 应用配置入口"></a>1. 打开 GitHub OAuth 应用配置入口</h3><ol><li>登录 GitHub，点击右上角头像，选择 <strong>Settings（设置）</strong></li><li>在左侧栏选择 <strong>Developer settings</strong></li><li>点击 <strong>OAuth Apps</strong>，然后点击右侧的 <strong>New OAuth App</strong> 创建新的应用</li></ol><p>📷 页面示意：</p><span id="more"></span><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/640-20250713224449968-20250713225034801.png" alt="创建 OAuth 应用"></p><hr><h3 id="2-填写应用基本信息"><a href="#2-填写应用基本信息" class="headerlink" title="2. 填写应用基本信息"></a>2. 填写应用基本信息</h3><p>在创建页面中填写如下字段：</p><ul><li><p><strong>Application Name</strong>：如 <code>Console SSO</code></p></li><li><p><strong>Homepage URL</strong>：建议填写系统主页，例如 <code>https://memos.name.heiyu.space</code></p></li><li><p><strong>Authorization callback URL</strong>：授权成功后的回调地址，格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://memos.name.heiyu.space/auth/callback</span><br></pre></td></tr></table></figure></li></ul><p>📷 示例填写界面：</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250713224139574.png" alt="填写信息"></p><hr><h3 id="3-获取-Client-ID-和-Client-Secret"><a href="#3-获取-Client-ID-和-Client-Secret" class="headerlink" title="3. 获取 Client ID 和 Client Secret"></a>3. 获取 Client ID 和 Client Secret</h3><p>提交后，GitHub 将生成：</p><ul><li><strong>Client ID</strong>：用于标识该 OAuth 应用</li><li><strong>Client Secret</strong>：用于身份验证，请妥善保存，<strong>不要泄露！</strong></li></ul><p>📷 凭证界面如下：</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/640" alt="获取客户端凭证"></p><hr><h2 id="二、查看和管理-OAuth-应用"><a href="#二、查看和管理-OAuth-应用" class="headerlink" title="二、查看和管理 OAuth 应用"></a>二、查看和管理 OAuth 应用</h2><p>创建完成后，返回 OAuth 应用列表，即可看到刚创建的应用。</p><p>点击应用名可查看授权信息和应用详情：</p><p>📷 应用列表和详情视图：</p><ul><li><p>应用列表页面<br><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/640-20250713224027323-20250713224450558-20250713225035672" alt="OAuth 应用列表"></p><p>然后邮件会收到 Github 绑定 Oauth 的通知。<br><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/bb21e51f43bf5eedd8b6c44ef27e3fd9-20250713225035879.png" alt="授权详情"></p></li></ul><hr><h3 id="4-在-Memos-中配置-GitHub-登录"><a href="#4-在-Memos-中配置-GitHub-登录" class="headerlink" title="4. 在 Memos 中配置 GitHub 登录"></a>4. 在 Memos 中配置 GitHub 登录</h3><p>进入系统设置页面：</p><ol><li>点击左下角齿轮图标（设置）</li><li>选择 <strong>单点登录（SSO）</strong></li><li>选择 GitHub 作为登录方式，填写刚获取的 Client ID 和 Client Secret</li></ol><p>📷 Memos 配置页面示例：</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250713224629619.png" alt="设置 GitHub 单点登录"></p><p>配置保存后，注销当前账号，登录页面会显示 GitHub 登录按钮。</p><p>📷 登录页面展示效果：</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/26dac7e6f9531a83010a5cc44e95c71f-20250713225036385.png" alt="GitHub 登录入口"></p><p>通过以上步骤，我们完成了 GitHub 登录的接入流程：</p><p>✅ 创建并配置 GitHub OAuth 应用<br>✅ 获取并填入凭证<br>✅ 在 Memos 中启用 OAuth 登录</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在构建团队协作平台或知识系统时，接入 GitHub 登录是一种常见的低成本单点登录（SSO）方案，既简洁又安全。本教程将手把手教大家如何创建 GitHub OAuth 应用，并将其集成到 &lt;a href=&quot;https://github.com/usememos/memos&quot;&gt;Memos&lt;/a&gt; 等支持 OAuth 的系统中，帮助用户实现无感登录体验。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;一、创建-GitHub-OAuth-应用&quot;&gt;&lt;a href=&quot;#一、创建-GitHub-OAuth-应用&quot; class=&quot;headerlink&quot; title=&quot;一、创建 GitHub OAuth 应用&quot;&gt;&lt;/a&gt;一、创建 GitHub OAuth 应用&lt;/h2&gt;&lt;h3 id=&quot;1-打开-GitHub-OAuth-应用配置入口&quot;&gt;&lt;a href=&quot;#1-打开-GitHub-OAuth-应用配置入口&quot; class=&quot;headerlink&quot; title=&quot;1. 打开 GitHub OAuth 应用配置入口&quot;&gt;&lt;/a&gt;1. 打开 GitHub OAuth 应用配置入口&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;登录 GitHub，点击右上角头像，选择 &lt;strong&gt;Settings（设置）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;在左侧栏选择 &lt;strong&gt;Developer settings&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;点击 &lt;strong&gt;OAuth Apps&lt;/strong&gt;，然后点击右侧的 &lt;strong&gt;New OAuth App&lt;/strong&gt; 创建新的应用&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;📷 页面示意：&lt;/p&gt;</summary>
    
    
    
    <category term="懒猫微服" scheme="https://airag.click/categories/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
    
    <category term="懒猫微服" scheme="https://airag.click/tags/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
  </entry>
  
  <entry>
    <title>快速启动 http 站点</title>
    <link href="https://airag.click/posts/572b7187/"/>
    <id>https://airag.click/posts/572b7187/</id>
    <published>2025-07-11T16:00:00.000Z</published>
    <updated>2025-07-16T03:17:26.801Z</updated>
    
    <content type="html"><![CDATA[<p>以下是 Python 内置 HTTP 服务器的几种常用启动方式：</p><ol><li>默认端口启动（8000）：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m http.server</span><br></pre></td></tr></table></figure><span id="more"></span><ol start="2"><li>指定端口启动（示例使用 1378 端口）：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m http.server 1378</span><br></pre></td></tr></table></figure><ol start="3"><li>支持 IPv6 的启动方式：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m http.server 1378 --<span class="built_in">bind</span> ::</span><br></pre></td></tr></table></figure><p>这些命令会在当前目录启动一个简单的 HTTP 文件服务器，方便快速共享文件或测试网页。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;以下是 Python 内置 HTTP 服务器的几种常用启动方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;默认端口启动（8000）：&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;python -m http.server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="开发" scheme="https://airag.click/categories/%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="开发" scheme="https://airag.click/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>使用 Memos 替代 Flomo</title>
    <link href="https://airag.click/posts/6f97c31a/"/>
    <id>https://airag.click/posts/6f97c31a/</id>
    <published>2025-07-11T16:00:00.000Z</published>
    <updated>2025-07-16T03:17:26.792Z</updated>
    
    <content type="html"><![CDATA[<p>曾经用过 Flomo，一度觉得体验不错，但后来因不想续费会员而中止使用。最近在懒猫微服的商店中发现了 <a href="https://github.com/usememos/memos">Memos</a>，完全开源、支持自托管，是个很不错的替代方案。</p><hr><h2 id="什么是-Memos？"><a href="#什么是-Memos？" class="headerlink" title="什么是 Memos？"></a>什么是 Memos？</h2><p><a href="https://github.com/usememos/memos">Memos</a> 是一款开源、极简、现代化的笔记系统，主打「快速记录、随时检索」。适合捕捉灵感、日常备忘、碎片想法、读书笔记等多种用途。</p><p>它具有以下特点：</p><span id="more"></span><ul><li>🧩 极简 Markdown 编辑器，写作无干扰</li><li>🔍 支持标签与多条件过滤，查找便捷</li><li>📱 原生适配移动端界面，自动响应式布局</li><li>🌐 内置开放 API，可接入自动化工具或客户端</li><li>🗂 支持归档、置顶、图像插入、链接跳转等实用功能</li><li>🔐 数据完全自托管，掌控在自己手中</li></ul><p>目前 GitHub star 数已超 6k，开发活跃，文档完善，社区生态也在不断壮大。</p><hr><h2 id="页面结构与使用方式"><a href="#页面结构与使用方式" class="headerlink" title="页面结构与使用方式"></a>页面结构与使用方式</h2><p>Memos 主页面分为两栏：</p><h3 id="✅-左侧侧边栏："><a href="#✅-左侧侧边栏：" class="headerlink" title="✅ 左侧侧边栏："></a>✅ 左侧侧边栏：</h3><ul><li><strong>创建 Memo</strong>：点击加号即可撰写新内容</li><li><strong>标签筛选</strong>：点击任意标签快速过滤</li><li><strong>快捷菜单</strong>：查看所有 Memo、归档 Memo、置顶 Memo、搜索功能等</li></ul><h3 id="✅-右侧内容区："><a href="#✅-右侧内容区：" class="headerlink" title="✅ 右侧内容区："></a>✅ 右侧内容区：</h3><ul><li><p>展示所有 Memo 内容，以时间倒序排列</p></li><li><p>每条 Memo 支持：</p><ul><li>编辑、置顶、归档</li><li>标签添加（支持 <code>#标签名</code> 快捷方式）</li><li>Markdown 格式（支持标题、代码块、列表、引用等）</li><li>拖拽上传图片或截图粘贴</li><li>自动识别链接并可点击跳转</li></ul></li></ul><p>📷 示例页面如下：</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250711183947167.png" alt="image-20250711183947167"></p><hr><h2 id="开启-API-支持"><a href="#开启-API-支持" class="headerlink" title="开启 API 支持"></a>开启 API 支持</h2><p>在设置中可以启用 API 功能，系统会生成一个唯一的 <code>API KEY</code>，用于连接第三方客户端或自动化工具（如 Moe Memos）。</p><p>📷 API 开关和密钥生成页面如下：</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250711184031658.png" alt="image-20250711184031658"></p><hr><h2 id="Moe-Memos-客户端"><a href="#Moe-Memos-客户端" class="headerlink" title="Moe Memos 客户端"></a>Moe Memos 客户端</h2><p>App Store 上的 Moe Memos 是一款第三方移动端客户端，原生适配 Memos 的 API 接口，界面极简，使用流畅。</p><p>📷 图标预览：</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250711184107888.png" alt="image-20250711184107888"></p><hr><h2 id="如何登录-Moe-Memos"><a href="#如何登录-Moe-Memos" class="headerlink" title="如何登录 Moe Memos"></a>如何登录 Moe Memos</h2><ol><li>安装 Moe Memos 后，打开 App</li><li>输入你的自托管域名，如 <code>https://memos.name.heiyu.space</code></li><li>填写 API KEY 即可登录（需在系统中开启单租户模式）</li></ol><p>📷 登录后界面展示：</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250711183848763.png" alt="image-20250711183848763"></p><hr><h2 id="简单对比-Flomo"><a href="#简单对比-Flomo" class="headerlink" title="简单对比 Flomo"></a>简单对比 Flomo</h2><table><thead><tr><th>功能</th><th>Flomo</th><th>Memos（自托管）</th></tr></thead><tbody><tr><td>微信同步</td><td>✅（原生）</td><td>❌（可接 webhook 实现）</td></tr><tr><td>多端支持</td><td>✅</td><td>✅ Moe Memos</td></tr><tr><td>数据隐私</td><td>❌ 云端托管</td><td>✅ 完全自持</td></tr><tr><td>开放 API</td><td>❌ 限制较多</td><td>✅ 支持 API KEY</td></tr><tr><td>成本</td><td>收费会员制</td><td>免费开源（除托管成本）</td></tr><tr><td>Markdown</td><td>❌</td><td>✅ 原生支持</td></tr><tr><td>图片粘贴上传</td><td>❌</td><td>✅</td></tr></tbody></table><p>虽然 Memos 不支持微信原生同步，但凭借开放架构和高度可定制性，能实现更强的私有笔记体验。</p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Memos 是一款功能恰到好处、设计极简、部署门槛低的笔记系统，非常适合替代 Flomo 这类灵感记录工具。配合懒猫微服提供的部署方案，可以做到：</p><ul><li>一键上线，无需服务器运维知识</li><li>API 集成快捷，客户端体验佳</li><li>数据可备份、可迁移、可掌控</li></ul><p>适合用来做「知识碎片记录」、「阅读随想」、「灵感管理」、「工程笔记」等场景。欢迎大家一起探索更多玩法！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;曾经用过 Flomo，一度觉得体验不错，但后来因不想续费会员而中止使用。最近在懒猫微服的商店中发现了 &lt;a href=&quot;https://github.com/usememos/memos&quot;&gt;Memos&lt;/a&gt;，完全开源、支持自托管，是个很不错的替代方案。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;什么是-Memos？&quot;&gt;&lt;a href=&quot;#什么是-Memos？&quot; class=&quot;headerlink&quot; title=&quot;什么是 Memos？&quot;&gt;&lt;/a&gt;什么是 Memos？&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/usememos/memos&quot;&gt;Memos&lt;/a&gt; 是一款开源、极简、现代化的笔记系统，主打「快速记录、随时检索」。适合捕捉灵感、日常备忘、碎片想法、读书笔记等多种用途。&lt;/p&gt;
&lt;p&gt;它具有以下特点：&lt;/p&gt;</summary>
    
    
    
    <category term="懒猫微服" scheme="https://airag.click/categories/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
    
    <category term="懒猫微服" scheme="https://airag.click/tags/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
  </entry>
  
  <entry>
    <title>MacOS 环境下运行 EasySearch 报错无法信任 Java 包的解决方案</title>
    <link href="https://airag.click/posts/b77119f9/"/>
    <id>https://airag.click/posts/b77119f9/</id>
    <published>2025-07-11T16:00:00.000Z</published>
    <updated>2025-07-16T03:17:26.796Z</updated>
    
    <content type="html"><![CDATA[<h4 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h4><p>近期因 MacBook 系统降级重装，需重新部署 EasySearch 环境。由于系统未预装 Java，选择下载捆绑 JDK 的 EasySearch 版本，但在安装过程中遇到以下问题：</p><ol><li>系统安全机制拦截 Java 运行</li><li>密码认证异常（持续返回 401 错误）<span id="more"></span></li></ol><h4 id="问题现象"><a href="#问题现象" class="headerlink" title="问题现象"></a>问题现象</h4><ol><li><p><strong>安全拦截</strong><br>MacOS Gatekeeper 阻止运行捆绑的 JDK，即使在「系统偏好设置-安全性与隐私」中手动放行后，仍出现权限不足提示（见图 1）。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/46af71cf990c6b337b0368dff20c8e83.png" alt="安全拦截提示"></p></li><li><p><strong>认证失效</strong><br>配置文件中的密码校验异常，任何登录尝试均返回 401 状态码。</p></li></ol><h4 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h4><ol><li><p><strong>全局权限设置</strong><br>首先通过终端命令关闭系统安全限制：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> spctl --master-disable</span><br></pre></td></tr></table></figure><p>但发现此操作仍无法解决 JDK 运行问题。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/16d776ecf82e11ffda565666c96494aa-20250712103722754.png" alt="权限设置无效提示"></p></li><li><p><strong>最终解决方案</strong><br>采用处理「App 损坏」报错的方法：</p><ul><li><p>重新解压安装包</p></li><li><p>执行扩展属性清除命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xattr -cr jdk/bin/java</span><br></pre></td></tr></table></figure></li><li><p>重新初始化 EasySearch</p></li></ul></li></ol><h4 id="验证结果"><a href="#验证结果" class="headerlink" title="验证结果"></a>验证结果</h4><p>成功运行 EasySearch 并完成系统初始化（见图 3）。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250712103428122.png" alt="运行成功截图"></p><h4 id="经验总结"><a href="#经验总结" class="headerlink" title="经验总结"></a>经验总结</h4><p>MacOS 对未公证应用的限制日趋严格，建议：</p><ol><li>优先使用公证版本软件</li><li>遇到权限问题时，<code>xattr -cr</code>命令可有效清除可能导致拦截的扩展属性</li><li>401 错误可能与系统权限深度关联，需综合处理运行环境和配置文件</li></ol>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;问题背景&lt;/h4&gt;&lt;p&gt;近期因 MacBook 系统降级重装，需重新部署 EasySearch 环境。由于系统未预装 Java，选择下载捆绑 JDK 的 EasySearch 版本，但在安装过程中遇到以下问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;系统安全机制拦截 Java 运行&lt;/li&gt;
&lt;li&gt;密码认证异常（持续返回 401 错误）</summary>
    
    
    
    <category term="极限科技" scheme="https://airag.click/categories/%E6%9E%81%E9%99%90%E7%A7%91%E6%8A%80/"/>
    
    
    <category term="搜索引擎（ES）" scheme="https://airag.click/tags/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%EF%BC%88ES%EF%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>用Filebeat OSS 7.10.2将收集日志到Easysearch</title>
    <link href="https://airag.click/posts/a0786458/"/>
    <id>https://airag.click/posts/a0786458/</id>
    <published>2025-07-11T16:00:00.000Z</published>
    <updated>2025-07-16T03:17:26.796Z</updated>
    
    <content type="html"><![CDATA[<p>Filebeat OSS (Open Source Software) 7.10.2 版本是 Elastic 公司提供的开源版本。移除了一些<strong>Elasticsearch</strong>商业化的功能插件（但是没移出去干净）</p><p><a href="https://www.elastic.co/cn/downloads/past-releases/filebeat-oss-7-10-2%E3%80%82">https://www.elastic.co/cn/downloads/past-releases/filebeat-oss-7-10-2。</a></p><p>这主要还是 AWS 和 Elastic 公司之间的矛盾，AWS 托管的 ES 会和 Elastic 抢客户。所以 Elastic 搞了一个不能商业化的协议，影响了这个生态圈，也给开发者造成了很多不方便。</p><span id="more"></span><p>还记得这个非常戏剧性的 Issue：<br><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/90d8e0f338c94eccb9d48b6f104730bb.png" alt="在这里插入图片描述"></p><p><a href="https://github.com/elastic/beats/issues/8086">https://github.com/elastic/beats/issues/8086</a></p><p>下面将介绍如何配置该版本 Filebeat 将日志发送到 Easysearch。</p><p>以下是完整的<code>filebeat.yml</code>配置示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">filebeat.inputs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">log</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/log/messages</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/log/httpd/*.log</span></span><br><span class="line"></span><br><span class="line"><span class="attr">output.elasticsearch:</span></span><br><span class="line">  <span class="attr">hosts:</span> [<span class="string">&quot;yourEasysearchEndpoint:443&quot;</span>]</span><br><span class="line">  <span class="attr">protocol:</span> <span class="string">&quot;https&quot;</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">&quot;username&quot;</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">&quot;password&quot;</span></span><br><span class="line">  <span class="attr">ssl.verification_mode:</span> <span class="string">none</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下配置用于处理xpack相关兼容性问题</span></span><br><span class="line"><span class="attr">setup.template.name:</span> <span class="string">&quot;filebeat&quot;</span></span><br><span class="line"><span class="attr">setup.template.pattern:</span> <span class="string">&quot;filebeat-*&quot;</span></span><br><span class="line"><span class="attr">setup.template.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">setup.ilm.enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>setup.template 和 setup.ilm 相关的操作就是和没移除干净的 xpack 有关系，所以得再配置文件加上这些东西。</p><p>同时也得在 Easysearch 里面开启兼容 ES 的 API，不然会遇到这个报错。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250712125907654-20250712130307504.png" alt="image-20250712125907654"></p><p>在我的 MBP 上是这样：（config&#x2F;easysearch.yml）</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">discovery.type:</span> <span class="string">single-node</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="attr">elasticsearch.api_compatibility:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ol><li><strong>启动并测试 Filebeat</strong>：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl start filebeat</span><br><span class="line"><span class="built_in">sudo</span> filebeat <span class="built_in">test</span> output</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>检查服务状态</strong>：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl status filebeat</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>生成测试日志</strong>：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;test log <span class="subst">$(date)</span>&quot;</span> | <span class="built_in">sudo</span> <span class="built_in">tee</span> -a /var/log/messages</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>在 Easysearch 中查询日志</strong>：<br>使用 Dev Tools 执行以下查询：</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET filebeat-*/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;@timestamp&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;order&quot;</span><span class="punctuation">:</span> <span class="string">&quot;desc&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/bd08bfc218c45c962378117b76933e61.png"></p><p>成功响应示例如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;took&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;successful&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;failed&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hits&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;relation&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eq&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hits&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;filebeat-7.10.2-2025.04.18&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;XXXXXXX&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;@timestamp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2025-04-29T09:04:09.566Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;log&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;file&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/var/log/messages&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;offset&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test log Fri Apr 29 09:04:00 UTC 2025&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;input&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;log&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;ecs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.6.0&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>曾经在 ubuntu 上遇到过只要启动 filebeat 就报错一堆内存的信息：</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/7a95ae40a701ef3df2d34cd0a560c7c5.png" alt="7a95ae40a701ef3df2d34cd0a560c7c5"></p><p>这个文章给了一个解决办法：</p><p><a href="https://infinilabs.cn/blog/2025/ubuntu_run_filebeat/%E9%80%9A%E8%BF%87%E4%BB%A5%E4%B8%8A%E9%85%8D%E7%BD%AE%E5%92%8C%E6%AD%A5%E9%AA%A4%EF%BC%8C%E6%82%A8%E5%BA%94%E8%AF%A5%E8%83%BD%E5%A4%9F%E6%88%90%E5%8A%9F%E4%BD%BF%E7%94%A8Filebeat">https://infinilabs.cn/blog/2025/ubuntu_run_filebeat/通过以上配置和步骤，您应该能够成功使用Filebeat</a> OSS 7.10.2 版本将日志收集到 Easysearch 中。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Filebeat OSS (Open Source Software) 7.10.2 版本是 Elastic 公司提供的开源版本。移除了一些&lt;strong&gt;Elasticsearch&lt;/strong&gt;商业化的功能插件（但是没移出去干净）&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.elastic.co/cn/downloads/past-releases/filebeat-oss-7-10-2%E3%80%82&quot;&gt;https://www.elastic.co/cn/downloads/past-releases/filebeat-oss-7-10-2。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这主要还是 AWS 和 Elastic 公司之间的矛盾，AWS 托管的 ES 会和 Elastic 抢客户。所以 Elastic 搞了一个不能商业化的协议，影响了这个生态圈，也给开发者造成了很多不方便。&lt;/p&gt;</summary>
    
    
    
    <category term="极限科技" scheme="https://airag.click/categories/%E6%9E%81%E9%99%90%E7%A7%91%E6%8A%80/"/>
    
    
    <category term="搜索引擎（ES）" scheme="https://airag.click/tags/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%EF%BC%88ES%EF%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>懒猫微服实战入门（二十）：如何使用 Time Machine 将 Mac 备份到懒猫微服</title>
    <link href="https://airag.click/posts/c5298d72/"/>
    <id>https://airag.click/posts/c5298d72/</id>
    <published>2025-07-10T16:00:00.000Z</published>
    <updated>2025-07-16T03:17:26.791Z</updated>
    
    <content type="html"><![CDATA[<p>看了 Apple 的文档，时间机器备份到 SMB 或者外接设备（APFS）。正好懒猫微服带了 SMB 的共享。然后我们可以把时间机器备份到网盘里。虽然默认连接的是懒猫网盘根目录，但是我们也可以映射一个子文件夹 TimeMachine。如下：</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250711074625650.png" alt="image-20250711074625650"></p><span id="more"></span><h4 id="一、-在-Mac-上连接到-SMB-共享"><a href="#一、-在-Mac-上连接到-SMB-共享" class="headerlink" title="一、 在 Mac 上连接到 SMB 共享"></a><strong>一、 在 Mac 上连接到 SMB 共享</strong></h4><ol><li>在 Finder 中，点击菜单栏的 <strong>“前往” (Go)</strong> &gt; **“连接服务器…” (Connect to Server…)**。</li><li>在弹出的窗口中，输入 SMB 共享的地址，格式通常是 <code>smb://[懒猫微服的IP地址或主机名]/[共享文件夹名称]</code>。<ul><li>例如：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smb://192.168.1.100/用户名/timemachine</span><br></pre></td></tr></table></figure></li><li>（域名也可以）</li></ul></li><li>点击“连接”。系统会提示你输入用户名和密码。（懒猫微服的用户密码）<br><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250710205349694.png" alt="image-20250710205349694"><br>成功连接后，你会在 Finder 中看到这个网络共享。<br><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250710205328553.png" alt="image-20250710205328553"></li></ol><h4 id="二、-设置-Time-Machine-进行备份"><a href="#二、-设置-Time-Machine-进行备份" class="headerlink" title="二、 设置 Time Machine 进行备份"></a><strong>二、 设置 Time Machine 进行备份</strong></h4><ol><li><p>打开 **“系统设置” (System Settings)**（或旧版 macOS 中的“系统偏好设置”）。</p></li><li><p>点击 <strong>“通用” (General)</strong> &gt; **“时间机器” (Time Machine)**。</p></li><li><p>点击 **“添加备份磁盘…” (Add Backup Disk…)**。</p></li><li><p>在弹出的列表中，你应该能看到你刚刚连接的 SMB 共享文件夹。</p></li><li><p>如果再次提示输入凭据，请再次输入你在懒猫微服上设置的用户名和密码。<br><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/9fb154461fa6adfe4d02abc8540d441d.png" alt="9fb154461fa6adfe4d02abc8540d441d"></p></li></ol><p>Time Machine 会在共享中创建一个特殊的 <code>.sparsebundle</code> 文件，然后开始首次备份。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/2347dfcbdd318a7afe54f46467ea48b3.png" alt="yo"></p><h4 id="三、-解决-Time-Machine-备份变慢的问题"><a href="#三、-解决-Time-Machine-备份变慢的问题" class="headerlink" title="三、 解决 Time Machine 备份变慢的问题"></a><strong>三、 解决 Time Machine 备份变慢的问题</strong></h4><p>在某些情况下，macOS 的默认设置或某些第三方应用程序可能会导致 Time Machine 备份变慢。</p><p><strong>1. 暂时禁用磁盘节流（Disk Throttling）</strong></p><p>macOS 默认会对后台进程（包括 Time Machine）进行磁盘 I&#x2F;O 节流，以确保系统响应速度。在首次备份或需要快速完成备份时，可以暂时禁用此节流。</p><ul><li><strong>操作方法</strong>： 打开“终端”应用程序（位于“应用程序”&gt;“实用工具”），输入以下命令并按回车键：<br><code>bash sudo sysctl debug.lowpri_throttle_enabled=0 </code><br>输入管理员密码后，该设置会立即生效。请注意，这会使 Time Machine 占用更多系统资源，可能影响 Mac 在备份期间的流畅性。备份完成后，建议通过以下命令重新启用节流：<br><code>bash sudo sysctl debug.lowpri_throttle_enabled=1 </code><br><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/e32943d816fa309bbdc6c67f67ae80d7.png" alt="e32943d816fa309bbdc6c67f67ae80d7"><br><strong>2. 检查和禁用干扰备份的应用程序</strong></li></ul><p>某些应用程序，特别是防病毒软件、系统清理工具或文件同步工具，可能会频繁访问磁盘，从而干扰 Time Machine 的正常运行。</p><ul><li><strong>操作方法</strong>： 尝试在 Time Machine 备份期间暂时禁用这些应用程序，或者检查它们的设置，看是否可以将 Time Machine 备份盘从其扫描范围中排除。</li></ul><p><strong>3. 确保 Mac 保持唤醒状态</strong></p><p>对于大型备份，如果 Mac 进入睡眠状态，可能会中断或减慢备份进程。</p><ul><li><strong>操作方法</strong>： 在备份期间，你可以前往“系统设置”&gt;“显示器”（或“节能”）调整显示器关闭时间和电脑睡眠设置，或使用 <code>caffeinate</code> 命令让 Mac 保持唤醒：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">caffeinate -s -m -i -t 36000 &amp;</span><br></pre></td></tr></table></figure>此命令将使 Mac 在 10 小时内（36000 秒）保持唤醒，<code>&amp;</code> 符号表示在后台运行。</li></ul><h4 id="四、-查看备份情况"><a href="#四、-查看备份情况" class="headerlink" title="四、 查看备份情况"></a><strong>四、 查看备份情况</strong></h4><p>可以按到我目前磁盘使用了 90 个 G，在时间机器中看到占用 50G。<br><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250710205108688.png" alt="image-20250710205108688"></p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250711073425325.png" alt="image-20250711073425325"></p><p>在懒猫网盘中也可以看到这个数据。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250711072633958.png" alt="image-20250711072633958"></p><p>通过以上步骤，你就可以成功地将你的 Mac 通过 Time Machine 备份到懒猫微服提供的 SMB 共享了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;看了 Apple 的文档，时间机器备份到 SMB 或者外接设备（APFS）。正好懒猫微服带了 SMB 的共享。然后我们可以把时间机器备份到网盘里。虽然默认连接的是懒猫网盘根目录，但是我们也可以映射一个子文件夹 TimeMachine。如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250711074625650.png&quot; alt=&quot;image-20250711074625650&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="懒猫微服" scheme="https://airag.click/categories/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
    
    <category term="懒猫微服" scheme="https://airag.click/tags/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
    <category term="Apple" scheme="https://airag.click/tags/Apple/"/>
    
  </entry>
  
  <entry>
    <title>懒猫微服实战入门（十九）：我最喜欢的 RSS 阅读器-FreshRSS</title>
    <link href="https://airag.click/posts/9fd148d9/"/>
    <id>https://airag.click/posts/9fd148d9/</id>
    <published>2025-07-09T16:00:00.000Z</published>
    <updated>2025-07-16T03:17:26.791Z</updated>
    
    <content type="html"><![CDATA[<p>自建的博客都可以接入 RSS 订阅，我之很喜欢的一款 FreshRSS 在懒猫微服的商店上架了，可以联动一下了。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250710111228317.png" alt="image-20250710111228317"></p><p>我的博客 RSS 订阅是：<a href="https://cloudsmithy.github.io/atom.xml">https://cloudsmithy.github.io/atom.xml</a></p><p>然后点击左上角的订阅管理，先新建一个分类，然后是输入 RSS 订阅地址即可。</p><span id="more"></span><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250710111327135.png" alt="image-20250710111327135"></p><p>我也添加了懒猫微服王总的博客订阅：<a href="https://manateelazycat.github.io/feed.xml">https://manateelazycat.github.io/feed.xml</a></p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/fdb69d74740805003e9eba315c23c30b.png" alt="fdb69d74740805003e9eba315c23c30b"></p><p>这个是我博客的订阅效果，这样在 PC 和移动端都可以访问了：</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250710110130424.png" alt="image-20250710110130424"></p><p>那如果想让用其他的软件订阅这个 FreshRSS 呢，在右上角点击设置，然后选择认证，点击允许 API 访问。然后就可以通过抓数据的方式进行访问。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250710110209454.png" alt="image-20250710110209454"></p><p>然后回到账户管理，这个时候下面就出来了 API 管理这个选项，设置 token 然后就可以使用了。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250710110308889.png" alt="image-20250710110308889"></p><p>然后我们访问 API 端点：<a href="https://freshrss/">https://freshrss</a>.&lt;机器名字&gt;.heiyu.space&#x2F;api&#x2F;</p><p>这里可以看到 Google Reader compatible API 和 Fever compatible API。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">FreshRSS API endpoints</span><br><span class="line">Google Reader compatible API</span><br><span class="line">Your API address:</span><br><span class="line">https://freshrss.&lt;机器名字&gt;.heiyu.space/api/greader.php</span><br><span class="line">Google Reader API configuration test:</span><br><span class="line">✔️ PASS</span><br><span class="line">Fever compatible API</span><br><span class="line">Your API address:</span><br><span class="line">https://freshrss.micro.&lt;机器名字&gt;.space/api/fever.php</span><br><span class="line">Fever API configuration test:</span><br><span class="line">✔️ PASS</span><br></pre></td></tr></table></figure><p>那接下来使用 fluent-reader 订阅微服里的 FreshRSS。选择 Fever API，输入上边 RSS API 返回的 URL。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/22a10f7d54a372eee2250cd11700ed11.png" alt="22a10f7d54a372eee2250cd11700ed11"></p><p>用户名和密码是登录 FreshRSS 的用户密码，然后端点是 Fever compatible API。（这里没有用到 token）</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/776b56ff7038d900f9d7d8c7c08f0b27.png" alt="776b56ff7038d900f9d7d8c7c08f0b27"></p><p>这个就是订阅的效果了。（FreshRSS 夹带私货自动订阅 release）</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250710113632046.png" alt="image-20250710113632046"></p><p>在 APP 里还挺好看的。（除了 fluent-reader 不支持检索）</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/2bb3f4399b86b3d27f86988571d8018b.png" alt="2bb3f4399b86b3d27f86988571d8018b"></p><p>用懒猫微服当作一个 RSS 存储的后端，同时也提供了一个 FreshRSS 的部署版本，很多记忆再也不会丢了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;自建的博客都可以接入 RSS 订阅，我之很喜欢的一款 FreshRSS 在懒猫微服的商店上架了，可以联动一下了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250710111228317.png&quot; alt=&quot;image-20250710111228317&quot;&gt;&lt;/p&gt;
&lt;p&gt;我的博客 RSS 订阅是：&lt;a href=&quot;https://cloudsmithy.github.io/atom.xml&quot;&gt;https://cloudsmithy.github.io/atom.xml&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;然后点击左上角的订阅管理，先新建一个分类，然后是输入 RSS 订阅地址即可。&lt;/p&gt;</summary>
    
    
    
    <category term="懒猫微服" scheme="https://airag.click/categories/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
    
    <category term="懒猫微服" scheme="https://airag.click/tags/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
  </entry>
  
  <entry>
    <title>给传统 NAS 玩家介绍一下懒猫微服</title>
    <link href="https://airag.click/posts/47885d90/"/>
    <id>https://airag.click/posts/47885d90/</id>
    <published>2025-07-09T16:00:00.000Z</published>
    <updated>2025-07-16T03:17:26.794Z</updated>
    
    <content type="html"><![CDATA[<p>玩过不少 NAS，从最早的黑群晖，威联通开始，后面陆陆续续接触了飞牛，绿联，极空间，UNRAID，EXSI，Proxmox VE，也算有点话语权。</p><p>首先最直观的区别是软件客户端，像群晖，威联通的电脑版客户端是用来发现机器的 IP 地址的，然后后续所有的操作都在浏览器完成，比如新建用户，登录，审计，访问数据，查看监控。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250704080937359.png" alt="image-20250704080937359"></p><p>而懒猫微服的所有操作几乎都在客户端完成，网页端更像是一个应用的 Dashboard。然后访问的时候使用域名，配合厂家的穿透服务，无论你是互联网访问还是局域网访问机器，用这一个地址就够了，不再需要在路由器上做端口转发，也基本可以告别自己搭建内网穿透的痛苦了。</p><span id="more"></span><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250704070707399.png" alt="image-20250704070707399"></p><p>还有一个非常主要的是社群，懒猫微服既有官方的大群交流技术，也有 VIP 的小群私人定制。大群里有各式各样的玩家，除了懒猫微服之外大家还会交流各种 Github 的开源项目，Linux 技巧以及电脑外设心得， 然后每天大家都贡献攻略。因为公司 base 在武汉嘛，当然也会有接地气的武汉风情。 VIP 小群会针对个性化的需要做一对一的指导，比如曾经帮我排查了家庭宽带 DNS 污染，UPS 信号干扰，甚至 OpenID Connect (OIDC) 的使用和接入等问题，对于开源软件部署在懒猫上有问题也是尽全力 额度支持，届时可以拉一个小会，然后共享屏幕给他们查看。可以放心的 show linux 命令和飙专业术语啥的。 很多的问题可以在半小时到一个小时就能解决，有时候甚至会更短。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250704070841376.png" alt="image-20250704070841376"></p><p>不只是自己写的软件部署上去访问有延迟他们会帮忙排查，而且一些商店里社区用户贡献的开源软件的问题，他们也会帮忙查看并且给出一些解答方式。 毕竟开源软件的 issue 真的不少，他们不会叫你去开 issue 然后漫长的等待，他们会去帮忙追。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250704083116697.png" alt="image-20250704083116697"></p><p>而传统 NAS 的社群主要靠的是爱好者自己发起和维护的，有问题在群里问可能最后没有讨论出结果就不了了之了。甚至很多时候都会纠结到底是选 Proxmox VE 还是 EXSI。对于攻略部分，大多是散落在资深用户的个人博客上，比如很多威联通的文章都会发在什么值得买上面。而对于提问能不能得到答案，完全取决于作者用爱发电的程度了。如果商业 NAS 提案例，那么响应时间可能要很久，如果你提简单的案例，那么可能立马有人给你打电话，如果是比较难的问题，可能最后就不了了之了。只能说在服务客户这方面亚马逊是在是开了一个很不好的头，大概是这样：</p><blockquote><p>因为 AWS 负责运行、管理和控制从主机操作系统和虚拟层到服务运营所在设施的物理安全性的组件。客户负责管理来宾操作系统（包括更新和安全补丁）、其他相关应用程序软件以及 AWS 提供的安全组防火墙的配置。客户应该仔细考虑自己选择的服务，因为他们的责任取决于所使用的服务、，这些服务与其 IT 环境的集成以及适用的法律法规。责任共担还为客户提供了部署需要的灵活性和控制力。</p></blockquote><p>所以有时候遇到两个产品交叉的问题，我们一般是很难得到方案，很有可能两方都说这涉及三方产品你需要找对方，我们不了解你这个三方产品，没办法给你方案。而对于三方玩家几乎是没有办法同时把两个产品的售后叫到一起的。无论你是开案例还是拉一个会议，这难度很大很大。</p><p>然后是系统层面的对比，懒猫微服是 基于 debian 优化一套系统，后来又开了 root 权限，所以基本 Linux 能做的事他都能做，更是出厂预置了 dockage，dozzle 这样方面调试 docker 的软件，基本属于开箱即用。甚至我们还能使用 Docker 打包自己的软件然后上架给其他玩家使用，甚至可以对其他人说；</p><blockquote><p>我的懒猫微服教程是中文圈里非常优秀的实战指南。</p><p>我的开发&#x2F;移植软件也有非常多的懒猫用户在使用。</p></blockquote><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/6c12c920-1fd4-4300-b9cf-7918026d7c8f.png" alt="6c12c920-1fd4-4300-b9cf-7918026d7c8f"></p><p>而开源的 NAS 基本上大家只玩虚拟机和按照教程配置 Docker，几乎是没有包管理工具的，所以安装的软件很受限。 如果真的想移植应用，那个开发者文档也是不太好看。起码对于普通玩家是真的劝退了。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250704081028625.png" alt="image-20250704081028625"></p><p>最后一点也就是很重要的一点，关于 APP 访问这块。在从互联网访问这边，传统 NAS 有一个很大的痛点。一个是移动端软件适配不好，还有就是服务多了端口都得自己记住。再加上路由器转发的端口，真的很难记住了。而懒猫微服在移动端和 PC 上的页面几乎是差不多的，所有操作几乎可以在 APP 内部完成。应用商店上架的应用大部分都是 https 的协议和 443 的端口。不用自己做加密同时以及免去了记忆软件信息烦恼，毕竟即使是专业玩家，也不想天天做服务器的运维工作。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250704081156422.png" alt="image-20250704081156422"></p><p>普通用户图一个方便。专业用户图一个折腾，然后缺少的就是一个稳定的穿透和传输，精力有限不想自己维护一些底层的东西。买个懒猫微服差不多全能解决了。</p><p>我一直有一个愿望，写一本 NAS 的书，让技术融入到爱好者的生活，技术不是枯燥的理论，当我们遇到问题的时候，才能想清楚他们为什么这么设计。技术人永不为奴。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;玩过不少 NAS，从最早的黑群晖，威联通开始，后面陆陆续续接触了飞牛，绿联，极空间，UNRAID，EXSI，Proxmox VE，也算有点话语权。&lt;/p&gt;
&lt;p&gt;首先最直观的区别是软件客户端，像群晖，威联通的电脑版客户端是用来发现机器的 IP 地址的，然后后续所有的操作都在浏览器完成，比如新建用户，登录，审计，访问数据，查看监控。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250704080937359.png&quot; alt=&quot;image-20250704080937359&quot;&gt;&lt;/p&gt;
&lt;p&gt;而懒猫微服的所有操作几乎都在客户端完成，网页端更像是一个应用的 Dashboard。然后访问的时候使用域名，配合厂家的穿透服务，无论你是互联网访问还是局域网访问机器，用这一个地址就够了，不再需要在路由器上做端口转发，也基本可以告别自己搭建内网穿透的痛苦了。&lt;/p&gt;</summary>
    
    
    
    <category term="懒猫微服" scheme="https://airag.click/categories/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
    
    <category term="NAS" scheme="https://airag.click/tags/NAS/"/>
    
  </entry>
  
  <entry>
    <title>懒猫微服开发篇（四）：懒猫微服如何使用 OpenID Connect （OIDC）？（上）</title>
    <link href="https://airag.click/posts/dcc47393/"/>
    <id>https://airag.click/posts/dcc47393/</id>
    <published>2025-07-08T16:00:00.000Z</published>
    <updated>2025-07-16T03:17:26.793Z</updated>
    
    <content type="html"><![CDATA[<p>OpenID Connect（OIDC）是一个基于 <strong>OAuth 2.0</strong> 的身份认证协议，允许用户使用一个账号（如 Google、微信、Microsoft 账号）登录多个不同的网站或应用，而无需重复注册。我们经常把他和<strong>OAuth 2.0</strong> 混为一谈。</p><p>它主要用于 <strong>身份认证（Authentication）</strong>，而 OAuth 2.0 主要用于 <strong>授权（Authorization）</strong>。简单来说：</p><ul><li><strong>OAuth 2.0</strong> → 让应用能访问你的数据（如获取微信头像），还要自己做用户管理。</li><li><strong>OIDC</strong> → 让应用能确认“你是谁”（如用微信账号登录）</li></ul><p>下面以我的懒猫 ENV 查看器为例，来讲解这个登录流程。</p><p>当你在应用处点击登录就会重定向到登录中心，我们通常管这个叫做身份提供商（IDP），如果是其他的软件有可能是 <strong>“使用 Google 登录”</strong> 或 <strong>“微信登录”</strong> 。</p><span id="more"></span><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250702210408529.png" alt="image-20250702210408529"></p><p>跳转到认证中心，一般都会提示你是否确认登录，某某应用将要获取登录的权限，查看你的信息。在懒猫微服里这直接点击 Grant Access 即可。在其他的 IDP 中，会让你输入账号密码登录，并同意授权该网站访问你的基本信息（如邮箱、昵称）。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250702210333539.png" alt="image-20250702210333539"></p><p>当 IDP 验证完的身份后，返回一个 <strong>JWT（JSON Web Token）</strong>，其中包含你的身份信息。当网站验证 JWT 后，确认你的身份，并让你登录成功。我们也可以在 jwt.io 和 jwt.ms 这个网站去做解码。</p><p>我解码了其中一个 token，我们可以看到里面的信息，可以看到加密算法，颁发机构，过期时间，用户信息什么的，</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250702212449226.png" alt="image-20250702212449226"></p><p>这个是一般登录的流程，比如首次用户名和密码登录成功之后会返回一个 JWT，然后后续把这个 JWT 当做 bear token 来请求后面的资源。我们的 OIDC 和这个原理类似，只不过稍微复杂一些。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/7aed62612920d1042f175cb87c1f049e.png" alt="7aed62612920d1042f175cb87c1f049e"></p><p>在 <code>OIDC</code> 协议中，会遇到三种 Token: <code>id_token</code>, <code>access_token</code> 和 <code>refresh_token</code>。</p><ol><li><p>Access Token 用于基于 Token 的认证模式，允许应用访问一个资源 API。用户认证授权成功后，Authing 会签发 Access Token 给应用。应用后面就带着这个** Access Token** 访问资源 API。</p></li><li><p>ID Token 相当于用户的身份凭证，开发者的前端访问后端接口时可以携带 <strong>ID Token</strong>，<strong>开发者服务器</strong>可以校验用户的 <strong>ID Token</strong> 以确定用户身份，<a href="https://docs.authing.cn/v2/guides/faqs/how-to-validate-user-token.html">验证</a>通过后返回相关资源。</p></li></ol><p>AccessToken 和 IdToken 都是 JWT，<strong>有效时间</strong>通常较短。通常用户在获取资源的时候需要携带 AccessToken，当 AccessToken 过期后，用户需要获取一个新的 AccessToken。</p><ol start="3"><li>Refresh Token 用于获取新的 AccessToken。这样可以缩短 AccessToken 的过期时间保证安全，同时又不会因为频繁过期重新要求用户登录。用户在初次认证时，Refresh Token 会和 AccessToken、IdToken 一起返回。应用携带 Refresh Token 向 Token 端点发起请求时，这个时候会续签 AccessToken 和 IdToken 与 ID token。</li></ol><p>所以我们一般说的 JWT 就是 Access Token 的部分用于授权。而<strong>ID Token</strong> 用户标注用户信息，Refresh Token 用来续签 Access Token 。</p><p>在懒猫微服上使用 OIDC 有一个好处就是，不用在 IDP 上填写申请信息，在程序运行过程中可以直接注入相应的环境变量，这样我们直接用就可以了。相当于传统 IDP 需要填写应用名称，做分组控制而言，这个自动注入的 OIDC 开箱即用很方便。</p><p>一般是有这几个信息：</p><ol><li>CLIENT_ID：从我的 app 来看，这个就是包名</li><li>CLIENT_SECRET： 这个是随机的</li><li>ISSUER_URI：https:&#x2F;&#x2F;微服域名&#x2F;sys&#x2F;oauth</li><li>TOKEN_URI：https:&#x2F;&#x2F;微服域名&#x2F;sys&#x2F;oauth&#x2F;token</li><li>USERINFO_URI：https:&#x2F;&#x2F;微服域名&#x2F;sys&#x2F;oauth&#x2F;userinfo</li></ol><p>先说 ISSUER_URI，这个是 OIDC 的入口，其中.well-known&#x2F;openid-configuration 里可以拿到各种 URL，算是 OIDC 的入口，即使环境变量中没给信息我们也可以在这里查看。比如用来校验 JWT 的 jwks_uri。</p><p>GET https:&#x2F;&#x2F;&lt;微服域名&gt;&#x2F;sys&#x2F;oauth&#x2F;.well-known&#x2F;openid-configuration 结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;issuer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://&lt;name&gt;.heiyu.space/sys/oauth&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;authorization_endpoint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://&lt;name&gt;.heiyu.space/sys/oauth/auth&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;token_endpoint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://&lt;name&gt;.heiyu.space/sys/oauth/token&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;jwks_uri&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://&lt;name&gt;.heiyu.space/sys/oauth/keys&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;userinfo_endpoint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://&lt;name&gt;.heiyu.space/sys/oauth/userinfo&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;device_authorization_endpoint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://&lt;name&gt;.heiyu.space/sys/oauth/device/code&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;introspection_endpoint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://&lt;name&gt;.heiyu.space/sys/oauth/token/introspect&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;grant_types_supported&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;authorization_code&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;refresh_token&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;urn:ietf:params:oauth:grant-type:device_code&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;urn:ietf:params:oauth:grant-type:token-exchange&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;response_types_supported&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;code&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;subject_types_supported&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;public&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;id_token_signing_alg_values_supported&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;RS256&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;code_challenge_methods_supported&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;S256&quot;</span><span class="punctuation">,</span> <span class="string">&quot;plain&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scopes_supported&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;openid&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;email&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;groups&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;profile&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;offline_access&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;token_endpoint_auth_methods_supported&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;client_secret_basic&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;client_secret_post&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;claims_supported&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;iss&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;sub&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;aud&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;iat&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;exp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;email&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;email_verified&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;locale&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;name&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;preferred_username&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;at_hash&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>至于回调 URL，这个是需要自己设置的部分。可能由于开发习惯导致每个应用的回调 URL 不一样。相对于在 IDP 中填写信息，在懒猫微服的 lzc-manifest.yml 中加这么一行即可。也只有设置了 application.oidc_redirect_path 之后，才能使用 OIDC 相关的环境变量。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">application.oidc_redirect_path:</span> <span class="string">/callback</span></span><br></pre></td></tr></table></figure><p>可以看看我的懒猫 ENV 查看器的设置。通过 oidc_redirect_path 设置回调地址，然后使用 environment 字段还这是需要的环境变量。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">lzc-sdk-version:</span> <span class="number">0.1</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">懒猫ENV查看器</span></span><br><span class="line"><span class="attr">package:</span> <span class="string">xu.deploy.env</span></span><br><span class="line"><span class="attr">version:</span> <span class="number">0.0</span><span class="number">.2</span></span><br><span class="line"><span class="attr">description:</span></span><br><span class="line"><span class="attr">license:</span> <span class="string">https://choosealicense.com/licenses/mit/</span></span><br><span class="line"><span class="attr">homepage:</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">xu</span></span><br><span class="line"><span class="attr">application:</span></span><br><span class="line">  <span class="attr">subdomain:</span> <span class="string">env</span></span><br><span class="line">  <span class="attr">oidc_redirect_path:</span> <span class="string">/callback</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/=exec://5005,./lzcapp/pkg/content/run.sh</span></span><br><span class="line">  <span class="attr">environment:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">LAZYCAT_AUTH_OIDC_CLIENT_ID=$&#123;LAZYCAT_AUTH_OIDC_CLIENT_ID&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">LAZYCAT_AUTH_OIDC_CLIENT_SECRET=$&#123;LAZYCAT_AUTH_OIDC_CLIENT_SECRET&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">LAZYCAT_AUTH_OIDC_AUTH_URI=$&#123;LAZYCAT_AUTH_OIDC_AUTH_URI&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">LAZYCAT_AUTH_OIDC_TOKEN_URI=$&#123;LAZYCAT_AUTH_OIDC_TOKEN_URI&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">LAZYCAT_AUTH_OIDC_USERINFO_URI=$&#123;LAZYCAT_AUTH_OIDC_USERINFO_URI&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">LAZYCAT_AUTH_OIDC_ISSUER_URI=$&#123;LAZYCAT_AUTH_OIDC_ISSUER_URI&#125;</span></span><br></pre></td></tr></table></figure><p>然后我们来看 OIDC 的几种授权模式。</p><table><thead><tr><th align="left">应用类型</th><th align="left">授权模式</th></tr></thead><tbody><tr><td align="left">有后端场景</td><td align="left">授权码模式</td></tr><tr><td align="left">SPA，无后端</td><td align="left">隐式模式</td></tr><tr><td align="left">应安全存储密钥</td><td align="left">密码模式</td></tr><tr><td align="left">服务器之间</td><td align="left">Client Credentials</td></tr></tbody></table><p>这个是 Authing 推荐的选择方式，不过据我的经验来讲，就 Web 开发而言大多还是选择隐式授权的居多。看的出来懒猫的 OIDC 也是用的这种。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/7c23a4d3-edef-4873-af13-ac75a1ab1094.png" alt="7c23a4d3-edef-4873-af13-ac75a1ab1094"></p><p>懒猫微服也是用的授权码模式, 所以跳转的时候我们抓浏览器请求会看到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://url/callback?code=xxxx</span><br></pre></td></tr></table></figure><p>其实一个良好的 OIDC 流程是这样的：</p><ol start="0"><li><p>当访问没有权限的路由的时候，在路由守卫中重定向到登录页面。</p></li><li><p>当用户登录的时候，跳转到对应的的 IDP 控制页面，然后输入用户凭证。这个时候会走 IDP 的认证。</p></li><li><p>认证之后会颁发一次性 code（授权码模式），如果是简单的密码模式，那么就会直接返回 Access Token，ID token 以及 refresh token。</p></li><li><p>使用授权码 code 换取 AccessToken、IdToken 以及 refresh token。授权码模式的好处是，把真正的令牌藏在后端交换，只暴露一次性 code，从而极大降低令牌泄露和被滥用的风险。</p></li><li><p>最后我们再用 AccessToken 来访问资源。</p></li></ol><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/98e71384-dfcb-426b-9f6e-3190f4e09701.png" alt="98e71384-dfcb-426b-9f6e-3190f4e09701"></p><p>以上是基于懒猫的 OpenID Connect （OIDC）的理论讲解的部分，后面我们会进行实操，手把手创建可以接入 OIDC 的应用。</p><p>备注：关于部分 OIDC 的图文来自 Authing 文档。</p><p><a href="https://docs.authing.cn/v2/concepts/oidc/choose-flow.html">https://docs.authing.cn/v2/concepts/oidc/choose-flow.html</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;OpenID Connect（OIDC）是一个基于 &lt;strong&gt;OAuth 2.0&lt;/strong&gt; 的身份认证协议，允许用户使用一个账号（如 Google、微信、Microsoft 账号）登录多个不同的网站或应用，而无需重复注册。我们经常把他和&lt;strong&gt;OAuth 2.0&lt;/strong&gt; 混为一谈。&lt;/p&gt;
&lt;p&gt;它主要用于 &lt;strong&gt;身份认证（Authentication）&lt;/strong&gt;，而 OAuth 2.0 主要用于 &lt;strong&gt;授权（Authorization）&lt;/strong&gt;。简单来说：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;OAuth 2.0&lt;/strong&gt; → 让应用能访问你的数据（如获取微信头像），还要自己做用户管理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;OIDC&lt;/strong&gt; → 让应用能确认“你是谁”（如用微信账号登录）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面以我的懒猫 ENV 查看器为例，来讲解这个登录流程。&lt;/p&gt;
&lt;p&gt;当你在应用处点击登录就会重定向到登录中心，我们通常管这个叫做身份提供商（IDP），如果是其他的软件有可能是 &lt;strong&gt;“使用 Google 登录”&lt;/strong&gt; 或 &lt;strong&gt;“微信登录”&lt;/strong&gt; 。&lt;/p&gt;</summary>
    
    
    
    <category term="懒猫微服" scheme="https://airag.click/categories/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
    
    <category term="开发" scheme="https://airag.click/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>京东售后拒修 AirPods 称&quot;无问题&quot;，苹果官方检测后直接换新！京东竟删除检测记录？</title>
    <link href="https://airag.click/posts/c67acea7/"/>
    <id>https://airag.click/posts/c67acea7/</id>
    <published>2025-07-08T16:00:00.000Z</published>
    <updated>2025-07-16T03:17:26.799Z</updated>
    
    <content type="html"><![CDATA[<p>去年在京东买的 Airpod Pro2 售后记录，以前都是在官网买的，还是图省事了。结果闹了个哭笑不得。</p><p>故障问题是，只有一边的耳机有声音，于是京东寄修，得到的答案是没问题，直接给我原反了。然后后台给我一个一张检测单（请记住这个，后面京东后台竟然把这个删了）</p><span id="more"></span><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250709052850888.png" alt="image-20250709052850888"></p><p>所谓京东的人给我打电话，是沈阳口音，然后听起来就是一点不懂技术的样子。说耳机是固件的 bug，然后直接把固件降级然后就好了。</p><p>然后我直接三连问：</p><ol><li>airpod 的固件是自动升级的，用户没办法干预，怎么保证下次自动升级不会再有问题？</li><li>有没有什么硬件问题？有时候合上盖子还有声音？</li><li>有时候一个耳机掉电快，另外一个基本满电能不能看一看？</li></ol><p>口头说好找人看，然后耳机直接给寄回来了，没有任何后续。</p><p>京东 Apple 里的耳机检测图片，一看就很不专业，像是某种小店。一口一个有苹果官方的人员主场，一口一个不解决问题，怕不是外包 hhh</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/9787159f629105169a842120863bc4ed.jpg" alt="9787159f629105169a842120863bc4ed"></p><p>但是，寄回来的耳机仍然是一样的问题。再次申请售后是不予受理。理由是上一次检测没有问题，让我去 Apple 线下自行解决。从普通客服到专员，再到所谓的客服经理无一不如此。真是，体验简直太差。那就让我去 Apple 直营店打你们的脸吧。</p><p>去了 Apple 三里屯，检测确实有硬件问题，左耳机收音有问题，右耳机能隔着盒子放出来声音，于是给换新了。贴一下检测单。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250709055342011.png" alt="image-20250709055342011"></p><p>然后继续去京东 battle，说 apple 给换新了，你们京东为啥检测不出来。然后仍然是不予受理，继续装死。然后默默的把之前检测没问题的单子给删除了。（最前面的一张）</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250709055117286.png" alt="image-20250709055117286"></p><p>这里的红框圈起来的部分，本来是原来那个检测单的，后来竟然给删了，销毁证据，京东你真行。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250709055010618.png" alt="image-20250709055010618"></p><p>以后电子产品大件还怎么放心在京东买啊？</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;去年在京东买的 Airpod Pro2 售后记录，以前都是在官网买的，还是图省事了。结果闹了个哭笑不得。&lt;/p&gt;
&lt;p&gt;故障问题是，只有一边的耳机有声音，于是京东寄修，得到的答案是没问题，直接给我原反了。然后后台给我一个一张检测单（请记住这个，后面京东后台竟然把这个删了）&lt;/p&gt;</summary>
    
    
    
    <category term="Apple" scheme="https://airag.click/categories/Apple/"/>
    
    
    <category term="Apple" scheme="https://airag.click/tags/Apple/"/>
    
  </entry>
  
  <entry>
    <title>懒猫微服开发篇（三）：如何将已有 Docker Compose 应用移植到懒猫微服</title>
    <link href="https://airag.click/posts/5e5f8aaa/"/>
    <id>https://airag.click/posts/5e5f8aaa/</id>
    <published>2025-07-07T16:00:00.000Z</published>
    <updated>2025-07-16T03:17:26.793Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文延续前两篇，演示如何把一个已经在本地运行良好的 Docker Compose 应用打包并上架到懒猫微服应用商店。以 Milvus 为例，逐步拆解 Manifest 配置、路由映射、数据卷绑定以及镜像加速等关键环节，帮助大家快速完成移植。</p></blockquote><h3 id="1-目录结构与核心文件"><a href="#1-目录结构与核心文件" class="headerlink" title="1. 目录结构与核心文件"></a>1. 目录结构与核心文件</h3><p>在懒猫微服中，一个最小可用的应用包仅需两个文件：</p><table><thead><tr><th>文件</th><th>作用</th></tr></thead><tbody><tr><td><code>lzc-build.yml</code></td><td>描述打包流程及应用图标。简单应用只需指定 <code>icon</code> 即可。</td></tr><tr><td><code>lzc-manifest.yml</code></td><td>定义应用元数据与服务编排，是移植的重点。</td></tr></tbody></table><p>本文主要关注 <code>lzc-manifest.yml</code> 的编写。</p><h3 id="2-lzc-manifest-yml-字段逐一解析"><a href="#2-lzc-manifest-yml-字段逐一解析" class="headerlink" title="2. lzc-manifest.yml 字段逐一解析"></a>2. <code>lzc-manifest.yml</code> 字段逐一解析</h3><p>现在有了懒猫应用查看器很方便，我们以商店里的 Milvus 的示例 Manifest 为例，并附带注释说明。</p><span id="more"></span><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250702125730816.png" alt="image-20250702125730816"></p><p>这个 lzc-mainfest.yml 解析是重点。主要是 subdomain，ingress，services 这几个字段。总体上还是延续了 Docker compose 的风格。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">lzc-sdk-version:</span> <span class="string">&quot;0.1&quot;</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">Milvus</span></span><br><span class="line"><span class="attr">package:</span> <span class="string">in.zhaoj.milvus</span></span><br><span class="line"><span class="attr">version:</span> <span class="number">2.5</span><span class="number">.8</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">milvus</span></span><br><span class="line"><span class="attr">application:</span></span><br><span class="line">  <span class="comment"># 子域名：应用上线后将访问 https://milvus.&lt;机器名&gt;.heiyu.space</span></span><br><span class="line">  <span class="attr">subdomain:</span> <span class="string">milvus</span></span><br><span class="line">  <span class="attr">background_task:</span> <span class="literal">false</span> <span class="comment"># 是否允许后台运行</span></span><br><span class="line">  <span class="attr">multi_instance:</span> <span class="literal">false</span> <span class="comment"># 是否允许多实例</span></span><br><span class="line">  <span class="attr">gpu_accel:</span> <span class="literal">false</span> <span class="comment"># 是否请求 GPU</span></span><br><span class="line">  <span class="attr">routes:</span> <span class="comment"># 七层（HTTP）路由</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/=http://attu.in.zhaoj.milvus.lzcapp:3000/</span></span><br><span class="line">  <span class="attr">ingress:</span> <span class="comment"># 四层（TCP）转发</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">tcp</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">19530</span></span><br><span class="line">      <span class="attr">service:</span> <span class="string">standalone</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">tcp</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">9091</span></span><br><span class="line">      <span class="attr">service:</span> <span class="string">standalone</span></span><br><span class="line"><span class="attr">services:</span> <span class="comment"># 以下基本等同于 docker‑compose 中的 services</span></span><br><span class="line">  <span class="attr">etcd:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">registry.lazycat.cloud/longixaoyi/milvusdb/etcd:v3.5.18</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ETCD_AUTO_COMPACTION_MODE=revision</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ETCD_AUTO_COMPACTION_RETENTION=1000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ETCD_QUOTA_BACKEND_BYTES=4294967296</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ETCD_SNAPSHOT_COUNT=50000</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">&gt;</span></span><br><span class="line"><span class="string">      etcd -advertise-client-urls=http://127.0.0.1:2379</span></span><br><span class="line"><span class="string">           -listen-client-urls http://0.0.0.0:2379</span></span><br><span class="line"><span class="string">           --data-dir /etcd</span></span><br><span class="line"><span class="string"></span>    <span class="attr">binds:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/lzcapp/var/etcd:/etcd</span></span><br><span class="line">  <span class="attr">minio:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">registry.lazycat.cloud/longixaoyi/milvusdb/minio:RELEASE.2023-03-20T20-16-18Z</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MINIO_ACCESS_KEY=minioadmin</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MINIO_SECRET_KEY=minioadmin</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">minio</span> <span class="string">server</span> <span class="string">/minio_data</span></span><br><span class="line">    <span class="attr">binds:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/lzcapp/var/minio_data:/minio_data</span></span><br><span class="line">    <span class="attr">health_check:</span></span><br><span class="line">      <span class="attr">test:</span> [<span class="string">&quot;CMD&quot;</span>, <span class="string">&quot;curl&quot;</span>, <span class="string">&quot;-f&quot;</span>, <span class="string">&quot;http://localhost:9000/minio/health/live&quot;</span>]</span><br><span class="line">  <span class="attr">standalone:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">registry.lazycat.cloud/longixaoyi/milvusdb/milvus:v2.6.0-rc1</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">milvus</span> <span class="string">run</span> <span class="string">standalone</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ETCD_ENDPOINTS=etcd:2379</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MINIO_ADDRESS=minio:9000</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">etcd</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">minio</span></span><br><span class="line">    <span class="attr">binds:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/lzcapp/var/milvus:/var/lib/milvus</span></span><br><span class="line">  <span class="attr">attu:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">registry.lazycat.cloud/longixaoyi/zilliz/attu:latest</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MILVUS_URL=standalone:19530</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">standalone</span></span><br></pre></td></tr></table></figure><h4 id="2-1-subdomain"><a href="#2-1-subdomain" class="headerlink" title="2.1 subdomain"></a>2.1 <code>subdomain</code></h4><p>subdomain 是应用程序上线的域名，例如上述配置上线后即为 <code>https://milvus.&lt;节点名&gt;.heiyu.space</code>。</p><h4 id="2-2-routes"><a href="#2-2-routes" class="headerlink" title="2.2 routes"></a>2.2 <code>routes</code></h4><p>route 来做七层的 HTTP 转发，类似 Nginx 的反向代理。规则格式为 <code>本地路径 = 目标 URL</code>。在示例中，根路径 <code>/</code> 被转发到前端服务 <code>attu</code> 的 3000 端口。</p><p>URL 规则：服务名.包名.lzcapp:端口。（包名随意起）</p><pre><code>- /=http://attu.in.zhaoj.milvus.lzcapp:3000/</code></pre><p>这里 attu 是服务名，端口是 3000，in.zhaoj.milvus 是包名。</p><h4 id="2-3-ingress"><a href="#2-3-ingress" class="headerlink" title="2.3 ingress"></a>2.3 <code>ingress</code></h4><p>用于四层直通转发，适用于非 HTTP 协议（数据库、SSH 等）。示例将 Milvus 的 gRPC (19530) 与 HTTP (9091) 端口暴露给外部。</p><h4 id="2-4-bind"><a href="#2-4-bind" class="headerlink" title="2.4 bind"></a>2.4 <code>bind</code></h4><p>Manifest 中的绑定路径以 <code>/lzcapp/var</code> 为前缀。发布后会被映射到宿主机的 <code>/data/app/var/&lt;package&gt;</code>，也算是为了简化程序移植和学习成本。和 Docker-compose 写绝对路径来说，这里的可移植性执行更好。</p><p>健康检查在这里不是必须的，因为打包的上架的时候服务会帮忙做这个事情。</p><h3 id="3-服务映射与-docker-compose-yml-对照"><a href="#3-服务映射与-docker-compose-yml-对照" class="headerlink" title="3. 服务映射与 docker-compose.yml 对照"></a>3. 服务映射与 <code>docker-compose.yml</code> 对照</h3><p>懒猫 Manifest 的 <code>services</code> 段几乎一一复刻了传统 Compose 配置，常用键均保持一致。以下列出了 Milvus 官方 <code>docker-compose.yml</code>，方便对照理解：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.5&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">etcd:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">milvus-etcd</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">quay.io/coreos/etcd:v3.5.18</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ETCD_AUTO_COMPACTION_MODE=revision</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ETCD_AUTO_COMPACTION_RETENTION=1000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ETCD_QUOTA_BACKEND_BYTES=4294967296</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ETCD_SNAPSHOT_COUNT=50000</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;DOCKER_VOLUME_DIRECTORY:-.&#125;/volumes/etcd:/etcd</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">etcd</span> <span class="string">-advertise-client-urls=http://etcd:2379</span> <span class="string">-listen-client-urls</span> <span class="string">http://0.0.0.0:2379</span> <span class="string">--data-dir</span> <span class="string">/etcd</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> [<span class="string">&quot;CMD&quot;</span>, <span class="string">&quot;etcdctl&quot;</span>, <span class="string">&quot;endpoint&quot;</span>, <span class="string">&quot;health&quot;</span>]</span><br><span class="line">      <span class="attr">interval:</span> <span class="string">30s</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">20s</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">minio:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">milvus-minio</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">minio/minio:RELEASE.2023-03-20T20-16-18Z</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MINIO_ACCESS_KEY:</span> <span class="string">minioadmin</span></span><br><span class="line">      <span class="attr">MINIO_SECRET_KEY:</span> <span class="string">minioadmin</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9001:9001&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9000:9000&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;DOCKER_VOLUME_DIRECTORY:-.&#125;/volumes/minio:/minio_data</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">minio</span> <span class="string">server</span> <span class="string">/minio_data</span> <span class="string">--console-address</span> <span class="string">&quot;:9001&quot;</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> [<span class="string">&quot;CMD&quot;</span>, <span class="string">&quot;curl&quot;</span>, <span class="string">&quot;-f&quot;</span>, <span class="string">&quot;http://localhost:9000/minio/health/live&quot;</span>]</span><br><span class="line">      <span class="attr">interval:</span> <span class="string">30s</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">20s</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">standalone:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">milvus-standalone</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">milvusdb/milvus:v2.6.0-rc1</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;milvus&quot;</span>, <span class="string">&quot;run&quot;</span>, <span class="string">&quot;standalone&quot;</span>]</span><br><span class="line">    <span class="attr">security_opt:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">seccomp:unconfined</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">ETCD_ENDPOINTS:</span> <span class="string">etcd:2379</span></span><br><span class="line">      <span class="attr">MINIO_ADDRESS:</span> <span class="string">minio:9000</span></span><br><span class="line">      <span class="attr">MQ_TYPE:</span> <span class="string">woodpecker</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;DOCKER_VOLUME_DIRECTORY:-.&#125;/volumes/milvus:/var/lib/milvus</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> [<span class="string">&quot;CMD&quot;</span>, <span class="string">&quot;curl&quot;</span>, <span class="string">&quot;-f&quot;</span>, <span class="string">&quot;http://localhost:9091/healthz&quot;</span>]</span><br><span class="line">      <span class="attr">interval:</span> <span class="string">30s</span></span><br><span class="line">      <span class="attr">start_period:</span> <span class="string">90s</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">20s</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">3</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;19530:19530&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9091:9091&quot;</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;etcd&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;minio&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">default:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">milvus</span></span><br></pre></td></tr></table></figure><p>差异点主要体现在：</p><ul><li>镜像源：建议通过 <code>lzc-cli appstore copy-image &lt;image&gt;</code> 把镜像同步到 <code>registry.lazycat.cloud</code>，解决国内网络拉取问题。</li><li>端口声明：在 Manifest 中，外部访问端口通过 <code>ingress</code>，不再使用 Compose 的 <code>ports</code>。</li><li>健康检查：懒猫平台会统一探测容器存活，可按需省略 <code>healthcheck</code>。</li></ul><h3 id="4-镜像加速实践"><a href="#4-镜像加速实践" class="headerlink" title="4. 镜像加速实践"></a>4. 镜像加速实践</h3><p>一条命令即可完成镜像复制并输出新的仓库地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">lzc-cli appstore copy-image nginx                                                                                                                           (base) 13:15:36</span><br><span class="line">Waiting ... ( copy nginx to lazycat offical registry)</span><br><span class="line">uploading</span><br><span class="line">23e05839: [####################################################################################################] 100%</span><br><span class="line">23e05839: [####################################################################################################] 100%</span><br><span class="line">23e05839: [####################################################################################################] 100%</span><br><span class="line">3da95a90: [####################################################################################################] 100%</span><br><span class="line">48670a58: [####################################################################################################] 100%</span><br><span class="line">6c8e51cf: [####################################################################################################] 100%</span><br><span class="line">9bbbd7ee: [####################################################################################################] 100%</span><br><span class="line">ce713206: [####################################################################################################] 100%</span><br><span class="line">ee95256d: [####################################################################################################] 100%</span><br><span class="line"></span><br><span class="line">uploaded:  registry.lazycat.cloud/u04123229/library/nginx:d037205fbaf7d60a</span><br></pre></td></tr></table></figure><p>将生成的地址替换到 Manifest 的 <code>image</code> 字段即可。</p><h3 id="5-小结"><a href="#5-小结" class="headerlink" title="5. 小结"></a>5. 小结</h3><ul><li>Manifest 为核心：<code>lzc-manifest.yml</code> 描述了全部运行时需求，移植时优先完善此文件。</li><li>路由分层：<code>routes</code> 管理 HTTP，<code>ingress</code> 管理 TCP，二者配合即可覆盖绝大多数场景。</li><li>统一数据目录：使用 <code>/lzcapp/var</code> 避免硬编码路径，便于跨节点迁移。</li><li>镜像国内托管：通过 <code>lzc-cli appstore copy-image</code> 自动同步到 LazyCat Registry，稳定又快速。</li></ul><p>至此，Milvus 的 Docker Compose 应用已成功移植到懒猫微服。更多进阶玩法，例如 OIDC、VNC 集成等，我们将在后续文章继续分享。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文延续前两篇，演示如何把一个已经在本地运行良好的 Docker Compose 应用打包并上架到懒猫微服应用商店。以 Milvus 为例，逐步拆解 Manifest 配置、路由映射、数据卷绑定以及镜像加速等关键环节，帮助大家快速完成移植。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;1-目录结构与核心文件&quot;&gt;&lt;a href=&quot;#1-目录结构与核心文件&quot; class=&quot;headerlink&quot; title=&quot;1. 目录结构与核心文件&quot;&gt;&lt;/a&gt;1. 目录结构与核心文件&lt;/h3&gt;&lt;p&gt;在懒猫微服中，一个最小可用的应用包仅需两个文件：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;文件&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;code&gt;lzc-build.yml&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;描述打包流程及应用图标。简单应用只需指定 &lt;code&gt;icon&lt;/code&gt; 即可。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;lzc-manifest.yml&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;定义应用元数据与服务编排，是移植的重点。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;本文主要关注 &lt;code&gt;lzc-manifest.yml&lt;/code&gt; 的编写。&lt;/p&gt;
&lt;h3 id=&quot;2-lzc-manifest-yml-字段逐一解析&quot;&gt;&lt;a href=&quot;#2-lzc-manifest-yml-字段逐一解析&quot; class=&quot;headerlink&quot; title=&quot;2. lzc-manifest.yml 字段逐一解析&quot;&gt;&lt;/a&gt;2. &lt;code&gt;lzc-manifest.yml&lt;/code&gt; 字段逐一解析&lt;/h3&gt;&lt;p&gt;现在有了懒猫应用查看器很方便，我们以商店里的 Milvus 的示例 Manifest 为例，并附带注释说明。&lt;/p&gt;</summary>
    
    
    
    <category term="懒猫微服" scheme="https://airag.click/categories/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
    
    <category term="开发" scheme="https://airag.click/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>高版本的MacOS如何降级？</title>
    <link href="https://airag.click/posts/5b6f9bd/"/>
    <id>https://airag.click/posts/5b6f9bd/</id>
    <published>2025-07-07T16:00:00.000Z</published>
    <updated>2025-07-16T03:17:26.799Z</updated>
    
    <content type="html"><![CDATA[<p>很早问过Apple客服MacOS的降级机制，半天也没说明白。但是M芯片的Macbook经常崩溃，如果说windows的蓝屏时，那我这个MacBook就能崩溃出彩虹色。</p><p>寻找过Apple支持，答案就是升级系统。Apple的行政关系团队给我找了一个非常不靠谱的人，一问三不知，问她什么就是再转问工程团队，然后所有的事情都推第三方软件。然后行政关系团队陈某说对技术不做评价，然后一再坚持他们的人都是专业培训上岗的，然后坚持不换人，坚持不解决电脑问题来给客户扣不配合的帽子。</p><span id="more"></span><p>然后一直拖到过保。以前iphone接不到电话是这样，现在Macbook还是这样。</p><p>言归正传。Mac刷机一般几种办法。</p><ol><li>U盘刷机，这个是传统了，玩过PE的都懂。</li><li>系统内格式化：就跟手机差不多的那种。个人感觉不彻底。</li><li>DFU刷机：需要你有另外一个MacOS的电脑。类似于安卓线刷。</li></ol><p>MacOS降级我采用的是U盘装机。参考这个帖子</p><p><a href="https://support.apple.com/zh-cn/101578">https://support.apple.com/zh-cn/101578</a></p><p>从Apple Store下载OS，然后把U盘的label改成&#x2F;Volumes&#x2F;MyVolume，最后做随身碟</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250708203135382.png" alt="image-20250708203135382"></p><p>可以选择各个MacOS大版本的最后的release。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250708203344815.png" alt="image-20250708203344815"></p><p>烧录命令是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> /Applications/Install\ macOS\ Ventura.app/Contents/Resources/createinstallmedia --volume /Volumes/MyVolume</span><br></pre></td></tr></table></figure><p>如果需要其他的系统，那么换一个版本号即可。</p><p>我的23年的M2 Pro，当时出长的时候是MacOS13 Ventura，所以当我想换回MacOS12的时候下载都报错。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250708203409606.png" alt="image-20250708203409606"></p><p>如果直接安装还会报错：这个卷无法降级。（不理解这个操作，windows的话随便格式化）</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/de83700ed1e47e0386ebf756f594c4d3.jpg" alt="de83700ed1e47e0386ebf756f594c4d3"></p><p>需要进入磁盘工具降级：</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/v2-674c2048221fed20e5536c5aa67ff964_1440w.webp" alt="img"></p><p>然后安装就可可以了，剩下就是漫长的等待。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250708203801861.png" alt="image-20250708203801861"></p><p>从Intel黑苹果时代走过来的，结果白的还没黑的好用。。。。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;很早问过Apple客服MacOS的降级机制，半天也没说明白。但是M芯片的Macbook经常崩溃，如果说windows的蓝屏时，那我这个MacBook就能崩溃出彩虹色。&lt;/p&gt;
&lt;p&gt;寻找过Apple支持，答案就是升级系统。Apple的行政关系团队给我找了一个非常不靠谱的人，一问三不知，问她什么就是再转问工程团队，然后所有的事情都推第三方软件。然后行政关系团队陈某说对技术不做评价，然后一再坚持他们的人都是专业培训上岗的，然后坚持不换人，坚持不解决电脑问题来给客户扣不配合的帽子。&lt;/p&gt;</summary>
    
    
    
    <category term="Apple" scheme="https://airag.click/categories/Apple/"/>
    
    
    <category term="Apple" scheme="https://airag.click/tags/Apple/"/>
    
  </entry>
  
  <entry>
    <title>懒猫微服实战入门（十八）：用 planka 做项目管理</title>
    <link href="https://airag.click/posts/51800531/"/>
    <id>https://airag.click/posts/51800531/</id>
    <published>2025-07-06T16:00:00.000Z</published>
    <updated>2025-07-16T03:17:26.791Z</updated>
    
    <content type="html"><![CDATA[<p>工作里用 Jira 管理项目进度。家里也是想找个类似的软件来管理一些长期的事情，如果能带一多人合作的功能就更好了。在网上找了很久也没有太好用的，直到在懒猫微服中找到 planka，在对比了几个同类型的软件之后，决定使用这个软件来管理自己的一些事情。</p><span id="more"></span><p>其他的软件体验不佳的点主要是：</p><ol><li>付费：还都是订阅制，没有找到终身制的软件</li><li>界面太丑，操作太复杂</li><li>Saas 免费版本延迟太高</li><li>移动端访问体验不佳</li></ol><p>Planka 算是解决了大部分的问题：</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250706142600994.png" alt="image-20250706142600994">虽然这个页面不是很现代化风格，但是也不丑，页面响应速度很快。而其他软件大多臃肿体验不佳，要么就是延迟的很高耽误体验。</p><p>简介的 UI 和快速的响应很好的诠释了 less is more 的原则。</p><p>进入主页之后可以新建多个项目，算是一个隔离吧，虽然我目前也只是用到了一个。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250706140800760.png" alt="image-20250706140800760"></p><p>每一个 Project 都能开好几个 board，这样就把不同类别的事情跟区分开了。</p><p>然后每个 board 上标注 Todo，Doing，Pending，Done，Deprecated 来确认事情的进度。有点白版卡片的那个味道了，不用自己像线下那种写贴纸来回移动，也不用再花费软件的订阅的费用。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/103a3a28-0ceb-466d-9d96-50161d150b04.png" alt="103a3a28-0ceb-466d-9d96-50161d150b04"></p><p>这个是我和前端协作开发时候一起做的 Dashboard，当时在一起开发一个前后端分离的大语言模型的 APP。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/8703083443e36972236a8450eab7c1c7.png" alt="8703083443e36972236a8450eab7c1c7"></p><p>只要给他新建一个用户就可以了，然后分给他某个面板的权限，然后就可以可以一起愉快的协作了。（前提给他安装了懒猫微服的客户端，分了 app 权限）</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250706145557778.png" alt="image-20250706145557778"></p><p>这个是面板的详细参数，可以把 task 分配给某个成员，然后也可以添加 task 描述，task 子任务拆解以及成员评论，拿来记录一些 change log 还是不错的，起码测试的一些过程可以随手记录在这里了。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250706140941967.png" alt="image-20250706140941967"></p><p>Dashboard 功能还需要继续探索，比如计时，打标签一些的功能。</p><p>不过我目前用到的功能就这么多，也算能基本覆盖全部的场景了。</p><p>这个是我用 planka 来追踪关于懒猫微服的写作和上架应用的一些事情，真的帮助了我很多很多。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250707080727189.png" alt="image-20250707080727189"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;工作里用 Jira 管理项目进度。家里也是想找个类似的软件来管理一些长期的事情，如果能带一多人合作的功能就更好了。在网上找了很久也没有太好用的，直到在懒猫微服中找到 planka，在对比了几个同类型的软件之后，决定使用这个软件来管理自己的一些事情。&lt;/p&gt;</summary>
    
    
    
    <category term="懒猫微服" scheme="https://airag.click/categories/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
    
    <category term="懒猫微服" scheme="https://airag.click/tags/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
  </entry>
  
  <entry>
    <title>懒猫微服开发篇（二）：远程调试之 Devshell</title>
    <link href="https://airag.click/posts/2c167bb4/"/>
    <id>https://airag.click/posts/2c167bb4/</id>
    <published>2025-07-06T16:00:00.000Z</published>
    <updated>2025-07-16T03:17:26.793Z</updated>
    
    <content type="html"><![CDATA[<p>我们上一篇讲述了如何打包上架 APP，这期我们就来看如何远程调试即将上架的 APP。</p><p>简单来讲，这个 devshell 其实就是在微服上打开了一个虚拟机环境，然后我们可以进去里面测试我们的命令。非要说技术实现，那就是 docker exec 了。只不过是做成了本地和微服之间同步的样子。</p><p>输入微服的名字&#x2F;v2&#x2F;_catalog，可以看到微服里面 Docker 仓库存放的镜像，debug.bridge 开头的就是 devshell 的 image。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;repositories&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;debug.bridge/231ee20d4e4d8edbd2004e7609fd9c15&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;debug.bridge/ddc6dbf609125b7bd2c0efb0ed4254d1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;helloworld&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>在 lzc-build.yml 里定义了 devshell 的配置，这个的意思是就是安装 node 和 python 的环境，设置国内源，然后讲根目录转发到 5173，这个是 vue 的端口。所以我们可以推断，这个是一个 Vue+python 的全栈项目，所以我们可以开两个终端来进入 devshell，分别调试前后端。</p><span id="more"></span><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">devshell:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/=http://127.0.0.1:5173</span></span><br><span class="line">  <span class="attr">dependencies:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">nodejs</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">python3</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">py3-pip</span></span><br><span class="line">  <span class="attr">setupscript:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    export npm_config_registry=https://registry.npmmirror.com</span></span><br><span class="line"><span class="string">    export PIP_INDEX_URL=https://pypi.tuna.tsinghua.edu.cn/simple</span></span><br></pre></td></tr></table></figure><p>使用 lzc-cli project devshell -f 进入 devshell，可以看到这个使用了 registry.lazycat.cloud&#x2F;lzc-cli&#x2F;devshell 作为 base image，然后换源安装依赖。最后设置 setupscript 里面的 ENV。而 CMD [“sleep”, “infinity”]<code>会让容器启动后执行</code>sleep infinity&#96; 命令，即无限休眠。目的是防止容器因没有前台进程而自动退出（保持容器处于“运行”状态）。</p><p>这里有个问题，如果你在 lzc-manifest.yml 里指定了 routes 也同样会生效。如果你要跑一些初始化脚本，可以在使用这两个办法</p><ol><li>在 lzc-manifest.yml 文件中使用&#x2F;api&#x2F;&#x3D;exec:&#x2F;&#x2F;3000,.&#x2F;lzcapp&#x2F;pkg&#x2F;content&#x2F;backend&#x2F;run.sh</li><li>lzc-build.yml 中注入脚本 setupscript。</li></ol><p>如果你偷懒在 lzc-build.yml 里 routes 的执行&#x2F;api&#x2F;&#x3D;exec:&#x2F;&#x2F;3000,.&#x2F;lzcapp&#x2F;pkg&#x2F;cache&#x2F;backend&#x2F;run.sh，似乎也只能转发端口，不能运行脚本。</p><p>从日志看，也就是说还是安装了一个应用程序上去，只不过我们可以通过类似 ssh remote 的方式来动态调试。如果 APP 上架之后，能做的恐怕只有 lzc-docker exec 了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">跳过执行 buildscript</span><br><span class="line">跳过拷贝 contentdir 内容</span><br><span class="line"></span><br><span class="line">Dockerfile</span><br><span class="line">STEP 1/4: FROM registry.lazycat.cloud/lzc-cli/devshell:v0.0.5</span><br><span class="line">STEP 2/4: RUN sed -i &#x27;s/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g&#x27; /etc/apk/repositories</span><br><span class="line">--&gt; Using cache 2302149ded79afb639f9935a07e7ea0d63b5644b10e9890d49ad06786e7b31db</span><br><span class="line">--&gt; 2302149ded79</span><br><span class="line">STEP 3/4: RUN apk add --no-cache bash nodejs npm py3-pip python3   &amp;&amp; echo &quot;root:root&quot; | chpasswd</span><br><span class="line">--&gt; Using cache 9bb679fa2c9d10ab1a2433be4c59c852affb2a6844c62ecd9eb8d727505821fb</span><br><span class="line">--&gt; 9bb679fa2c9d</span><br><span class="line">STEP 4/4: CMD [&quot;sleep&quot;, &quot;infinity&quot;]</span><br><span class="line">--&gt; Using cache 5ed701af0e0f7040c3dc5409f547b271b4f4e792fd4fcbfc4af8a3abecf8d363</span><br><span class="line">COMMIT debug.bridge/ddc6dbf609125b7bd2c0efb0ed4254d1:latest</span><br><span class="line">--&gt; 5ed701af0e0f</span><br><span class="line">Successfully tagged debug.bridge/ddc6dbf609125b7bd2c0efb0ed4254d1:latest</span><br><span class="line">5ed701af0e0f7040c3dc5409f547b271b4f4e792fd4fcbfc4af8a3abecf8d363</span><br><span class="line">Getting image source signatures</span><br><span class="line">Copying blob sha256:c164879b06ca56693b742ec917059cce495320d4d8f6140bde7e875f53377ea1</span><br><span class="line">Copying blob sha256:69bc8c25bce956e4c34fdfee091c531ffa8660454526ea9f76c956f9b930c57b</span><br><span class="line">Copying blob sha256:98e60e58e2d093fd95b5d5d61ae6dac25bff89ba1b46d42395d480dfb75bddab</span><br><span class="line">Copying blob sha256:d4fc045c9e3a848011de66f34b81f052d4f2c15a17bb196d637e526349601820</span><br><span class="line">Copying blob sha256:b244bd08b327b00bfbbbbf4f424ade914ee891a52d9192a573dbe484e22d86ab</span><br><span class="line">Copying config sha256:5ed701af0e0f7040c3dc5409f547b271b4f4e792fd4fcbfc4af8a3abecf8d363</span><br><span class="line">Writing manifest to image destination</span><br><span class="line">输出lpk包 /Users/xu/Desktop/todolist-py-lzcapp-demo/cloud.lazycat.app.todolistpy-v0.0.1.lpk</span><br><span class="line">开始部署应用</span><br><span class="line">开始安装应用</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">安装成功！</span><br><span class="line">👉 请在浏览器中访问 https://todolistpy.dev.heiyu.space</span><br><span class="line">👉 并使用微服的用户名和密码登录</span><br><span class="line"></span><br><span class="line">+ export &#x27;npm_config_registry=https://registry.npmmirror.com&#x27;</span><br><span class="line">+ export &#x27;PIP_INDEX_URL=https://pypi.tuna.tsinghua.edu.cn/simple&#x27;</span><br><span class="line">+ set -e</span><br><span class="line">+ mkdir -p /lzcapp/cache/devshell</span><br><span class="line"></span><br><span class="line">+ cd /lzcapp/cache/devshell</span><br><span class="line">+ exec /bin/sh</span><br><span class="line">/lzcapp/cache/devshell #</span><br><span class="line">/lzcapp/cache/devshell # ls</span><br><span class="line">README.md         backend           build.sh          lzc-build.yml     lzc-icon.png      lzc-manifest.yml  ui</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们可以看到文件夹的内容已经被同步过来了，我们可以实时同步开发机文件的创建和修改。不过目前和移动，重命名相关的同步有点小问题，具体表现为</p><ol><li>本地删除旧的文件，但是 devshell 里不会同步删除</li><li>删除文件 a，但是把 b 重名为 a，devshell 不会同步更改（但是删除 a 重建可以）</li></ol><p>相信这两个小问题修好也只是时间问题，当然也有 workaround。</p><p>从&#x2F;data&#x2F;app&#x2F;cache&#x2F;包名这个目录删除 devshell 文件夹之后，然后重新执行 lzc-cli project devshell -f ，这样工作区就被清理干净了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(base) lzcbox-029c588e /data/app/cache/cloud.lazycat.app.todolistpy <span class="comment"># ls</span></span><br><span class="line">devshell</span><br><span class="line">(base) lzcbox-029c588e /data/app/cache/cloud.lazycat.app.todolistpy <span class="comment"># cd devshell/</span></span><br><span class="line">(base) lzcbox-029c588e /data/app/cache/cloud.lazycat.app.todolistpy/devshell <span class="comment"># ls</span></span><br><span class="line">1  1312  README.md  backend  build.sh  lzc-build.yml  lzc-icon.png  lzc-manifest.yml  ui</span><br></pre></td></tr></table></figure><p>另外，我们再通过 ssh 进入&#x2F;data&#x2F;app 这个目录，有两个子文件夹，一个叫做 cache，一个叫做 var。 cache 就是我们这个 devshell 的工作区。var 就是数据持久化的目录。如果在这里新建一个目录，那么就可以在网盘里实时看到。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/data/app/var/xu.deploy.lazycat-nav <span class="comment"># touch test</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250702063901802.png" alt="image-20250702063901802"></p><p>以上就是 devshell 的全部内容了，如果你需要借助微服的一些特性还进行开发，比如获取环境变量，OIDC 什么的，可以用这个方法来轻松调试。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;我们上一篇讲述了如何打包上架 APP，这期我们就来看如何远程调试即将上架的 APP。&lt;/p&gt;
&lt;p&gt;简单来讲，这个 devshell 其实就是在微服上打开了一个虚拟机环境，然后我们可以进去里面测试我们的命令。非要说技术实现，那就是 docker exec 了。只不过是做成了本地和微服之间同步的样子。&lt;/p&gt;
&lt;p&gt;输入微服的名字&amp;#x2F;v2&amp;#x2F;_catalog，可以看到微服里面 Docker 仓库存放的镜像，debug.bridge 开头的就是 devshell 的 image。&lt;/p&gt;
&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;punctuation&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&amp;quot;repositories&amp;quot;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;punctuation&quot;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&amp;quot;debug.bridge/231ee20d4e4d8edbd2004e7609fd9c15&amp;quot;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&amp;quot;debug.bridge/ddc6dbf609125b7bd2c0efb0ed4254d1&amp;quot;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&amp;quot;helloworld&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;punctuation&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在 lzc-build.yml 里定义了 devshell 的配置，这个的意思是就是安装 node 和 python 的环境，设置国内源，然后讲根目录转发到 5173，这个是 vue 的端口。所以我们可以推断，这个是一个 Vue+python 的全栈项目，所以我们可以开两个终端来进入 devshell，分别调试前后端。&lt;/p&gt;</summary>
    
    
    
    <category term="懒猫微服" scheme="https://airag.click/categories/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
    
    <category term="开发" scheme="https://airag.click/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>懒猫微服开发篇（六）:用 Openresty 做反向代理来解决跨域问题</title>
    <link href="https://airag.click/posts/300338c6/"/>
    <id>https://airag.click/posts/300338c6/</id>
    <published>2025-07-04T16:00:00.000Z</published>
    <updated>2025-07-16T03:17:26.793Z</updated>
    
    <content type="html"><![CDATA[<p>对于 Web 开发而言， 经常会遇到跨域问题。我们先来看一下什么是跨域问题：</p><p><strong>跨域问题（Cross-Origin）</strong>本质上是浏览器的<strong>同源策略（Same-Origin Policy, SOP）</strong>在发挥作用：</p><blockquote><p><strong>同源</strong>指“协议 + 域名（或 IP）+ 端口”三要素完全一致。只要三者有任何一个不同，就被视为<strong>跨域</strong>。</p></blockquote><h4 id="为什么浏览器要限制跨域？"><a href="#为什么浏览器要限制跨域？" class="headerlink" title="为什么浏览器要限制跨域？"></a>为什么浏览器要限制跨域？</h4><ul><li><strong>安全</strong>：阻止一个站点随意读取或修改另一个站点的敏感资源（如 Cookie、LocalStorage、DOM），避免 XSS、CSRF 等攻击链被无限放大。</li><li><strong>隔离</strong>：让不同网站在沙盒里各自运行，互不干扰。</li></ul><blockquote><p>同源策略只在<strong>浏览器环境</strong>生效；后端服务之间（如服务器 A 请求服务器 B）并没有 SOP 的限制。</p></blockquote> <span id="more"></span><table><thead><tr><th>场景</th><th>描述</th><th>是否受限</th></tr></thead><tbody><tr><td><code>fetch(&#39;https://api.foo.com&#39;)</code> 从 <code>https://www.bar.com</code> 发出</td><td>协议、域名不同</td><td><strong>受限</strong></td></tr><tr><td><code>http://example.com:3000</code> 调用 <code>http://example.com:4000</code></td><td>端口不同</td><td><strong>受限</strong></td></tr></tbody></table><blockquote><p>⚠️ <strong>用 Nginx&#x2F;OpenResty 并不会“自动”解决 CORS</strong>。</p><ul><li>你可以把前端请求代理到后端 API，使浏览器认为请求仍在同一域名下，达到“变同源”的效果。</li><li>或者直接在后端&#x2F;代理层加 CORS 响应头，两种方式都可以。</li></ul></blockquote><p>懒猫微服的上使用的是 OpenResty，这是一个功能齐全的 Web 应用服务器，它集成了标准的 nginx core、大量第三方 nginx 模块以及它们的大部分外部依赖项。所以和 Nginx 的配置文件是通用的。</p><p>以我之前比赛做的项目为例，这个是 Nginx 作为网关，监听 80 端口，然后反向代理到 Next.js 和 Flask。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">build:</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">.</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">Dockerfile</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;80:80&quot;</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">next-app</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">backend</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">next-app:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">smart-shopping-app</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">next-frontend</span></span><br><span class="line">    <span class="attr">expose:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3000&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">NODE_ENV=production</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">NEXT_TELEMETRY_DISABLED=1</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">backend:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">shoppingassistant-backend</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">backend-app</span></span><br><span class="line">    <span class="attr">expose:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;5005&quot;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br></pre></td></tr></table></figure><p>而 Nginx 的配置文件如写，做七成的转发，把根路径转发到前端，&#x2F;api 转发到后端。所以前端的 axios 请求等于访问的&#x2F;api 这个端点，所以可以规避跨域的问题。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name localhost;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://next-app:3000;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /api &#123;</span><br><span class="line">        proxy_pass http://backend:5005;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实对于懒猫微服的 OpenResty 的也是一样的，好处是不用自己再找 base image 了，直接把配置文件写进去就能用了。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">lzc-sdk-version:</span> <span class="string">&quot;0.1&quot;</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">APP</span> <span class="string">Proxy</span> <span class="string">Test</span></span><br><span class="line"><span class="attr">package:</span> <span class="string">cloud.lazycat.app.app-proxy-test</span></span><br><span class="line"><span class="attr">version:</span> <span class="number">0.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">application:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/=http://app-proxy.cloud.lazycat.app.app-proxy-test.lzcapp:80</span></span><br><span class="line">  <span class="attr">subdomain:</span> <span class="string">app-proxy-test</span> <span class="comment">#</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">app-proxy:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">registry.lazycat.cloud/app-proxy:v0.1.0</span></span><br><span class="line">    <span class="attr">setup_script:</span> <span class="string">|</span></span><br><span class="line"><span class="string">      cat &lt;&lt;&#x27;EOF&#x27; &gt; /etc/nginx/conf.d/default.conf</span></span><br><span class="line"><span class="string">      server &#123;</span></span><br><span class="line"><span class="string">          listen 80;</span></span><br><span class="line"><span class="string">          server_name _;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">          <span class="comment"># 静态页面</span></span><br><span class="line">          <span class="string">location</span> <span class="string">/</span> &#123;</span><br><span class="line">              <span class="string">root</span>   <span class="string">/usr/local/openresty/nginx/html;</span></span><br><span class="line">              <span class="string">index</span>  <span class="string">index.html</span> <span class="string">index.htm;</span></span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment"># API 反向代理，保留 /api 前缀</span></span><br><span class="line">          <span class="string">location</span> <span class="string">/api/</span> &#123;</span><br><span class="line">              <span class="string">proxy_pass</span> <span class="string">http://flask:5000/;</span></span><br><span class="line">              <span class="string">proxy_set_header</span> <span class="string">Host</span> <span class="string">$host;</span></span><br><span class="line">              <span class="string">proxy_set_header</span> <span class="string">X-Real-IP</span> <span class="string">$remote_addr;</span></span><br><span class="line">              <span class="string">proxy_set_header</span> <span class="string">X-Forwarded-For</span> <span class="string">$proxy_add_x_forwarded_for;</span></span><br><span class="line">          &#125;</span><br><span class="line">      <span class="string">&#125;</span></span><br><span class="line">      <span class="string">EOF</span></span><br><span class="line">  <span class="attr">flask:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">registry.lazycat.cloud/u04123229/cloudsmithy/flask-demo:c14689303facd82c</span></span><br></pre></td></tr></table></figure><p>flask 的 image 是我之前做的一个镜像仓库<code>docker run -p 5005:5000 cloudsmithy/flask-demo:latest</code></p><p>然后通过<code>lzc-cli appstore copy-image cloudsmithy/flask-demo</code> 把镜像换成懒猫的镜像，<code>registry.lazycat.cloud/u04123229/cloudsmithy/flask-demo:c14689303facd82c</code></p><p>通过<code>setup_script</code>传入和 Nginx 类似的配置文件，原理是替换 docker image 本身的 entrypoint&#x2F;command 参数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打包成 LPK</span></span><br><span class="line">lzc-cli project build -o release.lpk</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在线安装 LPK</span></span><br><span class="line">lzc-cli app install release.lpk</span><br></pre></td></tr></table></figure><p>我们可以看到这个是 OpenResty 的主页，然后访问<code>https://app-proxy-test.micro.heiyu.space/api/</code> 也能返回 Flask 容器“Hello from multi-arch Flask Docker in production mode!”。<br><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250704120859972.png" alt="image-20250704120859972"></p><p>如果你想把根路由直接代理到容器，也可以使用这个办法。这个一般是用来做反向代理来访问内网的服务，即使是 http 也没有关系。这个环境变量应该是懒猫魔改的快捷方式。不要和配置文件混用。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">lzc-sdk-version:</span> <span class="string">&quot;0.1&quot;</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">APP</span> <span class="string">Proxy</span> <span class="string">Test</span></span><br><span class="line"><span class="attr">package:</span> <span class="string">cloud.lazycat.app.app-proxy-test</span></span><br><span class="line"><span class="attr">version:</span> <span class="number">0.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">application:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/=http://app-proxy.cloud.lazycat.app.app-proxy-test.lzcapp:80</span></span><br><span class="line">  <span class="attr">subdomain:</span> <span class="string">app-proxy-test</span> <span class="comment">#</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">app-proxy:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">registry.lazycat.cloud/app-proxy:v0.1.0</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">UPSTREAM=&quot;http://flask:5000&quot;</span></span><br><span class="line">  <span class="attr">flask:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">registry.lazycat.cloud/u04123229/cloudsmithy/flask-demo:c14689303facd82c</span></span><br></pre></td></tr></table></figure><p>有时候还会加上<code>BASIC_AUTH_HEADER</code>这个字段来让 nginx&#x2F;Openresty 自动填写密码，除了你的容器以外，代理外边服务也行。</p><p>其实用<code>echo -n &quot;user:password&quot; | base64</code>,的数据来填充<code>BASIC_AUTH_HEADER</code>“Basic <base64> “</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">lzc-sdk-version:</span> <span class="string">&quot;0.1&quot;</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">APP</span> <span class="string">Proxy</span> <span class="string">Test</span></span><br><span class="line"><span class="attr">package:</span> <span class="string">cloud.lazycat.app.app-proxy-test</span></span><br><span class="line"><span class="attr">version:</span> <span class="number">0.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">application:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/=http://app-proxy.cloud.lazycat.app.app-proxy-test.lzcapp:80</span></span><br><span class="line">  <span class="attr">subdomain:</span> <span class="string">app-proxy-test</span> <span class="comment">#</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">app-proxy:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">registry.lazycat.cloud/app-proxy:v0.1.0</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">UPSTREAM=&quot;https://xxx:9200/&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">BASIC_AUTH_HEADER=&quot;Basic</span> <span class="string">YWRt46YzssdsfFlOk=&quot;</span></span><br><span class="line">  <span class="attr">flask:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">registry.lazycat.cloud/u04123229/cloudsmithy/flask-demo:c14689303facd82c</span></span><br></pre></td></tr></table></figure><p>另外也支持多域名解析，这个在传统的线下机房比较常见，而云上基本上还是 7 层基于路由转发，比如第一种，我也更加熟悉第一种。</p><p>这个其实就是加了一个 secondary_domains 的字段，然后把后端单独暴露出来了。这样就子域名就可以访问后端。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">lzc-sdk-version:</span> <span class="string">&quot;0.1&quot;</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">APP</span> <span class="string">Proxy</span> <span class="string">Test</span></span><br><span class="line"><span class="attr">package:</span> <span class="string">cloud.lazycat.app.app-proxy-test</span></span><br><span class="line"><span class="attr">version:</span> <span class="number">0.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">application:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/=http://app-proxy.cloud.lazycat.app.app-proxy-test.lzcapp:80</span></span><br><span class="line">  <span class="attr">subdomain:</span> <span class="string">app-proxy-test</span> <span class="comment"># 应用列表里默认打开的域名</span></span><br><span class="line">  <span class="attr">secondary_domains:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">flask</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">app-proxy:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">registry.lazycat.cloud/app-proxy:v0.1.0</span></span><br><span class="line">    <span class="attr">setup_script:</span> <span class="string">|</span></span><br><span class="line"><span class="string">      cat &lt;&lt;&#x27;EOF&#x27; &gt; /etc/nginx/conf.d/default.conf</span></span><br><span class="line"><span class="string">      server &#123;</span></span><br><span class="line"><span class="string">         server_name  app-proxy-test.*;</span></span><br><span class="line"><span class="string">         location / &#123;</span></span><br><span class="line"><span class="string">            root   /usr/local/openresty/nginx/html;</span></span><br><span class="line"><span class="string">            index  index.html index.htm;</span></span><br><span class="line"><span class="string">         &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="string">server</span> &#123;</span><br><span class="line">         <span class="string">server_name</span>  <span class="string">flask.*;</span></span><br><span class="line"></span><br><span class="line">         <span class="string">location</span> <span class="string">/</span> &#123;</span><br><span class="line">            <span class="string">proxy_pass</span> <span class="string">http://flask:5000;</span></span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="string">EOF</span></span><br><span class="line">  <span class="attr">flask:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">registry.lazycat.cloud/u04123229/cloudsmithy/flask-demo:c14689303facd82c</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;对于 Web 开发而言， 经常会遇到跨域问题。我们先来看一下什么是跨域问题：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;跨域问题（Cross-Origin）&lt;/strong&gt;本质上是浏览器的&lt;strong&gt;同源策略（Same-Origin Policy, SOP）&lt;/strong&gt;在发挥作用：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;同源&lt;/strong&gt;指“协议 + 域名（或 IP）+ 端口”三要素完全一致。只要三者有任何一个不同，就被视为&lt;strong&gt;跨域&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;为什么浏览器要限制跨域？&quot;&gt;&lt;a href=&quot;#为什么浏览器要限制跨域？&quot; class=&quot;headerlink&quot; title=&quot;为什么浏览器要限制跨域？&quot;&gt;&lt;/a&gt;为什么浏览器要限制跨域？&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;安全&lt;/strong&gt;：阻止一个站点随意读取或修改另一个站点的敏感资源（如 Cookie、LocalStorage、DOM），避免 XSS、CSRF 等攻击链被无限放大。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;隔离&lt;/strong&gt;：让不同网站在沙盒里各自运行，互不干扰。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;同源策略只在&lt;strong&gt;浏览器环境&lt;/strong&gt;生效；后端服务之间（如服务器 A 请求服务器 B）并没有 SOP 的限制。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="懒猫微服" scheme="https://airag.click/categories/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
    
    <category term="代理" scheme="https://airag.click/tags/%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>懒猫微服开发篇（五）：懒猫微服如何使用 OpenID Connect （OIDC）？（下）</title>
    <link href="https://airag.click/posts/48285dc8/"/>
    <id>https://airag.click/posts/48285dc8/</id>
    <published>2025-07-04T16:00:00.000Z</published>
    <updated>2025-07-16T03:17:26.793Z</updated>
    
    <content type="html"><![CDATA[<p>先决条件：</p><p>需要在<code>lzc-manifest.yml</code>定义 oidc_redirect_path 和 environment。</p><h4 id="配置lzc-manifest-yml"><a href="#配置lzc-manifest-yml" class="headerlink" title="配置lzc-manifest.yml"></a>配置<code>lzc-manifest.yml</code></h4><p>oidc_redirect_path 就是你的应用的回调地址，只有写了这个之后才能正确使用 OpenID Connect 的环境变量。</p><p>回调地址是按照应用而定的，有的是&#x2F;callback，&#x2F;oidc&#x2F;callback 或者&#x2F;oauth&#x2F;callback。</p><span id="more"></span><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">lzc-sdk-version:</span> <span class="number">0.1</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">懒猫ENV查看器</span></span><br><span class="line"><span class="attr">package:</span> <span class="string">xu.deploy.env</span></span><br><span class="line"><span class="attr">version:</span> <span class="number">0.0</span><span class="number">.2</span></span><br><span class="line"><span class="attr">description:</span></span><br><span class="line"><span class="attr">license:</span> <span class="string">https://choosealicense.com/licenses/mit/</span></span><br><span class="line"><span class="attr">homepage:</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">xu</span></span><br><span class="line"><span class="attr">application:</span></span><br><span class="line">  <span class="attr">subdomain:</span> <span class="string">env</span></span><br><span class="line">  <span class="attr">oidc_redirect_path:</span> <span class="string">/callback</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/=exec://5005,./lzcapp/pkg/content/run.sh</span></span><br><span class="line">  <span class="attr">environment:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">LAZYCAT_AUTH_OIDC_CLIENT_ID=$&#123;LAZYCAT_AUTH_OIDC_CLIENT_ID&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">LAZYCAT_AUTH_OIDC_CLIENT_SECRET=$&#123;LAZYCAT_AUTH_OIDC_CLIENT_SECRET&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">LAZYCAT_AUTH_OIDC_AUTH_URI=$&#123;LAZYCAT_AUTH_OIDC_AUTH_URI&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">LAZYCAT_AUTH_OIDC_TOKEN_URI=$&#123;LAZYCAT_AUTH_OIDC_TOKEN_URI&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">LAZYCAT_AUTH_OIDC_USERINFO_URI=$&#123;LAZYCAT_AUTH_OIDC_USERINFO_URI&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">LAZYCAT_AUTH_OIDC_ISSUER_URI=$&#123;LAZYCAT_AUTH_OIDC_ISSUER_URI&#125;</span></span><br></pre></td></tr></table></figure><p>定义了环境变量之后，我们就可以在代码中使用环境变量：</p><p>开机时一次性从环境变量读取懒猫微服的应用域名、OIDC 客户端 ID&#x2F;密钥，以及授权、令牌、用户信息三个核心端点，并根据应用域名拼出默认 Redirect URI，从而把所有与 OpenID Connect 登录相关的敏感信息解耦。</p><p>这里的 callback 是应用的回调 URL，需要根据应用调整。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">LAZYCAT_BOX_DOMAIN = os.environ.get(<span class="string">&#x27;LAZYCAT_BOX_DOMAIN&#x27;</span>)</span><br><span class="line">LAZYCAT_APP_DOMAIN = os.environ.get(<span class="string">&#x27;LAZYCAT_APP_DOMAIN&#x27;</span>)</span><br><span class="line"></span><br><span class="line">CLIENT_ID      = os.getenv(<span class="string">&quot;LAZYCAT_AUTH_OIDC_CLIENT_ID&quot;</span>)</span><br><span class="line">CLIENT_SECRET  = os.getenv(<span class="string">&quot;LAZYCAT_AUTH_OIDC_CLIENT_SECRET&quot;</span>)</span><br><span class="line">AUTH_ENDPOINT       = os.getenv(<span class="string">&quot;LAZYCAT_AUTH_OIDC_AUTH_URI&quot;</span>)</span><br><span class="line">TOKEN_ENDPOINT      = os.getenv(<span class="string">&quot;LAZYCAT_AUTH_OIDC_TOKEN_URI&quot;</span>)</span><br><span class="line">USERINFO_ENDPOINT   = os.getenv(<span class="string">&quot;LAZYCAT_AUTH_OIDC_USERINFO_URI&quot;</span>)</span><br><span class="line">REDIRECT_URI   = os.getenv(<span class="string">&quot;OIDC_REDIRECT_URI&quot;</span>, <span class="string">f&quot;https://<span class="subst">&#123;LAZYCAT_APP_DOMAIN&#125;</span>/callback&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="登录功能"><a href="#登录功能" class="headerlink" title="登录功能"></a>登录功能</h4><p>在用户访问 <code>/login</code> 时动态生成一对 PKCE 凭据（随机 code verifier 和其 SHA-256 派生的 code challenge），把 verifier 暂存进会话，再携带 challenge 等参数构造 OIDC 授权码请求，并将用户浏览器重定向到身份提供方完成安全登录；回调阶段可用 session 中的 code verifier 与返回的 code exchange 配合，防止授权码被劫持或重放，从而提升 OAuth 2.0&#x2F;OIDC 的安全性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ======= 生成 PKCE Code Verifier &amp; Challenge =======</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_pkce_pair</span>():</span><br><span class="line">    code_verifier = base64.urlsafe_b64encode(secrets.token_bytes(<span class="number">32</span>)).rstrip(<span class="string">b&#x27;=&#x27;</span>).decode()</span><br><span class="line">    code_challenge = base64.urlsafe_b64encode(</span><br><span class="line">        hashlib.sha256(code_verifier.encode()).digest()</span><br><span class="line">    ).rstrip(<span class="string">b&#x27;=&#x27;</span>).decode()</span><br><span class="line">    <span class="keyword">return</span> code_verifier, code_challenge</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    code_verifier, code_challenge = generate_pkce_pair()</span><br><span class="line">    session[<span class="string">&#x27;code_verifier&#x27;</span>] = code_verifier</span><br><span class="line"></span><br><span class="line">    auth_url = (</span><br><span class="line">        <span class="string">f&quot;<span class="subst">&#123;AUTH_ENDPOINT&#125;</span>&quot;</span></span><br><span class="line">        <span class="string">f&quot;?response_type=code&quot;</span></span><br><span class="line">        <span class="string">f&quot;&amp;client_id=<span class="subst">&#123;CLIENT_ID&#125;</span>&quot;</span></span><br><span class="line">        <span class="string">f&quot;&amp;redirect_uri=<span class="subst">&#123;REDIRECT_URI&#125;</span>&quot;</span></span><br><span class="line">        <span class="string">f&quot;&amp;scope=openid profile email&quot;</span></span><br><span class="line">        <span class="string">f&quot;&amp;code_challenge=<span class="subst">&#123;code_challenge&#125;</span>&quot;</span></span><br><span class="line">        <span class="string">f&quot;&amp;code_challenge_method=S256&quot;</span></span><br><span class="line">    )</span><br><span class="line">    <span class="built_in">print</span>(auth_url)</span><br><span class="line">    <span class="keyword">return</span> redirect(auth_url)</span><br></pre></td></tr></table></figure><ol><li><code>generate_pkce_pair()</code><ul><li>使用 <code>secrets.token_bytes(32)</code> 随机生成 32 字节高强度随机数。</li><li>先经 <code>base64.urlsafe_b64encode</code> 再去掉尾部 <code>=</code> 得到 <strong>code verifier</strong>。</li><li>对 code verifier 做 SHA-256 散列后再次 base64 URL 安全编码并去掉 <code>=</code>，得到 <strong>code challenge</strong>。</li><li>返回二元组 <code>(code_verifier, code_challenge)</code>。</li></ul></li><li><code>/login</code> 路由<ul><li>调用 <code>generate_pkce_pair()</code> 生成并拿到 <code>code_verifier</code> 和 <code>code_challenge</code>。</li><li>将 <code>code_verifier</code> 写入 Flask <code>session</code>，以便稍后在回调时校验。</li><li>拼接授权端点 <code>AUTH_ENDPOINT</code> 形成认证 URL：<ul><li><code>response_type=code</code> 采用授权码模式</li><li><code>client_id</code>、<code>redirect_uri</code>、<code>scope</code> 等常规 OIDC 参数</li><li><code>code_challenge</code> 与 <code>code_challenge_method=S256</code> 声明使用 PKCE(S256)</li></ul></li><li><code>redirect(auth_url)</code> 将浏览器跳转到身份提供方进行登录 + 授权</li></ul></li></ol><h4 id="回调地址"><a href="#回调地址" class="headerlink" title="回调地址"></a>回调地址</h4><p><code>/callback</code> 处理函数先从回调参数取出授权码，再用会话里的 code verifier 按 PKCE + 授权码模式向令牌端点换取 access token 和 ID token；成功后用 access token 调 <code>/userinfo</code> 获取用户资料，并把三者一起返回。如此既完成了 OAuth 2.0 的安全换码，又拿到了 OIDC 提供的登录身份信息，实现前后端分离的单点登录闭环。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/callback&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">callback</span>():</span><br><span class="line">    code = request.args.get(<span class="string">&#x27;code&#x27;</span>)</span><br><span class="line">    code_verifier = session.get(<span class="string">&#x27;code_verifier&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 请求 access token</span></span><br><span class="line">    headers = &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>&#125;</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;grant_type&#x27;</span>: <span class="string">&#x27;authorization_code&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;client_id&#x27;</span>: CLIENT_ID,</span><br><span class="line">        <span class="string">&#x27;client_secret&#x27;</span>: CLIENT_SECRET,</span><br><span class="line">        <span class="string">&#x27;code&#x27;</span>: code,</span><br><span class="line">        <span class="string">&#x27;redirect_uri&#x27;</span>: REDIRECT_URI,</span><br><span class="line">        <span class="string">&#x27;code_verifier&#x27;</span>: code_verifier,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    token_resp = requests.post(TOKEN_ENDPOINT, data=data, headers=headers)</span><br><span class="line">    <span class="built_in">print</span>(token_resp)</span><br><span class="line">    token_data = token_resp.json()</span><br><span class="line">    <span class="built_in">print</span>(token_data)</span><br><span class="line"></span><br><span class="line">    access_token = token_data.get(<span class="string">&#x27;access_token&#x27;</span>)</span><br><span class="line">    id_token = token_data.get(<span class="string">&#x27;id_token&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取用户信息</span></span><br><span class="line">    userinfo_resp = requests.get(USERINFO_ENDPOINT, headers=&#123;</span><br><span class="line">        <span class="string">&#x27;Authorization&#x27;</span>: <span class="string">f&#x27;Bearer <span class="subst">&#123;access_token&#125;</span>&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">&#x27;Access Token&#x27;</span>: access_token,</span><br><span class="line">        <span class="string">&#x27;ID Token&#x27;</span>: id_token,</span><br><span class="line">        <span class="string">&#x27;UserInfo&#x27;</span>: userinfo_resp.json()</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol><li><p><code>code = request.args.get(&#39;code&#39;)</code></p><ul><li>从回调 URL 查询参数中取出授权服务器返回的 <code>code</code>（授权码）。</li></ul></li><li><p><code>code_verifier = session.get(&#39;code_verifier&#39;)</code></p><ul><li>读取先前 <code>/login</code> 时存进会话的 <strong>code verifier</strong>，准备用于 PKCE 校验。</li></ul></li><li><p><strong>准备换取令牌的 HTTP POST 请求</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">headers = &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>&#125;</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;grant_type&#x27;</span>: <span class="string">&#x27;authorization_code&#x27;</span>,     <span class="comment"># 授权码模式</span></span><br><span class="line">    <span class="string">&#x27;client_id&#x27;</span>: CLIENT_ID,</span><br><span class="line">    <span class="string">&#x27;code&#x27;</span>: code,                           <span class="comment"># 回调拿到的授权码</span></span><br><span class="line">    <span class="string">&#x27;redirect_uri&#x27;</span>: REDIRECT_URI,           <span class="comment"># 必须与首跳一致</span></span><br><span class="line">    <span class="string">&#x27;code_verifier&#x27;</span>: code_verifier,         <span class="comment"># PKCE 关键参数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>code_verifier</code> 会被身份提供方与首跳收到的 <code>code_challenge</code> 做 SHA-256 对比，从而证明客户端的“持有者”身份，防止授权码被截获后被第三方滥用。</li></ul></li><li><p><code>token_resp = requests.post(TOKEN_ENDPOINT, data=data, headers=headers)</code></p><ul><li>向令牌端点发送表单数据以换取 <strong>Access Token &#x2F; ID Token</strong>。</li></ul></li><li><p><code>token_data = token_resp.json()</code></p><ul><li><p>解析 JSON 响应。例如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;access_token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;...&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;id_token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;...&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;expires_in&quot;</span><span class="punctuation">:</span> <span class="number">3600</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;token_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Bearer&quot;</span><span class="punctuation">,</span></span><br><span class="line">  ...</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>access_token = token_data.get(&#39;access_token&#39;)</code></p><ul><li>读取访问令牌，用于调用受保护 API。<br><code>id_token = token_data.get(&#39;id_token&#39;)</code></li><li>读取 OIDC <strong>ID Token</strong>，携带用户身份声明，可本地解码验证。</li></ul></li><li><p><strong>获取用户信息</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">userinfo_resp = requests.get(</span><br><span class="line">    USERINFO_ENDPOINT,</span><br><span class="line">    headers=&#123;<span class="string">&#x27;Authorization&#x27;</span>: <span class="string">f&#x27;Bearer <span class="subst">&#123;access_token&#125;</span>&#x27;</span>&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>按 OIDC 规范，用 Bearer Token 调 <code>/userinfo</code> 端点，拿到 JSON 形式的用户信息。</li></ul></li><li><p><strong>返回聚合结果（此处直接返回给浏览器以便演示）</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="string">&#x27;Access Token&#x27;</span>: access_token,</span><br><span class="line">    <span class="string">&#x27;ID Token&#x27;</span>: id_token,</span><br><span class="line">    <span class="string">&#x27;UserInfo&#x27;</span>: userinfo_resp.json()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>在浏览器中可以看到这个登录跳转：</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250705095459340.png" alt="image-20250705095459340"></p><p>还是这个图，我们继续看这个流程：</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/7a6f946c-b299-410b-8286-2958d488caa2.png" alt="7a6f946c-b299-410b-8286-2958d488caa2"></p><p>拿到 code 之后可以就可以换到 Access token 和 ID Token 了，这个 code 只有一次有效，可以达到防重放的效果。当然这个只是 OIDC 的一个例子，在生产环境的 APP 中还需要做路由守卫以及 access 续签的操作。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250705100147125.png" alt="image-20250705100147125"></p><h5 id="完整代码如下："><a href="#完整代码如下：" class="headerlink" title="完整代码如下："></a>完整代码如下：</h5><ol><li><strong>读取配置</strong><ul><li>从环境变量获取 Lazycat 平台的域名、OIDC 客户端 ID&#x2F;密钥，以及授权端点、令牌端点、用户信息端点和回调地址。</li><li>用随机 <code>app.secret_key</code> 支持 Flask Session。</li></ul></li><li><strong>PKCE 安全增强</strong><ul><li><code>generate_pkce_pair()</code> 动态生成 <code>code_verifier / code_challenge</code> ；后者随登录请求携带，前者保存在 Session，回调时再带给 Token 端点，防止授权码被劫持。</li></ul></li><li><strong>核心路由</strong><ul><li><code>/</code>：渲染首页（需自备 <code>index.html</code>）。</li><li><code>/login</code>：<ol><li>生成 PKCE 对；</li><li>拼接授权 URL（<code>response_type=code</code>，scope 含 <code>openid profile email</code>）；</li><li>浏览器重定向到 IdP 登录&#x2F;授权页面。</li></ol></li><li><code>/callback</code>：<ol><li>取回 <code>code</code> 与 <code>code_verifier</code>；</li><li>POST 到 <code>TOKEN_ENDPOINT</code> 换取 <code>access_token</code> 和 <code>id_token</code>；</li><li>用 <code>access_token</code> 调用 <code>USERINFO_ENDPOINT</code> 拿到用户信息；</li><li>以 JSON 形式返回令牌与用户资料。</li></ol></li></ul></li></ol><blockquote><p><strong>注意</strong>：生产环境应关闭 <code>debug=True</code>、使用 HTTPS、校验 <code>state</code> 参数防 CSRF，并妥善处理 Token 异常和错误分支。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> secrets</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, redirect, request, session, url_for, render_template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = os.urandom(<span class="number">24</span>)</span><br><span class="line"></span><br><span class="line">LAZYCAT_BOX_DOMAIN = os.environ.get(<span class="string">&#x27;LAZYCAT_BOX_DOMAIN&#x27;</span>)</span><br><span class="line">LAZYCAT_APP_DOMAIN = os.environ.get(<span class="string">&#x27;LAZYCAT_APP_DOMAIN&#x27;</span>)</span><br><span class="line"></span><br><span class="line">CLIENT_ID      = os.getenv(<span class="string">&quot;LAZYCAT_AUTH_OIDC_CLIENT_ID&quot;</span>)</span><br><span class="line">CLIENT_SECRET  = os.getenv(<span class="string">&quot;LAZYCAT_AUTH_OIDC_CLIENT_SECRET&quot;</span>)</span><br><span class="line">AUTH_ENDPOINT       = os.getenv(<span class="string">&quot;LAZYCAT_AUTH_OIDC_AUTH_URI&quot;</span>)</span><br><span class="line">TOKEN_ENDPOINT      = os.getenv(<span class="string">&quot;LAZYCAT_AUTH_OIDC_TOKEN_URI&quot;</span>)</span><br><span class="line">USERINFO_ENDPOINT   = os.getenv(<span class="string">&quot;LAZYCAT_AUTH_OIDC_USERINFO_URI&quot;</span>)</span><br><span class="line">REDIRECT_URI   = os.getenv(<span class="string">&quot;OIDC_REDIRECT_URI&quot;</span>, <span class="string">f&quot;https://<span class="subst">&#123;LAZYCAT_APP_DOMAIN&#125;</span>/callback&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(CLIENT_ID)</span><br><span class="line"><span class="built_in">print</span>(CLIENT_SECRET)</span><br><span class="line"><span class="built_in">print</span>(AUTH_ENDPOINT)</span><br><span class="line"><span class="built_in">print</span>(TOKEN_ENDPOINT)</span><br><span class="line"><span class="built_in">print</span>(USERINFO_ENDPOINT)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(REDIRECT_URI)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ======= 生成 PKCE Code Verifier &amp; Challenge =======</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_pkce_pair</span>():</span><br><span class="line">    code_verifier = base64.urlsafe_b64encode(secrets.token_bytes(<span class="number">32</span>)).rstrip(<span class="string">b&#x27;=&#x27;</span>).decode()</span><br><span class="line">    code_challenge = base64.urlsafe_b64encode(</span><br><span class="line">        hashlib.sha256(code_verifier.encode()).digest()</span><br><span class="line">    ).rstrip(<span class="string">b&#x27;=&#x27;</span>).decode()</span><br><span class="line">    <span class="keyword">return</span> code_verifier, code_challenge</span><br><span class="line"></span><br><span class="line"><span class="comment"># ======= 首页 =======</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ======= 跳转授权页 =======</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    code_verifier, code_challenge = generate_pkce_pair()</span><br><span class="line">    session[<span class="string">&#x27;code_verifier&#x27;</span>] = code_verifier</span><br><span class="line"></span><br><span class="line">    auth_url = (</span><br><span class="line">        <span class="string">f&quot;<span class="subst">&#123;AUTH_ENDPOINT&#125;</span>&quot;</span></span><br><span class="line">        <span class="string">f&quot;?response_type=code&quot;</span></span><br><span class="line">        <span class="string">f&quot;&amp;client_id=<span class="subst">&#123;CLIENT_ID&#125;</span>&quot;</span></span><br><span class="line">        <span class="string">f&quot;&amp;redirect_uri=<span class="subst">&#123;REDIRECT_URI&#125;</span>&quot;</span></span><br><span class="line">        <span class="string">f&quot;&amp;scope=openid profile email&quot;</span></span><br><span class="line">        <span class="string">f&quot;&amp;code_challenge=<span class="subst">&#123;code_challenge&#125;</span>&quot;</span></span><br><span class="line">        <span class="string">f&quot;&amp;code_challenge_method=S256&quot;</span></span><br><span class="line">    )</span><br><span class="line">    <span class="built_in">print</span>(auth_url)</span><br><span class="line">    <span class="keyword">return</span> redirect(auth_url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ======= 回调处理 =======</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/callback&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">callback</span>():</span><br><span class="line">    code = request.args.get(<span class="string">&#x27;code&#x27;</span>)</span><br><span class="line">    code_verifier = session.get(<span class="string">&#x27;code_verifier&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 请求 access token</span></span><br><span class="line">    headers = &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>&#125;</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;grant_type&#x27;</span>: <span class="string">&#x27;authorization_code&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;client_id&#x27;</span>: CLIENT_ID,</span><br><span class="line">        <span class="string">&#x27;client_secret&#x27;</span>: CLIENT_SECRET,</span><br><span class="line">        <span class="string">&#x27;code&#x27;</span>: code,</span><br><span class="line">        <span class="string">&#x27;redirect_uri&#x27;</span>: REDIRECT_URI,</span><br><span class="line">        <span class="string">&#x27;code_verifier&#x27;</span>: code_verifier,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    token_resp = requests.post(TOKEN_ENDPOINT, data=data, headers=headers)</span><br><span class="line">    <span class="built_in">print</span>(token_resp)</span><br><span class="line">    token_data = token_resp.json()</span><br><span class="line">    <span class="built_in">print</span>(token_data)</span><br><span class="line"></span><br><span class="line">    access_token = token_data.get(<span class="string">&#x27;access_token&#x27;</span>)</span><br><span class="line">    id_token = token_data.get(<span class="string">&#x27;id_token&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取用户信息</span></span><br><span class="line">    userinfo_resp = requests.get(USERINFO_ENDPOINT, headers=&#123;</span><br><span class="line">        <span class="string">&#x27;Authorization&#x27;</span>: <span class="string">f&#x27;Bearer <span class="subst">&#123;access_token&#125;</span>&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">&#x27;Access Token&#x27;</span>: access_token,</span><br><span class="line">        <span class="string">&#x27;ID Token&#x27;</span>: id_token,</span><br><span class="line">        <span class="string">&#x27;UserInfo&#x27;</span>: userinfo_resp.json()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果使用 authlib 是这样子的.通过 Authlib 把应用接入 OIDC：</p><p>启动时先从环境变量读取并校验客户端 ID、密钥及各端点；</p><p>随后注册 OIDC 客户端并自动启用 PKCE。</p><p>用户访问 <code>/login</code> 时，服务端生成 nonce 并调用 <code>authorize_redirect()</code> 将浏览器跳转到身份提供方登录，同时在会话里保存随机值；身份提供方完成认证后回调到 <code>/callback</code>，<code>authorize_access_token()</code> 会携带先前的 code 和 code verifier 去换取 access token &#x2F; ID token，并用保存的 nonce 校验 ID Token 防止重放。</p><p>成功后解析得到的声明（用户信息）渲染或写入 Session，即可认为用户已登录。如此利用现成库把 PKCE、状态验证、ID Token 验签等安全细节都交给框架处理，只需少量代码就实现了安全的单点登录闭环。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">import os, secrets</span><br><span class="line">from flask import Flask, request, render_template</span><br><span class="line">from authlib.integrations.flask_client import OAuth</span><br><span class="line"></span><br><span class="line">LAZYCAT_BOX_DOMAIN = os.environ.get(&#x27;LAZYCAT_BOX_DOMAIN&#x27;)</span><br><span class="line">LAZYCAT_APP_DOMAIN = os.environ.get(&#x27;LAZYCAT_APP_DOMAIN&#x27;)</span><br><span class="line"></span><br><span class="line">CLIENT_ID      = os.getenv(&quot;LAZYCAT_AUTH_OIDC_CLIENT_ID&quot;)</span><br><span class="line">CLIENT_SECRET  = os.getenv(&quot;LAZYCAT_AUTH_OIDC_CLIENT_SECRET&quot;)</span><br><span class="line">AUTH_URI       = os.getenv(&quot;LAZYCAT_AUTH_OIDC_AUTH_URI&quot;)</span><br><span class="line">TOKEN_URI      = os.getenv(&quot;LAZYCAT_AUTH_OIDC_TOKEN_URI&quot;)</span><br><span class="line">USERINFO_URI   = os.getenv(&quot;LAZYCAT_AUTH_OIDC_USERINFO_URI&quot;)</span><br><span class="line">JWKS_URI       = os.getenv(&quot;OIDC_JWKS_URI&quot;, f&quot;https://&#123;LAZYCAT_BOX_DOMAIN&#125;/sys/oauth/keys&quot;)</span><br><span class="line">REDIRECT_URI   = os.getenv(&quot;OIDC_REDIRECT_URI&quot;, f&quot;https://&#123;LAZYCAT_APP_DOMAIN&#125;/callback&quot;)</span><br><span class="line"></span><br><span class="line">required = [CLIENT_ID, CLIENT_SECRET, AUTH_URI, TOKEN_URI, USERINFO_URI, JWKS_URI, REDIRECT_URI]</span><br><span class="line">if not all(required):</span><br><span class="line">    missing = [k for k, v in zip(</span><br><span class="line">        [&quot;OIDC_CLIENT_ID&quot;,&quot;OIDC_CLIENT_SECRET&quot;,&quot;OIDC_AUTH_URI&quot;,</span><br><span class="line">         &quot;OIDC_TOKEN_URI&quot;,&quot;OIDC_USERINFO_URI&quot;,&quot;OIDC_JWKS_URI&quot;,</span><br><span class="line">         &quot;OIDC_REDIRECT_URI&quot;], required) if not v]</span><br><span class="line">    raise RuntimeError(f&quot;缺少环境变量: &#123;&#x27;, &#x27;.join(missing)&#125;&quot;)</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = &quot;a-very-secret-key&quot;</span><br><span class="line"></span><br><span class="line">oauth = OAuth(app)</span><br><span class="line">oidc = oauth.register(</span><br><span class="line">    name=&quot;casdoor&quot;,</span><br><span class="line">    client_id=CLIENT_ID,</span><br><span class="line">    client_secret=CLIENT_SECRET,</span><br><span class="line">    authorize_url=AUTH_URI,</span><br><span class="line">    access_token_url=TOKEN_URI,</span><br><span class="line">    userinfo_endpoint=USERINFO_URI,</span><br><span class="line">    jwks_uri=JWKS_URI,</span><br><span class="line">    client_kwargs=&#123;&quot;scope&quot;: &quot;openid profile email&quot;&#125;,</span><br><span class="line">    redirect_uri=REDIRECT_URI,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">@app.route(&quot;/&quot;)</span><br><span class="line">def index():</span><br><span class="line">    return render_template(&quot;index.html&quot;)</span><br><span class="line"></span><br><span class="line">@app.route(&quot;/login&quot;)</span><br><span class="line">def login():</span><br><span class="line">    nonce = secrets.token_urlsafe(16)</span><br><span class="line">    resp  = oidc.authorize_redirect(redirect_uri=REDIRECT_URI, nonce=nonce)</span><br><span class="line">    resp.set_cookie(&quot;oidc_nonce&quot;, nonce, max_age=300, httponly=True)</span><br><span class="line">    return resp</span><br><span class="line"></span><br><span class="line">@app.route(&quot;/callback&quot;)</span><br><span class="line">def callback():</span><br><span class="line">    token = oidc.authorize_access_token()</span><br><span class="line">    nonce = request.cookies.get(&quot;oidc_nonce&quot;)</span><br><span class="line">    claims = oidc.parse_id_token(token, nonce=nonce)</span><br><span class="line">    env_vars = sorted(os.environ.items())</span><br><span class="line"></span><br><span class="line">    return render_template(&quot;callback.html&quot;,</span><br><span class="line">                           access_token=token.get(&quot;access_token&quot;),</span><br><span class="line">                           id_token=token.get(&quot;id_token&quot;),</span><br><span class="line">                           user_info=claims,</span><br><span class="line">                           env_vars=env_vars)</span><br><span class="line"></span><br><span class="line">@app.route(&quot;/env&quot;, endpoint=&quot;show_env_html&quot;)</span><br><span class="line">def show_env_html():</span><br><span class="line">    env_vars = sorted(os.environ.items())</span><br><span class="line">    return render_template(&quot;env.html&quot;, env_vars=env_vars)</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    app.run(debug=True, port=5005)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;先决条件：&lt;/p&gt;
&lt;p&gt;需要在&lt;code&gt;lzc-manifest.yml&lt;/code&gt;定义 oidc_redirect_path 和 environment。&lt;/p&gt;
&lt;h4 id=&quot;配置lzc-manifest-yml&quot;&gt;&lt;a href=&quot;#配置lzc-manifest-yml&quot; class=&quot;headerlink&quot; title=&quot;配置lzc-manifest.yml&quot;&gt;&lt;/a&gt;配置&lt;code&gt;lzc-manifest.yml&lt;/code&gt;&lt;/h4&gt;&lt;p&gt;oidc_redirect_path 就是你的应用的回调地址，只有写了这个之后才能正确使用 OpenID Connect 的环境变量。&lt;/p&gt;
&lt;p&gt;回调地址是按照应用而定的，有的是&amp;#x2F;callback，&amp;#x2F;oidc&amp;#x2F;callback 或者&amp;#x2F;oauth&amp;#x2F;callback。&lt;/p&gt;</summary>
    
    
    
    <category term="懒猫微服" scheme="https://airag.click/categories/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
    
    <category term="单点登录" scheme="https://airag.click/tags/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>使用 Zilliz Cloud 快速体验 Milvus</title>
    <link href="https://airag.click/posts/938aef4d/"/>
    <id>https://airag.click/posts/938aef4d/</id>
    <published>2025-07-02T16:00:00.000Z</published>
    <updated>2025-07-16T03:17:26.801Z</updated>
    
    <content type="html"><![CDATA[<p>在学习 Milvus 向量数据库时，除了本地 Milvus Lite、单机版 Milvus Standalone 或 Milvus on K8s 之外，还可以选择 <strong>Zilliz Cloud</strong> —— 一种无需部署服务器、零成本上手的托管方案。下面将演示如何申请 Zilliz Cloud 中国区免费套餐并运行官方示例代码。</p><h3 id="注册并创建免费集群"><a href="#注册并创建免费集群" class="headerlink" title="注册并创建免费集群"></a>注册并创建免费集群</h3><ol><li><p>打开官网</p><ul><li>国内站点：<a href="https://zilliz.com.cn/">https://zilliz.com.cn/</a></li><li>海外站点：<a href="https://zilliz.com/">https://zilliz.com/</a></li></ul></li></ol><p>我们本次实验使用的是国内站点，部署在阿里云，目前可以免费使用。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/a508309b90c710ffd1d9e998626c47f9.png" alt="a508309b90c710ffd1d9e998626c47f9"></p><span id="more"></span><ol start="2"><li><p>选择 <strong>手机号码</strong> 或 <strong>邮箱</strong> 登录&#x2F;注册。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250626212403361.png" alt="image-20250626212403361"></p></li><li><p>进入控制台首页后，点击 <strong>Create Cluster</strong> 按钮。<br><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/d712d4c4fd8f2546dab4426c68bf806f.png" alt="起始页面"></p></li><li><p>在弹窗中选择 <strong>Free Tier</strong>（免费套餐），数据中心默认为 <strong>阿里云 · 杭州</strong>。<br><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/25626960ddcd05d12117aff485eb2487.png" alt="选择免费集群"></p></li><li><p>等待几分钟，集群创建完成后会显示 <strong>Endpoint URI、API Token、Cluster ID</strong> 等信息，请妥善保存。<br><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/3d606a5a0a797d7332bbb3efd86fd8c4.png" alt="集群信息"></p></li><li><p>运行中</p></li></ol><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/395f581c7dbbeb8b4940afa0bcab025a.png" alt="395f581c7dbbeb8b4940afa0bcab025a"></p><hr><h3 id="二、连接"><a href="#二、连接" class="headerlink" title="二、连接"></a>二、连接</h3><p>安装 milvus-cli：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install uv</span><br><span class="line">uv pip install milvus-cli</span><br></pre></td></tr></table></figure><p>终端执行 milvus_cli，进入交互式 CLI</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">milvus_cli</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  __  __ _ _                    ____ _     ___</span><br><span class="line"> |  \/  (_) |_   ___   _ ___   / ___| |   |_ _|</span><br><span class="line"> | |\/| | | \ \ / / | | / __| | |   | |    | |</span><br><span class="line"> | |  | | | |\ V /| |_| \__ \ | |___| |___ | |</span><br><span class="line"> |_|  |_|_|_| \_/  \__,_|___/  \____|_____|___|</span><br><span class="line"></span><br><span class="line">Milvus cli version: 1.0.2</span><br><span class="line">Pymilvus version: 2.5.3</span><br><span class="line"></span><br><span class="line">Learn more: https://github.com/zilliztech/milvus_cli.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">milvus_cli &gt; connect -uri https://in03-d7b5690fee7bcbf.serverless.ali-cn-hangzhou.cloud.zilliz.com.cn -t 88b738ee492b2ad88d69c166ee587825d546b049dab3a5d8767733a636efec52a62e96b283ab90c24146d5a311696dacd9499fc1</span><br><span class="line">Connect Milvus successfully.</span><br><span class="line">+---------+---------+</span><br><span class="line">| Address |         |</span><br><span class="line">|  Alias  | default |</span><br><span class="line">+---------+---------+</span><br><span class="line">milvus_cli &gt; list databases</span><br><span class="line">+--------------------+</span><br><span class="line">|      db_name       |</span><br><span class="line">+--------------------+</span><br><span class="line">| db_d7b5690fee7bcbf |</span><br><span class="line">+--------------------+</span><br></pre></td></tr></table></figure><h3 id="创建虚拟环境（缺少-3-12-时-uv-会自动下载）"><a href="#创建虚拟环境（缺少-3-12-时-uv-会自动下载）" class="headerlink" title="创建虚拟环境（缺少 3.12 时 uv 会自动下载）"></a>创建虚拟环境（缺少 3.12 时 uv 会自动下载）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">uv venv milvus-py --python 3.12</span><br><span class="line"></span><br><span class="line"># 激活环境</span><br><span class="line">source milvus-py/bin/activate      # macOS / Linux</span><br><span class="line"># .\milvus-py\Scripts\activate      # Windows PowerShell</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果你使用的是 conda 也可以：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda create -n milvus-py python==3.12 -y</span><br><span class="line">conda activate milvus-py</span><br></pre></td></tr></table></figure><ol><li><strong>克隆仓库</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zilliztech/cloud-vectordb-examples.git</span><br></pre></td></tr></table></figure><ol><li><strong>安装 PyMilvus</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install pymilvus==2.5.3</span><br></pre></td></tr></table></figure><ol><li><strong>进入 Python 示例目录</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> cloud-vectordb-examples/python</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>需要注意的是，在开源版本的 Milvus 中，端口号是 9530 &#x2F; 9091 ，而在 Zilliz cloud 上，端口上是 443.</p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> configparser</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pymilvus <span class="keyword">import</span> MilvusClient</span><br><span class="line"><span class="keyword">from</span> pymilvus <span class="keyword">import</span> DataType</span><br><span class="line"></span><br><span class="line">cfp = configparser.RawConfigParser()</span><br><span class="line">cfp.read(<span class="string">&#x27;config.ini&#x27;</span>)</span><br><span class="line">milvus_uri = cfp.get(<span class="string">&#x27;example&#x27;</span>, <span class="string">&#x27;uri&#x27;</span>)</span><br><span class="line">token = cfp.get(<span class="string">&#x27;example&#x27;</span>, <span class="string">&#x27;token&#x27;</span>)</span><br><span class="line"></span><br><span class="line">milvus_client = MilvusClient(uri=milvus_uri, token=token)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Connected to DB: <span class="subst">&#123;milvus_uri&#125;</span> successfully&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Check if the collection exists</span></span><br><span class="line">collection_name = <span class="string">&quot;book&quot;</span></span><br><span class="line">check_collection = milvus_client.has_collection(collection_name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> check_collection:</span><br><span class="line">    milvus_client.drop_collection(collection_name)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Dropped the existing collection <span class="subst">&#123;collection_name&#125;</span> successfully&quot;</span>)</span><br><span class="line"></span><br><span class="line">dim = <span class="number">64</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Start to create the collection schema&quot;</span>)</span><br><span class="line">schema = milvus_client.create_schema()</span><br><span class="line">schema.add_field(<span class="string">&quot;book_id&quot;</span>, DataType.INT64, is_primary=<span class="literal">True</span>, description=<span class="string">&quot;customized primary id&quot;</span>)</span><br><span class="line">schema.add_field(<span class="string">&quot;word_count&quot;</span>, DataType.INT64, description=<span class="string">&quot;word count&quot;</span>)</span><br><span class="line">schema.add_field(<span class="string">&quot;book_intro&quot;</span>, DataType.FLOAT_VECTOR, dim=dim, description=<span class="string">&quot;book introduction&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Start to prepare index parameters with default AUTOINDEX&quot;</span>)</span><br><span class="line">index_params = milvus_client.prepare_index_params()</span><br><span class="line">index_params.add_index(<span class="string">&quot;book_intro&quot;</span>, metric_type=<span class="string">&quot;L2&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Start to create example collection: <span class="subst">&#123;collection_name&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># create collection with the above schema and index parameters, and then load automatically</span></span><br><span class="line">milvus_client.create_collection(collection_name, schema=schema, index_params=index_params)</span><br><span class="line">collection_property = milvus_client.describe_collection(collection_name)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Collection details: %s&quot;</span> % collection_property)</span><br><span class="line"></span><br><span class="line"><span class="comment"># insert data with customized ids</span></span><br><span class="line">nb = <span class="number">1000</span></span><br><span class="line">insert_rounds = <span class="number">2</span></span><br><span class="line">start = <span class="number">0</span>           <span class="comment"># first primary key id</span></span><br><span class="line">total_rt = <span class="number">0</span>        <span class="comment"># total response time for inert</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Start to insert <span class="subst">&#123;nb*insert_rounds&#125;</span> entities into example collection: <span class="subst">&#123;collection_name&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(insert_rounds):</span><br><span class="line">    vector = [random.random() <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(dim)]</span><br><span class="line">    rows = [&#123;<span class="string">&quot;book_id&quot;</span>: i, <span class="string">&quot;word_count&quot;</span>: random.randint(<span class="number">1</span>, <span class="number">100</span>), <span class="string">&quot;book_intro&quot;</span>: vector&#125; <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start, start+nb)]</span><br><span class="line">    t0 = time.time()</span><br><span class="line">    milvus_client.insert(collection_name, rows)</span><br><span class="line">    ins_rt = time.time() - t0</span><br><span class="line">    start += nb</span><br><span class="line">    total_rt += ins_rt</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Insert completed in <span class="subst">&#123;<span class="built_in">round</span>(total_rt,<span class="number">4</span>)&#125;</span> seconds&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Start to flush&quot;</span>)</span><br><span class="line">start_flush = time.time()</span><br><span class="line">milvus_client.flush(collection_name)</span><br><span class="line">end_flush = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Flush completed in <span class="subst">&#123;<span class="built_in">round</span>(end_flush - start_flush, <span class="number">4</span>)&#125;</span> seconds&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># search</span></span><br><span class="line">nq = <span class="number">3</span></span><br><span class="line">search_params = &#123;<span class="string">&quot;metric_type&quot;</span>: <span class="string">&quot;L2&quot;</span>,  <span class="string">&quot;params&quot;</span>: &#123;<span class="string">&quot;level&quot;</span>: <span class="number">2</span>&#125;&#125;</span><br><span class="line">limit = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">   search_vectors = [[random.random() <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(dim)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(nq)]</span><br><span class="line">   t0 = time.time()</span><br><span class="line">   results = milvus_client.search(collection_name,</span><br><span class="line">                                  data=search_vectors,</span><br><span class="line">                                  limit=limit,</span><br><span class="line">                                  search_params=search_params,</span><br><span class="line">                                  anns_field=<span class="string">&quot;book_intro&quot;</span>)</span><br><span class="line">   t1 = time.time()</span><br><span class="line">   <span class="keyword">assert</span> <span class="built_in">len</span>(results) == nq</span><br><span class="line">   <span class="keyword">assert</span> <span class="built_in">len</span>(results[<span class="number">0</span>]) == limit</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">f&quot;Search <span class="subst">&#123;i&#125;</span> results: <span class="subst">&#123;results&#125;</span>&quot;</span>)</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">f&quot;Search <span class="subst">&#123;i&#125;</span> latency: <span class="subst">&#123;<span class="built_in">round</span>(t1-t0, <span class="number">4</span>)&#125;</span> seconds&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="配置连接信息"><a href="#配置连接信息" class="headerlink" title="配置连接信息"></a>配置连接信息</h3><p>在 <code>config.ini</code> 中填入你的集群信息（务必保持格式），⚠️ 切勿把 API Key 提交到公开仓库。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">uri</span> = https://&lt;your-endpoint&gt;</span><br><span class="line"><span class="attr">token</span> = &lt;your-api-key&gt;</span><br></pre></td></tr></table></figure><hr><h3 id="运行示例脚本"><a href="#运行示例脚本" class="headerlink" title="运行示例脚本"></a>运行示例脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 hello_zilliz_vectordb.py</span><br></pre></td></tr></table></figure><p>运行后可见类似输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Connected to DB: https://in03-d7b5690fee7bcbf.serverless.ali-cn-hangzhou.cloud.zilliz.com.cn successfully</span><br><span class="line">Start to create the collection schema</span><br><span class="line">Start to prepare index parameters with default AUTOINDEX</span><br><span class="line">Start to create example collection: book</span><br><span class="line">Collection details: &#123;&#x27;collection_name&#x27;: &#x27;book&#x27;, &#x27;auto_id&#x27;: False, &#x27;num_shards&#x27;: 1, &#x27;description&#x27;: &#x27;&#x27;, &#x27;fields&#x27;: [&#123;&#x27;field_id&#x27;: 100, &#x27;name&#x27;: &#x27;book_id&#x27;, &#x27;description&#x27;: &#x27;customized primary id&#x27;, &#x27;type&#x27;: &lt;DataType.INT64: 5&gt;, &#x27;params&#x27;: &#123;&#125;, &#x27;is_primary&#x27;: True&#125;, &#123;&#x27;field_id&#x27;: 101, &#x27;name&#x27;: &#x27;word_count&#x27;, &#x27;description&#x27;: &#x27;word count&#x27;, &#x27;type&#x27;: &lt;DataType.INT64: 5&gt;, &#x27;params&#x27;: &#123;&#125;&#125;, &#123;&#x27;field_id&#x27;: 102, &#x27;name&#x27;: &#x27;book_intro&#x27;, &#x27;description&#x27;: &#x27;book introduction&#x27;, &#x27;type&#x27;: &lt;DataType.FLOAT_VECTOR: 101&gt;, &#x27;params&#x27;: &#123;&#x27;dim&#x27;: 64&#125;&#125;], &#x27;functions&#x27;: [], &#x27;aliases&#x27;: [], &#x27;collection_id&#x27;: 457861707686138665, &#x27;consistency_level&#x27;: 2, &#x27;properties&#x27;: &#123;&#125;, &#x27;num_partitions&#x27;: 1, &#x27;enable_dynamic_field&#x27;: False&#125;</span><br><span class="line">Start to insert 2000 entities into example collection: book</span><br><span class="line">Insert completed in 0.692 seconds</span><br><span class="line">Start to flush</span><br><span class="line">Flush completed in 3.0984 seconds</span><br><span class="line">Search 0 results: data: [&quot;[&#123;&#x27;id&#x27;: 0, &#x27;distance&#x27;: 10.547525405883789, &#x27;entity&#x27;: &#123;&#125;&#125;, &#123;&#x27;id&#x27;: 1, &#x27;distance&#x27;: 10.547525405883789, &#x27;entity&#x27;: &#123;&#125;&#125;]&quot;, &quot;[&#123;&#x27;id&#x27;: 0, &#x27;distance&#x27;: 8.913854598999023, &#x27;entity&#x27;: &#123;&#125;&#125;, &#123;&#x27;id&#x27;: 1, &#x27;distance&#x27;: 8.913854598999023, &#x27;entity&#x27;: &#123;&#125;&#125;]&quot;, &quot;[&#123;&#x27;id&#x27;: 1000, &#x27;distance&#x27;: 9.11572551727295, &#x27;entity&#x27;: &#123;&#125;&#125;, &#123;&#x27;id&#x27;: 1001, &#x27;distance&#x27;: 9.11572551727295, &#x27;entity&#x27;: &#123;&#125;&#125;]&quot;] , extra_info: &#123;&#x27;cost&#x27;: 6&#125;</span><br><span class="line">Search 0 latency: 3.4933 seconds</span><br><span class="line">Search 1 results: data: [&quot;[&#123;&#x27;id&#x27;: 0, &#x27;distance&#x27;: 8.898500442504883, &#x27;entity&#x27;: &#123;&#125;&#125;, &#123;&#x27;id&#x27;: 1, &#x27;distance&#x27;: 8.898500442504883, &#x27;entity&#x27;: &#123;&#125;&#125;]&quot;, &quot;[&#123;&#x27;id&#x27;: 0, &#x27;distance&#x27;: 9.7216157913208, &#x27;entity&#x27;: &#123;&#125;&#125;, &#123;&#x27;id&#x27;: 1, &#x27;distance&#x27;: 9.7216157913208, &#x27;entity&#x27;: &#123;&#125;&#125;]&quot;, &quot;[&#123;&#x27;id&#x27;: 1000, &#x27;distance&#x27;: 8.997819900512695, &#x27;entity&#x27;: &#123;&#125;&#125;, &#123;&#x27;id&#x27;: 1001, &#x27;distance&#x27;: 8.997819900512695, &#x27;entity&#x27;: &#123;&#125;&#125;]&quot;] , extra_info: &#123;&#x27;cost&#x27;: 6&#125;</span><br><span class="line">Search 1 latency: 0.099 seconds</span><br><span class="line">Search 2 results: data: [&quot;[&#123;&#x27;id&#x27;: 0, &#x27;distance&#x27;: 7.597465515136719, &#x27;entity&#x27;: &#123;&#125;&#125;, &#123;&#x27;id&#x27;: 1, &#x27;distance&#x27;: 7.597465515136719, &#x27;entity&#x27;: &#123;&#125;&#125;]&quot;, &quot;[&#123;&#x27;id&#x27;: 0, &#x27;distance&#x27;: 9.255533218383789, &#x27;entity&#x27;: &#123;&#125;&#125;, &#123;&#x27;id&#x27;: 1, &#x27;distance&#x27;: 9.255533218383789, &#x27;entity&#x27;: &#123;&#125;&#125;]&quot;, &quot;[&#123;&#x27;id&#x27;: 0, &#x27;distance&#x27;: 9.471370697021484, &#x27;entity&#x27;: &#123;&#125;&#125;, &#123;&#x27;id&#x27;: 1, &#x27;distance&#x27;: 9.471370697021484, &#x27;entity&#x27;: &#123;&#125;&#125;]&quot;] , extra_info: &#123;&#x27;cost&#x27;: 6&#125;</span><br><span class="line">Search 2 latency: 0.0677 seconds</span><br><span class="line">Search 3 results: data: [&quot;[&#123;&#x27;id&#x27;: 1000, &#x27;distance&#x27;: 8.828998565673828, &#x27;entity&#x27;: &#123;&#125;&#125;, &#123;&#x27;id&#x27;: 1001, &#x27;distance&#x27;: 8.828998565673828, &#x27;entity&#x27;: &#123;&#125;&#125;]&quot;, &quot;[&#123;&#x27;id&#x27;: 1000, &#x27;distance&#x27;: 8.66336441040039, &#x27;entity&#x27;: &#123;&#125;&#125;, &#123;&#x27;id&#x27;: 1001, &#x27;distance&#x27;: 8.66336441040039, &#x27;entity&#x27;: &#123;&#125;&#125;]&quot;, &quot;[&#123;&#x27;id&#x27;: 0, &#x27;distance&#x27;: 9.222965240478516, &#x27;entity&#x27;: &#123;&#125;&#125;, &#123;&#x27;id&#x27;: 1, &#x27;distance&#x27;: 9.222965240478516, &#x27;entity&#x27;: &#123;&#125;&#125;]&quot;] , extra_info: &#123;&#x27;cost&#x27;: 6&#125;</span><br><span class="line">Search 3 latency: 0.0722 seconds</span><br><span class="line">Search 4 results: data: [&quot;[&#123;&#x27;id&#x27;: 0, &#x27;distance&#x27;: 9.342487335205078, &#x27;entity&#x27;: &#123;&#125;&#125;, &#123;&#x27;id&#x27;: 1, &#x27;distance&#x27;: 9.342487335205078, &#x27;entity&#x27;: &#123;&#125;&#125;]&quot;, &quot;[&#123;&#x27;id&#x27;: 0, &#x27;distance&#x27;: 6.45243501663208, &#x27;entity&#x27;: &#123;&#125;&#125;, &#123;&#x27;id&#x27;: 1, &#x27;distance&#x27;: 6.45243501663208, &#x27;entity&#x27;: &#123;&#125;&#125;]&quot;, &quot;[&#123;&#x27;id&#x27;: 0, &#x27;distance&#x27;: 8.369773864746094, &#x27;entity&#x27;: &#123;&#125;&#125;, &#123;&#x27;id&#x27;: 1, &#x27;distance&#x27;: 8.369773864746094, &#x27;entity&#x27;: &#123;&#125;&#125;]&quot;] , extra_info: &#123;&#x27;cost&#x27;: 6&#125;</span><br><span class="line">Search 4 latency: 0.0687 seconds</span><br></pre></td></tr></table></figure><p>如果控制台显示如上日志，即表明已成功连接集群、创建 collection 并完成简单的向量检索。</p><hr><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250626211850476.png" alt="image-20250626211850476"></p><hr><p>然后我们就可以通过控制台来查看这个新建的索引和数据了。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250702113618025.png" alt="image-20250702113618025"></p><p>除此之外，zilliz 还提供了 restapi ，这样我们就可以通过请求 HTTP 来完成数据检索了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl --request POST \</span><br><span class="line">  --url https://in03-d7b5690fee7bcbf.serverless.ali-cn-hangzhou.cloud.zilliz.com.cn/v2/vectordb/collections/list \</span><br><span class="line">  --header <span class="string">&#x27;accept: application/json&#x27;</span> \</span><br><span class="line">  --header <span class="string">&#x27;authorization: Bearer &lt;api-key&gt;&#x27;</span> \</span><br><span class="line">  --data <span class="string">&#x27;&#123;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>Python 版本的如下，需要我们把 api-key 作为 bear token 传到请求头里。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://in03-d7b5690fee7bcbf.serverless.ali-cn-hangzhou.cloud.zilliz.com.cn/v2/vectordb/collections/list&quot;</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;&#123;&#125;&quot;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">  <span class="string">&#x27;Authorization&#x27;</span>: <span class="string">&#x27;Bearer &lt;api-key&gt;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.request(<span class="string">&quot;POST&quot;</span>, url, headers=headers, data=payload)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure><p>同样我们再 Postman 上也可以进行测试，需要注意的是，即使请求体是空的，那么也需要使用 {} 来占位。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250702112141165.png" alt="image-20250702112141165"></p><p>在左侧的 api-playground 中，我们可以看到更多的 API 操作，同时还可以直接在浏览器上发送请求。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250702113040640.png" alt="image-20250702113040640"></p><p>通过 Zilliz Cloud，我们可以在几分钟内获得一套托管版 Milvus 服务，免去本地运维与资源成本，非常适合作为学习、原型开发或小型应用的向量数据库后端。祝大家玩得开心！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在学习 Milvus 向量数据库时，除了本地 Milvus Lite、单机版 Milvus Standalone 或 Milvus on K8s 之外，还可以选择 &lt;strong&gt;Zilliz Cloud&lt;/strong&gt; —— 一种无需部署服务器、零成本上手的托管方案。下面将演示如何申请 Zilliz Cloud 中国区免费套餐并运行官方示例代码。&lt;/p&gt;
&lt;h3 id=&quot;注册并创建免费集群&quot;&gt;&lt;a href=&quot;#注册并创建免费集群&quot; class=&quot;headerlink&quot; title=&quot;注册并创建免费集群&quot;&gt;&lt;/a&gt;注册并创建免费集群&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;打开官网&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;国内站点：&lt;a href=&quot;https://zilliz.com.cn/&quot;&gt;https://zilliz.com.cn/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;海外站点：&lt;a href=&quot;https://zilliz.com/&quot;&gt;https://zilliz.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我们本次实验使用的是国内站点，部署在阿里云，目前可以免费使用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/a508309b90c710ffd1d9e998626c47f9.png&quot; alt=&quot;a508309b90c710ffd1d9e998626c47f9&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Milvus" scheme="https://airag.click/categories/Milvus/"/>
    
    
    <category term="向量数据库" scheme="https://airag.click/tags/%E5%90%91%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>记年初的武汉游记</title>
    <link href="https://airag.click/posts/cc35fe6/"/>
    <id>https://airag.click/posts/cc35fe6/</id>
    <published>2025-07-01T16:00:00.000Z</published>
    <updated>2025-07-16T03:17:26.795Z</updated>
    
    <content type="html"><![CDATA[<p>头一天在重庆机场过的夜，到达江汉路步行街已经快中午了。在附近的来菜吃的藕汤，在北京就很爱吃清水亭，有藕的 N 多种做法，那么来到湖北不可不吃。</p><p>主要还是特意找问当地的小伙伴要了攻略：</p><blockquote><p>推荐的专门吃东西的几条街是玫瑰街、粮道街、万松园、吉庆街这些。早餐小吃比较丰富，武汉的早餐文化特别浓厚，早餐种类特别丰富，很多碳水炸弹。</p><p>正餐可以考虑 来菜，是湖北菜，藕汤是湖北菜最具特色的。文章中下面的信息还是可靠的。</p><p>午餐：这个季节湖北的藕汤已经上市，基本上随便一家都很好喝，一定要选筒子骨藕汤，9 孔粉藕炖的那种。怕踩坑可以选一些连锁的，出品有保障，如刘胖子、老村长、艳阳天，不怕排队也可以去夏氏砂锅。</p><blockquote><p>武汉魅族魅友家：<a href="https://weibo.com/2709494027/4973440665388967">https://weibo.com/2709494027/4973440665388967</a> 这是小伙伴自己总结的</p></blockquote><p>武汉推崇藕汤一定要用粉藕，有炒菜的那种，也可以点干煸藕丝，那就是不同的味道了</p></blockquote><span id="more"></span><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/201b49619f36a1d8c8e0a2270f06ab55.jpg" alt="201b49619f36a1d8c8e0a2270f06ab55"></p><p>江汉路的风景不错，虽然是老城区，住宿条件差强人意。但总归风景和视野还是不错的，可以远眺长江，夜景也很美，楼下就是江汉路步行街。</p><blockquote><p>携程上酒店骂声一片，都是吐槽住宿添加太差的。如果介意的话可以选择住对面的武昌。去的时候爆满，其他地区送早餐给升级房间的桔子水晶都没有增值服务了。</p></blockquote><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/7516977ab7e5461589524d578417cda4.jpg" alt="7516977ab7e5461589524d578417cda4"></p><p>早上的江汉路是没什么人的，不过晚上到 12 点都很热闹。每天都是拖着走废的腿一瘸一拐的走回去的，青城山崴的脚，再经历重庆摧残，最后在武汉彻底残了。</p><p>武汉没有真正的市中心的概念，基本都是一个片区一个片区这样的。武汉本来就是三个城市合并来的，武昌重政治、汉口重经济、汉阳重工业。所以景区或者玩的地方相对也都比较分散。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/b8568bf78a3965faacbfa10417023350.jpg" alt="b8568bf78a3965faacbfa10417023350"></p><p>早餐可以选严老幺的三鲜豆皮和黑色麻将的热干面。那个新出的三鲜面就不要点了，毕竟不是苏州，三鲜面很难吃！！！</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/130d84f81d31f7cc57fc535cdfcecb27.jpg" alt="130d84f81d31f7cc57fc535cdfcecb27"></p><p>现做的三鲜豆皮，很多人排队，一定要现做现吃才好，这样外壳才是脆的。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/21157cd9bac75924716d70921cf13324.jpg" alt="21157cd9bac75924716d70921cf13324"></p><p>山海关路来过个不早的早，每个人拿一个小板凳，5 块钱的热干面，三块钱的藕粉汤，基本早上就吃饱了。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/918caab9550fd67c77a23bcba9fe92db.jpg" alt="918caab9550fd67c77a23bcba9fe92db"></p><p>第二天还是骑车到山海关路继续喝了藕汤，这家叫做金三角吊子煨汤。20 块钱一碗，有排骨有莲藕，总体来说比来菜吃的爽一点吧。算是在武汉吃到的第一个拉丝的藕。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/0e81da7c263f7121c2edf8a7edab12ec.jpg" alt="0e81da7c263f7121c2edf8a7edab12ec"></p><p>山海关路也吃了三鲜豆皮，和毛氏汽水包。不过是在吃不下了，据说这家牛肉面也不错。嗯，来自襄阳。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/cf93a9047c3a84453fa6bb337358b546.jpg" alt="cf93a9047c3a84453fa6bb337358b546"></p><p>这个是小伙伴的旅游攻略：</p><blockquote><p>1、黄鹤楼，现在应该在准备春晚分会场，闭园了<br>2、东湖有空可以看看，东湖绿道、或者磨山风景区也可以锻炼一下，都在东湖片区，哈哈<br>3、湖北省省博物馆离东湖也很近。越王勾践剑、曾侯乙编钟是镇馆之宝。<br>4、武汉大学凌波门不用去了，日出日落这个季节都不太合适。武大校园里面还行，建筑风格也很不错。<br>5、宝通寺、古德寺、归元寺是寺庙，长春观是道观。<br>6、黎黄陂路、昙华林是文艺青年打卡地。黎黄陂路有很多近代风格的建筑，适合拍照。昙华林有一些文创小礼品吧。<br>7、江汉路、楚河汉街、武商梦时代是商圈。江汉路建筑风格是近代租界风格，距离江滩近。楚河汉街有新开的 SKP，奢侈品应该相对多一些。武商梦时代是亚洲最大的单体商场。</p></blockquote><blockquote><p>武汉魅族魅友家：<a href="https://weibo.com/2709494027/4973440665388967">https://weibo.com/2709494027/4973440665388967</a></p></blockquote><p>武汉博物馆真的很大，需要留一天的时间来看。越王勾践剑需要排队很久。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/DJI_20250112122305_0393_D.JPG" alt="DJI_20250112122305_0393_D"></p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/a0a512bd9715878984048cbd60b1fa55.jpg" alt="a0a512bd9715878984048cbd60b1fa55"></p><p>沿着东湖骑车，慢慢就天黑了，然后发现自己在湖中央凌乱。武大不让进，所以一路都在怀疑自己，一个人在外地，大晚上在人少的地方骑车干嘛。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/9baa45370097bb1d3d5b63ff546b6551.jpg" alt="9baa45370097bb1d3d5b63ff546b6551"></p><p>武汉玩的地方，可以考虑下湖北省博物馆，越王勾践剑和曾侯乙编钟（有时候会有编钟表演）。</p><p>东湖也还不错，比较大，春天有樱园，也可以在那边露营。这个季节不是特别推荐，风应该会比较大</p><p>江汉路步行街是商圈，仅临武汉江滩。江滩晚上可以看对岸的楼宇和大桥上的灯光表演，比较类似上次在杭州游船的风景</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/5c5e187b188dc8a92f05a31f52e406b4.jpg" alt="5c5e187b188dc8a92f05a31f52e406b4"></p><p>从东湖离开已经是这个点了。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/DJI_20250113180602_0522_D.JPG" alt="DJI_20250113180602_0522_D"></p><p>在楚河汉街，基本是本老武汉强行拉倒店里。说没有预制菜，藕汤保拉丝。于是大众点评 L6 送了一个价值 60+的藕汤，然后点了一个干煸藕丝。算是在武汉吃的性价比最高的一顿。果然，大众点评高等级在哪里都吃香。不过后来朋友去，据说是是不再送了。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/6fe23d79915042942958b4151d46c151.jpg"></p><p>干煸藕丝很酥脆，虽然说干炸的牛肉不多，但是味道简直无可挑剔。不过一个人吃俩大菜是在是太撑了，还是得找个女朋友一起才好。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/5c2c9e7a750fd7c700a8e266ffbbf9d4.jpg" alt="5c2c9e7a750fd7c700a8e266ffbbf9d4"></p><p>第二天又去了梨园。下午的东湖，美的不可方物。（没坐船，来回要七八十，而且要跟着船马上回来）</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/1fd49b438fdb3566e4d4ed8e26025101.jpg" alt="1fd49b438fdb3566e4d4ed8e26025101"></p><p>美的像一幅画。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/c2ca64c6ed0be78720ab8bfc8b943847.jpg" alt="c2ca64c6ed0be78720ab8bfc8b943847"></p><p>晚上去的夏氏砂锅，因为谈季加上人少，所以基本没排队。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/f3012d41985b79df5be270c5c8e4beb2.jpg" alt="f3012d41985b79df5be270c5c8e4beb2"></p><p>冬天点着炉火，喝着热气腾腾的藕汤，从上暖到下，还有这个藕是真拉丝呀～</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/7c816a7675cc82050067ed38f75c2244.jpg" alt="7c816a7675cc82050067ed38f75c2244"></p><p>徒步横跨长江大桥，属于又菜又还玩，危险指数 4 颗星，车在走桥在晃，小哥自行车在眼前飘过。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/7c2788dfd6818c79eabb230318e27ef7.jpg" alt="7c2788dfd6818c79eabb230318e27ef7"></p><p>用 Apple Watch 记录下这个过程。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/2dcf4cb81e2e41f2092d161693ee66e6.jpg" alt="2dcf4cb81e2e41f2092d161693ee66e6"></p><p>春晚彩排的原因，黄鹤楼进不去。只能在外边听见 1234567 的敲鼓声音，不过很多人也说黄鹤楼在外边看看就好了。</p><blockquote><p>文人的名楼情节，大概是拜崔颢的诗词所赐了。</p></blockquote><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/DJI_20250113200746_0529_D.JPG" alt="DJI_20250113200746_0529_D"></p><p>最后一天来参观国民政府办公厅，现在的南阳大楼被改成了酒店还是饭店一类的场所，只有三楼对外开放。电视剧里的政府办公厅和这个很像。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/89dd0edfb62f8bba4248bbe5c4fec999.jpg" alt="89dd0edfb62f8bba4248bbe5c4fec999"></p><p>请看大图 VCR：</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/2fd07bb791a4ff087c1958946045b86d.jpg" alt="2fd07bb791a4ff087c1958946045b86d"></p><p>还有江汉关博物馆的讲诉曾经的故事，近代的条约，租借等等。。。。</p><p>江汉路以及黎黄坡路的租借都改成了经典或者银行，但是我们仍然可以看到过去的岁月。</p><p>那，南京得什么样啊？</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/42b26aad3399283cd52922e826d9607d.jpg" alt="42b26aad3399283cd52922e826d9607d"></p><p>临走之前吃了，王记牛杂，生滚牛肉热干面，真心不错。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/5f9ab15dd51edde9e139fd1b1ea077e6.jpg" alt="5f9ab15dd51edde9e139fd1b1ea077e6"></p><p>回去写了三天四藕小记：</p><blockquote><p>如果用藕来比作爱情，来菜是初相识，幻想最初的美好，该是粉糯入口即化如亲吻红唇，而非迎合大众变节故作搔首，又道是重口难调。再三思虑下，你终究不是我的头牌。出来乍到幻想要轰轰烈烈的爱情，一次次的修改已不愿再等。</p><p>老武汉是路边的艳遇，你听我诉着苦， 又抚着上次的伤口，于是急切的来一场试探性的邀约，再经历试探，喧闹，繁华过后，你把新唤作老。清炖，油炸样样拉丝。本已无可挑剔，可惜你在灯红酒绿，不能常常如愿。</p><p>小吃街是日常，简单不精致，朴华粗糙，藕形状不一，大口啃着才舒服，细小的渣碎弃之不要。调侃着来往的路人以及同桌的游客，看着提高嗓门吆喝的店家。同时还能大快朵颐享受着放松而自在的瞬间，虽无钟鸣鼎食，处处诉说着平平淡淡。</p><p>夏氏的砂锅是醇厚的，就着炉火，半暗的灯光下，乘上一晚热气腾腾的汤，软糯的藕配着油花花的汤，可以散去一整天的疲惫，这家拉丝也是最多的，点着炉火，就好像无论多晚多累总归有人懂你，等你。汤一定要微烫入口，否则要重新加热到沸腾才行，锅气才是真实的人间烟火。</p></blockquote><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/609cab7b0092c2f91ee18062e5f1d10f.jpg" alt="609cab7b0092c2f91ee18062e5f1d10f"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;头一天在重庆机场过的夜，到达江汉路步行街已经快中午了。在附近的来菜吃的藕汤，在北京就很爱吃清水亭，有藕的 N 多种做法，那么来到湖北不可不吃。&lt;/p&gt;
&lt;p&gt;主要还是特意找问当地的小伙伴要了攻略：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;推荐的专门吃东西的几条街是玫瑰街、粮道街、万松园、吉庆街这些。早餐小吃比较丰富，武汉的早餐文化特别浓厚，早餐种类特别丰富，很多碳水炸弹。&lt;/p&gt;
&lt;p&gt;正餐可以考虑 来菜，是湖北菜，藕汤是湖北菜最具特色的。文章中下面的信息还是可靠的。&lt;/p&gt;
&lt;p&gt;午餐：这个季节湖北的藕汤已经上市，基本上随便一家都很好喝，一定要选筒子骨藕汤，9 孔粉藕炖的那种。怕踩坑可以选一些连锁的，出品有保障，如刘胖子、老村长、艳阳天，不怕排队也可以去夏氏砂锅。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;武汉魅族魅友家：&lt;a href=&quot;https://weibo.com/2709494027/4973440665388967&quot;&gt;https://weibo.com/2709494027/4973440665388967&lt;/a&gt; 这是小伙伴自己总结的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;武汉推崇藕汤一定要用粉藕，有炒菜的那种，也可以点干煸藕丝，那就是不同的味道了&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="游记" scheme="https://airag.click/categories/%E6%B8%B8%E8%AE%B0/"/>
    
    
    <category term="游记" scheme="https://airag.click/tags/%E6%B8%B8%E8%AE%B0/"/>
    
  </entry>
  
</feed>
