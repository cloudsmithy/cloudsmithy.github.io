<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>镜湖</title>
  
  
  <link href="https://xu-hardy.github.io/atom.xml" rel="self"/>
  
  <link href="https://xu-hardy.github.io/"/>
  <updated>2025-07-02T05:33:34.927Z</updated>
  <id>https://xu-hardy.github.io/</id>
  
  <author>
    <name>Xu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>懒猫微服开发篇（一）：懒猫微服全栈上架指南，一步打包，一键发布</title>
    <link href="https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%BC%80%E5%8F%91%E7%AF%87%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%85%A8%E6%A0%88%E4%B8%8A%E6%9E%B6%E6%8C%87%E5%8D%97%EF%BC%8C%E4%B8%80%E6%AD%A5%E6%89%93%E5%8C%85%EF%BC%8C%E4%B8%80%E9%94%AE%E5%8F%91%E5%B8%83/"/>
    <id>https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%BC%80%E5%8F%91%E7%AF%87%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%85%A8%E6%A0%88%E4%B8%8A%E6%9E%B6%E6%8C%87%E5%8D%97%EF%BC%8C%E4%B8%80%E6%AD%A5%E6%89%93%E5%8C%85%EF%BC%8C%E4%B8%80%E9%94%AE%E5%8F%91%E5%B8%83/</id>
    <published>2025-07-02T16:00:00.000Z</published>
    <updated>2025-07-02T05:33:34.927Z</updated>
    
    <content type="html"><![CDATA[<p>懒猫应用离不开社区的力量，有了各位社区贡献者的支持让懒猫商店的应用越来越丰富。下面示范如何把自己的<strong>全栈应用</strong>上架到懒猫微服。</p><p>官网给出的示例里只有 <strong>3 个必备文件</strong>：<code>lzc-build.yml</code>、<code>lzc-icon.png</code>、<code>lzc-manifest.yml</code>。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250630173852407.png" alt="示例目录结构"></p><ul><li>**<code>lzc-icon.png</code>**：应用图标，必须为  PNG。</li><li>**<code>lzc-build.yml</code>**：定义打包脚本、输出路径与图标路径。</li><li>**<code>lzc-manifest.yml</code>**：应用清单，描述路由规则等。<span id="more"></span></li></ul><h3 id="lzc-build-yml-示例"><a href="#lzc-build-yml-示例" class="headerlink" title="lzc-build.yml 示例"></a><code>lzc-build.yml</code> 示例</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打包预处理，例子里是复制目录，打包前端文件</span></span><br><span class="line"><span class="comment"># 见build.sh这个文件</span></span><br><span class="line"><span class="comment"># rm -rf ./dist</span></span><br><span class="line"><span class="comment"># mkdir -p dist</span></span><br><span class="line"><span class="comment"># 构建后端二进制文件，因为后面写了contentdir是 dist 文件夹，</span></span><br><span class="line"><span class="comment"># 所以dist是打包的上下文</span></span><br><span class="line"><span class="comment"># cp -r backend dist/</span></span><br><span class="line"><span class="comment"># 构建前端，这里就是普通的前端打包命令，只是指定了输出文件夹</span></span><br><span class="line"><span class="comment"># cd ui &amp;&amp; npx vite build --emptyOutDir --outDir ../dist/web</span></span><br><span class="line"><span class="attr">buildscript:</span> <span class="string">sh</span> <span class="string">build.sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># manifest: 指定 lpk 包的 manifest.yml ，一般是这个名字不改</span></span><br><span class="line"><span class="attr">manifest:</span> <span class="string">./lzc-manifest.yml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># contentdir: 前面把前后端打包到这个目录还是。</span></span><br><span class="line"><span class="attr">contentdir:</span> <span class="string">./dist</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pkgout: lpk 包的输出路径</span></span><br><span class="line"><span class="attr">pkgout:</span> <span class="string">./</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># icon 指定 lpk 包 icon 的路径路径，如果不指定将会警告</span></span><br><span class="line"><span class="comment"># icon 仅仅允许 png 后缀的文件</span></span><br><span class="line"><span class="attr">icon:</span> <span class="string">./lzc-icon.png</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># dvshell 指定开发依赖的情况，这个我们后面专门来讲讲</span></span><br><span class="line"><span class="comment"># 这种情况下，选用 alpine:latest 作为基础镜像，在 dependencies 中添加所需要的开发依赖即可</span></span><br><span class="line"><span class="comment"># 如果 dependencies 和 build 同时存在，将会优先使用 dependencies</span></span><br><span class="line"><span class="attr">devshell:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/=http://127.0.0.1:5173</span></span><br><span class="line">  <span class="attr">dependencies:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">nodejs</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">python3</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">py3-pip</span></span><br><span class="line">  <span class="attr">setupscript:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    export npm_config_registry=https://registry.npmmirror.com</span></span><br><span class="line"><span class="string">    export PIP_INDEX_URL=https://pypi.tuna.tsinghua.edu.cn/simple</span></span><br></pre></td></tr></table></figure><p><code>build.sh</code> 执行完后目录结构大致如下：</p><ul><li><strong>dist&#x2F;backend</strong> →  后端（可执行&#x2F;脚本）</li><li><strong>dist&#x2F;web</strong> →  前端（静态文件）</li></ul><hr><h3 id="lzc-manifest-yml-示例"><a href="#lzc-manifest-yml-示例" class="headerlink" title="lzc-manifest.yml 示例"></a><code>lzc-manifest.yml</code> 示例</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">lzc-sdk-version:</span> <span class="number">0.1</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">代办清单Py</span></span><br><span class="line"><span class="attr">package:</span> <span class="string">cloud.lazycat.app.todolistpy</span></span><br><span class="line"><span class="attr">version:</span> <span class="number">0.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">description:</span></span><br><span class="line"><span class="attr">license:</span> <span class="string">https://choosealicense.com/licenses/mit/</span></span><br><span class="line"><span class="attr">homepage:</span></span><br><span class="line"><span class="attr">author:</span></span><br><span class="line"><span class="attr">application:</span></span><br><span class="line">  <span class="attr">subdomain:</span> <span class="string">todolistpy</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/=file:///lzcapp/pkg/content/web</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/api/=exec://3000,./lzcapp/pkg/content/backend/run.sh</span></span><br></pre></td></tr></table></figure><p>routes 这里有三种写法：</p><ol><li><strong>file</strong> 代表文件，一般是纯静态文件，比如打包后的前端文件，在 build.sh 打包的前端问题件，我们前面制定了 content 就是&#x2F;lzcapp&#x2F;pkg&#x2F;content&#x2F;，所以&#x2F;lzcapp&#x2F;pkg&#x2F;content&#x2F;web 也就是刚才的 dist&#x2F;web。这个的意思就是说把跟路由转发这个静态目录，其实就是类似 Nginx 托管静态文件这个样子，只是不需要手动打包，写好命令之后，打包工具帮忙做了这一套。</li><li><code>http(s)://$hostname/$path</code>， 这个是我们印象里的，也就是代理后端，比如&#x2F;api&#x2F;&#x3D;http(s):&#x2F;&#x2F;$hostname&#x2F;$path，其实就类似 Nginx 的 proxy_pass。这个是我们熟知的后端。</li><li><strong>exec</strong>：这个和 http(s)很像，后面多加了一个 run.sh，相当于在转发到 http(s)路由之前，先执行这个脚本。一般是用来一直环境，比如 pip install 什么的，但是由于每个人的环境不一样，还是要使用多个镜像源才保险，我上架的应用就遇到用户通过清华源下载报错 HTTP403 以及 腾讯源下载签名不匹配的问题，或者干脆使用 Docker，这个我们后面再说。</li></ol><p>附上 pip 多源的例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 已有 —— 主索引 &amp; 前两级备用</span></span><br><span class="line">pip config <span class="built_in">set</span>  global.index-url        https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">pip config --add global.extra-index-url https://pypi.mirrors.ustc.edu.cn/simple/</span><br><span class="line">pip config --add global.extra-index-url https://mirrors.bfsu.edu.cn/pypi/web/simple/</span><br><span class="line"></span><br><span class="line"><span class="comment"># ③ 阿里云（华东节点评测最稳）</span></span><br><span class="line">pip config --add global.extra-index-url https://mirrors.aliyun.com/pypi/simple/</span><br><span class="line"></span><br><span class="line"><span class="comment"># ④ 华为云（华南线路友好）</span></span><br><span class="line">pip config --add global.extra-index-url https://repo.huaweicloud.com/repository/pypi/simple/</span><br><span class="line"></span><br><span class="line"><span class="comment"># ⑤ 字节跳动开源镜像（火山引擎，带全站 CDN）</span></span><br><span class="line">pip config --add global.extra-index-url https://mirrors.byteimg.com/pypi/simple/</span><br><span class="line"></span><br><span class="line"><span class="comment"># ⑥ 南京大学镜像（NJU，教育网 &amp; 华东建议保留）</span></span><br><span class="line">pip config --add global.extra-index-url https://mirrors.nju.edu.cn/pypi/web/simple/</span><br></pre></td></tr></table></figure><hr><h3 id="打包与安装"><a href="#打包与安装" class="headerlink" title="打包与安装"></a>打包与安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打包成 LPK</span></span><br><span class="line">lzc-cli project build -o release.lpk</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在线安装 LPK</span></span><br><span class="line">lzc-cli app install release.lpk</span><br></pre></td></tr></table></figure><p>然后是打包，如果缺少 lzc-build.yml，lzc-icon.png，lzc-manifest.yml 三者之一就会报错。</p><p>LPK 是懒猫微服应用商店 APP 的安装包格式，其实可以理解为一个配置文件的压缩包，安装之后其实就是在微服内部启动了一个 alpine 的 image，然后通过 build.sh 安装依赖。</p><p>通过 lzc-docker 来看，直接打包的就是这个 images registry.lazycat.cloud&#x2F;lzc&#x2F;lzcapp:3.20.3</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250630181419299.png" alt="image-20250630181419299"></p><p>命令如下<strong>lzc-docker history –no-trunc registry.lazycat.cloud&#x2F;lzc&#x2F;lzcapp:3.20.3</strong>，能够看到是 Alpine 作为 base image，然后更换中科大的源，以及安装 <strong>gcompat</strong> 以兼容 glibc 程序。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(base) lzcbox-029c588e ~ <span class="comment"># lzc-docker history --no-trunc registry.lazycat.cloud/lzc/lzcapp:3.20.3</span></span><br><span class="line">IMAGE                                                                     CREATED        CREATED BY                                                                                                SIZE      COMMENT</span><br><span class="line">sha256:ba7a533c869a26d89e83bdc5ddb978df5a3502ac91452422a649d0d3cf52190b   7 months ago   RUN /bin/sh -c apk add gcompat <span class="comment"># buildkit                                                                 2.48MB    buildkit.dockerfile.v0</span></span><br><span class="line">&lt;missing&gt;                                                                 7 months ago   RUN /bin/sh -c sed -i <span class="string">&#x27;s/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g&#x27;</span> /etc/apk/repositories <span class="comment"># buildkit   97B       buildkit.dockerfile.v0</span></span><br><span class="line">&lt;missing&gt;                                                                 9 months ago   CMD [<span class="string">&quot;/bin/sh&quot;</span>]                                                                                           0B        buildkit.dockerfile.v0</span><br><span class="line">&lt;missing&gt;                                                                 9 months ago   ADD alpine-minirootfs-3.20.3-x86_64.tar.gz / <span class="comment"># buildkit                                                   7.8MB     buildkit.dockerfile.v0</span></span><br><span class="line">(base) lzcbox-029c588e ~ <span class="comment">#</span></span><br></pre></td></tr></table></figure><p>甚至可以看到，这个 image 是连 bash 以及各种开发运行时都没有的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(base) lzcbox-029c588e ~ # lzc-docker run -it registry.lazycat.cloud/lzc/lzcapp:3.20.3 bash</span><br><span class="line">docker: Error response from daemon: failed to create task for container: failed to create shim task: OCI runtime create failed: runc create failed: unable to start container process: error during container init: exec: &quot;bash&quot;: executable file not found in $PATH: unknown.</span><br><span class="line">(base) lzcbox-029c588e ~ # lzc-docker run -it registry.lazycat.cloud/lzc/lzcapp:3.20.3 sh</span><br><span class="line">/ # go</span><br><span class="line">sh: go: not found</span><br><span class="line">/ # npm</span><br><span class="line">sh: npm: not found</span><br><span class="line">/ # pip</span><br><span class="line">sh: pip: not found</span><br><span class="line">/ # python</span><br><span class="line">sh: python: not found</span><br><span class="line">/ #</span><br></pre></td></tr></table></figure><p>所以这个 backend 文件夹的 run.sh 是拿来安装 Python 依赖的。而前端是使用本地的 npm 打包的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line"></span><br><span class="line"># 切换到当前目录</span><br><span class="line">cd &quot;$(dirname &quot;$0&quot;)&quot;</span><br><span class="line">sed -i &#x27;s/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g&#x27; /etc/apk/repositories</span><br><span class="line">apk update</span><br><span class="line">apk add python3 py3-pip</span><br><span class="line"># ❶ 设主索引，只能有一个</span><br><span class="line"># 已有 —— 主索引 &amp; 前两级备用</span><br><span class="line">pip config set  global.index-url        https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">pip config --add global.extra-index-url https://pypi.mirrors.ustc.edu.cn/simple/</span><br><span class="line">pip config --add global.extra-index-url https://mirrors.bfsu.edu.cn/pypi/web/simple/</span><br><span class="line"></span><br><span class="line"># ③ 阿里云（华东节点评测最稳）</span><br><span class="line">pip config --add global.extra-index-url https://mirrors.aliyun.com/pypi/simple/</span><br><span class="line"></span><br><span class="line"># ④ 华为云（华南线路友好）</span><br><span class="line">pip config --add global.extra-index-url https://repo.huaweicloud.com/repository/pypi/simple/</span><br><span class="line"></span><br><span class="line"># ⑤ 字节跳动开源镜像（火山引擎，带全站 CDN）</span><br><span class="line">pip config --add global.extra-index-url https://mirrors.byteimg.com/pypi/simple/</span><br><span class="line"></span><br><span class="line"># ⑥ 南京大学镜像（NJU，教育网 &amp; 华东建议保留）</span><br><span class="line">pip config --add global.extra-index-url https://mirrors.nju.edu.cn/pypi/web/simple/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pip install -r ./requirements.txt --break-system-packages</span><br><span class="line">python3 app.py</span><br></pre></td></tr></table></figure><p>安装之后的 app 可以通过 lzc-docker 查看，也可以使用 Dozze 查看日志，一般 debug 时候的时候会看这个。</p><p>DOZZL 需要安装开发者工具，然后使用<a href="https://dev.设备名.heiyu.space/dozzle/%E8%AE%BF%E9%97%AE%E3%80%82">https://dev.设备名.heiyu.space/dozzle/访问。</a></p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250630190230526.png" alt="image-20250630190230526"></p><p>一般来说部署有两个 pod，一个是 App-1 结尾的，主要是涉及到转发，run.sh 自动安装依赖，以及健康检查。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PATH:&quot;/&quot; is served by &quot;file&quot;://&quot;/lzcapp/pkg/content/dist&quot;</span><br><span class="line">PATH:&quot;/api/&quot; is served by &quot;http&quot;://&quot;host.lzcapp:53443&quot;</span><br><span class="line">health check finished</span><br></pre></td></tr></table></figure><p>应用名字-1 结尾的，这个才是应用的日志。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[2025-06-29 17:29:29 +0800] [1] [INFO] Starting gunicorn 23.0.0</span><br><span class="line">[2025-06-29 17:29:29 +0800] [1] [INFO] Listening at: http://0.0.0.0:9527 (1)</span><br><span class="line">[2025-06-29 17:29:29 +0800] [1] [INFO] Using worker: sync</span><br><span class="line">[2025-06-29 17:29:29 +0800] [9] [INFO] Booting worker with pid: 9</span><br></pre></td></tr></table></figure><p>希望大家都能够多多为懒猫微服贡献应用。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;懒猫应用离不开社区的力量，有了各位社区贡献者的支持让懒猫商店的应用越来越丰富。下面示范如何把自己的&lt;strong&gt;全栈应用&lt;/strong&gt;上架到懒猫微服。&lt;/p&gt;
&lt;p&gt;官网给出的示例里只有 &lt;strong&gt;3 个必备文件&lt;/strong&gt;：&lt;code&gt;lzc-build.yml&lt;/code&gt;、&lt;code&gt;lzc-icon.png&lt;/code&gt;、&lt;code&gt;lzc-manifest.yml&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250630173852407.png&quot; alt=&quot;示例目录结构&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;**&lt;code&gt;lzc-icon.png&lt;/code&gt;**：应用图标，必须为  PNG。&lt;/li&gt;
&lt;li&gt;**&lt;code&gt;lzc-build.yml&lt;/code&gt;**：定义打包脚本、输出路径与图标路径。&lt;/li&gt;
&lt;li&gt;**&lt;code&gt;lzc-manifest.yml&lt;/code&gt;**：应用清单，描述路由规则等。</summary>
    
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/categories/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
    
    <category term="开发" scheme="https://xu-hardy.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>懒猫微服开发篇（二）：远程调试之 Devshell</title>
    <link href="https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%BC%80%E5%8F%91%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95%E4%B9%8B-devshell/"/>
    <id>https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%BC%80%E5%8F%91%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95%E4%B9%8B-devshell/</id>
    <published>2025-07-02T16:00:00.000Z</published>
    <updated>2025-07-02T05:33:34.927Z</updated>
    
    <content type="html"><![CDATA[<p>我们上一篇讲述了如何打包上架 APP，这期我们就来看如何远程调试即将上架的 APP。</p><p>简单来讲，这个 devshell 其实就是在微服上打开了一个虚拟机环境，然后我们可以进去里面测试我们的命令。非要说技术实现，那就是 docker exec 了。只不过是做成了本地和微服之间同步的样子。</p><p>输入微服的名字&#x2F;v2&#x2F;_catalog，可以看到微服里面 Docker 仓库存放的镜像，debug.bridge 开头的就是 devshell 的 image。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;repositories&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;debug.bridge/231ee20d4e4d8edbd2004e7609fd9c15&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;debug.bridge/ddc6dbf609125b7bd2c0efb0ed4254d1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;helloworld&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>在 lzc-build.yml 里定义了 devshell 的配置，这个的意思是就是安装 node 和 python 的环境，设置国内源，然后讲根目录转发到 5173，这个是 vue 的端口。所以我们可以推断，这个是一个 Vue+python 的全栈项目，所以我们可以开两个终端来进入 devshell，分别调试前后端。</p><span id="more"></span><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">devshell:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/=http://127.0.0.1:5173</span></span><br><span class="line">  <span class="attr">dependencies:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">nodejs</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">python3</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">py3-pip</span></span><br><span class="line">  <span class="attr">setupscript:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    export npm_config_registry=https://registry.npmmirror.com</span></span><br><span class="line"><span class="string">    export PIP_INDEX_URL=https://pypi.tuna.tsinghua.edu.cn/simple</span></span><br></pre></td></tr></table></figure><p>使用 lzc-cli project devshell -f 进入 devshell，可以看到这个使用了 registry.lazycat.cloud&#x2F;lzc-cli&#x2F;devshell 作为 base image，然后换源安装依赖。最后设置 setupscript 里面的 ENV。而 CMD [“sleep”, “infinity”]<code>会让容器启动后执行</code>sleep infinity&#96; 命令，即无限休眠。目的是防止容器因没有前台进程而自动退出（保持容器处于“运行”状态）。</p><p>这里有个问题，如果你在 lzc-manifest.yml 里指定了 routes 也同样会生效。如果你要跑一些初始化脚本，可以在使用这两个办法</p><ol><li>在 lzc-manifest.yml 文件中使用&#x2F;api&#x2F;&#x3D;exec:&#x2F;&#x2F;3000,.&#x2F;lzcapp&#x2F;pkg&#x2F;content&#x2F;backend&#x2F;run.sh</li><li>lzc-build.yml 中注入脚本 setupscript。</li></ol><p>如果你偷懒在 lzc-build.yml 里 routes 的执行&#x2F;api&#x2F;&#x3D;exec:&#x2F;&#x2F;3000,.&#x2F;lzcapp&#x2F;pkg&#x2F;cache&#x2F;backend&#x2F;run.sh，似乎也只能转发端口，不能运行脚本。</p><p>从日志看，也就是说还是安装了一个应用程序上去，只不过我们可以通过类似 ssh remote 的方式来动态调试。如果 APP 上架之后，能做的恐怕只有 lzc-docker exec 了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">跳过执行 buildscript</span><br><span class="line">跳过拷贝 contentdir 内容</span><br><span class="line"></span><br><span class="line">Dockerfile</span><br><span class="line">STEP 1/4: FROM registry.lazycat.cloud/lzc-cli/devshell:v0.0.5</span><br><span class="line">STEP 2/4: RUN sed -i &#x27;s/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g&#x27; /etc/apk/repositories</span><br><span class="line">--&gt; Using cache 2302149ded79afb639f9935a07e7ea0d63b5644b10e9890d49ad06786e7b31db</span><br><span class="line">--&gt; 2302149ded79</span><br><span class="line">STEP 3/4: RUN apk add --no-cache bash nodejs npm py3-pip python3   &amp;&amp; echo &quot;root:root&quot; | chpasswd</span><br><span class="line">--&gt; Using cache 9bb679fa2c9d10ab1a2433be4c59c852affb2a6844c62ecd9eb8d727505821fb</span><br><span class="line">--&gt; 9bb679fa2c9d</span><br><span class="line">STEP 4/4: CMD [&quot;sleep&quot;, &quot;infinity&quot;]</span><br><span class="line">--&gt; Using cache 5ed701af0e0f7040c3dc5409f547b271b4f4e792fd4fcbfc4af8a3abecf8d363</span><br><span class="line">COMMIT debug.bridge/ddc6dbf609125b7bd2c0efb0ed4254d1:latest</span><br><span class="line">--&gt; 5ed701af0e0f</span><br><span class="line">Successfully tagged debug.bridge/ddc6dbf609125b7bd2c0efb0ed4254d1:latest</span><br><span class="line">5ed701af0e0f7040c3dc5409f547b271b4f4e792fd4fcbfc4af8a3abecf8d363</span><br><span class="line">Getting image source signatures</span><br><span class="line">Copying blob sha256:c164879b06ca56693b742ec917059cce495320d4d8f6140bde7e875f53377ea1</span><br><span class="line">Copying blob sha256:69bc8c25bce956e4c34fdfee091c531ffa8660454526ea9f76c956f9b930c57b</span><br><span class="line">Copying blob sha256:98e60e58e2d093fd95b5d5d61ae6dac25bff89ba1b46d42395d480dfb75bddab</span><br><span class="line">Copying blob sha256:d4fc045c9e3a848011de66f34b81f052d4f2c15a17bb196d637e526349601820</span><br><span class="line">Copying blob sha256:b244bd08b327b00bfbbbbf4f424ade914ee891a52d9192a573dbe484e22d86ab</span><br><span class="line">Copying config sha256:5ed701af0e0f7040c3dc5409f547b271b4f4e792fd4fcbfc4af8a3abecf8d363</span><br><span class="line">Writing manifest to image destination</span><br><span class="line">输出lpk包 /Users/xu/Desktop/todolist-py-lzcapp-demo/cloud.lazycat.app.todolistpy-v0.0.1.lpk</span><br><span class="line">开始部署应用</span><br><span class="line">开始安装应用</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">安装成功！</span><br><span class="line">👉 请在浏览器中访问 https://todolistpy.dev.heiyu.space</span><br><span class="line">👉 并使用微服的用户名和密码登录</span><br><span class="line"></span><br><span class="line">+ export &#x27;npm_config_registry=https://registry.npmmirror.com&#x27;</span><br><span class="line">+ export &#x27;PIP_INDEX_URL=https://pypi.tuna.tsinghua.edu.cn/simple&#x27;</span><br><span class="line">+ set -e</span><br><span class="line">+ mkdir -p /lzcapp/cache/devshell</span><br><span class="line"></span><br><span class="line">+ cd /lzcapp/cache/devshell</span><br><span class="line">+ exec /bin/sh</span><br><span class="line">/lzcapp/cache/devshell #</span><br><span class="line">/lzcapp/cache/devshell # ls</span><br><span class="line">README.md         backend           build.sh          lzc-build.yml     lzc-icon.png      lzc-manifest.yml  ui</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们可以看到文件夹的内容已经被同步过来了，我们可以实时同步开发机文件的创建和修改。不过目前和移动，重命名相关的同步有点小问题，具体表现为</p><ol><li>本地删除旧的文件，但是 devshell 里不会同步删除</li><li>删除文件 a，但是把 b 重名为 a，devshell 不会同步更改（但是删除 a 重建可以）</li></ol><p>相信这两个小问题修好也只是时间问题，当然也有 workaround。</p><p>从&#x2F;data&#x2F;app&#x2F;cache&#x2F;包名这个目录删除 devshell 文件夹之后，然后重新执行 lzc-cli project devshell -f ，这样工作区就被清理干净了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(base) lzcbox-029c588e /data/app/cache/cloud.lazycat.app.todolistpy <span class="comment"># ls</span></span><br><span class="line">devshell</span><br><span class="line">(base) lzcbox-029c588e /data/app/cache/cloud.lazycat.app.todolistpy <span class="comment"># cd devshell/</span></span><br><span class="line">(base) lzcbox-029c588e /data/app/cache/cloud.lazycat.app.todolistpy/devshell <span class="comment"># ls</span></span><br><span class="line">1  1312  README.md  backend  build.sh  lzc-build.yml  lzc-icon.png  lzc-manifest.yml  ui</span><br></pre></td></tr></table></figure><p>另外，我们再通过 ssh 进入&#x2F;data&#x2F;app 这个目录，有两个子文件夹，一个叫做 cache，一个叫做 var。 cache 就是我们这个 devshell 的工作区。var 就是数据持久化的目录。如果在这里新建一个目录，那么就可以在网盘里实时看到。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/data/app/var/xu.deploy.lazycat-nav <span class="comment"># touch test</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250702063901802.png" alt="image-20250702063901802"></p><p>以上就是 devshell 的全部内容了，如果你需要借助微服的一些特性还进行开发，比如获取环境变量，OIDC 什么的，可以用这个方法来轻松调试。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;我们上一篇讲述了如何打包上架 APP，这期我们就来看如何远程调试即将上架的 APP。&lt;/p&gt;
&lt;p&gt;简单来讲，这个 devshell 其实就是在微服上打开了一个虚拟机环境，然后我们可以进去里面测试我们的命令。非要说技术实现，那就是 docker exec 了。只不过是做成了本地和微服之间同步的样子。&lt;/p&gt;
&lt;p&gt;输入微服的名字&amp;#x2F;v2&amp;#x2F;_catalog，可以看到微服里面 Docker 仓库存放的镜像，debug.bridge 开头的就是 devshell 的 image。&lt;/p&gt;
&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;punctuation&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&amp;quot;repositories&amp;quot;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;punctuation&quot;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&amp;quot;debug.bridge/231ee20d4e4d8edbd2004e7609fd9c15&amp;quot;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&amp;quot;debug.bridge/ddc6dbf609125b7bd2c0efb0ed4254d1&amp;quot;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&amp;quot;helloworld&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;punctuation&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在 lzc-build.yml 里定义了 devshell 的配置，这个的意思是就是安装 node 和 python 的环境，设置国内源，然后讲根目录转发到 5173，这个是 vue 的端口。所以我们可以推断，这个是一个 Vue+python 的全栈项目，所以我们可以开两个终端来进入 devshell，分别调试前后端。&lt;/p&gt;</summary>
    
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/categories/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
    
    <category term="开发" scheme="https://xu-hardy.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>懒猫微服开发篇（三）：如何将已有 Docker Compose 应用移植到懒猫微服</title>
    <link href="https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%BC%80%E5%8F%91%E7%AF%87%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E5%A6%82%E4%BD%95%E5%B0%86%E5%B7%B2%E6%9C%89-docker-compose-%E5%BA%94%E7%94%A8%E7%A7%BB%E6%A4%8D%E5%88%B0%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    <id>https://xu-hardy.github.io/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E5%BC%80%E5%8F%91%E7%AF%87%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E5%A6%82%E4%BD%95%E5%B0%86%E5%B7%B2%E6%9C%89-docker-compose-%E5%BA%94%E7%94%A8%E7%A7%BB%E6%A4%8D%E5%88%B0%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/</id>
    <published>2025-07-02T16:00:00.000Z</published>
    <updated>2025-07-02T05:33:34.927Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文延续前两篇，演示如何把一个已经在本地运行良好的 Docker Compose 应用打包并上架到懒猫微服应用商店。以 Milvus 为例，逐步拆解 Manifest 配置、路由映射、数据卷绑定以及镜像加速等关键环节，帮助大家快速完成移植。</p></blockquote><h3 id="1-目录结构与核心文件"><a href="#1-目录结构与核心文件" class="headerlink" title="1. 目录结构与核心文件"></a>1. 目录结构与核心文件</h3><p>在懒猫微服中，一个最小可用的应用包仅需两个文件：</p><table><thead><tr><th>文件</th><th>作用</th></tr></thead><tbody><tr><td><code>lzc-build.yml</code></td><td>描述打包流程及应用图标。简单应用只需指定 <code>icon</code> 即可。</td></tr><tr><td><code>lzc-manifest.yml</code></td><td>定义应用元数据与服务编排，是移植的重点。</td></tr></tbody></table><p>本文主要关注 <code>lzc-manifest.yml</code> 的编写。</p><h3 id="2-lzc-manifest-yml-字段逐一解析"><a href="#2-lzc-manifest-yml-字段逐一解析" class="headerlink" title="2. lzc-manifest.yml 字段逐一解析"></a>2. <code>lzc-manifest.yml</code> 字段逐一解析</h3><p>现在有了懒猫应用查看器很方便，我们以商店里的 Milvus 的示例 Manifest 为例，并附带注释说明。</p><span id="more"></span><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250702125730816.png" alt="image-20250702125730816"></p><p>这个 lzc-mainfest.yml 解析是重点。主要是 subdomain，ingress，services 这几个字段。总体上还是延续了 Docker compose 的风格。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">lzc-sdk-version:</span> <span class="string">&quot;0.1&quot;</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">Milvus</span></span><br><span class="line"><span class="attr">package:</span> <span class="string">in.zhaoj.milvus</span></span><br><span class="line"><span class="attr">version:</span> <span class="number">2.5</span><span class="number">.8</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">milvus</span></span><br><span class="line"><span class="attr">application:</span></span><br><span class="line">  <span class="comment"># 子域名：应用上线后将访问 https://milvus.&lt;机器名&gt;.heiyu.space</span></span><br><span class="line">  <span class="attr">subdomain:</span> <span class="string">milvus</span></span><br><span class="line">  <span class="attr">background_task:</span> <span class="literal">false</span> <span class="comment"># 是否允许后台运行</span></span><br><span class="line">  <span class="attr">multi_instance:</span> <span class="literal">false</span> <span class="comment"># 是否允许多实例</span></span><br><span class="line">  <span class="attr">gpu_accel:</span> <span class="literal">false</span> <span class="comment"># 是否请求 GPU</span></span><br><span class="line">  <span class="attr">routes:</span> <span class="comment"># 七层（HTTP）路由</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/=http://attu.in.zhaoj.milvus.lzcapp:3000/</span></span><br><span class="line">  <span class="attr">ingress:</span> <span class="comment"># 四层（TCP）转发</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">tcp</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">19530</span></span><br><span class="line">      <span class="attr">service:</span> <span class="string">standalone</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">tcp</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">9091</span></span><br><span class="line">      <span class="attr">service:</span> <span class="string">standalone</span></span><br><span class="line"><span class="attr">services:</span> <span class="comment"># 以下基本等同于 docker‑compose 中的 services</span></span><br><span class="line">  <span class="attr">etcd:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">registry.lazycat.cloud/longixaoyi/milvusdb/etcd:v3.5.18</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ETCD_AUTO_COMPACTION_MODE=revision</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ETCD_AUTO_COMPACTION_RETENTION=1000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ETCD_QUOTA_BACKEND_BYTES=4294967296</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ETCD_SNAPSHOT_COUNT=50000</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">&gt;</span></span><br><span class="line"><span class="string">      etcd -advertise-client-urls=http://127.0.0.1:2379</span></span><br><span class="line"><span class="string">           -listen-client-urls http://0.0.0.0:2379</span></span><br><span class="line"><span class="string">           --data-dir /etcd</span></span><br><span class="line"><span class="string"></span>    <span class="attr">binds:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/lzcapp/var/etcd:/etcd</span></span><br><span class="line">  <span class="attr">minio:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">registry.lazycat.cloud/longixaoyi/milvusdb/minio:RELEASE.2023-03-20T20-16-18Z</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MINIO_ACCESS_KEY=minioadmin</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MINIO_SECRET_KEY=minioadmin</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">minio</span> <span class="string">server</span> <span class="string">/minio_data</span></span><br><span class="line">    <span class="attr">binds:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/lzcapp/var/minio_data:/minio_data</span></span><br><span class="line">    <span class="attr">health_check:</span></span><br><span class="line">      <span class="attr">test:</span> [<span class="string">&quot;CMD&quot;</span>, <span class="string">&quot;curl&quot;</span>, <span class="string">&quot;-f&quot;</span>, <span class="string">&quot;http://localhost:9000/minio/health/live&quot;</span>]</span><br><span class="line">  <span class="attr">standalone:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">registry.lazycat.cloud/longixaoyi/milvusdb/milvus:v2.6.0-rc1</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">milvus</span> <span class="string">run</span> <span class="string">standalone</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ETCD_ENDPOINTS=etcd:2379</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MINIO_ADDRESS=minio:9000</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">etcd</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">minio</span></span><br><span class="line">    <span class="attr">binds:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/lzcapp/var/milvus:/var/lib/milvus</span></span><br><span class="line">  <span class="attr">attu:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">registry.lazycat.cloud/longixaoyi/zilliz/attu:latest</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MILVUS_URL=standalone:19530</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">standalone</span></span><br></pre></td></tr></table></figure><h4 id="2-1-subdomain"><a href="#2-1-subdomain" class="headerlink" title="2.1 subdomain"></a>2.1 <code>subdomain</code></h4><p>subdomain 是应用程序上线的域名，例如上述配置上线后即为 <code>https://milvus.&lt;节点名&gt;.heiyu.space</code>。</p><h4 id="2-2-routes"><a href="#2-2-routes" class="headerlink" title="2.2 routes"></a>2.2 <code>routes</code></h4><p>route 来做七层的 HTTP 转发，类似 Nginx 的反向代理。规则格式为 <code>本地路径 = 目标 URL</code>。在示例中，根路径 <code>/</code> 被转发到前端服务 <code>attu</code> 的 3000 端口。</p><p>URL 规则：服务名.包名.lzcapp:端口。（包名随意起）</p><pre><code>- /=http://attu.in.zhaoj.milvus.lzcapp:3000/</code></pre><p>这里 attu 是服务名，端口是 3000，in.zhaoj.milvus 是包名。</p><h4 id="2-3-ingress"><a href="#2-3-ingress" class="headerlink" title="2.3 ingress"></a>2.3 <code>ingress</code></h4><p>用于四层直通转发，适用于非 HTTP 协议（数据库、SSH 等）。示例将 Milvus 的 gRPC (19530) 与 HTTP (9091) 端口暴露给外部。</p><h4 id="2-4-bind"><a href="#2-4-bind" class="headerlink" title="2.4 bind"></a>2.4 <code>bind</code></h4><p>Manifest 中的绑定路径以 <code>/lzcapp/var</code> 为前缀。发布后会被映射到宿主机的 <code>/data/app/var/&lt;package&gt;</code>，也算是为了简化程序移植和学习成本。和 Docker-compose 写绝对路径来说，这里的可移植性执行更好。</p><p>健康检查在这里不是必须的，因为打包的上架的时候服务会帮忙做这个事情。</p><h3 id="3-服务映射与-docker-compose-yml-对照"><a href="#3-服务映射与-docker-compose-yml-对照" class="headerlink" title="3. 服务映射与 docker-compose.yml 对照"></a>3. 服务映射与 <code>docker-compose.yml</code> 对照</h3><p>懒猫 Manifest 的 <code>services</code> 段几乎一一复刻了传统 Compose 配置，常用键均保持一致。以下列出了 Milvus 官方 <code>docker-compose.yml</code>，方便对照理解：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.5&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">etcd:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">milvus-etcd</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">quay.io/coreos/etcd:v3.5.18</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ETCD_AUTO_COMPACTION_MODE=revision</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ETCD_AUTO_COMPACTION_RETENTION=1000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ETCD_QUOTA_BACKEND_BYTES=4294967296</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ETCD_SNAPSHOT_COUNT=50000</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;DOCKER_VOLUME_DIRECTORY:-.&#125;/volumes/etcd:/etcd</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">etcd</span> <span class="string">-advertise-client-urls=http://etcd:2379</span> <span class="string">-listen-client-urls</span> <span class="string">http://0.0.0.0:2379</span> <span class="string">--data-dir</span> <span class="string">/etcd</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> [<span class="string">&quot;CMD&quot;</span>, <span class="string">&quot;etcdctl&quot;</span>, <span class="string">&quot;endpoint&quot;</span>, <span class="string">&quot;health&quot;</span>]</span><br><span class="line">      <span class="attr">interval:</span> <span class="string">30s</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">20s</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">minio:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">milvus-minio</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">minio/minio:RELEASE.2023-03-20T20-16-18Z</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MINIO_ACCESS_KEY:</span> <span class="string">minioadmin</span></span><br><span class="line">      <span class="attr">MINIO_SECRET_KEY:</span> <span class="string">minioadmin</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9001:9001&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9000:9000&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;DOCKER_VOLUME_DIRECTORY:-.&#125;/volumes/minio:/minio_data</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">minio</span> <span class="string">server</span> <span class="string">/minio_data</span> <span class="string">--console-address</span> <span class="string">&quot;:9001&quot;</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> [<span class="string">&quot;CMD&quot;</span>, <span class="string">&quot;curl&quot;</span>, <span class="string">&quot;-f&quot;</span>, <span class="string">&quot;http://localhost:9000/minio/health/live&quot;</span>]</span><br><span class="line">      <span class="attr">interval:</span> <span class="string">30s</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">20s</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">standalone:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">milvus-standalone</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">milvusdb/milvus:v2.6.0-rc1</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;milvus&quot;</span>, <span class="string">&quot;run&quot;</span>, <span class="string">&quot;standalone&quot;</span>]</span><br><span class="line">    <span class="attr">security_opt:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">seccomp:unconfined</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">ETCD_ENDPOINTS:</span> <span class="string">etcd:2379</span></span><br><span class="line">      <span class="attr">MINIO_ADDRESS:</span> <span class="string">minio:9000</span></span><br><span class="line">      <span class="attr">MQ_TYPE:</span> <span class="string">woodpecker</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;DOCKER_VOLUME_DIRECTORY:-.&#125;/volumes/milvus:/var/lib/milvus</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> [<span class="string">&quot;CMD&quot;</span>, <span class="string">&quot;curl&quot;</span>, <span class="string">&quot;-f&quot;</span>, <span class="string">&quot;http://localhost:9091/healthz&quot;</span>]</span><br><span class="line">      <span class="attr">interval:</span> <span class="string">30s</span></span><br><span class="line">      <span class="attr">start_period:</span> <span class="string">90s</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">20s</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">3</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;19530:19530&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9091:9091&quot;</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;etcd&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;minio&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">default:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">milvus</span></span><br></pre></td></tr></table></figure><p>差异点主要体现在：</p><ul><li>镜像源：建议通过 <code>lzc-cli appstore copy-image &lt;image&gt;</code> 把镜像同步到 <code>registry.lazycat.cloud</code>，解决国内网络拉取问题。</li><li>端口声明：在 Manifest 中，外部访问端口通过 <code>ingress</code>，不再使用 Compose 的 <code>ports</code>。</li><li>健康检查：懒猫平台会统一探测容器存活，可按需省略 <code>healthcheck</code>。</li></ul><h3 id="4-镜像加速实践"><a href="#4-镜像加速实践" class="headerlink" title="4. 镜像加速实践"></a>4. 镜像加速实践</h3><p>一条命令即可完成镜像复制并输出新的仓库地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">lzc-cli appstore copy-image nginx                                                                                                                           (base) 13:15:36</span><br><span class="line">Waiting ... ( copy nginx to lazycat offical registry)</span><br><span class="line">uploading</span><br><span class="line">23e05839: [####################################################################################################] 100%</span><br><span class="line">23e05839: [####################################################################################################] 100%</span><br><span class="line">23e05839: [####################################################################################################] 100%</span><br><span class="line">3da95a90: [####################################################################################################] 100%</span><br><span class="line">48670a58: [####################################################################################################] 100%</span><br><span class="line">6c8e51cf: [####################################################################################################] 100%</span><br><span class="line">9bbbd7ee: [####################################################################################################] 100%</span><br><span class="line">ce713206: [####################################################################################################] 100%</span><br><span class="line">ee95256d: [####################################################################################################] 100%</span><br><span class="line"></span><br><span class="line">uploaded:  registry.lazycat.cloud/u04123229/library/nginx:d037205fbaf7d60a</span><br></pre></td></tr></table></figure><p>将生成的地址替换到 Manifest 的 <code>image</code> 字段即可。</p><h3 id="5-小结"><a href="#5-小结" class="headerlink" title="5. 小结"></a>5. 小结</h3><ul><li>Manifest 为核心：<code>lzc-manifest.yml</code> 描述了全部运行时需求，移植时优先完善此文件。</li><li>路由分层：<code>routes</code> 管理 HTTP，<code>ingress</code> 管理 TCP，二者配合即可覆盖绝大多数场景。</li><li>统一数据目录：使用 <code>/lzcapp/var</code> 避免硬编码路径，便于跨节点迁移。</li><li>镜像国内托管：通过 <code>lzc-cli appstore copy-image</code> 自动同步到 LazyCat Registry，稳定又快速。</li></ul><p>至此，Milvus 的 Docker Compose 应用已成功移植到懒猫微服。更多进阶玩法，例如 OIDC、VNC 集成等，我们将在后续文章继续分享。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文延续前两篇，演示如何把一个已经在本地运行良好的 Docker Compose 应用打包并上架到懒猫微服应用商店。以 Milvus 为例，逐步拆解 Manifest 配置、路由映射、数据卷绑定以及镜像加速等关键环节，帮助大家快速完成移植。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;1-目录结构与核心文件&quot;&gt;&lt;a href=&quot;#1-目录结构与核心文件&quot; class=&quot;headerlink&quot; title=&quot;1. 目录结构与核心文件&quot;&gt;&lt;/a&gt;1. 目录结构与核心文件&lt;/h3&gt;&lt;p&gt;在懒猫微服中，一个最小可用的应用包仅需两个文件：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;文件&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;code&gt;lzc-build.yml&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;描述打包流程及应用图标。简单应用只需指定 &lt;code&gt;icon&lt;/code&gt; 即可。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;lzc-manifest.yml&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;定义应用元数据与服务编排，是移植的重点。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;本文主要关注 &lt;code&gt;lzc-manifest.yml&lt;/code&gt; 的编写。&lt;/p&gt;
&lt;h3 id=&quot;2-lzc-manifest-yml-字段逐一解析&quot;&gt;&lt;a href=&quot;#2-lzc-manifest-yml-字段逐一解析&quot; class=&quot;headerlink&quot; title=&quot;2. lzc-manifest.yml 字段逐一解析&quot;&gt;&lt;/a&gt;2. &lt;code&gt;lzc-manifest.yml&lt;/code&gt; 字段逐一解析&lt;/h3&gt;&lt;p&gt;现在有了懒猫应用查看器很方便，我们以商店里的 Milvus 的示例 Manifest 为例，并附带注释说明。&lt;/p&gt;</summary>
    
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/categories/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
    
    <category term="开发" scheme="https://xu-hardy.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>雷电4传输</title>
    <link href="https://xu-hardy.github.io/%E9%9B%B7%E7%94%B54%E4%BC%A0%E8%BE%93/"/>
    <id>https://xu-hardy.github.io/%E9%9B%B7%E7%94%B54%E4%BC%A0%E8%BE%93/</id>
    <published>2025-07-02T05:33:34.933Z</published>
    <updated>2025-07-02T05:33:34.933Z</updated>
    
    <content type="html"><![CDATA[<p>市面上的对拷线总是没有称心如意的,做的最好的应该是绿联,</p><p>于是在ChatGPT上询问了相关事宜,大概意思就是一个把雷电设备虚拟成一张网卡,然后设置一个单独的网络通道,两台机器使用IP地址进行通讯,知乎上也有成功的雷电3案例,只是他们WebDav的速度是600MB&#x2F;S</p><span id="more"></span><p>而我的是雷电4也是这个结果,只是在NUC12识别时候总是不能满速识别.</p><p>咨询客服之后也没有得到满意的结果,不久前intel吧nuc业务线给华硕了,结果售后只是给排查方向,看BIOS有没有打开雷电开关之类的,或者就是等待十天半个月的返厂检测.</p><p><img src="https://raw.githubusercontent.com/Xu-Hardy/image-host/master/image-20240217205800438.png" alt="image-20240217205800438"></p><p>webdav:</p><p><img src="https://raw.githubusercontent.com/Xu-Hardy/image-host/master/image-20240217205733355.png" alt="image-20240217205733355"></p><p><img src="https://raw.githubusercontent.com/Xu-Hardy/image-host/master/Snipaste_2024-02-17_12-12-28.png"><br>window下显示</p><p><img src="https://raw.githubusercontent.com/Xu-Hardy/image-host/master/Snipaste_2024-02-17_12-36-44.png"></p><p>20G的虚拟网卡,在linux下也是如此</p><p><img src="https://raw.githubusercontent.com/Xu-Hardy/image-host/master/202402250826256.png"></p><p>设备管理器显示USB4而不是雷电4</p><p><img src="https://raw.githubusercontent.com/Xu-Hardy/image-host/master/202402250937502.png"></p><p>直连MBP两个雷电口:</p><p><img src="https://raw.githubusercontent.com/Xu-Hardy/image-host/master/image-20240217205707661.png" alt="image-20240217205707661"></p><p>popos 和MBP使用iperf3对打:</p><p><img src="https://raw.githubusercontent.com/Xu-Hardy/image-host/master/image-20240217205548641.png" alt="image-20240217205548641"></p><p>MacOS: 雷电4的线+40G硬盘盒</p><p><img src="https://raw.githubusercontent.com/Xu-Hardy/image-host/master/image-20240217205355588.png" alt="image-20240217205355588"></p><h4 id="40G硬盘盒原装测速"><a href="#40G硬盘盒原装测速" class="headerlink" title="40G硬盘盒原装测速"></a>40G硬盘盒原装测速</h4><p><img src="https://raw.githubusercontent.com/Xu-Hardy/image-host/master/image-20240217211032287.png" alt="image-20240217211032287"></p><p><img src="https://raw.githubusercontent.com/Xu-Hardy/image-host/master/image-20240217211041438.png" alt="image-20240217211041438"></p><p>win测速</p><p><img src="https://raw.githubusercontent.com/Xu-Hardy/image-host/master/Snipaste_2024-02-17_13-11-30.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;市面上的对拷线总是没有称心如意的,做的最好的应该是绿联,&lt;/p&gt;
&lt;p&gt;于是在ChatGPT上询问了相关事宜,大概意思就是一个把雷电设备虚拟成一张网卡,然后设置一个单独的网络通道,两台机器使用IP地址进行通讯,知乎上也有成功的雷电3案例,只是他们WebDav的速度是600MB&amp;#x2F;S&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>好叶视频笔记</title>
    <link href="https://xu-hardy.github.io/%E5%A5%BD%E5%8F%B6%E8%A7%86%E9%A2%91%E7%AC%94%E8%AE%B0/"/>
    <id>https://xu-hardy.github.io/%E5%A5%BD%E5%8F%B6%E8%A7%86%E9%A2%91%E7%AC%94%E8%AE%B0/</id>
    <published>2025-07-02T05:33:34.933Z</published>
    <updated>2025-07-02T05:33:34.933Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>有明确目标，加速达成规划</p></li><li><p>目标不会不变（喜欢做的&#x2F;擅长的）、</p></li><li><p>成功不需要天赋（结合自己的技能&#x2F;技能优劣分类，找出5个）</p></li><li><p>好点子+简单策略，成就&#x3D;潜能&#x2F;方向（更高目标+要事优先+其他想法记录暂缓+成功健康共存），其他选择say no</p> <span id="more"></span></li><li><p>热情源自于成功，毁于挫败和标签。</p></li><li><p>创造热情的方法（创造，抢新潮流，整合自己的技能点）</p></li><li><p>悲观和负面评价只有悲观的结果（习得性无助）、</p></li><li><p>ABCDE（Adversity 挫折，Belief 信念，Consequence 后果，Disputation 争辩，Energization 获得能量）</p></li><li><p>不要在乎别人的负面评价。讨好别人只会碌碌无为，屈服于这个时代的暴力。</p></li><li><p>正面思维加强做事的活力，加速学东西，悲观思维会否定可能性。</p></li><li><p>正面思维的七个方法：</p><ol><li><p>观察想法</p></li><li><p>感恩日记</p></li><li><p>重塑思维（怎么可以达到</p></li><li><p>正面想法</p></li><li><p>给别人正面想法</p></li><li><p>注意想法：放弃受害者思维，清空不幸的想法</p></li><li><p>避免负面环境</p></li></ol></li><li><p>无法致富的四个观念（钱的罪恶感，对别人的话太敏感，保持现状，不愿意先付出，企业需要三五年后或者10年）</p></li><li><p>复利思维，每天进步一点点</p><ol><li><p>小事百分百对自己负责，完成小行动</p></li><li><p>做事会吸引相似的人和事</p></li><li><p>成为什么样的人有没有这个习惯，不习惯有没有这个习惯，习惯和核心价值观一致吗，习惯合理吗？</p></li></ol></li><li><p>视觉化和肯定</p><ol><li><p>视觉化过程而不是结果</p></li><li><p>联系自我肯定</p></li><li><p>不切实际的幻想可能反效果</p></li></ol></li><li><p>二八定律：20%的努力产生80%的结果，外包80%可替代的事情</p></li><li><p>帕金森定律：有限时间内占用时间会膨胀（限制&#x3D;高效）任务期限前移一半，尊重承诺，只做少数事情</p></li><li><p>恢复能量的方法：</p><ol><li><p>精力管理：</p><ol><li><p>间歇性休息：（52&#x2F;17）</p></li><li><p>睡眠：每天7-8H或者午休20min</p></li><li><p>甜食水果补充损失的意志力</p></li><li><p>运动加强专注力和记忆力，决定意志力</p></li></ol></li><li><p>操控意志力，给意志力奖励，自我对话激励意志力</p></li><li><p>记录微小决定待会再做：为大事保存能量</p></li><li><p>if -then机制：减少决策损耗的能量</p></li><li><p>控制工作环境，为工作做铺垫（霍桑效应：被监视的时候更有生产力</p></li></ol></li><li><p>5倍提升法：</p><ol><li><p>关闭手机通知，控制手机（6秒钟看手机，等于损失25min高效时间</p></li><li><p>隐藏工作关的APP（app放在不容易看见的地方</p></li><li><p>设置信息时间段（特定时间接收消息</p></li></ol></li><li><p>每天的能量循环：90&#x2F;20间歇：90分钟深度工作，20分钟休息，根据自身适当调节</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;有明确目标，加速达成规划&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;目标不会不变（喜欢做的&amp;#x2F;擅长的）、&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;成功不需要天赋（结合自己的技能&amp;#x2F;技能优劣分类，找出5个）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;好点子+简单策略，成就&amp;#x3D;潜能&amp;#x2F;方向（更高目标+要事优先+其他想法记录暂缓+成功健康共存），其他选择say no&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>关于速食我想说的话</title>
    <link href="https://xu-hardy.github.io/%E5%85%B3%E4%BA%8E%E9%80%9F%E9%A3%9F%E6%88%91%E6%83%B3%E8%AF%B4%E7%9A%84%E8%AF%9D/"/>
    <id>https://xu-hardy.github.io/%E5%85%B3%E4%BA%8E%E9%80%9F%E9%A3%9F%E6%88%91%E6%83%B3%E8%AF%B4%E7%9A%84%E8%AF%9D/</id>
    <published>2025-07-02T05:33:34.933Z</published>
    <updated>2025-07-02T05:33:34.933Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Soylent"><a href="#Soylent" class="headerlink" title="Soylent"></a>Soylent</h3><p>最早接触的速食是Soylent，准确的说应该是代餐，据说是一个程序员为了节约时间发明创造的产品，他那个时候没有AIGC时间都浪费在debug上了，所以从吃上来节省时间。无论是学生时代还是在帝都上班的时光里，这款产品的定位始终透露着吃不起的风格，而且国内一直没正规渠道卖过，只能海淘遂放弃。 <span id="more"></span></p><p><img src="https://raw.githubusercontent.com/Xu-Hardy/image-host/master/image-20240122185934506.png" alt="image-20240122185934506"></p><h3 id="若饭"><a href="#若饭" class="headerlink" title="若饭"></a>若饭</h3><p>海外的东西国内总有平替，这个叫做“若饭”，也曾疯狂追捧过，除了是为了腾出时间让老板过上更好的生活，要么就是外边的饭太难吃了。这个花样很多，固体的粉末的，还有其他口味以及能量棒什么的。总结下来就是真的吃不饱，起码两瓶才能保证没有饥饿感（好像也没有饱腹感），号称科学的添加了各种人体所需的营养，可以满足人体的需求。尽管这样，官方对他的定义仍然是建议每周保持几顿正常餐饮。不过在帝都，不吃几条街的馆子那就可惜了，遂放弃。</p><p><img src="https://raw.githubusercontent.com/Xu-Hardy/image-host/master/image-20240122190339605.png" alt="image-20240122190339605"></p><p>接下来是几款速食产品，单品不超过一顿饭的成本，按照时间顺序有蔡林记，阿宽，拉面说，牛肉河粉。至于速热米饭和自热锅，本来印象就不好，就不在这里再踩一遍了。</p><h3 id="蔡林记"><a href="#蔡林记" class="headerlink" title="蔡林记"></a>蔡林记</h3><p>京东购入，打折的时候不到10元一包，当初也是被公司附近的小馆子逼到只能网上买吃的，公司的饮水机的热水永远也泡不完两碗热干面，个人也不是很喜欢酸豆角，即使每顿两碗，这个能量还是供应不上学习时候的用脑过度。连着吃几天还是会感觉身体营养不良。</p><p><img src="https://raw.githubusercontent.com/Xu-Hardy/image-host/master/image-20240122192009706.png" alt="image-20240122192009706"></p><h3 id="阿宽"><a href="#阿宽" class="headerlink" title="阿宽"></a>阿宽</h3><p>小面味道不错，单价实惠，面皮吃了很上瘾，但是真的没啥能量，肚子饱了但是脑袋反应不过来，不能常吃，后来还是去同学家一口气吃了两三大碗米饭（排骨玉米汤）。</p><p><img src="https://raw.githubusercontent.com/Xu-Hardy/image-host/master/image-20240122191645690.png" alt="image-20240122191645690"></p><h3 id="拉面说"><a href="#拉面说" class="headerlink" title="拉面说"></a>拉面说</h3><p>拉面说似乎是这里最高档的面了，这个是半干半鲜面，一半都需要煮上6-8分钟，再用开水冲开里面的料包，所以这个不适合在办公室吃，汤面多一些，拌面少一些。配料应该是速食界的天花板了，但是也抵不住疫情期间每天吃过的厌倦，真的不会再买了。另外狠狠的吐槽下和府捞面，除了宣传的书房里的拉面，其他都是严重掉粉，量上价格贵又难吃系列，貌似现在店里也是这种预知的餐盘，但是卫生问题仍然不能保证，工作人员素质问题有待提高。</p><p><img src="https://raw.githubusercontent.com/Xu-Hardy/image-host/master/image-20240122192609007.png" alt="image-20240122192609007"></p><h3 id="五谷道场"><a href="#五谷道场" class="headerlink" title="五谷道场"></a>五谷道场</h3><p>本来方便面是不应该放在这里的，毕竟非油炸国产之光</p><p><img src="https://raw.githubusercontent.com/Xu-Hardy/image-host/master/IMG_5355.jpg"></p><p>个人心中的国产方便面排名：  五谷道场 &gt; 汤达人 &gt; 康师傅 &gt; 其他</p><p>五谷道场兰州牛肉面和线下兰州牛肉面味道一模一样，辣子的味道能品尝出大西北的粗犷</p><p><img src="https://raw.githubusercontent.com/Xu-Hardy/image-host/master/202405131558988.png"></p><h3 id="牛肉河粉"><a href="#牛肉河粉" class="headerlink" title="牛肉河粉"></a>牛肉河粉</h3><p>线下58一碗的河粉尽管可以免费续面，但是单价还是很贵，于是超市购入一箱火车头河粉，还是面饼+汤料的搭配，只是这个价格赶超拉面说还是让人觉得没有下次了。味道嘛，以后还是去吃线下吧，大不了再多续几碗嘛～</p><p><img src="https://raw.githubusercontent.com/Xu-Hardy/image-host/master/image-20240122193319038.png" alt="image-20240122193319038"></p><h3 id="羊肉泡馍"><a href="#羊肉泡馍" class="headerlink" title="羊肉泡馍"></a>羊肉泡馍</h3><p>女同事推荐的，山姆超市高档货，味道很浓郁，料包需要开水煮，我这砂锅煮了五六分钟打开看羊肉还有部分红血丝。不过味道不错，比上边同价位越南河粉好上不少。</p><p><img src="https://raw.githubusercontent.com/Xu-Hardy/image-host/master/IMG_5354.JPG"></p><h3 id="日清拉面"><a href="#日清拉面" class="headerlink" title="日清拉面"></a>日清拉面</h3><p>Youtube刷到了日清拉面创始人的故事，所以直接上网买了一堆，不过都没有青菜包，图片的肉片也是没有的，感觉还是拉王比较好吃，泡开了之后看起来很像日式拉面而是方便面，其他的泡开的和方便面没差。鸡汤拉面也很惊艳，用开水冲泡开就能直接收获一碗鸡汤面，生的面渣还能当作干脆面吃。出前一丁是日清的子品牌，其他都是杯面（基本上都是合味道），因为吃不饱就没有买。</p><p><img src="https://raw.githubusercontent.com/Xu-Hardy/image-host/master/88126071bfa5f3d0bf14c03fb37f71e0.JPG"></p><p>这个就是日清拉王泡开的效果了，基本上看不出是方便面，再加上空气炸锅烤的鸡蛋简直完美～</p><p><img src="https://raw.githubusercontent.com/Xu-Hardy/image-host/master/c7db3664b23b58459e10e6a49ad5dde2.JPG"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>价格上真的不值得，营养也不见得跟得上，还是好好吃饭吧～</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Soylent&quot;&gt;&lt;a href=&quot;#Soylent&quot; class=&quot;headerlink&quot; title=&quot;Soylent&quot;&gt;&lt;/a&gt;Soylent&lt;/h3&gt;&lt;p&gt;最早接触的速食是Soylent，准确的说应该是代餐，据说是一个程序员为了节约时间发明创造的产品，他那个时候没有AIGC时间都浪费在debug上了，所以从吃上来节省时间。无论是学生时代还是在帝都上班的时光里，这款产品的定位始终透露着吃不起的风格，而且国内一直没正规渠道卖过，只能海淘遂放弃。</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>出远门带的电子产品</title>
    <link href="https://xu-hardy.github.io/%E5%87%BA%E8%BF%9C%E9%97%A8%E5%B8%A6%E7%9A%84%E7%94%B5%E5%AD%90%E4%BA%A7%E5%93%81/"/>
    <id>https://xu-hardy.github.io/%E5%87%BA%E8%BF%9C%E9%97%A8%E5%B8%A6%E7%9A%84%E7%94%B5%E5%AD%90%E4%BA%A7%E5%93%81/</id>
    <published>2025-07-02T05:33:34.932Z</published>
    <updated>2025-07-02T05:33:34.932Z</updated>
    
    <content type="html"><![CDATA[<ul><li>MacBook&#x2F;ipad&#x2F;iphone&#x2F;nuc12&#x2F;鼠标&#x2F;耳机</li><li>Gan&#x2F;移动电源&#x2F;type C电源</li><li>NFC复制器+空白卡</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;MacBook&amp;#x2F;ipad&amp;#x2F;iphone&amp;#x2F;nuc12&amp;#x2F;鼠标&amp;#x2F;耳机&lt;/li&gt;
&lt;li&gt;Gan&amp;#x2F;移动电源&amp;#x2F;type C电源&lt;/li&gt;
&lt;li&gt;NFC复制器+空白卡&lt;/li&gt;
&lt;/ul&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>办公外设篇</title>
    <link href="https://xu-hardy.github.io/%E5%8A%9E%E5%85%AC%E5%A4%96%E8%AE%BE%E7%AF%87/"/>
    <id>https://xu-hardy.github.io/%E5%8A%9E%E5%85%AC%E5%A4%96%E8%AE%BE%E7%AF%87/</id>
    <published>2025-07-02T05:33:34.932Z</published>
    <updated>2025-07-02T05:33:34.932Z</updated>
    
    <content type="html"><![CDATA[<h3 id="电脑外设"><a href="#电脑外设" class="headerlink" title="电脑外设"></a>电脑外设</h3><p><a href="../%E9%9B%B7%E7%94%B54%E4%BC%A0%E8%BE%93#40G%E7%A1%AC%E7%9B%98%E7%9B%92%E5%8E%9F%E8%A3%85%E6%B5%8B%E9%80%9F">40G硬盘盒盒雷电线</a></p><p><a href="%E7%94%B5%E5%AE%B9%E9%94%AE%E7%9B%98%E4%BD%93%E9%AA%8C">Niz键盘</a></p><h3 id="电脑"><a href="#电脑" class="headerlink" title="电脑"></a>电脑</h3><p><a href="%E9%9A%8F%E8%88%AA">Mac随航</a></p><p><a href="intel%2012%E4%BB%A3CPU">intel 12代CPU</a></p><span id="more"></span><h3 id="手机-路由以及其他"><a href="#手机-路由以及其他" class="headerlink" title="手机,路由以及其他"></a>手机,路由以及其他</h3><p><a href="%E8%AE%B0%E5%BD%95mokee%E5%88%B7%E6%9C%BA">小米8刷魔趣</a></p><p><a href="%E2%80%9C%E6%99%BA%E8%83%BD%E2%80%9D%E5%AE%B6%E5%B1%85%E7%9B%B8%E4%BC%B4%E7%9A%84%E6%97%A5%E5%AD%90">以前的智能家居,软路由和原生安卓</a></p><p><a href="%E5%87%BA%E8%BF%9C%E9%97%A8%E5%B8%A6%E7%9A%84%E7%94%B5%E5%AD%90%E4%BA%A7%E5%93%81">出远门带的电子产品</a></p><p><a href="%E6%89%93%E5%8D%B0%E6%9C%BA%E6%94%B9%E6%97%A0%E7%BA%BF">打印机改无线</a></p><p><a href="../%E5%B0%8F%E7%B1%B34A%E5%88%B7OpenWrt.md">小米4A刷OpenWrt</a></p><p><a href="%E5%B0%8F%E7%B1%B3Ax5400%E5%8F%8C%E5%AE%BD%E5%B8%A6%E5%8F%A0%E5%8A%A0.md">小米Ax5400双宽带叠加</a></p><h3 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h3><p><a href="%E5%A4%9A%E5%B9%B3%E5%8F%B0%E6%97%A5%E7%A8%8B%E5%90%8C%E6%AD%A5.md">多平台日程同步</a></p><h3 id="电工网工"><a href="#电工网工" class="headerlink" title="电工网工"></a>电工网工</h3><p><a href="%E7%94%B5%E5%B7%A5%E7%BD%91%E5%B7%A5%E5%B7%A5%E5%85%B7%E9%9B%86%E9%94%A6.md">电工网工工具集锦</a></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;电脑外设&quot;&gt;&lt;a href=&quot;#电脑外设&quot; class=&quot;headerlink&quot; title=&quot;电脑外设&quot;&gt;&lt;/a&gt;电脑外设&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;../%E9%9B%B7%E7%94%B54%E4%BC%A0%E8%BE%93#40G%E7%A1%AC%E7%9B%98%E7%9B%92%E5%8E%9F%E8%A3%85%E6%B5%8B%E9%80%9F&quot;&gt;40G硬盘盒盒雷电线&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;%E7%94%B5%E5%AE%B9%E9%94%AE%E7%9B%98%E4%BD%93%E9%AA%8C&quot;&gt;Niz键盘&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;电脑&quot;&gt;&lt;a href=&quot;#电脑&quot; class=&quot;headerlink&quot; title=&quot;电脑&quot;&gt;&lt;/a&gt;电脑&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;%E9%9A%8F%E8%88%AA&quot;&gt;Mac随航&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;intel%2012%E4%BB%A3CPU&quot;&gt;intel 12代CPU&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>MacOS安装的软件无法打开</title>
    <link href="https://xu-hardy.github.io/macos%E5%AE%89%E8%A3%85%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80/"/>
    <id>https://xu-hardy.github.io/macos%E5%AE%89%E8%A3%85%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80/</id>
    <published>2025-07-02T05:33:34.931Z</published>
    <updated>2025-07-02T05:33:34.931Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/Xu-Hardy/image-host/master/20240225081805.png"></p> <span id="more"></span><p><img src="https://raw.githubusercontent.com/Xu-Hardy/image-host/master/20240225081826.png" alt="image.png"></p><p>因为 PicGo 没有签名，所以会被 macOS 的安全检查所拦下。</p><ol><li>安装后打开遇到「文件已损坏」的情况，请按如下方式操作：</li></ol><p>信任开发者，会要求输入密码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo spctl --master-disable</span><br></pre></td></tr></table></figure><p>然后放行 PicGo :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xattr -cr /Applications/PicGo.app</span><br></pre></td></tr></table></figure><p>然后就能正常打开。</p><p><a href="https://github.com/Molunerfinn/PicGo/blob/dev/FAQ.md">https://github.com/Molunerfinn/PicGo/blob/dev/FAQ.md</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Xu-Hardy/image-host/master/20240225081805.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>NFC复制卡写手机手环</title>
    <link href="https://xu-hardy.github.io/nfc%E5%A4%8D%E5%88%B6%E5%8D%A1%E5%86%99%E6%89%8B%E6%9C%BA%E6%89%8B%E7%8E%AF/"/>
    <id>https://xu-hardy.github.io/nfc%E5%A4%8D%E5%88%B6%E5%8D%A1%E5%86%99%E6%89%8B%E6%9C%BA%E6%89%8B%E7%8E%AF/</id>
    <published>2025-07-02T05:33:34.931Z</published>
    <updated>2025-07-02T05:33:34.931Z</updated>
    
    <content type="html"><![CDATA[<p>手机无法复制加密的IC卡,所以需要需要额外的方法来进行写入</p><h3 id="读原来的卡"><a href="#读原来的卡" class="headerlink" title="读原来的卡"></a>读原来的卡</h3> <span id="more"></span><p><img src="https://raw.githubusercontent.com/Xu-Hardy/image-host/master/20240225075543.png"></p><h3 id="仅复制卡号"><a href="#仅复制卡号" class="headerlink" title="仅复制卡号"></a>仅复制卡号</h3><p><img src="https://raw.githubusercontent.com/Xu-Hardy/image-host/master/20240225075512.png"></p><h3 id="创建空白卡"><a href="#创建空白卡" class="headerlink" title="创建空白卡"></a>创建空白卡</h3><p><img src="https://raw.githubusercontent.com/Xu-Hardy/image-host/master/202402250843204.png"></p><h3 id="仅复制卡片卡号"><a href="#仅复制卡片卡号" class="headerlink" title="仅复制卡片卡号"></a>仅复制卡片卡号</h3><p><img src="https://raw.githubusercontent.com/Xu-Hardy/image-host/master/IMG_4586.jpg"></p><p><img src="https://raw.githubusercontent.com/Xu-Hardy/image-host/master/20240225075428.png"></p><h3 id="写入数据"><a href="#写入数据" class="headerlink" title="写入数据"></a>写入数据</h3><p>接下来就是把手机&#x2F;手环放在机器进行写入</p><p><img src="https://raw.githubusercontent.com/Xu-Hardy/image-host/master/IMG_4588.JPG"></p><p><img src="https://raw.githubusercontent.com/Xu-Hardy/image-host/master/IMG_4587.JPG"></p><p>添加成功</p><p><img src="https://raw.githubusercontent.com/Xu-Hardy/image-host/master/20240225084428.png"></p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>NFC-PRO至尊双频版操作说明<br>读写卡操作视频:<br><a href="https://cloud.video.taobao.com/play/u/null/p/1/e/6/t/1/409421501065.mp4">https://cloud.video.taobao.com/play/u/null/p/1/e/6/t/1/409421501065.mp4</a><br>加密卡手机手环模拟操作视频:<br><a href="https://cloud.video.taobao.com/play/u/null/p/1/e/6/t/1/409017352153.mp4">https://cloud.video.taobao.com/play/u/null/p/1/e/6/t/1/409017352153.mp4</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;手机无法复制加密的IC卡,所以需要需要额外的方法来进行写入&lt;/p&gt;
&lt;h3 id=&quot;读原来的卡&quot;&gt;&lt;a href=&quot;#读原来的卡&quot; class=&quot;headerlink&quot; title=&quot;读原来的卡&quot;&gt;&lt;/a&gt;读原来的卡&lt;/h3&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>写作大纲</title>
    <link href="https://xu-hardy.github.io/%E5%86%99%E4%BD%9C%E5%A4%A7%E7%BA%B2/"/>
    <id>https://xu-hardy.github.io/%E5%86%99%E4%BD%9C%E5%A4%A7%E7%BA%B2/</id>
    <published>2025-07-02T05:33:34.929Z</published>
    <updated>2025-07-02T05:33:34.929Z</updated>
    
    <content type="html"><![CDATA[<p>找回二十几年失去的东西，明明过活的那么认真，到头来却被伤的遍体鳞伤。从听话的孩子逐渐转向独立人格独立思想。以古为镜。</p><span id="more"></span><ol><li>朋友篇</li><li>恋爱篇</li><li>社会篇</li><li>职场篇</li><li>校园篇</li><li>游记篇</li><li>随感篇</li><li>历史篇</li><li>文化篇</li><li>金钱篇</li><li>律法篇</li><li>道德篇</li><li>领导篇</li><li>美食篇</li><li>文人篇</li></ol><p>为人处事，道德，杀伐决断</p><p>希望在自己耄耋之年，看淡这样的文字，不会觉得幼稚。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;找回二十几年失去的东西，明明过活的那么认真，到头来却被伤的遍体鳞伤。从听话的孩子逐渐转向独立人格独立思想。以古为镜。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://xu-hardy.github.io/"/>
    <id>https://xu-hardy.github.io/</id>
    <published>2025-07-02T05:33:34.926Z</published>
    <updated>2025-07-02T05:33:34.926Z</updated>
    
    <content type="html"><![CDATA[<p>从朋友的推荐一点点变成懒猫专栏作家。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;从朋友的推荐一点点变成懒猫专栏作家。&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>记年初的武汉游记</title>
    <link href="https://xu-hardy.github.io/%E8%AE%B0%E5%B9%B4%E5%88%9D%E7%9A%84%E6%AD%A6%E6%B1%89%E6%B8%B8%E8%AE%B0/"/>
    <id>https://xu-hardy.github.io/%E8%AE%B0%E5%B9%B4%E5%88%9D%E7%9A%84%E6%AD%A6%E6%B1%89%E6%B8%B8%E8%AE%B0/</id>
    <published>2025-07-01T16:00:00.000Z</published>
    <updated>2025-07-02T05:33:34.929Z</updated>
    
    <content type="html"><![CDATA[<p>头一天在重庆机场过的夜，到达江汉路步行街已经快中午了。在附近的来菜吃的藕汤，在北京就很爱吃清水亭，有藕的 N 多种做法，那么来到湖北不可不吃。</p><p>主要还是特意找问当地的小伙伴要了攻略：</p><blockquote><p>推荐的专门吃东西的几条街是玫瑰街、粮道街、万松园、吉庆街这些。早餐小吃比较丰富，武汉的早餐文化特别浓厚，早餐种类特别丰富，很多碳水炸弹。</p><p>正餐可以考虑 来菜，是湖北菜，藕汤是湖北菜最具特色的。文章中下面的信息还是可靠的。</p><p>午餐：这个季节湖北的藕汤已经上市，基本上随便一家都很好喝，一定要选筒子骨藕汤，9 孔粉藕炖的那种。怕踩坑可以选一些连锁的，出品有保障，如刘胖子、老村长、艳阳天，不怕排队也可以去夏氏砂锅。</p><blockquote><p>武汉魅族魅友家：<a href="https://weibo.com/2709494027/4973440665388967">https://weibo.com/2709494027/4973440665388967</a> 这是小伙伴自己总结的</p></blockquote><p>武汉推崇藕汤一定要用粉藕，有炒菜的那种，也可以点干煸藕丝，那就是不同的味道了</p></blockquote><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/201b49619f36a1d8c8e0a2270f06ab55.jpg" alt="201b49619f36a1d8c8e0a2270f06ab55"></p><p>江汉路的风景不错，虽然是老城区，住宿条件差强人意。但总归风景和视野还是不错的，可以远眺长江，夜景也很美，楼下就是江汉路步行街。</p><blockquote><p>携程上酒店骂声一片，都是吐槽住宿添加太差的。如果介意的话可以选择住对面的武昌。去的时候爆满，其他地区送早餐给升级房间的桔子水晶都没有增值服务了。</p></blockquote><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/7516977ab7e5461589524d578417cda4.jpg" alt="7516977ab7e5461589524d578417cda4"></p><p>早上的江汉路是没什么人的，不过晚上到 12 点都很热闹。每天都是拖着走废的腿一瘸一拐的走回去的，青城山崴的脚，再经历重庆摧残，最后在武汉彻底残了。</p><p>武汉没有真正的市中心的概念，基本都是一个片区一个片区这样的。武汉本来就是三个城市合并来的，武昌重政治、汉口重经济、汉阳重工业。所以景区或者玩的地方相对也都比较分散。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/b8568bf78a3965faacbfa10417023350.jpg" alt="b8568bf78a3965faacbfa10417023350"></p><p>早餐可以选严老幺的三鲜豆皮和黑色麻将的热干面。那个新出的三鲜面就不要点了，毕竟不是苏州，三鲜面很难吃！！！</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/130d84f81d31f7cc57fc535cdfcecb27.jpg" alt="130d84f81d31f7cc57fc535cdfcecb27"></p><p>现做的三鲜豆皮，很多人排队，一定要现做现吃才好，这样外壳才是脆的。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/21157cd9bac75924716d70921cf13324.jpg" alt="21157cd9bac75924716d70921cf13324"></p><p>山海关路来过个不早的早，每个人拿一个小板凳，5 块钱的热干面，三块钱的藕粉汤，基本早上就吃饱了。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/918caab9550fd67c77a23bcba9fe92db.jpg" alt="918caab9550fd67c77a23bcba9fe92db"></p><p>第二天还是骑车到山海关路继续喝了藕汤，这家叫做金三角吊子煨汤。20 块钱一碗，有排骨有莲藕，总体来说比来菜吃的爽一点吧。算是在武汉吃到的第一个拉丝的藕。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/0e81da7c263f7121c2edf8a7edab12ec.jpg" alt="0e81da7c263f7121c2edf8a7edab12ec"></p><p>山海关路也吃了三鲜豆皮，和毛氏汽水包。不过是在吃不下了，据说这家牛肉面也不错。嗯，来自襄阳。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/cf93a9047c3a84453fa6bb337358b546.jpg" alt="cf93a9047c3a84453fa6bb337358b546"></p><p>这个是小伙伴的旅游攻略：</p><blockquote><p>1、黄鹤楼，现在应该在准备春晚分会场，闭园了<br>2、东湖有空可以看看，东湖绿道、或者磨山风景区也可以锻炼一下，都在东湖片区，哈哈<br>3、湖北省省博物馆离东湖也很近。越王勾践剑、曾侯乙编钟是镇馆之宝。<br>4、武汉大学凌波门不用去了，日出日落这个季节都不太合适。武大校园里面还行，建筑风格也很不错。<br>5、宝通寺、古德寺、归元寺是寺庙，长春观是道观。<br>6、黎黄陂路、昙华林是文艺青年打卡地。黎黄陂路有很多近代风格的建筑，适合拍照。昙华林有一些文创小礼品吧。<br>7、江汉路、楚河汉街、武商梦时代是商圈。江汉路建筑风格是近代租界风格，距离江滩近。楚河汉街有新开的 SKP，奢侈品应该相对多一些。武商梦时代是亚洲最大的单体商场。</p></blockquote><blockquote><p>武汉魅族魅友家：<a href="https://weibo.com/2709494027/4973440665388967">https://weibo.com/2709494027/4973440665388967</a></p></blockquote><p>武汉博物馆真的很大，需要留一天的时间来看。越王勾践剑需要排队很久。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/DJI_20250112122305_0393_D.JPG" alt="DJI_20250112122305_0393_D"></p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/a0a512bd9715878984048cbd60b1fa55.jpg" alt="a0a512bd9715878984048cbd60b1fa55"></p><p>沿着东湖骑车，慢慢就天黑了，然后发现自己在湖中央凌乱。武大不让进，所以一路都在怀疑自己，一个人在外地，大晚上在人少的地方骑车干嘛。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/9baa45370097bb1d3d5b63ff546b6551.jpg" alt="9baa45370097bb1d3d5b63ff546b6551"></p><p>武汉玩的地方，可以考虑下湖北省博物馆，越王勾践剑和曾侯乙编钟（有时候会有编钟表演）。</p><p>东湖也还不错，比较大，春天有樱园，也可以在那边露营。这个季节不是特别推荐，风应该会比较大</p><p>江汉路步行街是商圈，仅临武汉江滩。江滩晚上可以看对岸的楼宇和大桥上的灯光表演，比较类似上次在杭州游船的风景</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/5c5e187b188dc8a92f05a31f52e406b4.jpg" alt="5c5e187b188dc8a92f05a31f52e406b4"></p><p>从东湖离开已经是这个点了。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/DJI_20250113180602_0522_D.JPG" alt="DJI_20250113180602_0522_D"></p><p>在楚河汉街，基本是本老武汉强行拉倒店里。说没有预制菜，藕汤保拉丝。于是大众点评 L6 送了一个价值 60+的藕汤，然后点了一个干煸藕丝。算是在武汉吃的性价比最高的一顿。果然，大众点评高等级在哪里都吃香。不过后来朋友去，据说是是不再送了。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/6fe23d79915042942958b4151d46c151.jpg"></p><p>干煸藕丝很酥脆，虽然说干炸的牛肉不多，但是味道简直无可挑剔。不过一个人吃俩大菜是在是太撑了，还是得找个女朋友一起才好。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/5c2c9e7a750fd7c700a8e266ffbbf9d4.jpg" alt="5c2c9e7a750fd7c700a8e266ffbbf9d4"></p><p>第二天又去了梨园。下午的东湖，美的不可方物。（没坐船，来回要七八十，而且要跟着船马上回来）</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/1fd49b438fdb3566e4d4ed8e26025101.jpg" alt="1fd49b438fdb3566e4d4ed8e26025101"></p><p>美的像一幅画。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/c2ca64c6ed0be78720ab8bfc8b943847.jpg" alt="c2ca64c6ed0be78720ab8bfc8b943847"></p><p>晚上去的夏氏砂锅，因为谈季加上人少，所以基本没排队。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/f3012d41985b79df5be270c5c8e4beb2.jpg" alt="f3012d41985b79df5be270c5c8e4beb2"></p><p>冬天点着炉火，喝着热气腾腾的藕汤，从上暖到下，还有这个藕是真拉丝呀～</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/7c816a7675cc82050067ed38f75c2244.jpg" alt="7c816a7675cc82050067ed38f75c2244"></p><p>徒步横跨长江大桥，属于又菜又还玩，危险指数 4 颗星，车在走桥在晃，小哥自行车在眼前飘过。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/7c2788dfd6818c79eabb230318e27ef7.jpg" alt="7c2788dfd6818c79eabb230318e27ef7"></p><p>用 Apple Watch 记录下这个过程。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/2dcf4cb81e2e41f2092d161693ee66e6.jpg" alt="2dcf4cb81e2e41f2092d161693ee66e6"></p><p>春晚彩排的原因，黄鹤楼进不去。只能在外边听见 1234567 的敲鼓声音，不过很多人也说黄鹤楼在外边看看就好了。</p><blockquote><p>文人的名楼情节，大概是拜崔颢的诗词所赐了。</p></blockquote><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/DJI_20250113200746_0529_D.JPG" alt="DJI_20250113200746_0529_D"></p><p>最后一天来参观国民政府办公厅，现在的南阳大楼被改成了酒店还是饭店一类的场所，只有三楼对外开放。电视剧里的政府办公厅和这个很像。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/89dd0edfb62f8bba4248bbe5c4fec999.jpg" alt="89dd0edfb62f8bba4248bbe5c4fec999"></p><p>请看大图 VCR：</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/2fd07bb791a4ff087c1958946045b86d.jpg" alt="2fd07bb791a4ff087c1958946045b86d"></p><p>还有江汉关博物馆的讲诉曾经的故事，近代的条约，租借等等。。。。</p><p>江汉路以及黎黄坡路的租借都改成了经典或者银行，但是我们仍然可以看到过去的岁月。</p><p>那，南京得什么样啊？</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/42b26aad3399283cd52922e826d9607d.jpg" alt="42b26aad3399283cd52922e826d9607d"></p><p>临走之前吃了，王记牛杂，生滚牛肉热干面，真心不错。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/5f9ab15dd51edde9e139fd1b1ea077e6.jpg" alt="5f9ab15dd51edde9e139fd1b1ea077e6"></p><p>回去写了三天四藕小记：</p><blockquote><p>如果用藕来比作爱情，来菜是初相识，幻想最初的美好，该是粉糯入口即化如亲吻红唇，而非迎合大众变节故作搔首，又道是重口难调。再三思虑下，你终究不是我的头牌。出来乍到幻想要轰轰烈烈的爱情，一次次的修改已不愿再等。</p><p>老武汉是路边的艳遇，你听我诉着苦， 又抚着上次的伤口，于是急切的来一场试探性的邀约，再经历试探，喧闹，繁华过后，你把新唤作老。清炖，油炸样样拉丝。本已无可挑剔，可惜你在灯红酒绿，不能常常如愿。</p><p>小吃街是日常，简单不精致，朴华粗糙，藕形状不一，大口啃着才舒服，细小的渣碎弃之不要。调侃着来往的路人以及同桌的游客，看着提高嗓门吆喝的店家。同时还能大快朵颐享受着放松而自在的瞬间，虽无钟鸣鼎食，处处诉说着平平淡淡。</p><p>夏氏的砂锅是醇厚的，就着炉火，半暗的灯光下，乘上一晚热气腾腾的汤，软糯的藕配着油花花的汤，可以散去一整天的疲惫，这家拉丝也是最多的，点着炉火，就好像无论多晚多累总归有人懂你，等你。汤一定要微烫入口，否则要重新加热到沸腾才行，锅气才是真实的人间烟火。</p></blockquote><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/609cab7b0092c2f91ee18062e5f1d10f.jpg" alt="609cab7b0092c2f91ee18062e5f1d10f"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;头一天在重庆机场过的夜，到达江汉路步行街已经快中午了。在附近的来菜吃的藕汤，在北京就很爱吃清水亭，有藕的 N 多种做法，那么来到湖北不可不吃。&lt;/p&gt;
&lt;p&gt;主要还是特意找问当地的小伙伴要了攻略：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;推荐的专门吃东西的几条街是玫瑰街、粮</summary>
      
    
    
    
    <category term="游记" scheme="https://xu-hardy.github.io/categories/%E6%B8%B8%E8%AE%B0/"/>
    
    
    <category term="游记" scheme="https://xu-hardy.github.io/tags/%E6%B8%B8%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>极限科技稿件数据</title>
    <link href="https://xu-hardy.github.io/%E6%9E%81%E9%99%90%E7%A7%91%E6%8A%80%E7%A8%BF%E4%BB%B6%E6%95%B0%E6%8D%AE/"/>
    <id>https://xu-hardy.github.io/%E6%9E%81%E9%99%90%E7%A7%91%E6%8A%80%E7%A8%BF%E4%BB%B6%E6%95%B0%E6%8D%AE/</id>
    <published>2025-07-01T16:00:00.000Z</published>
    <updated>2025-07-02T05:33:34.931Z</updated>
    
    <content type="html"><![CDATA[<h3 id="6-月数据"><a href="#6-月数据" class="headerlink" title="6 月数据"></a>6 月数据</h3><table><thead><tr><th>发布时间</th><th>文章标题</th><th>文章链接</th><th>阅读量</th><th>统计时间</th></tr></thead><tbody><tr><td>2025-06-25 22:00:50  ·</td><td><a href="https://blog.csdn.net/weixin_38781498/article/details/148908029">本地 RAG 实战：用 EasySearch + Ollama SDK 半小时搭建检索增强问答系统</a></td><td>1156 阅读 ·</td><td>2025-07-02</td><td></td></tr><tr><td>2025-06-24 16:39:01  ·</td><td><a href="https://blog.csdn.net/weixin_38781498/article/details/148874689">Easysearch 实战指南：修改索引主分片的三种方式（split &#x2F; shrink &#x2F; reindex</a></td><td>1251 阅读 ·</td><td>2025-07-02</td><td></td></tr><tr><td>2025-06-24 13:45:59  ·</td><td><a href="https://blog.csdn.net/weixin_38781498/article/details/148869923">Easysearch 索引关闭与重开全攻略：open&#x2F;close 操作、批量处理及防误操作配置</a></td><td>1001 阅读 ·</td><td>2025-07-02</td><td></td></tr></tbody></table><h3 id="5-月文章"><a href="#5-月文章" class="headerlink" title="5 月文章"></a>5 月文章</h3><table><thead><tr><th>发布时间</th><th>文章标题</th><th>文章链接</th><th>阅读量（CSDN）</th><th>统计时间</th><th>备注</th></tr></thead><tbody><tr><td>2025-05-09 13:19:39 ·</td><td>[轻松管理 ES 集群: 我把 Infinilabs Console 上架了懒猫微服，默认支持外网访问、TLS 加密和 OIDC 登录](轻松管理 ES 集群: 我把 Infinilabs Console 上架了懒猫微服，默认支持外网访问、TLS 加密和 OIDC 登录.md)</td><td>CSDN:<br><a href="https://blog.csdn.net/weixin_38781498/article/details/147819180">https://blog.csdn.net/weixin_38781498/article/details/147819180</a><br></td><td>2511 阅读 ·</td><td>2025-06-03</td><td></td></tr><tr><td>2025-05-05 15:28:09 ·</td><td><a href="MySQL%E6%95%B0%E6%8D%AE%E5%AE%9E%E6%97%B6%E6%8E%A5%E5%85%A5Easysearch%EF%BC%8C%E9%9B%B6%E4%BB%A3%E7%A0%81%E8%BF%81%E7%A7%BB%E5%85%A8%E6%B5%81%E7%A8%8B.md">MySQL 数据实时接入 Easysearch，零代码迁移全流程</a></td><td>CSDN:<br><a href="https://blog.csdn.net/weixin_38781498/article/details/147718262">https://blog.csdn.net/weixin_38781498/article/details/147718262</a><br></td><td>3218 阅读 ·</td><td>2025-06-03</td><td></td></tr></tbody></table><h3 id="4-月文章"><a href="#4-月文章" class="headerlink" title="4 月文章"></a>4 月文章</h3><table><thead><tr><th>发布时间</th><th>文章标题</th><th>文章链接</th><th>阅读量（CSDN）</th><th>统计时间</th><th>备注</th><th></th></tr></thead><tbody><tr><td>2025-04-24 17:37:45 ·</td><td>[从认证到透传：用 Nginx 为 EasySearch 构建一体化认证网关](从认证到透传：用 Nginx 为 EasySearch 构建一体化认证网关.md)</td><td>CSDN:<br><a href="https://blog.csdn.net/weixin_38781498/article/details/147484530">https://blog.csdn.net/weixin_38781498/article/details/147484530</a><br></td><td>1728 阅读 ·</td><td>2025-05-06</td><td></td><td></td></tr><tr><td>2025-04-25 15:54:34 ·</td><td>[Easysearch 基础运维扫盲指南：从 HTTP 到 HTTPS、认证与安全访问全解析](Easysearch 基础运维扫盲指南：从 HTTP 到 HTTPS、认证与安全访问全解析.md)</td><td>CSDN:<br><a href="https://blog.csdn.net/weixin_38781498/article/details/147514771">https://blog.csdn.net/weixin_38781498/article/details/147514771</a><br></td><td>1947 阅读 ·</td><td>2025-05-06</td><td></td><td></td></tr><tr><td>2025-04-23 18:12:08 ·</td><td>[Easysearch 服务昨天还好好的，为什么今天突然访问不了了？](Easysearch 服务昨天还好好的，为什么今天突然访问不了了？.md)</td><td>CSDN:<br><a href="https://blog.csdn.net/weixin_38781498/article/details/147460362">https://blog.csdn.net/weixin_38781498/article/details/147460362</a><br></td><td>1446 阅读 ·</td><td>2025-05-06</td><td></td><td></td></tr><tr><td>2025-04-17 22:05:49 ·</td><td>[零代码接入 Google Drive，让 Coco- AI 看懂你的资料库](零代码接入 Google Drive，让 Coco- AI 看懂你的资料库.md)</td><td>CSDN:<br><a href="https://blog.csdn.net/weixin_38781498/article/details/147314801">https://blog.csdn.net/weixin_38781498/article/details/147314801</a><br></td><td>2254 阅读 ·</td><td>2025-05-06</td><td></td><td></td></tr><tr><td>2025-04-17 20:10:35 ·</td><td>[Coco-AI 接入自定义数据源](Coco-AI 接入自定义数据源.md)</td><td>CSDN:<br><a href="https://blog.csdn.net/weixin_38781498/article/details/147312961">https://blog.csdn.net/weixin_38781498/article/details/147312961</a><br></td><td>1069 阅读 ·</td><td>2025-05-06</td><td></td><td></td></tr><tr><td>2025-04-17 19:04:29 ·</td><td>[Coco-AI 集成语雀作为语料库进行检索](Coco-AI 集成语雀作为语料库进行检索.md)</td><td>CSDN:<br><a href="https://blog.csdn.net/weixin_38781498/article/details/147311955">https://blog.csdn.net/weixin_38781498/article/details/147311955</a><br></td><td>1137 阅读 ·</td><td>2025-05-06</td><td></td><td></td></tr><tr><td>2025-04-03 21:32:39 ·</td><td>[Coco-AI 支持嵌入，让你的网站拥有 AI 搜索力](Coco-AI 支持嵌入，让你的网站拥有 AI 搜索力.md)</td><td>CSDN:<br><a href="https://blog.csdn.net/weixin_38781498/article/details/146989181">https://blog.csdn.net/weixin_38781498/article/details/146989181</a><br></td><td>1775 阅读 ·</td><td>2025-05-06</td><td></td><td></td></tr><tr><td>2025-03-24 18:39:29 ·</td><td>[Docker-Compose 部署 EasySearch 异常问题排查](Docker-Compose 部署 EasySearch 异常问题排查.md)</td><td>CSDN:<br><a href="https://blog.csdn.net/weixin_38781498/article/details/146483037">https://blog.csdn.net/weixin_38781498/article/details/146483037</a><br></td><td>1174 阅读 ·</td><td>2025-05-06</td><td></td><td></td></tr></tbody></table><h3 id="3-月文章"><a href="#3-月文章" class="headerlink" title="3 月文章"></a>3 月文章</h3><table><thead><tr><th>发布时间</th><th>文章标题</th><th>文章链接</th><th>阅读量（CSDN）</th><th>统计时间</th><th>备注</th></tr></thead><tbody><tr><td>2025-03-20 21:50:50 ·</td><td>[拓展 Coco AI 功能 - 智能检索 Hexo 博客](拓展 Coco AI 功能 - 智能检索 Hexo 博客.md)</td><td>CSDN:<br><a href="https://blog.csdn.net/weixin_38781498/article/details/146407174">https://blog.csdn.net/weixin_38781498/article/details/146407174</a><br></td><td>1485 阅读 ·</td><td>2025-04-01</td><td></td></tr><tr><td>2025-03-18 12:36:10 ·</td><td>[Coco AI 智能检索 Hugo Blog 集成指南](Coco AI 智能检索 Hugo Blog 集成指南.md)</td><td>CSDN:<br><a href="https://blog.csdn.net/weixin_38781498/article/details/146338445">https://blog.csdn.net/weixin_38781498/article/details/146338445</a><br></td><td>1541 阅读 ·</td><td>2025-04-01</td><td></td></tr><tr><td>2025-03-11 09:21:48 ·</td><td>[Coco AI 全新升级：全图形化 RAG 配置，一键开启智能知识管理！](Coco AI 全新升级：全图形化 RAG 配置，一键开启智能知识管理！.md)</td><td>CSDN:<br><a href="https://blog.csdn.net/weixin_38781498/article/details/146170047">https://blog.csdn.net/weixin_38781498/article/details/146170047</a><br></td><td>857 阅读 ·</td><td>2025-04-01</td><td></td></tr><tr><td>2025-03-09 17:15:36 ·</td><td>[Easysearch 使用 AWS S3 进行快照备份与还原：完整指南及常见错误排查](Easysearch 使用 AWS S3 进行快照备份与还原：完整指南及常见错误排查.md)</td><td>CSDN:<br><a href="https://blog.csdn.net/weixin_38781498/article/details/146135024">https://blog.csdn.net/weixin_38781498/article/details/146135024</a><br></td><td>1294 阅读 ·</td><td>2025-04-01</td><td></td></tr><tr><td>2025-03-09 11:03:08 ·</td><td>[Easysearch 中 PUT 和 POST 更新索引的区别及常见错误解析](Easysearch 中 PUT 和 POST 更新索引的区别及常见错误解析.md)</td><td>CSDN:<br><a href="https://blog.csdn.net/weixin_38781498/article/details/146128940">https://blog.csdn.net/weixin_38781498/article/details/146128940</a><br></td><td>1517 阅读 ·</td><td>2025-04-01</td><td></td></tr></tbody></table><h3 id="2-月文章"><a href="#2-月文章" class="headerlink" title="2 月文章"></a>2 月文章</h3><table><thead><tr><th>发布时间</th><th>文章标题</th><th>文章链接</th><th>阅读量（CSDN）</th><th>统计时间</th><th>备注</th></tr></thead><tbody><tr><td>2025-02-11</td><td><a href="Macbook%20Pro%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAEasysearch%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83.md">Macbook Pro 快速搭建 Easysearch 学习环境</a></td><td>CSDN:<br><a href="https://blog.csdn.net/weixin_38781498/article/details/14557411">https://blog.csdn.net/weixin_38781498/article/details/14557411</a><br><br>微信公众号: <br><a href="https://mp.weixin.qq.com/s/Q9DfNtarX7uwvrBKCoQqDA">https://mp.weixin.qq.com/s/Q9DfNtarX7uwvrBKCoQqDA</a><br></td><td>1037</td><td>2025-03-02</td><td></td></tr><tr><td>2025-02-16</td><td><a href="Coco%20AI%20APP%20%E5%88%9D%E4%BD%93%E9%AA%8C%EF%BC%9A%E5%BC%80%E5%90%AF%E6%99%BA%E8%83%BD%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E6%96%B0%E7%AF%87%E7%AB%A0.md">Coco AI APP 初体验：开启智能知识管理新篇章</a></td><td>CSDN:<br><a href="https://blog.csdn.net/weixin_38781498/article/details/145660517">https://blog.csdn.net/weixin_38781498/article/details/145660517</a><br><br>微信公众号: <br><a href="https://mp.weixin.qq.com/s/Q9DfNtarX7uwvrBKCoQqDA">https://mp.weixin.qq.com/s/Q9DfNtarX7uwvrBKCoQqDA</a><br></td><td>1331</td><td>2025-03-02</td><td></td></tr><tr><td>2025-02-17</td><td><a href="%E6%89%93%E9%80%A0%E6%99%BA%E8%83%BD%E8%AF%AD%E6%96%99%E5%BA%93%EF%BC%9A%E9%80%9A%E8%BF%87Coco%20AI%20Server%20%E5%AE%9E%E7%8E%B0%20Notion%20%E7%AC%94%E8%AE%B0%20RAG%20%E6%A3%80%E7%B4%A2%E5%8A%9F%E8%83%BD.md">打造智能语料库：通过 Coco AI Server 实现 Notion 笔记 RAG 检索功能</a></td><td>CSDN:<br><a href="https://blog.csdn.net/weixin_38781498/article/details/145692866">https://blog.csdn.net/weixin_38781498/article/details/145692866</a><br><br>微信公众号: <br><a href="https://mp.weixin.qq.com/s/E2wMtwF_qioqb1wwp8CZfg">https://mp.weixin.qq.com/s/E2wMtwF_qioqb1wwp8CZfg</a><br></td><td>1170</td><td>2025-03-02</td><td></td></tr><tr><td>2025-02-20</td><td><a href="%E6%8E%A8%E8%8D%90%E7%BB%99%20Easysearch%20%E6%96%B0%E7%94%A8%E6%88%B7%E7%9A%84%E5%87%A0%E4%B8%AA%20Elasticsearch%20%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B7%A5%E5%85%B7.md">推荐给 Easysearch 新用户的几个 Elasticsearch 可视化工具</a></td><td>CSDN:<br><a href="https://blog.csdn.net/weixin_38781498/article/details/145764424">https://blog.csdn.net/weixin_38781498/article/details/145764424</a><br><br>微信公众号: <br><a href="https://mp.weixin.qq.com/s/RaiDPtKJktssJpfd58Tehw">https://mp.weixin.qq.com/s/RaiDPtKJktssJpfd58Tehw</a><br></td><td>394</td><td>2025-03-02</td><td></td></tr><tr><td>2025-02-22</td><td><a href="%E5%AE%9E%E7%8E%B0%20INFINI%20Console%20%E4%B8%8E%20GitHub%20%E7%9A%84%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%E9%9B%86%E6%88%90%EF%BC%9A%E4%B8%80%E7%AB%99%E5%BC%8F%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.md">实现 INFINI Console 与 GitHub 的单点登录集成：一站式身份验证解决方案</a></td><td>CSDN:<br><a href="https://blog.csdn.net/weixin_38781498/article/details/145792720">https://blog.csdn.net/weixin_38781498/article/details/145792720</a><br><br>微信公众号: <br><br></td><td>1018</td><td>2025-03-02</td><td></td></tr><tr><td>2025-02-21</td><td><a href="%E4%BD%BF%E7%94%A8%20INFINI%20Console%20%E9%85%8D%E7%BD%AE%E9%9B%86%E7%BE%A4%E7%9B%91%E6%8E%A7%20Webhook%20%E9%80%9A%E7%9F%A5%E6%8C%87%E5%8D%97.md">使用 INFINI Console 配置集群监控 Webhook 通知指南</a></td><td>CSDN:<br><a href="https://blog.csdn.net/weixin_38781498/article/details/145787827">https://blog.csdn.net/weixin_38781498/article/details/145787827</a><br><br>微信公众号: <br><a href="https://mp.weixin.qq.com/s/5okVri7IOfNgtG17wXgH-g">https://mp.weixin.qq.com/s/5okVri7IOfNgtG17wXgH-g</a><br></td><td>706</td><td>2025-03-02</td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><table><thead><tr><th>发布时间</th><th>文章标题</th><th>文章链接</th><th>阅读量</th><th>统计时间</th><th>备注</th></tr></thead><tbody><tr><td>2025-12-01</td><td>xxx1</td><td>CSDN:<br><br><br>微信公众号: <br></td><td>666</td><td>2025-01-01</td><td></td></tr><tr><td>2025-12-12</td><td>xxx2</td><td></td><td>6666</td><td>2025-01-01</td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;6-月数据&quot;&gt;&lt;a href=&quot;#6-月数据&quot; class=&quot;headerlink&quot; title=&quot;6 月数据&quot;&gt;&lt;/a&gt;6 月数据&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;发布时间&lt;/th&gt;
&lt;th&gt;文章标题&lt;/th&gt;
&lt;th&gt;文章链接&lt;/th</summary>
      
    
    
    
    <category term="极限科技" scheme="https://xu-hardy.github.io/categories/%E6%9E%81%E9%99%90%E7%A7%91%E6%8A%80/"/>
    
    
    <category term="搜索引擎（ES）" scheme="https://xu-hardy.github.io/tags/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%EF%BC%88ES%EF%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>Gemini-cli 踩坑机：国内环境 , 用过 Google Cloud 如何设置？</title>
    <link href="https://xu-hardy.github.io/gemini-cli-%E8%B8%A9%E5%9D%91%E6%9C%BA%EF%BC%9A%E5%9B%BD%E5%86%85%E7%8E%AF%E5%A2%83-%E7%94%A8%E8%BF%87-google-cloud-%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AE%EF%BC%9F/"/>
    <id>https://xu-hardy.github.io/gemini-cli-%E8%B8%A9%E5%9D%91%E6%9C%BA%EF%BC%9A%E5%9B%BD%E5%86%85%E7%8E%AF%E5%A2%83-%E7%94%A8%E8%BF%87-google-cloud-%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AE%EF%BC%9F/</id>
    <published>2025-07-01T16:00:00.000Z</published>
    <updated>2025-07-02T05:33:34.933Z</updated>
    
    <content type="html"><![CDATA[<p>Gemini 也发布了类似的 AI 编程产品 Gemini Cli - 开源命令行 AI 工具</p><p>而且个人谷歌账号登录就能免费用！</p><p>免费额度为每分钟 60 次请求、每天 1000 次请求，是业内最高的免费额度，几乎不会遇到限制。</p><ul><li>支持 Google 搜索实时联网，为模型提供外部上下文。</li><li>支持 MCP 和扩展，便于功能拓展。</li><li>可自定义提示词和指令，适应个人或团队工作流。</li><li>可在脚本中非交互式调用，实现自动化和集成。</li></ul><span id="more"></span><h3 id="安装-gemini-cli"><a href="#安装-gemini-cli" class="headerlink" title="安装 gemini-cli"></a>安装 gemini-cli</h3><p>先来安装 gemini-cli，其实就是一个 NPM 包。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @google/gemini-cli</span><br><span class="line">gemini</span><br></pre></td></tr></table></figure><p>如果不出意外的话，执行之后会闪退。网上说需要设置 TUN 代理，甚至连命令行 export 环境变量也不行。</p><hr><h3 id="登录-Google-SSO-后仍无法使用"><a href="#登录-Google-SSO-后仍无法使用" class="headerlink" title="登录 Google SSO 后仍无法使用"></a>登录 Google SSO 后仍无法使用</h3><p>然后登录 Google SSO 验证，页面会显示 Gemini Code Assist 已获得访问您账号的授权。但是其实还是不行。我们继续看。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/de7757ea56e0bf2d668093ee788b240a.png" alt="de7757ea56e0bf2d668093ee788b240a"></p><p>命令行还是会得到这个报错：</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250626075949247.png" alt="image-20250626075949247"></p><hr><h3 id="设置-GOOGLE-CLOUD-PROJECT-环境变量"><a href="#设置-GOOGLE-CLOUD-PROJECT-环境变量" class="headerlink" title="设置 GOOGLE_CLOUD_PROJECT 环境变量"></a>设置 GOOGLE_CLOUD_PROJECT 环境变量</h3><p>网上基本有这个教程：</p><blockquote><p>用过谷歌云或者 ai studio 的，使用 gemini cli 登陆时可能会有些麻烦，可能要打开 console.cloud.google.com，找到你的 project id，然后设置 GOOGLE_CLOUD_PROJECT 环境变量，使用这种方式打开 gemini cli，就可以用了</p></blockquote><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250626080352544.png" alt="image-20250626080352544"></p><p>然后执行这句，这是环境变量。(临时设置, 仅当前会话有效）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export GOOGLE_CLOUD_PROJECT=&quot;your-project-id&quot;</span><br></pre></td></tr></table></figure><p>如果你想让这个永久生效的话：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;export GOOGLE_CLOUD_PROJECT=&quot;your-project-id&quot;&#x27; &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure><p>然后 source ～&#x2F;.zshrc 就可以了。</p><hr><h3 id="报错：API-未启用"><a href="#报错：API-未启用" class="headerlink" title="报错：API 未启用"></a>报错：API 未启用</h3><p>有发现新的错，</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span>API Error<span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;error&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">     <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">403</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Gemini for Google Cloud API has not been used in project xxxxx before or it is disabled. Enable it by visiting</span></span><br><span class="line"><span class="string"> https://console.developers.google.com/apis/api/cloudaicompanion.googleapis.com/overview?project=xxxxxx then retry. If you enabled this API recently, wait a few minutes for the action to propagate to our</span></span><br><span class="line"><span class="string"> systems and retry.&quot;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;errors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">       <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Gemini for Google Cloud API has not been used in project xxxx before or it is disabled. Enable it by visiting</span></span><br><span class="line"><span class="string"> https://console.developers.google.com/apis/api/cloudaicompanion.googleapis.com/overview?project=xxxx then retry. If you enabled this API recently, wait a few minutes for the action to propagate to our</span></span><br><span class="line"><span class="string"> systems and retry.&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;domain&quot;</span><span class="punctuation">:</span> <span class="string">&quot;usageLimits&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;reason&quot;</span><span class="punctuation">:</span> <span class="string">&quot;accessNotConfigured&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;extendedHelp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://console.developers.google.com&quot;</span></span><br><span class="line">       <span class="punctuation">&#125;</span></span><br><span class="line">     <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="string">&quot;PERMISSION_DENIED&quot;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;details&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">       <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;type.googleapis.com/google.rpc.ErrorInfo&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;reason&quot;</span><span class="punctuation">:</span> <span class="string">&quot;SERVICE_DISABLED&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;domain&quot;</span><span class="punctuation">:</span> <span class="string">&quot;googleapis.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;metadata&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">           <span class="attr">&quot;activationUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://console.developers.google.com/apis/api/cloudaicompanion.googleapis.com/overview?project=xxxx&quot;</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;containerInfo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxxx&quot;</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;consumer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;projects/xxxx&quot;</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;service&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cloudaicompanion.googleapis.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;serviceTitle&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Gemini for Google Cloud API&quot;</span></span><br><span class="line">         <span class="punctuation">&#125;</span></span><br><span class="line">       <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">       <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;type.googleapis.com/google.rpc.LocalizedMessage&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;locale&quot;</span><span class="punctuation">:</span> <span class="string">&quot;en-US&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Gemini for Google Cloud API has not been used in project xxxx before or it is disabled. Enable it by visiting</span></span><br><span class="line"><span class="string"> https://console.developers.google.com/apis/api/cloudaicompanion.googleapis.com/overview?project=xxxx then retry. If you enabled this API recently, wait a few minutes for the action to propagate to our</span></span><br><span class="line"><span class="string"> systems and retry.&quot;</span></span><br><span class="line">       <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">       <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;type.googleapis.com/google.rpc.Help&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;links&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">           <span class="punctuation">&#123;</span></span><br><span class="line">             <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Google developers console API activation&quot;</span><span class="punctuation">,</span></span><br><span class="line">             <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://console.developers.google.com/apis/api/cloudaicompanion.googleapis.com/overview?project=xxxx&quot;</span></span><br><span class="line">           <span class="punctuation">&#125;</span></span><br><span class="line">         <span class="punctuation">]</span></span><br><span class="line">       <span class="punctuation">&#125;</span></span><br><span class="line">     <span class="punctuation">]</span></span><br><span class="line">   <span class="punctuation">&#125;</span></span><br><span class="line"> <span class="punctuation">&#125;</span></span><br><span class="line"> <span class="punctuation">]</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>打开报错了的网页 <a href="https://console.developers.google.com/apis/api/cloudaicompanion.googleapis.com/overview?project=xxxxxx%EF%BC%8C%E6%AF%94%E5%A6%82%E8%BF%99%E4%B8%AA%EF%BC%8C%E8%BF%99%E4%B8%AA%E7%BD%91%E9%A1%B5%E6%98%AF%E5%92%8C%E4%BD%A0%E7%9A%84">https://console.developers.google.com/apis/api/cloudaicompanion.googleapis.com/overview?project=xxxxxx，比如这个，这个网页是和你的</a> ID 相关的，然后点击启用。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/d94297cbdd8e54f2d75d126f07f09bcb.png" alt="d94297cbdd8e54f2d75d126f07f09bcb"></p><hr><h3 id="成功运行！"><a href="#成功运行！" class="headerlink" title="成功运行！"></a>成功运行！</h3><p>终于可以用了不容易。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250626075518890.png" alt="image-20250626075518890"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Gemini 也发布了类似的 AI 编程产品 Gemini Cli - 开源命令行 AI 工具&lt;/p&gt;
&lt;p&gt;而且个人谷歌账号登录就能免费用！&lt;/p&gt;
&lt;p&gt;免费额度为每分钟 60 次请求、每天 1000 次请求，是业内最高的免费额度，几乎不会遇到限制。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持 Google 搜索实时联网，为模型提供外部上下文。&lt;/li&gt;
&lt;li&gt;支持 MCP 和扩展，便于功能拓展。&lt;/li&gt;
&lt;li&gt;可自定义提示词和指令，适应个人或团队工作流。&lt;/li&gt;
&lt;li&gt;可在脚本中非交互式调用，实现自动化和集成。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="LLM" scheme="https://xu-hardy.github.io/categories/LLM/"/>
    
    
    <category term="LLM" scheme="https://xu-hardy.github.io/tags/LLM/"/>
    
  </entry>
  
  <entry>
    <title>组队参加 Amazon Q Idea 1000，我们的作品上了 AWS 峰会</title>
    <link href="https://xu-hardy.github.io/%E7%BB%84%E9%98%9F%E5%8F%82%E5%8A%A0-amazon-q-idea-1000%EF%BC%8C%E6%88%91%E4%BB%AC%E7%9A%84%E4%BD%9C%E5%93%81%E4%B8%8A%E4%BA%86-aws-%E5%B3%B0%E4%BC%9A/"/>
    <id>https://xu-hardy.github.io/%E7%BB%84%E9%98%9F%E5%8F%82%E5%8A%A0-amazon-q-idea-1000%EF%BC%8C%E6%88%91%E4%BB%AC%E7%9A%84%E4%BD%9C%E5%93%81%E4%B8%8A%E4%BA%86-aws-%E5%B3%B0%E4%BC%9A/</id>
    <published>2025-07-01T16:00:00.000Z</published>
    <updated>2025-07-02T05:33:34.933Z</updated>
    
    <content type="html"><![CDATA[<p>最近生成式 AI 的比赛很多，也报名了 AWS Idea1000 的比赛，作品登录上了 AWS 的峰会。</p><p>我们的产品名称是“拍立懂”，团队名称是 “凌晨三点的夜”。主要是<strong>拍照识别</strong>商品成分、品牌资质，分析价格合理性，为老年人提供购买决策建议；通过<strong>实时语音聊天交互</strong>，<strong>亲人语音陪伴</strong>老年人购物，满足空巢老人的情感空缺。</p><p>我们的项目团队汇聚了文化创意创业者、资深互联网产品经理、互联网技术博主与 AI 前端工程师等多元背景，形成从商业策略到产品落地的完整闭环。团队成员对创新技术和用户价值怀有共同的热情，彼此协作、优势互补，致力于在商业模式和技术实现上持续突破，为项目注入持久动力。</p><span id="more"></span><p>说人话版本:</p><blockquote><p><strong>“拍立懂”首页：先定位、再拍照、还可语音，一站式搞定逛超市！</strong><br>进入小程序，系统会自动识别你所在的门店，保证每一次推荐都“本地有货”。</p><ul><li>对准商品“拍一拍”，AI 秒识品牌与规格，为你生成成分&#x2F;营养解析；</li><li>打开语音助手，直接问“这款油健康吗？”，即时语音作答；</li><li>想逛逛热卖？下拉切换「日用食品 &#x2F; 零食饮料 &#x2F; 时令食材」，AI 列出今日在售优质清单。<br><strong>拍照 + 语音 + 实时库存</strong>，让你逛超市不再纠结，用 AI 把复杂信息说得清清楚楚。</li></ul></blockquote><p>架构图如下：</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/0f723804988ba318ff6ab24970dfc023.png" alt="0f723804988ba318ff6ab24970dfc023"></p><ol><li><strong>域名与流量入口</strong><ul><li>Route 53 购买域名以及负责域名解析</li><li>ALB 负载均衡 &amp; HTTPS 卸载</li></ul></li><li><strong>应用与模型服务</strong><ul><li><strong>Next.js</strong> (前端+SSR)</li><li><strong>Flask (语音识别、图像识别、流式对题) + FastAPI （OpenAI realtime 代理）</strong></li></ul></li><li><strong>数据与存储</strong><ul><li>S3 存音频&#x2F;图片</li><li><strong>Milvus (Zilliz Cloud on GCP)</strong> 向量检索做 RAG</li></ul></li><li><strong>多模态交互</strong><ul><li>OpenAI Vision + Realtime 实时对话</li></ul></li><li><strong>环境 &amp; CI&#x2F;CD</strong><ul><li>Lightsail 做 POC，懒猫微服异地组网调试</li><li>GitHub Actions 一件打包到 Dockerhub</li><li>Docker-compose 一键部署</li></ul></li></ol><p>这个是最初的设计。</p><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250620102357142.png"></p><ul><li><strong>门店定位（顶部）</strong><ul><li>自动显示 _“上海市黄浦区马当路富民超市”_，说明系统已精准锁定当前购物地点，为后续推荐做铺垫。</li></ul></li><li><strong>商品识别卡片（居中大框）</strong><ul><li>灰阶渐变 + 相机图标，文案 _“对准商品 拍一拍”_。</li><li>点击即可拍照识别商品，进入智能解析流程，是整套体验的“入口 1”。</li></ul></li><li><strong>语音购物助手按钮（绿色条形）</strong><ul><li>显眼的绿色按钮 _“打开语音购物助手”_。</li><li>用户只需轻触，便可与 AI 语音对话，实现“入口 2”。</li></ul></li><li><strong>AI 推荐栏目（下方列表）</strong><ul><li>栏目标题 _“AI 帮你聪明买”_，右侧分类下拉框默认 _“日用食品”_。</li><li>下拉可切换 <em>“零食饮料 &#x2F; 时令食材”</em> 等，列表随之刷新“今日在售”优选商品。</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/f6f98cd0-65ec-41fa-ab5b-1d43b75504b5.png" alt="f6f98cd0-65ec-41fa-ab5b-1d43b75504b5"></p><ul><li><strong>拍一下，AI 帮你把配料表翻译成人话！</strong><br>识别完成后，只需点开「成分分析」，AI 会：<ol><li>精准列出主要成分、配料比例；</li><li>提醒潜在风险（如高糖、高钠或人工添加）；</li><li>结合膳食指南，给出健康建议。<br>如果想进一步了解热量、矿物质等信息，切换到「营养价值」即可；想知道同类好物怎么选？点「选购建议」一键获得。<br><strong>拍立懂，让任何瓶瓶罐罐都不再是“天书”，分分钟看懂喝得放心！</strong></li></ol></li></ul><blockquote><p>“拍一下成分表，让 AI 帮你读懂配料、评估健康影响，真正做到买得安心、喝得放心。”</p></blockquote><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/0375561d-e43e-4618-94be-66439460d91c.png" alt="0375561d-e43e-4618-94be-66439460d91c"></p><blockquote><p><strong>“坚果零食好不好？拍立懂 3 秒告诉你！”</strong><br>拍照上传后，AI 自动识别到「烤坚果夹片 145 g × 24 片」，并细致解析：</p><ul><li><strong>坚果种类</strong>、<strong>外层配料</strong>、<strong>甜味剂 &#x2F; 添加剂</strong> 全部列出；</li><li>逐项点评对心血管、体重管理、过敏风险的影响；</li><li>支持一键切换到「营养价值」查看热量、蛋白质等详细数据，或点「选购建议」获取更健康替代品。<br><strong>拍立懂</strong> —— 把复杂配料表翻译成人话，让零食的健康度一眼可见！</li></ul></blockquote><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/image-20250620134244888.png" alt="image-20250620134244888"></p><ul><li><strong>一句话上手语音购物助手</strong><br>点一下麦克风，不用输入、不用切页面，直接对 AI 说：“这款牛奶适合减肥吗？”——拍立懂立刻回答，让逛超市像跟朋友聊天一样简单。<ul><li><strong>极速连接</strong>：3 秒内完成网络 &amp; 麦克风检测</li><li><strong>实时反馈</strong>：对话状态一目了然，杜绝“说了没听见”</li><li><strong>智能引导</strong>：AI 主动提问，帮你快速聚焦购物痛点<br>语音 + AI，让信息检索更高效，让购物决策更轻松！</li></ul></li></ul><blockquote><p>“无需打字，长按语音键即可提问。拍立懂即刻为你解惑，让购物沟通更流畅。”</p></blockquote><p><img src="https://raw.githubusercontent.com/cloudsmithy/picgo-imh/master/f5cd2824-be07-4152-8bc9-91bc6ddc6735.jpeg" alt="f5cd2824-be07-4152-8bc9-91bc6ddc6735"></p><ul><li><strong>商业计划书</strong><br><a href="https://edwqcun7v5.feishu.cn/docx/VBtWdFMB3omZxhxT2FGco73MnIe">https://edwqcun7v5.feishu.cn/docx/VBtWdFMB3omZxhxT2FGco73MnIe</a></li><li><strong>产品演示文档</strong><br><a href="https://edwqcun7v5.feishu.cn/docx/RNvldJCQVoU1nixqHjrcZ2TNnfc">https://edwqcun7v5.feishu.cn/docx/RNvldJCQVoU1nixqHjrcZ2TNnfc</a></li></ul><hr><blockquote><p>⏰ <strong>凌晨三点的夜</strong> 还在码字、调参，但有热情就不困。<br><strong>拍立懂</strong>，让爸妈“拍一拍就懂”，也让我们更懂爸妈。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近生成式 AI 的比赛很多，也报名了 AWS Idea1000 的比赛，作品登录上了 AWS 的峰会。&lt;/p&gt;
&lt;p&gt;我们的产品名称是“拍立懂”，团队名称是 “凌晨三点的夜”。主要是&lt;strong&gt;拍照识别&lt;/strong&gt;商品成分、品牌资质，分析价格合理性，为老年人提供购买决策建议；通过&lt;strong&gt;实时语音聊天交互&lt;/strong&gt;，&lt;strong&gt;亲人语音陪伴&lt;/strong&gt;老年人购物，满足空巢老人的情感空缺。&lt;/p&gt;
&lt;p&gt;我们的项目团队汇聚了文化创意创业者、资深互联网产品经理、互联网技术博主与 AI 前端工程师等多元背景，形成从商业策略到产品落地的完整闭环。团队成员对创新技术和用户价值怀有共同的热情，彼此协作、优势互补，致力于在商业模式和技术实现上持续突破，为项目注入持久动力。&lt;/p&gt;</summary>
    
    
    
    <category term="AWS" scheme="https://xu-hardy.github.io/categories/AWS/"/>
    
    
    <category term="AWS" scheme="https://xu-hardy.github.io/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>写给懒猫微服玩家的容器小书 Docker篇（一）：《无法部署的诅咒》</title>
    <link href="https://xu-hardy.github.io/%E5%86%99%E7%BB%99%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E7%8E%A9%E5%AE%B6%E7%9A%84%E5%AE%B9%E5%99%A8%E5%B0%8F%E4%B9%A6-docker%E7%AF%87%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E3%80%8A%E6%97%A0%E6%B3%95%E9%83%A8%E7%BD%B2%E7%9A%84%E8%AF%85%E5%92%92%E3%80%8B/"/>
    <id>https://xu-hardy.github.io/%E5%86%99%E7%BB%99%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E7%8E%A9%E5%AE%B6%E7%9A%84%E5%AE%B9%E5%99%A8%E5%B0%8F%E4%B9%A6-docker%E7%AF%87%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E3%80%8A%E6%97%A0%E6%B3%95%E9%83%A8%E7%BD%B2%E7%9A%84%E8%AF%85%E5%92%92%E3%80%8B/</id>
    <published>2025-07-01T16:00:00.000Z</published>
    <updated>2025-07-02T05:33:34.926Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一直想写一本容器小书，真好懒猫基本都做了容器化，所以把这部分分享出来。不同的是，懒猫微服中使用 pg-docker 来替代 docker 命令，使用 dockge 来执行 docker-compose。以下讲解以标准 docker 为主，这样子既学会了 docker 知识，也能够在懒猫微服上启动 Docker 服务。</p></blockquote><h1 id="《无法部署的诅咒》讲的是-Docker-的起源与作用、镜像与容器概念、安装入门"><a href="#《无法部署的诅咒》讲的是-Docker-的起源与作用、镜像与容器概念、安装入门" class="headerlink" title="《无法部署的诅咒》讲的是 Docker 的起源与作用、镜像与容器概念、安装入门"></a>《无法部署的诅咒》讲的是 Docker 的起源与作用、镜像与容器概念、安装入门</h1><h3 id="🏙️-开篇：代码在电脑上运行良好，部署却频频翻车"><a href="#🏙️-开篇：代码在电脑上运行良好，部署却频频翻车" class="headerlink" title="🏙️ 开篇：代码在电脑上运行良好，部署却频频翻车"></a>🏙️ 开篇：代码在电脑上运行良好，部署却频频翻车</h3><p>小李是一名后端工程师，刚完成一个用 Flask 编写的内部管理系统。他信心满满地将代码提交，交给测试工程师老赵部署。</p><p>可没想到——</p><blockquote><p>“报错了！你是不是少传文件了？”</p><p>“我这边 Python 是 3.6，怎么你这代码用了 <code>match case</code>？”</p><p>“你数据库呢？你 Redis 配了？环境变量在哪？”</p></blockquote><p>这一刻，小李陷入了一个叫「部署地狱」的世界。</p><p>这个世界里，每一台服务器都是独一无二的“宠物”，需要手动配置、手动部署、手动踩坑，稍有不慎就会陷入版本冲突、依赖缺失、环境不一致的深渊。</p><p>小李心里想：<strong>有没有一种办法，能让我把代码和环境一起打包起来，无论在哪运行都能保持一致？</strong></p><h2 id=""><a href="#" class="headerlink" title=""></a><span id="more"></span></h2><h3 id="🌀-变故：神秘的程序员大叔与魔法容器"><a href="#🌀-变故：神秘的程序员大叔与魔法容器" class="headerlink" title="🌀 变故：神秘的程序员大叔与魔法容器"></a>🌀 变故：神秘的程序员大叔与魔法容器</h3><p>在公司茶水间，小李邂逅了一个带着黑框眼镜的大叔，大家都叫他老周。</p><p>老周是个技术老炮，在各种部署大灾难中杀出血路。他听完小李的吐槽后，轻轻地推了一份文档过来，只写了五个字母：</p><blockquote><p><code>Docker</code></p></blockquote><p>“这是个<strong>魔法容器</strong>，”老周说，“把你代码和环境都打包进去，哪怕放在火星，也能跑。”</p><blockquote><p>“以后别再‘它在我电脑上可以跑’了，Docker 能让所有环境变得一致。”</p></blockquote><p>小李的眼睛亮了。</p><hr><h3 id="🔧-技术讲解-Part-1：什么是-Docker？"><a href="#🔧-技术讲解-Part-1：什么是-Docker？" class="headerlink" title="🔧 技术讲解 Part 1：什么是 Docker？"></a>🔧 技术讲解 Part 1：什么是 Docker？</h3><p>Docker 是一个<strong>开源的容器化平台</strong>，它允许开发者将应用及其所有依赖打包成一个“容器”，保证在任何平台上都可以一致运行。</p><p>你可以把 Docker 想象成：</p><blockquote><p><strong>程序员的打包箱子</strong>：把你写的程序、环境、库、配置都放进去，打包成一个“镜像”；</p><p><strong>程序员的快递服务</strong>：运行镜像就像打开快递，内容和你寄出时一模一样。</p></blockquote><h4 id="🚀-为什么要用-Docker？"><a href="#🚀-为什么要用-Docker？" class="headerlink" title="🚀 为什么要用 Docker？"></a>🚀 为什么要用 Docker？</h4><ul><li>✅ <strong>跨平台运行</strong>：一次构建，到处运行（Run anywhere）</li><li>✅ <strong>快速部署</strong>：秒级启动，适合 CI&#x2F;CD</li><li>✅ <strong>环境一致性</strong>：不再“你电脑能跑我电脑不行”</li><li>✅ <strong>轻量隔离</strong>：不像虚拟机那么重，不需要整个操作系统</li><li>✅ <strong>资源占用少</strong>：用起来更像一个进程，而不是一台虚拟机</li></ul><blockquote><p>☑️ 一句话总结：<strong>Docker 解决了“在我电脑上能跑”的问题。</strong></p></blockquote><hr><h3 id="🛠️-技术讲解-Part-2：如何安装-Docker？"><a href="#🛠️-技术讲解-Part-2：如何安装-Docker？" class="headerlink" title="🛠️ 技术讲解 Part 2：如何安装 Docker？"></a>🛠️ 技术讲解 Part 2：如何安装 Docker？</h3><p>老周拍了拍小李的肩膀，说：“先装起来，动手最重要。”</p><h4 id="🧑‍💻-在-Mac-Windows-上："><a href="#🧑‍💻-在-Mac-Windows-上：" class="headerlink" title="🧑‍💻 在 Mac &#x2F; Windows 上："></a>🧑‍💻 在 Mac &#x2F; Windows 上：</h4><ul><li>访问官网：<a href="https://www.docker.com/products/docker-desktop">https://www.docker.com/products/docker-desktop</a></li><li>下载并安装 Docker Desktop</li><li>安装后打开终端（Terminal），输入：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker --version</span><br></pre></td></tr></table></figure><p>如果看到 Docker 的版本信息，说明安装成功。</p><h4 id="🧑‍💻-在-Linux（Ubuntu）上："><a href="#🧑‍💻-在-Linux（Ubuntu）上：" class="headerlink" title="🧑‍💻 在 Linux（Ubuntu）上："></a>🧑‍💻 在 Linux（Ubuntu）上：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install docker.io</span><br><span class="line"><span class="built_in">sudo</span> systemctl start docker</span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><p>🔐 <em>建议将当前用户加入 docker 组，以免每次都要用 sudo：</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> usermod -aG docker <span class="variable">$USER</span></span><br></pre></td></tr></table></figure><hr><h3 id="🧠-技术讲解-Part-3：Docker-的核心概念"><a href="#🧠-技术讲解-Part-3：Docker-的核心概念" class="headerlink" title="🧠 技术讲解 Part 3：Docker 的核心概念"></a>🧠 技术讲解 Part 3：Docker 的核心概念</h3><table><thead><tr><th>概念</th><th>说明</th></tr></thead><tbody><tr><td>镜像（Image）</td><td>应用和其依赖的静态快照模板（如：打包好的 Python 环境 + Flask 项目）</td></tr><tr><td>容器（Container）</td><td>镜像运行出来的实例，是真正“活着”的程序</td></tr><tr><td>Dockerfile</td><td>编写镜像的“配方”，定义如何构建镜像</td></tr><tr><td>Docker Hub</td><td>类似 GitHub 的公共镜像仓库，可上传&#x2F;下载别人做好的镜像</td></tr><tr><td><code>docker</code> 命令</td><td>Docker 的主命令工具，用于操作镜像、容器、网络、卷等</td></tr></tbody></table><h4 id="📌-镜像-vs-容器"><a href="#📌-镜像-vs-容器" class="headerlink" title="📌 镜像 vs 容器"></a>📌 镜像 vs 容器</h4><ul><li>镜像是“模具”，容器是“实物”</li><li>镜像不可变，容器是可运行的环境</li><li>一个镜像可以运行多个容器</li></ul><hr><h3 id="🧪-技术实践：Hello-Docker-世界"><a href="#🧪-技术实践：Hello-Docker-世界" class="headerlink" title="🧪 技术实践：Hello Docker 世界"></a>🧪 技术实践：Hello Docker 世界</h3><p>老周指导小李敲下第一行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><blockquote><p>如果 docker run&#x2F;pull 有问题，那么可以通过<code>lzc-cli appstore copy-image your-images</code>来使用懒猫的镜像仓库。</p></blockquote><p>这个命令会做三件事：</p><ol><li>自动从 Docker Hub 拉取一个 <code>hello-world</code> 镜像（如果本地没有）</li><li>基于镜像运行容器</li><li>容器运行后输出信息，然后自动退出</li></ol><p>这是验证 Docker 是否正常运行的“点灯测试”。</p><hr><h3 id="🧱-小李的第一个真实容器：Flask-Web-项目打包实战"><a href="#🧱-小李的第一个真实容器：Flask-Web-项目打包实战" class="headerlink" title="🧱 小李的第一个真实容器：Flask Web 项目打包实战"></a>🧱 小李的第一个真实容器：Flask Web 项目打包实战</h3><p>老周笑着说：“现在，把你那个 Flask 管理系统也丢进 Docker 试试。”</p><p>小李在项目根目录下写了一个 Dockerfile：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 Python 官方基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.11</span>-slim</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置工作目录</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制项目文件</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . /app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install -r requirements.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置启动命令</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;python&quot;</span>, <span class="string">&quot;main.py&quot;</span>]</span></span><br></pre></td></tr></table></figure><h4 id="构建镜像："><a href="#构建镜像：" class="headerlink" title="构建镜像："></a>构建镜像：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t my-flask-app .</span><br></pre></td></tr></table></figure><h4 id="启动容器："><a href="#启动容器：" class="headerlink" title="启动容器："></a>启动容器：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 5000:5000 my-flask-app</span><br></pre></td></tr></table></figure><p>现在访问浏览器 <code>http://localhost:5000</code>，你的项目上线了！</p><hr><h3 id="💡-小知识快闪"><a href="#💡-小知识快闪" class="headerlink" title="💡 小知识快闪"></a>💡 小知识快闪</h3><ul><li>Docker 容器内部不包含完整操作系统，只包含必要的运行库；</li><li>Dockerfile 的每一行都是一层（Layer），构建时会缓存复用；</li><li><code>docker ps</code> 查看运行中容器，<code>docker images</code> 查看已有镜像；</li><li>可以通过 <code>.dockerignore</code> 文件忽略不想加入镜像的文件，比如 <code>.git</code> 和日志。</li></ul><hr><h3 id="⚔️-章节尾声：打破部署诅咒"><a href="#⚔️-章节尾声：打破部署诅咒" class="headerlink" title="⚔️ 章节尾声：打破部署诅咒"></a>⚔️ 章节尾声：打破部署诅咒</h3><p>这次，小李把打好的镜像发给了测试老赵：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 5000:5000 my-flask-app</span><br></pre></td></tr></table></figure><p>老赵只运行了一行命令，项目便神奇地跑了起来。</p><blockquote><p>“不改配置？不用装 Python？数据库也连上了？”<br>“你这是什么魔法！”</p></blockquote><p>小李笑了笑，第一次感觉部署是件简单的事。</p><hr><h2 id="🧭-第一章总结知识点："><a href="#🧭-第一章总结知识点：" class="headerlink" title="🧭 第一章总结知识点："></a>🧭 第一章总结知识点：</h2><table><thead><tr><th>技术点</th><th>命令</th></tr></thead><tbody><tr><td>安装 Docker</td><td>Mac&#x2F;Win 下载 Docker Desktop &#x2F; Ubuntu 安装 <code>docker.io</code></td></tr><tr><td>查看版本</td><td><code>docker --version</code></td></tr><tr><td>运行测试容器</td><td><code>docker run hello-world</code></td></tr><tr><td>编写 Dockerfile</td><td>FROM &#x2F; COPY &#x2F; RUN &#x2F; CMD</td></tr><tr><td>构建镜像</td><td><code>docker build -t name .</code></td></tr><tr><td>运行容器</td><td><code>docker run -p 宿主:容器 镜像名</code></td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;一直想写一本容器小书，真好懒猫基本都做了容器化，所以把这部分分享出来。不同的是，懒猫微服中使用 pg-docker 来替代 docker 命令，使用 dockge 来执行 docker-compose。以下讲解以标准 docker 为主，这样子既学会了 docker 知识，也能够在懒猫微服上启动 Docker 服务。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;《无法部署的诅咒》讲的是-Docker-的起源与作用、镜像与容器概念、安装入门&quot;&gt;&lt;a href=&quot;#《无法部署的诅咒》讲的是-Docker-的起源与作用、镜像与容器概念、安装入门&quot; class=&quot;headerlink&quot; title=&quot;《无法部署的诅咒》讲的是 Docker 的起源与作用、镜像与容器概念、安装入门&quot;&gt;&lt;/a&gt;《无法部署的诅咒》讲的是 Docker 的起源与作用、镜像与容器概念、安装入门&lt;/h1&gt;&lt;h3 id=&quot;🏙️-开篇：代码在电脑上运行良好，部署却频频翻车&quot;&gt;&lt;a href=&quot;#🏙️-开篇：代码在电脑上运行良好，部署却频频翻车&quot; class=&quot;headerlink&quot; title=&quot;🏙️ 开篇：代码在电脑上运行良好，部署却频频翻车&quot;&gt;&lt;/a&gt;🏙️ 开篇：代码在电脑上运行良好，部署却频频翻车&lt;/h3&gt;&lt;p&gt;小李是一名后端工程师，刚完成一个用 Flask 编写的内部管理系统。他信心满满地将代码提交，交给测试工程师老赵部署。&lt;/p&gt;
&lt;p&gt;可没想到——&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“报错了！你是不是少传文件了？”&lt;/p&gt;
&lt;p&gt;“我这边 Python 是 3.6，怎么你这代码用了 &lt;code&gt;match case&lt;/code&gt;？”&lt;/p&gt;
&lt;p&gt;“你数据库呢？你 Redis 配了？环境变量在哪？”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这一刻，小李陷入了一个叫「部署地狱」的世界。&lt;/p&gt;
&lt;p&gt;这个世界里，每一台服务器都是独一无二的“宠物”，需要手动配置、手动部署、手动踩坑，稍有不慎就会陷入版本冲突、依赖缺失、环境不一致的深渊。&lt;/p&gt;
&lt;p&gt;小李心里想：&lt;strong&gt;有没有一种办法，能让我把代码和环境一起打包起来，无论在哪运行都能保持一致？&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;</summary>
    
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/categories/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
    
    <category term="Docker" scheme="https://xu-hardy.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>写给懒猫微服玩家的容器小书 Docker篇（二）：《镜像旅馆的秘密》</title>
    <link href="https://xu-hardy.github.io/%E5%86%99%E7%BB%99%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E7%8E%A9%E5%AE%B6%E7%9A%84%E5%AE%B9%E5%99%A8%E5%B0%8F%E4%B9%A6-docker%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E3%80%8A%E9%95%9C%E5%83%8F%E6%97%85%E9%A6%86%E7%9A%84%E7%A7%98%E5%AF%86%E3%80%8B/"/>
    <id>https://xu-hardy.github.io/%E5%86%99%E7%BB%99%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E7%8E%A9%E5%AE%B6%E7%9A%84%E5%AE%B9%E5%99%A8%E5%B0%8F%E4%B9%A6-docker%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E3%80%8A%E9%95%9C%E5%83%8F%E6%97%85%E9%A6%86%E7%9A%84%E7%A7%98%E5%AF%86%E3%80%8B/</id>
    <published>2025-07-01T16:00:00.000Z</published>
    <updated>2025-07-02T05:33:34.927Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一直想写一本容器小书，真好懒猫基本都做了容器化，所以把这部分分享出来。不同的是，懒猫微服中使用 pg-docker 来替代 docker 命令，使用 dockge 来执行 docker-compose。以下讲解以标准 docker 为主，这样子既学会了 docker 知识，也能够在懒猫微服上启动 Docker 服务。</p></blockquote><h1 id="《镜像旅馆的秘密》讲的是-Docker-镜像的原理、分层结构、生命周期、Docker-Hub-上传与下载、常见镜像命令详解"><a href="#《镜像旅馆的秘密》讲的是-Docker-镜像的原理、分层结构、生命周期、Docker-Hub-上传与下载、常见镜像命令详解" class="headerlink" title="《镜像旅馆的秘密》讲的是 Docker 镜像的原理、分层结构、生命周期、Docker Hub 上传与下载、常见镜像命令详解"></a>《镜像旅馆的秘密》讲的是 Docker 镜像的原理、分层结构、生命周期、Docker Hub 上传与下载、常见镜像命令详解</h1><h3 id="🏰-开篇：进入镜像旅馆"><a href="#🏰-开篇：进入镜像旅馆" class="headerlink" title="🏰 开篇：进入镜像旅馆"></a>🏰 开篇：进入镜像旅馆</h3><p>自从小李用 Docker 成功打包并运行了自己的 Flask 项目，他的开发效率飞快提高。</p><p>某天，老周带他来到一座巨大的数字建筑——<strong>Docker 镜像旅馆</strong>。</p><p>“这是你所有镜像的家，”老周说，“也是全球程序员共享旅程资源的中转站。”</p><p>镜像旅馆里，层层叠叠地存放着成千上万个镜像，就像一栋模块化的高楼大厦。</p><hr><h3 id="🧱-镜像的本质：一层一层搭起来的文件系统"><a href="#🧱-镜像的本质：一层一层搭起来的文件系统" class="headerlink" title="🧱 镜像的本质：一层一层搭起来的文件系统"></a>🧱 镜像的本质：一层一层搭起来的文件系统</h3><p>老周告诉小李：</p><blockquote><p>“镜像（Image）其实是一个<strong>只读的分层文件系统</strong>。你写的每一条 Dockerfile 指令，都会构成一层 Layer。”</p></blockquote><p>比如这个简单的 Dockerfile：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.11</span>-slim</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . /app</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install -r requirements.txt</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;python&quot;</span>, <span class="string">&quot;main.py&quot;</span>]</span></span><br></pre></td></tr></table></figure><span id="more"></span><p>对应的镜像层如下：</p><ol><li><code>FROM</code> → 拉了一个基础镜像层（Python 3.11）</li><li><code>WORKDIR</code> → 添加一个设置工作目录的 Layer</li><li><code>COPY</code> → 拷贝代码文件的 Layer</li><li><code>RUN</code> → 安装依赖的新 Layer</li><li><code>CMD</code> → 容器入口（不是 Layer，但存配置）</li></ol><blockquote><p>💡 小知识：Docker 会尽量缓存和复用前面的 Layer，节省时间和存储。</p></blockquote><hr><h3 id="🧪-镜像命令全攻略"><a href="#🧪-镜像命令全攻略" class="headerlink" title="🧪 镜像命令全攻略"></a>🧪 镜像命令全攻略</h3><p>小李打开终端，开始探索这些镜像的日常操作。</p><h4 id="1-查看本地镜像："><a href="#1-查看本地镜像：" class="headerlink" title="1. 查看本地镜像："></a>1. 查看本地镜像：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">REPOSITORY     TAG        IMAGE ID       CREATED          SIZE</span><br><span class="line">my-flask-app   latest     123abc456def   2 minutes ago    125MB</span><br><span class="line">python         3.11-slim  789xyz654hij   3 days ago       40MB</span><br></pre></td></tr></table></figure><p>解释：</p><ul><li><code>REPOSITORY</code>：镜像名</li><li><code>TAG</code>：标签（版本号）</li><li><code>IMAGE ID</code>：镜像唯一标识符</li><li><code>SIZE</code>：镜像大小</li></ul><h4 id="2-查看镜像历史构建过程（看每层）："><a href="#2-查看镜像历史构建过程（看每层）：" class="headerlink" title="2. 查看镜像历史构建过程（看每层）："></a>2. 查看镜像历史构建过程（看每层）：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">history</span> my-flask-app</span><br></pre></td></tr></table></figure><h4 id="3-删除镜像："><a href="#3-删除镜像：" class="headerlink" title="3. 删除镜像："></a>3. 删除镜像：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi my-flask-app</span><br></pre></td></tr></table></figure><p>（⚠️ 若有容器在运行该镜像，需先停止并删除容器）</p><hr><h3 id="🗂-镜像仓库：Docker-Hub"><a href="#🗂-镜像仓库：Docker-Hub" class="headerlink" title="🗂 镜像仓库：Docker Hub"></a>🗂 镜像仓库：Docker Hub</h3><p>老周指了指旅馆大堂里的一个巨大电梯：</p><blockquote><p>“这是 Docker Hub，全球最大的镜像共享仓库。”</p></blockquote><p>在这里，小李能下载成千上万的开源镜像，也能上传自己的。</p><h4 id="登录-Docker-Hub："><a href="#登录-Docker-Hub：" class="headerlink" title="登录 Docker Hub："></a>登录 Docker Hub：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker login</span><br></pre></td></tr></table></figure><p>（需要先注册账号）</p><h4 id="下载镜像："><a href="#下载镜像：" class="headerlink" title="下载镜像："></a>下载镜像：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure><p>这会从 Docker Hub 拉取最新版本的 <code>nginx</code> 镜像</p><h4 id="指定版本拉取："><a href="#指定版本拉取：" class="headerlink" title="指定版本拉取："></a>指定版本拉取：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis:6.2</span><br></pre></td></tr></table></figure><blockquote><p>如果 docker run&#x2F;pull 有问题，那么可以通过<code>lzc-cli appstore copy-image your-images</code>来使用懒猫的镜像仓库。</p></blockquote><p>（相当于拉取 <code>redis</code> 仓库中 tag 为 <code>6.2</code> 的镜像）</p><h4 id="上传镜像（先打标签）："><a href="#上传镜像（先打标签）：" class="headerlink" title="上传镜像（先打标签）："></a>上传镜像（先打标签）：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker tag my-flask-app yourdockerhubname/my-flask-app:1.0</span><br><span class="line">docker push yourdockerhubname/my-flask-app:1.0</span><br></pre></td></tr></table></figure><hr><h3 id="📦-镜像-Tag-与版本控制"><a href="#📦-镜像-Tag-与版本控制" class="headerlink" title="📦 镜像 Tag 与版本控制"></a>📦 镜像 Tag 与版本控制</h3><p>老周问：“小李，你知道为什么镜像都有个 <code>:latest</code> 吗？”</p><p>小李说：“这是默认版本号吧？”</p><p>“对，但我们不能依赖它。<strong>开发、测试、生产应使用明确版本号，比如 1.0、20240321 等</strong>。”</p><p>Docker 镜像是通过 <code>tag</code> 来区分版本的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker build -t myapp:1.0 .</span><br><span class="line">docker build -t myapp:latest .</span><br></pre></td></tr></table></figure><p>你可以为同一个镜像打多个标签，对应不同场景使用。</p><hr><h3 id="🔍-镜像体积优化技巧"><a href="#🔍-镜像体积优化技巧" class="headerlink" title="🔍 镜像体积优化技巧"></a>🔍 镜像体积优化技巧</h3><p>小李注意到镜像越来越大了，占了很多硬盘空间。</p><p>老周给了他几点建议：</p><ol><li><p>使用轻量级基础镜像：</p><ul><li>比如 <code>python:3.11-slim</code> 代替 <code>python:3.11</code></li></ul></li><li><p>合并</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RUN</span><br></pre></td></tr></table></figure><p>命令，减少层数：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt update &amp;&amp; apt install -y git &amp;&amp; <span class="built_in">rm</span> -rf /var/lib/apt/lists/*</span></span><br></pre></td></tr></table></figure></li><li><p>删除临时文件：</p><ul><li>安装后清理缓存，避免垃圾文件残留</li></ul></li><li><p>多阶段构建（进阶）：</p><ul><li>构建和运行使用不同的镜像阶段</li></ul></li></ol><hr><h3 id="📂-镜像保存与迁移"><a href="#📂-镜像保存与迁移" class="headerlink" title="📂 镜像保存与迁移"></a>📂 镜像保存与迁移</h3><p>后来小李想把自己的镜像传给另一位没有 Docker Hub 的同事。</p><p>他用到了镜像导出与导入：</p><h4 id="导出镜像为-tar-文件："><a href="#导出镜像为-tar-文件：" class="headerlink" title="导出镜像为 .tar 文件："></a>导出镜像为 <code>.tar</code> 文件：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker save my-flask-app &gt; myapp.tar</span><br></pre></td></tr></table></figure><h4 id="导入镜像："><a href="#导入镜像：" class="headerlink" title="导入镜像："></a>导入镜像：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load &lt; myapp.tar</span><br></pre></td></tr></table></figure><p>镜像打包成离线文件，便于携带与备份。</p><hr><h3 id="🔍-深入-Layer-实战：查看镜像内容"><a href="#🔍-深入-Layer-实战：查看镜像内容" class="headerlink" title="🔍 深入 Layer 实战：查看镜像内容"></a>🔍 深入 Layer 实战：查看镜像内容</h3><p>小李很好奇，镜像到底长什么样？</p><p>老周教他运行容器并进到里面：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --<span class="built_in">rm</span> my-flask-app /bin/bash</span><br></pre></td></tr></table></figure><p>这样他就能直接进入容器的 Linux 环境，像在服务器上一样查看文件结构：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> /</span><br><span class="line"><span class="built_in">cd</span> /app</span><br><span class="line"><span class="built_in">cat</span> requirements.txt</span><br></pre></td></tr></table></figure><p>他终于明白，每个镜像就像是一个“静态快照”，而容器才是“它的动态运行副本”。</p><hr><h3 id="📊-镜像生命周期总结表"><a href="#📊-镜像生命周期总结表" class="headerlink" title="📊 镜像生命周期总结表"></a>📊 镜像生命周期总结表</h3><table><thead><tr><th>操作</th><th>命令</th></tr></thead><tbody><tr><td>查看本地镜像</td><td><code>docker images</code></td></tr><tr><td>构建新镜像</td><td><code>docker build -t name .</code></td></tr><tr><td>删除镜像</td><td><code>docker rmi 镜像名</code></td></tr><tr><td>下载镜像</td><td><code>docker pull 镜像名[:tag]</code></td></tr><tr><td>上传镜像</td><td><code>docker push 镜像名[:tag]</code></td></tr><tr><td>镜像打包导出</td><td><code>docker save &gt; xxx.tar</code></td></tr><tr><td>镜像导入还原</td><td><code>docker load &lt; xxx.tar</code></td></tr><tr><td>镜像历史层查看</td><td><code>docker history 镜像名</code></td></tr></tbody></table><hr><h3 id="🎬-尾声：镜像旅馆的门票"><a href="#🎬-尾声：镜像旅馆的门票" class="headerlink" title="🎬 尾声：镜像旅馆的门票"></a>🎬 尾声：镜像旅馆的门票</h3><p>小李现在拥有了多个镜像，搭配不同的版本、依赖、语言，像积木一样可以快速组合各种环境。</p><p>“这就像 Minecraft 的世界地图，每张都是一个镜像。”小李说。</p><p>老周点点头：“没错，镜像只是开始，真正的冒险——是容器运行起来后的世界。”</p><hr><h2 id="🧭-第二章小结"><a href="#🧭-第二章小结" class="headerlink" title="🧭 第二章小结"></a>🧭 第二章小结</h2><ul><li>镜像是构建环境的基础模板，支持版本控制、缓存加速、快速构建</li><li>可以上传到 Docker Hub 或导出 <code>.tar</code> 进行离线传输</li><li>管理命令要熟练掌握：<code>build</code>、<code>pull</code>、<code>push</code>、<code>rmi</code>、<code>tag</code>、<code>history</code></li><li>优化镜像大小要用 slim 基础镜像、合并命令、清理缓存</li></ul><h2 id="✨-增补内容：镜像的高级技能与实战应用"><a href="#✨-增补内容：镜像的高级技能与实战应用" class="headerlink" title="✨ 增补内容：镜像的高级技能与实战应用"></a>✨ 增补内容：镜像的高级技能与实战应用</h2><hr><h3 id="🧪-多阶段构建：精致分工，极限瘦身"><a href="#🧪-多阶段构建：精致分工，极限瘦身" class="headerlink" title="🧪 多阶段构建：精致分工，极限瘦身"></a>🧪 多阶段构建：精致分工，极限瘦身</h3><p>有一次，小李需要构建一个使用 <code>npm</code> 打包前端、Python 启动后端的项目。打包工具很多、依赖也重，他担心镜像太大。</p><p>老周说：“你要学会<strong>多阶段构建（multi-stage build）</strong>，把构建阶段和运行阶段分开。”</p><blockquote><p>多阶段构建的目标是：<strong>编译用谁都行，最终镜像要最小。</strong></p></blockquote><h4 id="示例：Node-构建-nginx-托管"><a href="#示例：Node-构建-nginx-托管" class="headerlink" title="示例：Node 构建 + nginx 托管"></a>示例：Node 构建 + nginx 托管</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一阶段：使用 node 构建前端</span></span><br><span class="line"><span class="keyword">FROM</span> node:<span class="number">18</span> AS builder</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> npm install &amp;&amp; npm run build</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二阶段：用 nginx 托管打包后的静态文件</span></span><br><span class="line"><span class="keyword">FROM</span> nginx:alpine</span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=builder /app/dist /usr/share/nginx/html</span></span><br></pre></td></tr></table></figure><ul><li>第一阶段装依赖、打包代码</li><li>第二阶段只取编译结果，<strong>不用带上 node&#x2F;npm 等工具</strong></li></ul><p>小李一测试，镜像体积从 300MB 降到 25MB，部署速度快了 10 倍！</p><hr><h3 id="🧩-使用-dockerignore：镜像防垃圾机制"><a href="#🧩-使用-dockerignore：镜像防垃圾机制" class="headerlink" title="🧩 使用 .dockerignore：镜像防垃圾机制"></a>🧩 使用 <code>.dockerignore</code>：镜像防垃圾机制</h3><p>构建时，小李发现镜像中夹杂了 <code>.git</code>、<code>node_modules</code>、<code>__pycache__</code>……</p><p>老周摇头道：“你忘了 <code>.dockerignore</code> 文件。”</p><p>就像 <code>.gitignore</code> 一样，<code>.dockerignore</code> 告诉 Docker 哪些文件在构建镜像时要排除。</p><h4 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">__pycache__/</span><br><span class="line">.git/</span><br><span class="line">node_modules/</span><br><span class="line">.env</span><br><span class="line">*.log</span><br></pre></td></tr></table></figure><p>这个文件放在 Dockerfile 同目录下，<strong>能显著加快构建速度和减小镜像大小</strong>。</p><hr><h3 id="📦-自建私有镜像仓库（Registry）"><a href="#📦-自建私有镜像仓库（Registry）" class="headerlink" title="📦 自建私有镜像仓库（Registry）"></a>📦 自建私有镜像仓库（Registry）</h3><p>当公司禁止使用 Docker Hub 时，小李开始尝试搭建自己的镜像库。</p><p>老周带他部署了一个本地私有镜像仓库（基于 Docker 官方镜像）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 5000:5000 --restart=always --name registry registry:2</span><br></pre></td></tr></table></figure><p>现在他可以：</p><ul><li><p>推送到私库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker tag myapp localhost:5000/myapp</span><br><span class="line">docker push localhost:5000/myapp</span><br></pre></td></tr></table></figure></li><li><p>拉取镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull localhost:5000/myapp</span><br></pre></td></tr></table></figure></li></ul><p>适合公司内部使用，搭配 Nexus、Harbor 可实现更完善的权限、审计、镜像管理等功能。（比如懒猫的 copy-image）</p><h3 id="🧠-镜像调试技巧：如何从镜像中探查问题？"><a href="#🧠-镜像调试技巧：如何从镜像中探查问题？" class="headerlink" title="🧠 镜像调试技巧：如何从镜像中探查问题？"></a>🧠 镜像调试技巧：如何从镜像中探查问题？</h3><p>如果小李的镜像出错了，他可以通过两种方式“探测”镜像内部：</p><h4 id="方法-1：运行一个交互式-shell-容器"><a href="#方法-1：运行一个交互式-shell-容器" class="headerlink" title="方法 1：运行一个交互式 shell 容器"></a>方法 1：运行一个交互式 shell 容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it myapp /bin/bash</span><br></pre></td></tr></table></figure><p>（如果 bash 不存在，可以用 <code>/bin/sh</code>）</p><h4 id="方法-2：打开已有容器的终端"><a href="#方法-2：打开已有容器的终端" class="headerlink" title="方法 2：打开已有容器的终端"></a>方法 2：打开已有容器的终端</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it container_id /bin/bash</span><br></pre></td></tr></table></figure><p>通过 <code>ls</code>、<code>cat</code>、<code>which</code>、<code>env</code> 命令，可以检查：</p><ul><li>文件有没有 COPY 进去？</li><li><code>pip install</code> 是否安装成功？</li><li>环境变量是否丢失？</li></ul><hr><h3 id="🔐-镜像安全：不要把密码打包进镜像！"><a href="#🔐-镜像安全：不要把密码打包进镜像！" class="headerlink" title="🔐 镜像安全：不要把密码打包进镜像！"></a>🔐 镜像安全：不要把密码打包进镜像！</h3><p>小李曾在 Dockerfile 里写了：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ENV</span> DB_PASSWORD=<span class="number">123456</span></span><br></pre></td></tr></table></figure><p>老周当场拍桌：“你这是把钥匙写死进容器了！”</p><p>最佳做法：</p><ul><li>在容器运行时注入环境变量（例如使用 <code>.env</code> 文件 + <code>--env</code> 参数）</li><li>使用 <code>docker secret</code> 或 KMS 管理</li><li>使用 BuildKit 的 <code>--secret</code> 机制加密构建时参数（高级用法）</li></ul><hr><h3 id="🧾-镜像标签管理规范建议"><a href="#🧾-镜像标签管理规范建议" class="headerlink" title="🧾 镜像标签管理规范建议"></a>🧾 镜像标签管理规范建议</h3><p>小李准备上线，他开始给镜像打各种 tag：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker build -t myapp:1.0.0 .</span><br><span class="line">docker tag myapp:1.0.0 myapp:latest</span><br></pre></td></tr></table></figure><p>老周说：</p><blockquote><p>“tag 是镜像的版本名，不要用 <code>latest</code> 作为生产环境唯一标识。”</p></blockquote><p>推荐命名规范：</p><table><thead><tr><th>标签</th><th>含义</th></tr></thead><tbody><tr><td><code>myapp:1.0.0</code></td><td>语义化版本控制</td></tr><tr><td><code>myapp:20240324</code></td><td>构建时间戳</td></tr><tr><td><code>myapp:prod</code></td><td>环境标识</td></tr><tr><td><code>myapp:feature-login</code></td><td>功能分支测试</td></tr></tbody></table><hr><h3 id="🔁-镜像缓存失效调试技巧"><a href="#🔁-镜像缓存失效调试技巧" class="headerlink" title="🔁 镜像缓存失效调试技巧"></a>🔁 镜像缓存失效调试技巧</h3><p>有时候构建镜像时，小李发现修改了某个文件，Docker 却好像没更新。</p><p>老周点拨他：“那是缓存搞的鬼。”</p><h4 id="方法一：强制跳过缓存"><a href="#方法一：强制跳过缓存" class="headerlink" title="方法一：强制跳过缓存"></a>方法一：强制跳过缓存</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build --no-cache -t myapp .</span><br></pre></td></tr></table></figure><h4 id="方法二：注意-COPY-顺序影响缓存命中"><a href="#方法二：注意-COPY-顺序影响缓存命中" class="headerlink" title="方法二：注意 COPY 顺序影响缓存命中"></a>方法二：注意 COPY 顺序影响缓存命中</h4><p>Docker 会从上到下按顺序缓存。如果把变化频繁的文件 COPY 太早，就会导致缓存失效：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="language-bash"> requirements.txt .      <span class="comment"># OK，变动少，适合先复制</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install -r requirements.txt</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .                     <span class="comment"># 后复制代码，避免频繁无效重建</span></span></span><br></pre></td></tr></table></figure><blockquote><p>✨ 技巧：越是稳定的文件，越早 COPY，利于缓存复用。</p></blockquote><hr><h2 id="📘-第二章-·-补充总结更新版"><a href="#📘-第二章-·-补充总结更新版" class="headerlink" title="📘 第二章 · 补充总结更新版"></a>📘 第二章 · 补充总结更新版</h2><table><thead><tr><th>技术点</th><th>命令 &#x2F; 说明</th></tr></thead><tbody><tr><td>多阶段构建</td><td><code>FROM ... AS builder</code> + <code>COPY --from=builder</code></td></tr><tr><td>忽略文件</td><td><code>.dockerignore</code> 文件</td></tr><tr><td>镜像上传私库</td><td><code>docker push localhost:5000/myapp</code></td></tr><tr><td>开启 BuildKit</td><td><code>DOCKER_BUILDKIT=1 docker build ...</code></td></tr><tr><td>进入镜像内调试</td><td><code>docker run -it 镜像 /bin/bash</code></td></tr><tr><td>镜像版本管理建议</td><td>避免乱用 <code>latest</code>，使用语义化 tag</td></tr><tr><td>跳过缓存构建</td><td><code>docker build --no-cache ...</code></td></tr></tbody></table><hr><p>小李站在镜像旅馆的屋顶，看着一层层高楼像乐高积木一样堆叠而起。</p><p>他感到激动——他已经不再为“部署”苦恼，而是拥有了一个随时可打包、可还原的开发宇宙。</p><p>老周说：“你的旅程才刚刚开始，容器的世界比镜像更复杂。”</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;一直想写一本容器小书，真好懒猫基本都做了容器化，所以把这部分分享出来。不同的是，懒猫微服中使用 pg-docker 来替代 docker 命令，使用 dockge 来执行 docker-compose。以下讲解以标准 docker 为主，这样子既学会了 docker 知识，也能够在懒猫微服上启动 Docker 服务。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;《镜像旅馆的秘密》讲的是-Docker-镜像的原理、分层结构、生命周期、Docker-Hub-上传与下载、常见镜像命令详解&quot;&gt;&lt;a href=&quot;#《镜像旅馆的秘密》讲的是-Docker-镜像的原理、分层结构、生命周期、Docker-Hub-上传与下载、常见镜像命令详解&quot; class=&quot;headerlink&quot; title=&quot;《镜像旅馆的秘密》讲的是 Docker 镜像的原理、分层结构、生命周期、Docker Hub 上传与下载、常见镜像命令详解&quot;&gt;&lt;/a&gt;《镜像旅馆的秘密》讲的是 Docker 镜像的原理、分层结构、生命周期、Docker Hub 上传与下载、常见镜像命令详解&lt;/h1&gt;&lt;h3 id=&quot;🏰-开篇：进入镜像旅馆&quot;&gt;&lt;a href=&quot;#🏰-开篇：进入镜像旅馆&quot; class=&quot;headerlink&quot; title=&quot;🏰 开篇：进入镜像旅馆&quot;&gt;&lt;/a&gt;🏰 开篇：进入镜像旅馆&lt;/h3&gt;&lt;p&gt;自从小李用 Docker 成功打包并运行了自己的 Flask 项目，他的开发效率飞快提高。&lt;/p&gt;
&lt;p&gt;某天，老周带他来到一座巨大的数字建筑——&lt;strong&gt;Docker 镜像旅馆&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;“这是你所有镜像的家，”老周说，“也是全球程序员共享旅程资源的中转站。”&lt;/p&gt;
&lt;p&gt;镜像旅馆里，层层叠叠地存放着成千上万个镜像，就像一栋模块化的高楼大厦。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;🧱-镜像的本质：一层一层搭起来的文件系统&quot;&gt;&lt;a href=&quot;#🧱-镜像的本质：一层一层搭起来的文件系统&quot; class=&quot;headerlink&quot; title=&quot;🧱 镜像的本质：一层一层搭起来的文件系统&quot;&gt;&lt;/a&gt;🧱 镜像的本质：一层一层搭起来的文件系统&lt;/h3&gt;&lt;p&gt;老周告诉小李：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“镜像（Image）其实是一个&lt;strong&gt;只读的分层文件系统&lt;/strong&gt;。你写的每一条 Dockerfile 指令，都会构成一层 Layer。”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;比如这个简单的 Dockerfile：&lt;/p&gt;
&lt;figure class=&quot;highlight dockerfile&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; python:&lt;span class=&quot;number&quot;&gt;3.11&lt;/span&gt;-slim&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;WORKDIR&lt;/span&gt;&lt;span class=&quot;language-bash&quot;&gt; /app&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;language-bash&quot;&gt; . /app&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;RUN&lt;/span&gt;&lt;span class=&quot;language-bash&quot;&gt; pip install -r requirements.txt&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CMD&lt;/span&gt;&lt;span class=&quot;language-bash&quot;&gt; [&lt;span class=&quot;string&quot;&gt;&amp;quot;python&amp;quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;main.py&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/categories/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
    
    <category term="Docker" scheme="https://xu-hardy.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>写给懒猫微服玩家的容器小书 Docker篇（三）：《容器部落生活》</title>
    <link href="https://xu-hardy.github.io/%E5%86%99%E7%BB%99%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E7%8E%A9%E5%AE%B6%E7%9A%84%E5%AE%B9%E5%99%A8%E5%B0%8F%E4%B9%A6-docker%E7%AF%87%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E3%80%8A%E5%AE%B9%E5%99%A8%E9%83%A8%E8%90%BD%E7%94%9F%E6%B4%BB%E3%80%8B/"/>
    <id>https://xu-hardy.github.io/%E5%86%99%E7%BB%99%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E7%8E%A9%E5%AE%B6%E7%9A%84%E5%AE%B9%E5%99%A8%E5%B0%8F%E4%B9%A6-docker%E7%AF%87%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E3%80%8A%E5%AE%B9%E5%99%A8%E9%83%A8%E8%90%BD%E7%94%9F%E6%B4%BB%E3%80%8B/</id>
    <published>2025-07-01T16:00:00.000Z</published>
    <updated>2025-07-02T05:33:34.927Z</updated>
    
    <content type="html"><![CDATA[<h1 id="《容器部落生活》讲的是-容器生命周期管理，包括容器的启动、停止、查看、交互、日志、后台运行、重启策略等操作"><a href="#《容器部落生活》讲的是-容器生命周期管理，包括容器的启动、停止、查看、交互、日志、后台运行、重启策略等操作" class="headerlink" title="《容器部落生活》讲的是 容器生命周期管理，包括容器的启动、停止、查看、交互、日志、后台运行、重启策略等操作"></a>《容器部落生活》讲的是 容器生命周期管理，包括容器的启动、停止、查看、交互、日志、后台运行、重启策略等操作</h1><blockquote><p>一直想写一本容器小书，真好懒猫基本都做了容器化，所以把这部分分享出来。不同的是，懒猫微服中使用 pg-docker 来替代 docker 命令，使用 dockge 来执行 docker-compose。以下讲解以标准 docker 为主，这样子既学会了 docker 知识，也能够在懒猫微服上启动 Docker 服务。</p></blockquote><p>镜像旅馆的旅途告一段落，小李的下一站是<strong>容器部落</strong>。</p><p>老周牵着他走过一条闪烁着数字光芒的通道，一排排运行中的应用像帐篷一样排列着。有人在调试日志，有人在重启服务，还有人用 <code>bash</code> 正在某个容器里“打补丁”。</p><p>老周说：</p><blockquote><p>“镜像只是静态的模板，<strong>容器才是它们的生命</strong>。容器是镜像运行出来的真实世界。”</p></blockquote><hr><h2 id="🧠-技术基础：容器-vs-镜像"><a href="#🧠-技术基础：容器-vs-镜像" class="headerlink" title="🧠 技术基础：容器 vs 镜像"></a>🧠 技术基础：容器 vs 镜像</h2><table><thead><tr><th>项目</th><th>镜像（Image）</th><th>容器（Container）</th></tr></thead><tbody><tr><td>类比</td><td>模板、配方</td><td>实际的运行实例</td></tr><tr><td>特性</td><td>只读</td><td>可读写</td></tr><tr><td>作用</td><td>用来创建容器</td><td>实际运行中的程序环境</td></tr><tr><td>状态</td><td>不运行</td><td>可运行、停止、销毁</td></tr></tbody></table><hr><span id="more"></span><h2 id="🛫-第一节：容器的启动方式"><a href="#🛫-第一节：容器的启动方式" class="headerlink" title="🛫 第一节：容器的启动方式"></a>🛫 第一节：容器的启动方式</h2><p>小李想运行他的 Flask 应用镜像。</p><p>老周告诉他：</p><blockquote><p>“运行镜像的命令是 <code>docker run</code>，容器就像是用镜像盖起来的一顶帐篷。”</p></blockquote><h3 id="1-最常见方式（临时-前台）："><a href="#1-最常见方式（临时-前台）：" class="headerlink" title="1. 最常见方式（临时 + 前台）："></a>1. 最常见方式（临时 + 前台）：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run my-flask-app</span><br></pre></td></tr></table></figure><p>但程序一执行完就退出了。小李困惑。</p><p>老周解释：</p><blockquote><p>“容器会在主进程结束后自动退出，比如 <code>CMD [&quot;python&quot;, &quot;main.py&quot;]</code> 一旦结束，容器就结束了。”</p></blockquote><hr><h3 id="2-保持后台运行（常用）"><a href="#2-保持后台运行（常用）" class="headerlink" title="2. 保持后台运行（常用）"></a>2. 保持后台运行（常用）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name flask-app -p 5000:5000 my-flask-app</span><br></pre></td></tr></table></figure><p>解释：</p><ul><li><code>-d</code>：detached 模式，后台运行</li><li><code>--name</code>：给容器取个名字，方便管理</li><li><code>-p 宿主端口:容器端口</code>：端口映射，把容器内部 5000 暴露到外部</li></ul><blockquote><p>小李可以在浏览器里访问 <code>http://localhost:5000</code>，服务在跑！</p></blockquote><hr><h3 id="3-设置环境变量"><a href="#3-设置环境变量" class="headerlink" title="3. 设置环境变量"></a>3. 设置环境变量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -e ENV=production my-flask-app</span><br></pre></td></tr></table></figure><p>在容器内可通过 <code>os.environ[&#39;ENV&#39;]</code> 访问。</p><hr><h3 id="4-设置自动重启策略（生产强烈建议）"><a href="#4-设置自动重启策略（生产强烈建议）" class="headerlink" title="4. 设置自动重启策略（生产强烈建议）"></a>4. 设置自动重启策略（生产强烈建议）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --restart=always my-flask-app</span><br></pre></td></tr></table></figure><p>可选策略：</p><table><thead><tr><th>策略名</th><th>说明</th></tr></thead><tbody><tr><td><code>no</code></td><td>不自动重启（默认）</td></tr><tr><td><code>on-failure</code></td><td>出错时重启</td></tr><tr><td><code>always</code></td><td>永远重启</td></tr><tr><td><code>unless-stopped</code></td><td>除非人为停止</td></tr></tbody></table><hr><h2 id="🧭-第二节：查看容器状态"><a href="#🧭-第二节：查看容器状态" class="headerlink" title="🧭 第二节：查看容器状态"></a>🧭 第二节：查看容器状态</h2><p>老周说：“运行中的容器就像是火堆，你得学会看它们是否还在烧。”</p><h3 id="查看运行中容器："><a href="#查看运行中容器：" class="headerlink" title="查看运行中容器："></a>查看运行中容器：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><p>如果想看所有容器（包括已退出的）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CONTAINER ID   IMAGE           STATUS         NAMES</span><br><span class="line">f123abc456     my-flask-app    Up 3 minutes   flask-app</span><br></pre></td></tr></table></figure><hr><h2 id="🔄-第三节：容器的停止与重启"><a href="#🔄-第三节：容器的停止与重启" class="headerlink" title="🔄 第三节：容器的停止与重启"></a>🔄 第三节：容器的停止与重启</h2><h3 id="停止容器："><a href="#停止容器：" class="headerlink" title="停止容器："></a>停止容器：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop flask-app</span><br></pre></td></tr></table></figure><h3 id="启动容器："><a href="#启动容器：" class="headerlink" title="启动容器："></a>启动容器：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start flask-app</span><br></pre></td></tr></table></figure><h3 id="重启容器："><a href="#重启容器：" class="headerlink" title="重启容器："></a>重启容器：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart flask-app</span><br></pre></td></tr></table></figure><blockquote><p>⚠️ 容器停止后并不会删除，除非显式用 <code>docker rm</code></p></blockquote><hr><h2 id="🧰-第四节：进入容器内“远程调试”"><a href="#🧰-第四节：进入容器内“远程调试”" class="headerlink" title="🧰 第四节：进入容器内“远程调试”"></a>🧰 第四节：进入容器内“远程调试”</h2><p>有一次小李发现容器里缺了个配置文件，他想进去看看。</p><h3 id="使用-exec-进入运行中的容器："><a href="#使用-exec-进入运行中的容器：" class="headerlink" title="使用 exec 进入运行中的容器："></a>使用 exec 进入运行中的容器：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it flask-app /bin/bash</span><br></pre></td></tr></table></figure><ul><li><code>-i</code>：保持输入</li><li><code>-t</code>：分配终端</li><li><code>/bin/bash</code>：使用 bash shell（Alpine 镜像可能要用 <code>/bin/sh</code>）</li></ul><blockquote><p>现在他能像 SSH 进服务器一样，在容器里操作文件、日志、环境变量。</p></blockquote><hr><h2 id="📜-第五节：查看容器日志"><a href="#📜-第五节：查看容器日志" class="headerlink" title="📜 第五节：查看容器日志"></a>📜 第五节：查看容器日志</h2><p>某天应用崩溃了，小李要调日志。</p><p>老周提醒他：“容器日志直接走标准输出和错误输出。”</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs flask-app</span><br></pre></td></tr></table></figure><p>可以加参数看最近内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs --<span class="built_in">tail</span> 100 flask-app</span><br></pre></td></tr></table></figure><p>实时滚动输出（调试很有用）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f flask-app</span><br></pre></td></tr></table></figure><hr><h2 id="🧽-第六节：删除容器"><a href="#🧽-第六节：删除容器" class="headerlink" title="🧽 第六节：删除容器"></a>🧽 第六节：删除容器</h2><p>小李尝试重建容器时，系统提示名字重复。</p><p>老周告诉他要先删除原来的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> flask-app</span><br></pre></td></tr></table></figure><p>如果容器还在运行，先 <code>stop</code> 再 <code>rm</code>，或直接强制：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> -f flask-app</span><br></pre></td></tr></table></figure><hr><h2 id="🔄-第七节：容器生命周期一览表"><a href="#🔄-第七节：容器生命周期一览表" class="headerlink" title="🔄 第七节：容器生命周期一览表"></a>🔄 第七节：容器生命周期一览表</h2><table><thead><tr><th>操作</th><th>命令</th></tr></thead><tbody><tr><td>创建 + 运行容器</td><td><code>docker run</code></td></tr><tr><td>后台运行</td><td><code>docker run -d</code></td></tr><tr><td>设置名字</td><td><code>docker run --name name</code></td></tr><tr><td>设置端口映射</td><td><code>-p 外:内</code></td></tr><tr><td>查看容器</td><td><code>docker ps [-a]</code></td></tr><tr><td>停止容器</td><td><code>docker stop name</code></td></tr><tr><td>启动容器</td><td><code>docker start name</code></td></tr><tr><td>重启容器</td><td><code>docker restart name</code></td></tr><tr><td>删除容器</td><td><code>docker rm [-f] name</code></td></tr><tr><td>查看日志</td><td><code>docker logs [-f] name</code></td></tr><tr><td>进入容器</td><td><code>docker exec -it name /bin/bash</code></td></tr></tbody></table><hr><h2 id="🧪-小李的实战练习任务"><a href="#🧪-小李的实战练习任务" class="headerlink" title="🧪 小李的实战练习任务"></a>🧪 小李的实战练习任务</h2><p>老周布置了一个练习：</p><blockquote><p>“请你写一个脚本，构建镜像，运行容器，设置环境变量和端口，再用日志确认 Flask 成功启动。”</p></blockquote><p>小李完成如下步骤：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker build -t flask-test .</span><br><span class="line">docker run -d --name flask-run -p 8080:5000 -e MODE=debug flask-test</span><br><span class="line">docker logs -f flask-run</span><br><span class="line">docker <span class="built_in">exec</span> -it flask-run /bin/bash</span><br></pre></td></tr></table></figure><hr><h2 id="🧬-衍生补充：容器的状态码解释"><a href="#🧬-衍生补充：容器的状态码解释" class="headerlink" title="🧬 衍生补充：容器的状态码解释"></a>🧬 衍生补充：容器的状态码解释</h2><p>容器退出时，可以用 <code>docker ps -a</code> 查看 <code>STATUS</code> 栏：</p><ul><li><code>Exited (0)</code>：正常退出</li><li><code>Exited (1)</code>：出错退出</li><li><code>Up</code>：正在运行</li></ul><p>调试时很有用。</p><hr><h2 id="🎬-尾声：容器部落里的秩序"><a href="#🎬-尾声：容器部落里的秩序" class="headerlink" title="🎬 尾声：容器部落里的秩序"></a>🎬 尾声：容器部落里的秩序</h2><p>小李现在已经能够用容器完成：</p><ul><li>应用部署</li><li>环境隔离</li><li>日志查看</li><li>重启容错</li><li>在线修复问题</li></ul><p>他看着容器部落中灯火通明的帐篷，知道自己终于从一个“只会打包镜像”的新人，成长为能驾驭容器生命周期的工程师。</p><p>老周拍拍他肩膀说：</p><blockquote><p>“你已经能掌控容器的生死了，下一步——掌控它们的数据。”</p></blockquote><p>好嘞，我们来拓展<strong>第三章《容器部落生活》</strong>，新增三大实战内容：</p><blockquote><p>🚀 Nginx 容器部署<br>🔗 多个容器配合运行（应用 + 数据库）<br>🩺 容器的服务探针（健康检查）</p></blockquote><p>这部分会继续以<strong>故事+实战命令+讲解</strong>的方式展开，帮助你更贴近真实工作中的容器部署流程。</p><hr><h2 id="🧱-实战一：Nginx-容器部署小站点"><a href="#🧱-实战一：Nginx-容器部署小站点" class="headerlink" title="🧱 实战一：Nginx 容器部署小站点"></a>🧱 实战一：Nginx 容器部署小站点</h2><p>小李想搭个静态站点测试，老周给他出了一个练习：</p><blockquote><p>“用 Nginx 容器部署一个 HTML 网站，只通过 Docker 完成。”</p></blockquote><h3 id="1-准备文件结构："><a href="#1-准备文件结构：" class="headerlink" title="1. 准备文件结构："></a>1. 准备文件结构：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nginx-site/</span><br><span class="line">├── index.html</span><br><span class="line">└── Dockerfile</span><br></pre></td></tr></table></figure><p><code>index.html</code> 示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello from Nginx<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello Docker + Nginx!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-Dockerfile-内容（基于官方-Nginx）："><a href="#2-Dockerfile-内容（基于官方-Nginx）：" class="headerlink" title="2. Dockerfile 内容（基于官方 Nginx）："></a>2. Dockerfile 内容（基于官方 Nginx）：</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> nginx:alpine</span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> index.html /usr/share/nginx/html/index.html</span></span><br></pre></td></tr></table></figure><blockquote><p>✅ 把自己的网页文件覆盖掉默认首页。</p></blockquote><h3 id="3-构建-运行："><a href="#3-构建-运行：" class="headerlink" title="3. 构建 + 运行："></a>3. 构建 + 运行：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker build -t nginx-site .</span><br><span class="line">docker run -d --name my-nginx -p 8080:80 nginx-site</span><br></pre></td></tr></table></figure><p>打开浏览器访问 <code>http://localhost:8080</code>，小李看到页面显示成功，笑得像个孩子。</p><hr><h2 id="🔗-实战二：应用容器-数据库容器组合运行"><a href="#🔗-实战二：应用容器-数据库容器组合运行" class="headerlink" title="🔗 实战二：应用容器 + 数据库容器组合运行"></a>🔗 实战二：应用容器 + 数据库容器组合运行</h2><p>接着老周出了第二个任务：</p><blockquote><p>“把你的 Flask 应用和一个 MySQL 数据库用两个容器跑起来，实现数据连接。”</p></blockquote><h3 id="方法一：手动网络-多容器连接"><a href="#方法一：手动网络-多容器连接" class="headerlink" title="方法一：手动网络 + 多容器连接"></a>方法一：手动网络 + 多容器连接</h3><h4 id="1-创建网络（容器间通信）："><a href="#1-创建网络（容器间通信）：" class="headerlink" title="1. 创建网络（容器间通信）："></a>1. 创建网络（容器间通信）：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create flask-net</span><br></pre></td></tr></table></figure><h4 id="2-启动-MySQL-容器："><a href="#2-启动-MySQL-容器：" class="headerlink" title="2. 启动 MySQL 容器："></a>2. 启动 MySQL 容器：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name my-mysql \</span><br><span class="line">  --network flask-net \</span><br><span class="line">  -e MYSQL_ROOT_PASSWORD=root123 \</span><br><span class="line">  -e MYSQL_DATABASE=mydb \</span><br><span class="line">  mysql:5.7</span><br></pre></td></tr></table></figure><h4 id="3-启动-Flask-应用容器（连接到-MySQL）："><a href="#3-启动-Flask-应用容器（连接到-MySQL）：" class="headerlink" title="3. 启动 Flask 应用容器（连接到 MySQL）："></a>3. 启动 Flask 应用容器（连接到 MySQL）：</h4><p>假设 Flask 连接数据库时使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">host = <span class="string">&#x27;my-mysql&#x27;</span>  <span class="comment"># 容器名就是主机名</span></span><br></pre></td></tr></table></figure><p>启动命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name flask-app \</span><br><span class="line">  --network flask-net \</span><br><span class="line">  -e DB_HOST=my-mysql \</span><br><span class="line">  -p 5000:5000 \</span><br><span class="line">  my-flask-app</span><br></pre></td></tr></table></figure><blockquote><p>🔗 容器间在同一个网络中，通过名字直接通信，像局域网一样！</p></blockquote><hr><h3 id="方法二：使用-docker-compose（下一章会详细讲）"><a href="#方法二：使用-docker-compose（下一章会详细讲）" class="headerlink" title="方法二：使用 docker-compose（下一章会详细讲）"></a>方法二：使用 <code>docker-compose</code>（下一章会详细讲）</h3><hr><h2 id="🩺-实战三：为容器添加“健康探针”"><a href="#🩺-实战三：为容器添加“健康探针”" class="headerlink" title="🩺 实战三：为容器添加“健康探针”"></a>🩺 实战三：为容器添加“健康探针”</h2><p>老周问小李：“如果你的服务挂了，但容器还在运行，你怎么知道？”</p><blockquote><p>小李摇头：这不就是“僵尸容器”吗？</p></blockquote><p>老周笑了：</p><blockquote><p>“那就给它<strong>加一个健康探针（HEALTHCHECK）</strong>，定期检测服务状态。”</p></blockquote><h3 id="为-Flask-容器加健康检查："><a href="#为-Flask-容器加健康检查：" class="headerlink" title="为 Flask 容器加健康检查："></a>为 Flask 容器加健康检查：</h3><p>修改 <code>Dockerfile</code>：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">HEALTHCHECK</span><span class="language-bash"> --interval=30s --<span class="built_in">timeout</span>=5s --start-period=5s --retries=3 \</span></span><br><span class="line"><span class="language-bash">  CMD curl -f http://localhost:5000/health || <span class="built_in">exit</span> 1</span></span><br></pre></td></tr></table></figure><p>在 Flask 代码中添加一个健康检查路由：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/health&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">health</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>, <span class="number">200</span></span><br></pre></td></tr></table></figure><p>构建镜像，运行容器后，通过命令查看健康状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect flask-app | grep -i health</span><br></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;Health&quot;: &#123;</span><br><span class="line">  &quot;Status&quot;: &quot;healthy&quot;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果 <code>/health</code> 接口返回失败状态码，容器会标记为 <code>&quot;unhealthy&quot;</code>，可配合自动重启策略联动修复。</p><hr><h2 id="🧭-实战拓展总结表"><a href="#🧭-实战拓展总结表" class="headerlink" title="🧭 实战拓展总结表"></a>🧭 实战拓展总结表</h2><table><thead><tr><th>场景</th><th>命令 &#x2F; 技术</th></tr></thead><tbody><tr><td>部署静态站点</td><td>Nginx + COPY index.html</td></tr><tr><td>容器间通信</td><td><code>docker network create</code> + <code>--network</code> 参数</td></tr><tr><td>多容器组合</td><td>应用容器连接数据库容器</td></tr><tr><td>服务探针</td><td>Dockerfile 添加 <code>HEALTHCHECK</code>，应用实现 <code>/health</code></td></tr><tr><td>探针状态查看</td><td>&#96;docker inspect 容器名</td></tr></tbody></table><hr><h2 id="🎬-尾声-·-容器集群的微光"><a href="#🎬-尾声-·-容器集群的微光" class="headerlink" title="🎬 尾声 · 容器集群的微光"></a>🎬 尾声 · 容器集群的微光</h2><p>小李站在容器部落的山丘上，看着成百上千个容器像城市灯火一样运转。</p><p>Nginx 做前端代理，Flask 作为后端逻辑，MySQL 管理数据，每个服务都是一块积木，有秩序、有协作。</p><p>老周淡淡说：</p><blockquote><p>“这只是单机的容器调度，真正的战场——在云上。”</p></blockquote><p>小李的眼里闪起光芒：“那我下次要学的就是——Compose，K8s，还有 CI&#x2F;CD，对吧？”</p><p>老周点头：“没错，下一站——数据卷与共享、Compose 编排，再之后……你就要去打云原生的战了。”</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;《容器部落生活》讲的是-容器生命周期管理，包括容器的启动、停止、查看、交互、日志、后台运行、重启策略等操作&quot;&gt;&lt;a href=&quot;#《容器部落生活》讲的是-容器生命周期管理，包括容器的启动、停止、查看、交互、日志、后台运行、重启策略等操作&quot; class=&quot;headerlink&quot; title=&quot;《容器部落生活》讲的是 容器生命周期管理，包括容器的启动、停止、查看、交互、日志、后台运行、重启策略等操作&quot;&gt;&lt;/a&gt;《容器部落生活》讲的是 容器生命周期管理，包括容器的启动、停止、查看、交互、日志、后台运行、重启策略等操作&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;一直想写一本容器小书，真好懒猫基本都做了容器化，所以把这部分分享出来。不同的是，懒猫微服中使用 pg-docker 来替代 docker 命令，使用 dockge 来执行 docker-compose。以下讲解以标准 docker 为主，这样子既学会了 docker 知识，也能够在懒猫微服上启动 Docker 服务。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;镜像旅馆的旅途告一段落，小李的下一站是&lt;strong&gt;容器部落&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;老周牵着他走过一条闪烁着数字光芒的通道，一排排运行中的应用像帐篷一样排列着。有人在调试日志，有人在重启服务，还有人用 &lt;code&gt;bash&lt;/code&gt; 正在某个容器里“打补丁”。&lt;/p&gt;
&lt;p&gt;老周说：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“镜像只是静态的模板，&lt;strong&gt;容器才是它们的生命&lt;/strong&gt;。容器是镜像运行出来的真实世界。”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;🧠-技术基础：容器-vs-镜像&quot;&gt;&lt;a href=&quot;#🧠-技术基础：容器-vs-镜像&quot; class=&quot;headerlink&quot; title=&quot;🧠 技术基础：容器 vs 镜像&quot;&gt;&lt;/a&gt;🧠 技术基础：容器 vs 镜像&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;th&gt;镜像（Image）&lt;/th&gt;
&lt;th&gt;容器（Container）&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;类比&lt;/td&gt;
&lt;td&gt;模板、配方&lt;/td&gt;
&lt;td&gt;实际的运行实例&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;特性&lt;/td&gt;
&lt;td&gt;只读&lt;/td&gt;
&lt;td&gt;可读写&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;作用&lt;/td&gt;
&lt;td&gt;用来创建容器&lt;/td&gt;
&lt;td&gt;实际运行中的程序环境&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;状态&lt;/td&gt;
&lt;td&gt;不运行&lt;/td&gt;
&lt;td&gt;可运行、停止、销毁&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;hr&gt;</summary>
    
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/categories/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
    
    <category term="Docker" scheme="https://xu-hardy.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>写给懒猫微服玩家的容器小书 Docker篇（四）：《数据之岛与持久化卷》</title>
    <link href="https://xu-hardy.github.io/%E5%86%99%E7%BB%99%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E7%8E%A9%E5%AE%B6%E7%9A%84%E5%AE%B9%E5%99%A8%E5%B0%8F%E4%B9%A6-docker%E7%AF%87%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E3%80%8A%E6%95%B0%E6%8D%AE%E4%B9%8B%E5%B2%9B%E4%B8%8E%E6%8C%81%E4%B9%85%E5%8C%96%E5%8D%B7%E3%80%8B/"/>
    <id>https://xu-hardy.github.io/%E5%86%99%E7%BB%99%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D%E7%8E%A9%E5%AE%B6%E7%9A%84%E5%AE%B9%E5%99%A8%E5%B0%8F%E4%B9%A6-docker%E7%AF%87%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E3%80%8A%E6%95%B0%E6%8D%AE%E4%B9%8B%E5%B2%9B%E4%B8%8E%E6%8C%81%E4%B9%85%E5%8C%96%E5%8D%B7%E3%80%8B/</id>
    <published>2025-07-01T16:00:00.000Z</published>
    <updated>2025-07-02T05:33:34.927Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一直想写一本容器小书，真好懒猫基本都做了容器化，所以把这部分分享出来。不同的是，懒猫微服中使用 pg-docker 来替代 docker 命令，使用 dockge 来执行 docker-compose。以下讲解以标准 docker 为主，这样子既学会了 docker 知识，也能够在懒猫微服上启动 Docker 服务。</p></blockquote><h1 id="《数据之岛与持久化卷》讲的是-Docker-Volume-持久化数据方案、挂载宿主机目录、多个容器共享数据、自动创建卷、数据备份与恢复等"><a href="#《数据之岛与持久化卷》讲的是-Docker-Volume-持久化数据方案、挂载宿主机目录、多个容器共享数据、自动创建卷、数据备份与恢复等" class="headerlink" title="《数据之岛与持久化卷》讲的是 Docker Volume 持久化数据方案、挂载宿主机目录、多个容器共享数据、自动创建卷、数据备份与恢复等"></a>《数据之岛与持久化卷》讲的是 Docker Volume 持久化数据方案、挂载宿主机目录、多个容器共享数据、自动创建卷、数据备份与恢复等</h1><h3 id="🏝️-开篇：数据会随浪消失"><a href="#🏝️-开篇：数据会随浪消失" class="headerlink" title="🏝️ 开篇：数据会随浪消失"></a>🏝️ 开篇：数据会随浪消失</h3><p>有一天，小李运行了一个容器，里面的 Flask 项目能正常写入用户信息到 SQLite 数据库。可当容器一停止，再启动——所有数据消失了！</p><p>老周说：“你的数据，被潮水带走了。”</p><blockquote><p>“Docker 容器默认的文件系统是<strong>临时的</strong>，只要容器删除，数据也就没了。想让数据真正存活，就要登上‘<strong>数据之岛</strong>’。”</p></blockquote><hr><h2 id="🧠-基础概念：数据卷（Volume）"><a href="#🧠-基础概念：数据卷（Volume）" class="headerlink" title="🧠 基础概念：数据卷（Volume）"></a>🧠 基础概念：数据卷（Volume）</h2><p>Docker 提供了三种数据持久化方案：</p><table><thead><tr><th>方案</th><th>用法</th><th>场景</th></tr></thead><tbody><tr><td>Volume</td><td>Docker 管理的专属数据区</td><td>最推荐、安全、可多容器共享</td></tr><tr><td>Bind Mount</td><td>映射宿主机目录</td><td>更灵活，适合本地调试</td></tr><tr><td>tmpfs</td><td>临时存储在内存</td><td>适合敏感数据，重启即丢弃</td></tr></tbody></table><blockquote><p>本章重点讲解：<strong>Volume（数据卷）</strong> 与 <strong>Bind Mount（绑定挂载）</strong></p></blockquote><hr><span id="more"></span><h2 id="📦-第一节：使用-Volume-保存数据"><a href="#📦-第一节：使用-Volume-保存数据" class="headerlink" title="📦 第一节：使用 Volume 保存数据"></a>📦 第一节：使用 Volume 保存数据</h2><p>小李重新部署了 MySQL 容器，他决定为数据提供一个“保命空间”。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume create mysql-data</span><br></pre></td></tr></table></figure><p>然后运行 MySQL 时挂载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name my-mysql \</span><br><span class="line">  -e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">  -v mysql-data:/var/lib/mysql \</span><br><span class="line">  mysql:5.7</span><br></pre></td></tr></table></figure><blockquote><p><code>-v 卷名:容器内目录</code>：将卷挂载到容器内数据库文件存储位置。</p></blockquote><p>容器即使删除，数据卷依然保留！</p><h3 id="查看所有卷："><a href="#查看所有卷：" class="headerlink" title="查看所有卷："></a>查看所有卷：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume <span class="built_in">ls</span></span><br></pre></td></tr></table></figure><h3 id="查看卷详细信息："><a href="#查看卷详细信息：" class="headerlink" title="查看卷详细信息："></a>查看卷详细信息：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume inspect mysql-data</span><br></pre></td></tr></table></figure><p>输出中可以看到 <code>Mountpoint</code>，即数据在宿主机上的物理位置。</p><hr><h2 id="🧪-第二节：自动创建匿名-具名卷"><a href="#🧪-第二节：自动创建匿名-具名卷" class="headerlink" title="🧪 第二节：自动创建匿名&#x2F;具名卷"></a>🧪 第二节：自动创建匿名&#x2F;具名卷</h2><p>小李写了个简单的服务：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"> /app/data</span></span><br></pre></td></tr></table></figure><p>每次 <code>docker run</code> 时，Docker 会<strong>自动生成匿名卷</strong>挂载到 <code>/app/data</code>。</p><p>但这类匿名卷难以追踪、管理，老周建议：</p><blockquote><p>“生产环境请用<strong>具名卷</strong>，并在运行时用 <code>-v</code> 显式指定。”</p></blockquote><hr><h2 id="🔗-第三节：绑定挂载宿主机目录（本地调试神器）"><a href="#🔗-第三节：绑定挂载宿主机目录（本地调试神器）" class="headerlink" title="🔗 第三节：绑定挂载宿主机目录（本地调试神器）"></a>🔗 第三节：绑定挂载宿主机目录（本地调试神器）</h2><p>开发中，小李想把宿主机的项目代码直接挂进容器，不必每次重建镜像。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name dev-nginx \</span><br><span class="line">  -p 8080:80 \</span><br><span class="line">  -v /Users/xiaoli/site:/usr/share/nginx/html \</span><br><span class="line">  nginx</span><br></pre></td></tr></table></figure><blockquote><p>本地 <code>/Users/xiaoli/site</code> 的代码实时反映在容器内网站目录，修改立刻生效！</p></blockquote><h3 id="使用-Bind-Mount-的场景："><a href="#使用-Bind-Mount-的场景：" class="headerlink" title="使用 Bind Mount 的场景："></a>使用 Bind Mount 的场景：</h3><ul><li>本地开发热更新</li><li>日志文件落盘</li><li>配置文件映射</li><li>IDE + 容器联调</li></ul><hr><h2 id="🤝-第四节：多个容器共享数据卷"><a href="#🤝-第四节：多个容器共享数据卷" class="headerlink" title="🤝 第四节：多个容器共享数据卷"></a>🤝 第四节：多个容器共享数据卷</h2><p>老周给小李展示了另一个高级玩法：</p><blockquote><p>“多个容器可以挂载同一个卷，<strong>共享数据</strong>，就像一块公共磁盘。”</p></blockquote><p>小李准备两个容器：</p><ul><li>一个容器写入日志</li><li>一个容器实时读取日志</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 写入容器</span></span><br><span class="line">docker run -d --name logger \</span><br><span class="line">  -v shared-logs:/logs \</span><br><span class="line">  busybox sh -c <span class="string">&quot;while true; do date &gt;&gt; /logs/t.log; sleep 2; done&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取容器</span></span><br><span class="line">docker run -it --name reader \</span><br><span class="line">  -v shared-logs:/logs \</span><br><span class="line">  busybox <span class="built_in">tail</span> -f /logs/t.log</span><br></pre></td></tr></table></figure><p>这两个容器在不联网的情况下，通过挂载卷实现了<strong>数据同步</strong>，让小李直呼神奇。</p><hr><h2 id="🔄-第五节：备份与恢复数据卷"><a href="#🔄-第五节：备份与恢复数据卷" class="headerlink" title="🔄 第五节：备份与恢复数据卷"></a>🔄 第五节：备份与恢复数据卷</h2><p>老周说：</p><blockquote><p>“你现在的数据安全了，但还不够。万一服务器挂了怎么办？你得学会备份。”</p></blockquote><h3 id="备份数据卷为-tar："><a href="#备份数据卷为-tar：" class="headerlink" title="备份数据卷为 .tar："></a>备份数据卷为 <code>.tar</code>：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run --<span class="built_in">rm</span> \</span><br><span class="line">  -v mysql-data:/data \</span><br><span class="line">  -v $(<span class="built_in">pwd</span>):/backup \</span><br><span class="line">  busybox \</span><br><span class="line">  tar czf /backup/mysql-backup.tar.gz -C /data .</span><br></pre></td></tr></table></figure><blockquote><p>⛴️ 第一个挂载是数据卷，第二个挂载是宿主机当前目录，输出备份包。</p></blockquote><h3 id="恢复数据卷："><a href="#恢复数据卷：" class="headerlink" title="恢复数据卷："></a>恢复数据卷：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run --<span class="built_in">rm</span> \</span><br><span class="line">  -v mysql-data:/data \</span><br><span class="line">  -v $(<span class="built_in">pwd</span>):/backup \</span><br><span class="line">  busybox \</span><br><span class="line">  tar xzf /backup/mysql-backup.tar.gz -C /data</span><br></pre></td></tr></table></figure><p>只需备份 <code>.tar.gz</code> 文件即可，适合迁移数据、升级、容灾。</p><hr><h2 id="🧹-第六节：清理无用卷（慎用）"><a href="#🧹-第六节：清理无用卷（慎用）" class="headerlink" title="🧹 第六节：清理无用卷（慎用）"></a>🧹 第六节：清理无用卷（慎用）</h2><p>随着实验多了，小李电脑堆满了无主卷。</p><p>查看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume <span class="built_in">ls</span></span><br></pre></td></tr></table></figure><p>清理：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume <span class="built_in">rm</span> 卷名</span><br></pre></td></tr></table></figure><p>清除所有未被挂载的孤立卷（慎用）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume prune</span><br></pre></td></tr></table></figure><blockquote><p>清理命令要慎重，别误删生产卷！</p></blockquote><hr><h2 id="📋-Volume-挂载选项速查表"><a href="#📋-Volume-挂载选项速查表" class="headerlink" title="📋 Volume 挂载选项速查表"></a>📋 Volume 挂载选项速查表</h2><table><thead><tr><th>类型</th><th>命令</th><th>特点</th></tr></thead><tbody><tr><td>匿名卷</td><td><code>-v /path</code></td><td>难追踪，系统自动命名</td></tr><tr><td>具名卷</td><td><code>-v myvol:/path</code></td><td>推荐用法，可管理</td></tr><tr><td>Bind 挂载</td><td><code>-v /host:/container</code></td><td>与宿主机文件交互，适合本地调试</td></tr><tr><td>tmpfs</td><td><code>--tmpfs /path</code></td><td>内存存储，重启即消失</td></tr><tr><td>权限控制</td><td><code>-v myvol:/path:ro</code></td><td>只读挂载</td></tr><tr><td>SELinux&#x2F;AppArmor</td><td><code>:z</code>、<code>:Z</code>（高级安全挂载）</td><td>安全增强场景</td></tr></tbody></table><hr><h2 id="🧠-小李的应用持久化策略建议"><a href="#🧠-小李的应用持久化策略建议" class="headerlink" title="🧠 小李的应用持久化策略建议"></a>🧠 小李的应用持久化策略建议</h2><table><thead><tr><th>类型</th><th>内容</th></tr></thead><tbody><tr><td>数据库</td><td>必须挂载 Volume 保持数据持久</td></tr><tr><td>日志</td><td>推荐落盘到宿主机或集中采集</td></tr><tr><td>配置文件</td><td>可用 Bind Mount 从本地同步配置</td></tr><tr><td>静态资源</td><td>静态目录挂载 + CDN</td></tr><tr><td>临时缓存</td><td>tmpfs 或容器内路径，无需持久化</td></tr></tbody></table><hr><h2 id="🎬-尾声：构建自己的数据之岛"><a href="#🎬-尾声：构建自己的数据之岛" class="headerlink" title="🎬 尾声：构建自己的数据之岛"></a>🎬 尾声：构建自己的数据之岛</h2><p>小李站在一个小岛码头，身后是一个个挂载卷，他的应用和数据终于<strong>脱离容器生命周期的束缚</strong>。</p><p>老周说：</p><blockquote><p>“真正的服务，要能容器随时销毁，数据却永存。”</p></blockquote><p>小李点头，轻轻拍了拍他那卷 MySQL 的备份包，知道自己已经拥有了构建“数据之岛”的能力。</p><hr><p><strong>继续拓展高级内容</strong>，围绕：</p><ol><li>🧪 数据卷在 CI&#x2F;CD 中的作用和实战应用</li><li>☸️ 数据卷在 Kubernetes 中的延伸 —— PVC（PersistentVolumeClaim）挂载</li></ol><p>以小李的旅程为主线，继续带你掌握更强大的容器化数据策略。</p><hr><h2 id="🔧-拓展一：数据卷在-CI-CD-中的角色与实践"><a href="#🔧-拓展一：数据卷在-CI-CD-中的角色与实践" class="headerlink" title="🔧 拓展一：数据卷在 CI&#x2F;CD 中的角色与实践"></a>🔧 拓展一：数据卷在 CI&#x2F;CD 中的角色与实践</h2><p>在一次项目发布中，小李加入了公司的 DevOps 流水线。他发现 GitLab CI 跑测试时，每次都重新构建环境，速度太慢，还会出现缓存丢失的问题。</p><p>老周告诉他：</p><blockquote><p>“在 CI&#x2F;CD 环境中，<strong>合理使用数据卷</strong>可以极大加快构建速度、保留缓存和数据状态。”</p></blockquote><hr><h3 id="✅-使用场景-1：缓存-pip-npm-依赖，加速构建"><a href="#✅-使用场景-1：缓存-pip-npm-依赖，加速构建" class="headerlink" title="✅ 使用场景 1：缓存 pip&#x2F;npm 依赖，加速构建"></a>✅ 使用场景 1：缓存 pip&#x2F;npm 依赖，加速构建</h3><p>小李把 <code>pip install</code> 改成挂载缓存目录：</p><h4 id="GitLab-Runner-示例："><a href="#GitLab-Runner-示例：" class="headerlink" title="GitLab Runner 示例："></a>GitLab Runner 示例：</h4><p><code>.gitlab-ci.yml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cache:</span></span><br><span class="line">  <span class="attr">key:</span> <span class="string">pip-cache</span></span><br><span class="line">  <span class="attr">paths:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">.cache/pip</span></span><br><span class="line"></span><br><span class="line"><span class="attr">build:</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">run</span> <span class="string">--rm</span></span><br><span class="line">      <span class="string">-v</span> <span class="string">$CI_PROJECT_DIR:/app</span></span><br><span class="line">      <span class="string">-v</span> <span class="string">$CI_PROJECT_DIR/.cache/pip:/root/.cache/pip</span></span><br><span class="line">      <span class="string">my-builder-image</span> <span class="string">bash</span> <span class="string">-c</span> <span class="string">&quot;</span></span><br><span class="line"><span class="string">      cd /app &amp;&amp;</span></span><br><span class="line"><span class="string">      pip install -r requirements.txt &amp;&amp;</span></span><br><span class="line"><span class="string">      pytest</span></span><br><span class="line"><span class="string">      &quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>🔁 依赖安装过程可被缓存，构建速度提升 50%！</p></blockquote><hr><h3 id="✅-使用场景-2：测试数据隔离"><a href="#✅-使用场景-2：测试数据隔离" class="headerlink" title="✅ 使用场景 2：测试数据隔离"></a>✅ 使用场景 2：测试数据隔离</h3><p>小李部署端到端自动化测试容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run --<span class="built_in">rm</span> \</span><br><span class="line">  -v test-volume:/app/test-results \</span><br><span class="line">  e2e-runner:latest</span><br></pre></td></tr></table></figure><p>测试结果可从宿主机挂载目录或卷中提取，用于后续报告生成或持久存档。</p><hr><h3 id="✅-使用场景-3：构建产物跨阶段传递"><a href="#✅-使用场景-3：构建产物跨阶段传递" class="headerlink" title="✅ 使用场景 3：构建产物跨阶段传递"></a>✅ 使用场景 3：构建产物跨阶段传递</h3><p>CI&#x2F;CD 有多阶段：构建 → 测试 → 部署<br>小李通过挂载共享卷，将编译好的前端包从构建容器传给部署容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run --name builder -v build-volume:/output frontend-builder</span><br><span class="line">docker run --<span class="built_in">rm</span> -v build-volume:/usr/share/nginx/html nginx</span><br></pre></td></tr></table></figure><hr><h2 id="☸️-拓展二：Kubernetes-中的数据卷演进-——-PVC-实战"><a href="#☸️-拓展二：Kubernetes-中的数据卷演进-——-PVC-实战" class="headerlink" title="☸️ 拓展二：Kubernetes 中的数据卷演进 —— PVC 实战"></a>☸️ 拓展二：Kubernetes 中的数据卷演进 —— PVC 实战</h2><p>进入云原生世界，小李不再直接使用 <code>docker run</code>，而是通过 Kubernetes 来编排容器。</p><p>在 K8s 中，数据卷概念变得更专业：</p><ul><li>Volume（临时存储，随 Pod 生命周期）</li><li>PersistentVolume（PV：管理员创建的存储资源）</li><li>PersistentVolumeClaim（PVC：用户申请的存储）</li><li>StorageClass（存储策略模板）</li></ul><hr><h3 id="🔐-场景一：部署-Stateful-服务（如-MySQL）"><a href="#🔐-场景一：部署-Stateful-服务（如-MySQL）" class="headerlink" title="🔐 场景一：部署 Stateful 服务（如 MySQL）"></a>🔐 场景一：部署 Stateful 服务（如 MySQL）</h3><p>小李写了以下 YAML：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mysql-pvc</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteOnce</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">      <span class="attr">storage:</span> <span class="string">5Gi</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">standard</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mysql</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">mysql</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mysql</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">mysql:5.7</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MYSQL_ROOT_PASSWORD</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">&quot;123456&quot;</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/var/lib/mysql</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">data</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">data</span></span><br><span class="line">          <span class="attr">persistentVolumeClaim:</span></span><br><span class="line">            <span class="attr">claimName:</span> <span class="string">mysql-pvc</span></span><br></pre></td></tr></table></figure><blockquote><p>💡 PVC 是 “我要一个 5Gi 的盘”，PV 是“管理员给你一个”，Pod 中挂上它即可持久保存数据。</p></blockquote><hr><h3 id="🧠-小知识点：K8s-中-Volume-的对比"><a href="#🧠-小知识点：K8s-中-Volume-的对比" class="headerlink" title="🧠 小知识点：K8s 中 Volume 的对比"></a>🧠 小知识点：K8s 中 Volume 的对比</h3><table><thead><tr><th>类型</th><th>生命周期</th><th>是否持久</th><th>典型用途</th></tr></thead><tbody><tr><td>emptyDir</td><td>Pod 生命周期</td><td>❌</td><td>临时缓存、构建产物传递</td></tr><tr><td>hostPath</td><td>节点目录挂载</td><td>⚠️ 有风险</td><td>本地开发测试</td></tr><tr><td>PVC（推荐）</td><td>与集群存储绑定</td><td>✅</td><td>数据库存储、日志、持久缓存</td></tr></tbody></table><hr><h3 id="📦-StorageClass：自动动态分配-PVC"><a href="#📦-StorageClass：自动动态分配-PVC" class="headerlink" title="📦 StorageClass：自动动态分配 PVC"></a>📦 StorageClass：自动动态分配 PVC</h3><p>在云环境（如 EKS、GKE）中，PVC 可以自动创建对应的 PV（EBS、Ceph、NFS 等），只要指定 StorageClass 即可：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">storageClassName:</span> <span class="string">gp2</span></span><br></pre></td></tr></table></figure><p>这种方式可以实现<strong>跨节点迁移不丢数据</strong>、<strong>按需付费扩容</strong>、<strong>快照备份等高级功能</strong>。</p><hr><h2 id="✅-拓展总结：Docker-到-CI-CD，再到-Kubernetes-的数据策略演进"><a href="#✅-拓展总结：Docker-到-CI-CD，再到-Kubernetes-的数据策略演进" class="headerlink" title="✅ 拓展总结：Docker 到 CI&#x2F;CD，再到 Kubernetes 的数据策略演进"></a>✅ 拓展总结：Docker 到 CI&#x2F;CD，再到 Kubernetes 的数据策略演进</h2><table><thead><tr><th>场景</th><th>技术</th><th>推荐做法</th></tr></thead><tbody><tr><td>本地开发</td><td>Bind Mount</td><td>映射目录，实时更新</td></tr><tr><td>本地持久化</td><td>Volume</td><td>隔离性好，便于管理</td></tr><tr><td>CI&#x2F;CD 中间数据</td><td>卷 &#x2F; 缓存目录</td><td>挂载 <code>.cache</code>、<code>build</code> 等路径</td></tr><tr><td>K8s 中数据存储</td><td>PVC + StorageClass</td><td>可扩展、可备份、可跨节点持久化</td></tr></tbody></table><hr><h2 id="🎬-尾声：从数据孤岛到分布式星图"><a href="#🎬-尾声：从数据孤岛到分布式星图" class="headerlink" title="🎬 尾声：从数据孤岛到分布式星图"></a>🎬 尾声：从数据孤岛到分布式星图</h2><p>在 DevOps 流水线中，小李用数据卷构建了无缝衔接的构建流程；</p><p>在 Kubernetes 集群中，他用 PVC 实现了跨集群节点的 MySQL 数据持久化部署；</p><p>他站在云端存储的星图前，知道自己已经掌握了从 Docker 到 DevOps 再到 Kubernetes 的数据生命周期。</p><p>老周拍拍他：</p><blockquote><p>“你已经造好了船，也撑起了帆。下一步，是用 Compose 编排你的舰队。”</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;一直想写一本容器小书，真好懒猫基本都做了容器化，所以把这部分分享出来。不同的是，懒猫微服中使用 pg-docker 来替代 docker 命令，使用 dockge 来执行 docker-compose。以下讲解以标准 docker 为主，这样子既学会了 docker 知识，也能够在懒猫微服上启动 Docker 服务。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;《数据之岛与持久化卷》讲的是-Docker-Volume-持久化数据方案、挂载宿主机目录、多个容器共享数据、自动创建卷、数据备份与恢复等&quot;&gt;&lt;a href=&quot;#《数据之岛与持久化卷》讲的是-Docker-Volume-持久化数据方案、挂载宿主机目录、多个容器共享数据、自动创建卷、数据备份与恢复等&quot; class=&quot;headerlink&quot; title=&quot;《数据之岛与持久化卷》讲的是 Docker Volume 持久化数据方案、挂载宿主机目录、多个容器共享数据、自动创建卷、数据备份与恢复等&quot;&gt;&lt;/a&gt;《数据之岛与持久化卷》讲的是 Docker Volume 持久化数据方案、挂载宿主机目录、多个容器共享数据、自动创建卷、数据备份与恢复等&lt;/h1&gt;&lt;h3 id=&quot;🏝️-开篇：数据会随浪消失&quot;&gt;&lt;a href=&quot;#🏝️-开篇：数据会随浪消失&quot; class=&quot;headerlink&quot; title=&quot;🏝️ 开篇：数据会随浪消失&quot;&gt;&lt;/a&gt;🏝️ 开篇：数据会随浪消失&lt;/h3&gt;&lt;p&gt;有一天，小李运行了一个容器，里面的 Flask 项目能正常写入用户信息到 SQLite 数据库。可当容器一停止，再启动——所有数据消失了！&lt;/p&gt;
&lt;p&gt;老周说：“你的数据，被潮水带走了。”&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Docker 容器默认的文件系统是&lt;strong&gt;临时的&lt;/strong&gt;，只要容器删除，数据也就没了。想让数据真正存活，就要登上‘&lt;strong&gt;数据之岛&lt;/strong&gt;’。”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;🧠-基础概念：数据卷（Volume）&quot;&gt;&lt;a href=&quot;#🧠-基础概念：数据卷（Volume）&quot; class=&quot;headerlink&quot; title=&quot;🧠 基础概念：数据卷（Volume）&quot;&gt;&lt;/a&gt;🧠 基础概念：数据卷（Volume）&lt;/h2&gt;&lt;p&gt;Docker 提供了三种数据持久化方案：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方案&lt;/th&gt;
&lt;th&gt;用法&lt;/th&gt;
&lt;th&gt;场景&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;Volume&lt;/td&gt;
&lt;td&gt;Docker 管理的专属数据区&lt;/td&gt;
&lt;td&gt;最推荐、安全、可多容器共享&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Bind Mount&lt;/td&gt;
&lt;td&gt;映射宿主机目录&lt;/td&gt;
&lt;td&gt;更灵活，适合本地调试&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tmpfs&lt;/td&gt;
&lt;td&gt;临时存储在内存&lt;/td&gt;
&lt;td&gt;适合敏感数据，重启即丢弃&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;本章重点讲解：&lt;strong&gt;Volume（数据卷）&lt;/strong&gt; 与 &lt;strong&gt;Bind Mount（绑定挂载）&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;</summary>
    
    
    
    <category term="懒猫微服" scheme="https://xu-hardy.github.io/categories/%E6%87%92%E7%8C%AB%E5%BE%AE%E6%9C%8D/"/>
    
    
    <category term="Docker" scheme="https://xu-hardy.github.io/tags/Docker/"/>
    
  </entry>
  
</feed>
